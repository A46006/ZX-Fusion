#include <stdio.h>
//#include ".\SD\test_sd.c"
#include ".\file_format_reader\formats.h"
#include ".\spectrum_comm\Peripheral_Interfaces\per_hal.h"
//#include ".\file_format_reader\file_format_aux.h"

int my_list_test() {
	printf("Processing...\r\n");

	FAT_HANDLE hFat = 0;

	do {
		hFat = init_SD();
	} while (!hFat);

	if (hFat){
		printf("sdcard mount success!\n");
		printf("Root Directory Item Count:%d\n", Fat_FileCount(hFat));
		//Fat_Test(hFat, "text.txt");
	}else{
		//printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE2-115 board and press KEY3.\r\n");
		printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE2-115 board and reset.\r\n");
		return -1;
	}


	FILENAMES list = list_files_arr(hFat);
	if (list.size == 0 && list.filenames == NULL) {
		printf("bad listing\r\n");
		close_SD(hFat);
		return -1;
	}
	int page, filename;
	size_t page_max = (list.size + (FILES_PER_PAGE-1)) / FILES_PER_PAGE;
	size_t entries_left = list.size;
	size_t files_in_page = FILES_PER_PAGE;

	for (page = 0; page < page_max; page++) {
		printf("Page %d:\r\n", page);

		if (entries_left < files_in_page) {
			files_in_page = entries_left;
		}

		for (filename = 0; filename < files_in_page; filename++) {
			int idx = (page*FILES_PER_PAGE) + filename;
			printf("\t[%d]: %s\r\n", filename, list.filenames[idx]);
			free(list.filenames[idx]);
		}
		entries_left -= FILES_PER_PAGE;
	}
	free(list.filenames);

	/*FILES list = list_files(hFat);
	if (list.num_pages == -1) {
		printf("bad listing files");
		close_SD(hFat);
		return -1;
	}
	print_list(list);*/

	close_SD(hFat);

	return 0;
}

int main() {
	//SD_Test("SENBAL.SNA");

	//my_list_test();

	//sna_file_test();

	//return z80_file_test();

	//return load_SNA("SENBAL.SNA");
	//return load_SNA("DAAW.SNA");
	//return load_SNA("DIABLO1.SNA");
	//return load_SNA("CLOUD99.SNA");

	//return load_z80("BOMBJ.z80"); // GLITCHY
	//return load_z80("MANICM.z80"); // NORMAL
	//return load_z80("MISSILGZ.z80"); // CONTROLLER REQUIRED?
	//return load_z80("test.z80");
	//return 0;

	printf("listening...\r\n");
	listen_for_en();
	printf("enable happened\r\n");

	enum per_if_type type = get_if_type();

	switch(type) {
		case NA:
			printf("NONE\r\n");
			break;
		case SD:
			printf("write: %d\r\n", is_write);
			printf("page: %d\r\n", get_page_num());
			printf("game: %d\r\n", get_game_num());
			break;
		default:
			printf("default\r\n");
	}

	return 0;

}

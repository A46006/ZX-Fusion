
memory_manipulator.elf:     file format elf32-littlenios2
memory_manipulator.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00012d6c memsz 0x00012d6c flags r-x
    LOAD off    0x00013d8c vaddr 0x00032d8c paddr 0x00033080 align 2**12
         filesz 0x000002f4 memsz 0x000002f4 flags rw-
    LOAD off    0x00014374 vaddr 0x00033374 paddr 0x00033374 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011698  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000014c4  000318c8  000318c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002f4  00032d8c  00033080  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  00033374  00033374  00014374  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000334f4  000334f4  00014080  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014080  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e20  00000000  00000000  000140a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017eab  00000000  00000000  00014ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000079eb  00000000  00000000  0002cd73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a400  00000000  00000000  0003475e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000029cc  00000000  00000000  0003eb60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000047d1  00000000  00000000  0004152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b276  00000000  00000000  00045cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00050f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000010c8  00000000  00000000  00050fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00055732  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00055735  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00055738  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00055739  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0005573a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00055743  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0005574c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00055755  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000036  00000000  00000000  00055763  2**0
                  CONTENTS, READONLY
 26 .jdi          00008982  00000000  00000000  00055799  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000a1f33  00000000  00000000  0005e11b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
000318c8 l    d  .rodata	00000000 .rodata
00032d8c l    d  .rwdata	00000000 .rwdata
00033374 l    d  .bss	00000000 .bss
000334f4 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../memory_manipulator_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sd_if.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
00000000 l    df *ABS*	00000000 FatInternal.c
00000000 l    df *ABS*	00000000 crc16.c
000319f6 l     O .rodata	00000200 crc16tab
00000000 l    df *ABS*	00000000 crc7.c
00031bf6 l     O .rodata	00000100 crc7_syndrome_table
00000000 l    df *ABS*	00000000 sd_hal.c
00000000 l    df *ABS*	00000000 sd_lib.c
000333bc l     O .bss	00000038 gSdInfo
00000000 l    df *ABS*	00000000 sd_protocol.c
00000000 l    df *ABS*	00000000 test_sd.c
00000000 l    df *ABS*	00000000 file_format_aux.c
00000000 l    df *ABS*	00000000 formats.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 dma_hal.c
00000000 l    df *ABS*	00000000 per_hal.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 w_log10.c
00000000 l    df *ABS*	00000000 e_log10.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00032d8c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002efc8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 tolower.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002f5ac l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 ctype_.c
00032bdd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 alt_load.c
0002ffd4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00033058 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000303b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000304ec l     F .text	00000034 alt_dev_reg
00032e6c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000307e4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00030a30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00030b64 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00030b90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00030f30 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00031090 l     F .text	0000003c alt_get_errno
000310cc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000333b8 g     O .bss	00000004 alt_instruction_exception_handler
0002ffb8 g     F .text	0000001c _malloc_usable_size_r
0002eae4 g     F .text	0000001c putchar
00028eb0 g     F .text	00000470 load_page
000300c0 g     F .text	0000006c alt_main
0002eb00 g     F .text	00000080 _puts_r
00020a20 g     F .text	0000006c Fat_FileBrowseBegin
000333f4 g     O .bss	00000100 alt_irq
0002a250 g     F .text	00000030 is_read
00033080 g       *ABS*	00000000 __flash_rwdata_start
0002a20c g     F .text	00000044 get_game_num
000208dc g     F .text	00000034 close_file
0002cf60 g     F .text	00000088 .hidden __eqdf2
00023ddc g     F .text	00000080 SDLIB_WriteBlock512
000334f4 g       *ABS*	00000000 __alt_heap_start
0002ea90 g     F .text	0000004c printf
0002526c g     F .text	000001a8 SD_CMD24
00020a8c g     F .text	0000042c Fat_FileBrowseNext
0002b384 g     F .text	00000440 .hidden __divsf3
00022f84 g     F .text	0000002c SDHAL_IsSupport4Bits
00022ec4 g     F .text	00000050 crc7_byte
000223a4 g     F .text	000000ac fatIsValidDir
0002fdb0 g     F .text	00000060 memmove
00026db8 g     F .text	00000114 load_file
0002ecac g     F .text	000000b8 snprintf
0002026c g     F .text	00000030 init_SD
0002cfe8 g     F .text	000000dc .hidden __gtdf2
00031398 g     F .text	00000024 altera_nios2_gen2_irq_init
0002e798 g     F .text	00000010 __errno
0002fd08 g     F .text	000000a8 __sfvwrite_small_str
00020000 g     F .entry	0000000c __reset
000257fc g     F .text	000000bc SD_Test
0002a4b8 g     F .text	000001e0 ceil
00023118 g     F .text	00000214 SDHAL_GetResponse
00020020 g       *ABS*	00000000 __flash_exceptions_start
0003339c g     O .bss	00000004 errno
00021d60 g     F .text	00000190 fatNextCluster
000333a4 g     O .bss	00000004 alt_argv
0003b040 g       *ABS*	00000000 _gp
00030380 g     F .text	00000030 usleep
000289e8 g     F .text	000000e8 my_list_test
00032ec0 g     O .rwdata	00000180 alt_fd_list
00027bbc g     F .text	000002a0 load_compressed_data_block_z80
00029bdc g     F .text	000000d0 read_io
0002eadc g     F .text	00000008 _putchar_r
000313bc g     F .text	00000090 alt_find_dev
0002e7d0 g     F .text	00000028 memcpy
0002e3a0 g     F .text	000000dc .hidden __floatsidf
00031014 g     F .text	0000007c alt_io_redirect
0002d0c4 g     F .text	000000f4 .hidden __ltdf2
000211f0 g     F .text	000000b0 Fat_FileExist
0002eb80 g     F .text	00000014 puts
00031618 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00027794 g     F .text	00000094 get_version_z80
00032184 g     O .rodata	00000492 menu_code
0002aa04 g     F .text	00000074 __fpclassifyd
000243e4 g     F .text	00000198 SD_CMD2
0002f57c g     F .text	00000030 tolower
00030664 g     F .text	000000ec altera_avalon_jtag_uart_read
0002e7a8 g     F .text	00000014 malloc
0002ea54 g     F .text	0000003c _printf_r
0002b2a0 g     F .text	00000064 .hidden __udivsi3
00020764 g     F .text	00000140 print_filenames
00024f44 g     F .text	00000180 SD_ACMD42
0002fc1c g     F .text	00000034 vsnprintf
00029cac g     F .text	000000e8 write_io
00025990 g     F .text	000003f4 generate_full_stack_addition
00024a98 g     F .text	00000180 SD_CMD7
000298d0 g     F .text	000000d0 read_mem
0002ebac g     F .text	00000050 _sbrk_r
00024c18 g     F .text	000001a0 SD_CMD16
00025494 g     F .text	00000074 ArrayToU32
00029b48 g     F .text	00000094 write_buf_mem
0002a834 g     F .text	000001d0 __ieee754_log10
00033074 g     O .rwdata	00000004 alt_max_fd
000258b8 g     F .text	0000005c conv_data_8_16
00022918 g     F .text	0000039c fatMount
0002e47c g     F .text	00000110 .hidden __extendsfdf2
0002bce4 g     F .text	000008ac .hidden __adddf3
00022450 g     F .text	00000048 fatIsUnusedDir
00029320 g     F .text	0000029c load_game
00026ecc g     F .text	000001a0 generate_regs_SNA
00033048 g     O .rwdata	00000004 __fdlib_version
0003304c g     O .rwdata	00000004 _global_impure_ptr
0002fe10 g     F .text	000000a4 _realloc_r
000334f4 g       *ABS*	00000000 __bss_end
00030e40 g     F .text	000000f0 alt_iic_isr_register
00030278 g     F .text	00000108 alt_tick
00033380 g     O .bss	00000004 curr_game_idx
00022cb4 g     F .text	0000003c SD_ReadBlock512
0002a1a4 g     F .text	00000068 get_page_num
00030df4 g     F .text	0000004c alt_ic_irq_enabled
000212a0 g     F .text	0000012c Fat_FileOpen
00033374 g     O .bss	00000004 state
000301dc g     F .text	0000009c alt_alarm_stop
0003338c g     O .bss	00000001 ctrl_bus_state
000333b4 g     O .bss	00000004 alt_irq_active
00022088 g     F .text	00000218 fatDelClusterList
00027930 g     F .text	00000098 get_data_offset
000200fc g     F .exceptions	000000d4 alt_irq_handler
00032e98 g     O .rwdata	00000028 alt_dev_null
00023020 g     F .text	000000f8 SDHAL_SendCmd
00030b44 g     F .text	00000020 alt_dcache_flush_all
0002332c g     F .text	000004d0 SDHAL_ReadData
0002e320 g     F .text	00000080 .hidden __fixdfsi
000278d0 g     F .text	00000060 get_addr_from_page
00033080 g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
0003306c g     O .rwdata	00000008 alt_dev_list
00029fb4 g     F .text	0000006c DMA_print_err
00020910 g     F .text	00000044 Fat_Mount
000303ec g     F .text	00000100 write
0002ff08 g     F .text	00000058 _putc_r
00028ad0 g     F .text	000003e0 save_state
00032d8c g       *ABS*	00000000 __ram_rodata_end
0002d0c4 g     F .text	000000f4 .hidden __ledf2
0002a334 g     F .text	0000006c myprintf
0002b304 g     F .text	00000058 .hidden __umodsi3
000334f4 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00038000 g       *ABS*	00000000 __alt_stack_pointer
0003085c g     F .text	0000007c alt_avalon_timer_sc_init
0002e734 g     F .text	00000064 .hidden __clzsi2
0002ebfc g     F .text	000000b0 _snprintf_r
00030750 g     F .text	00000094 altera_avalon_jtag_uart_write
000219cc g     F .text	00000048 Fat_FileClose
00020eb8 g     F .text	0000006c Fat_FileCount
000208a4 g     F .text	00000038 init_file
0002f618 g     F .text	0000052c ___vfprintf_internal_r
0003337c g     O .bss	00000001 xx
0002ed64 g     F .text	00000064 _sprintf_r
0002e818 g     F .text	000000e4 _free_r
00031704 g     F .text	00000190 __call_exitprocs
00020230 g     F .text	0000003c _start
000333ac g     O .bss	00000004 _alt_tick_rate
00029a38 g     F .text	00000110 write_mem
000333b0 g     O .bss	00000004 _alt_nticks
00023eb0 g     F .text	0000008c SD_CMD0
00030558 g     F .text	0000004c alt_sys_init
0002788c g     F .text	00000044 is_compressed
0002ef14 g     F .text	00000060 strncmp
000239dc g     F .text	00000064 SDHAL_DummyClock
000213cc g     F .text	00000044 Fat_FileSize
00033384 g     O .bss	00000004 curr_game_filename
00022e20 g     F .text	000000a4 crc16
00023e5c g     F .text	0000002c SD_Init
0002b35c g     F .text	00000028 .hidden __mulsi3
00032d8c g       *ABS*	00000000 __ram_rwdata_start
000318c8 g       *ABS*	00000000 __ram_rodata_start
0002ef74 g     F .text	00000054 strncpy
0002ee40 g     F .text	00000058 strcasecmp
0002a698 g     F .text	0000019c log10
0002eb94 g     F .text	00000018 realloc
000305a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00031554 g     F .text	000000c4 alt_get_fd
0002982c g     F .text	000000a4 DMA_request
000308d8 g     F .text	00000158 alt_busy_sleep
00029f24 g     F .text	00000090 DMA_stop_w_interrupt
00021410 g     F .text	000004bc Fat_FileRead
000316d4 g     F .text	00000030 memcmp
00033390 g     O .bss	00000004 DMA_state
000334f4 g       *ABS*	00000000 __alt_stack_base
00022808 g     F .text	00000110 fatFindUnusedDirectory
00022fb0 g     F .text	00000070 SDHAL_Init
0002c590 g     F .text	000009d0 .hidden __divdf3
0002eeb4 g     F .text	00000060 strncat
0002fb60 g     F .text	000000bc _vsnprintf_r
0002d1b8 g     F .text	0000086c .hidden __muldf3
00021a14 g     F .text	000001d0 Fat_SpeedTest
0002a020 g     F .text	00000094 listen_for_en
000288fc g     F .text	000000ec inject_menu
0003144c g     F .text	00000108 alt_find_file
00030bcc g     F .text	000000a4 alt_dev_llist_insert
0003012c g     F .text	000000b0 sbrk
0002f034 g     F .text	0000052c ___svfprintf_internal_r
0002fc50 g     F .text	000000b8 __sfvwrite_small_dev
0002275c g     F .text	000000ac fatFindDirectory
00033374 g       *ABS*	00000000 __bss_start
0002e7f8 g     F .text	00000020 memset
000295bc g     F .text	00000210 main
000226cc g     F .text	00000090 fatReadSecter
000333a8 g     O .bss	00000004 alt_envp
0002a3a0 g     F .text	00000088 myprintf_hexarray
00030604 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002aa78 g     F .text	00000008 matherr
00022498 g     F .text	000001ac fatDump
00038000 g       *ABS*	00000000 __alt_heap_limit
0002e58c g     F .text	000001a8 .hidden __truncdfsf2
0002e8fc g     F .text	00000158 _malloc_r
00025950 g     F .text	00000020 get_LOAD_routine_size
00025454 g     F .text	00000040 SD_WriteData
00033078 g     O .rwdata	00000004 alt_errno
0002675c g     F .text	0000065c generate_SAVE_routine
000222a0 g     F .text	00000060 fatDumpDate
00022f14 g     F .text	00000070 crc7
0002feb4 g     F .text	00000054 putc
000218cc g     F .text	00000100 Fat_FileSeek
0002b1a8 g     F .text	00000084 .hidden __divsi3
00024db8 g     F .text	0000018c SD_ACMD6
0002706c g     F .text	000004b8 load_SNA
0002b7c4 g     F .text	00000430 .hidden __mulsf3
00022cf0 g     F .text	0000003c SD_WriteBlock512
000318c8 g       *ABS*	00000000 __flash_rodata_start
00022644 g     F .text	00000088 fatArray2Value
00023e88 g     F .text	00000028 SD_IsSupport4Bits
0002a0b4 g     F .text	000000f0 get_if_type
0002cf60 g     F .text	00000088 .hidden __nedf2
00021c94 g     F .text	000000cc fat32ClusterType
00030520 g     F .text	00000038 alt_irq_init
00028860 g     F .text	0000009c string_to_num
00031314 g     F .text	00000084 alt_release_fd
0002edc8 g     F .text	00000078 sprintf
000329d5 g     O .rodata	00000100 .hidden __clz_tab
0002a300 g     F .text	00000034 debug_output
000297cc g     F .text	00000060 DMA_init
00024248 g     F .text	0000019c SD_ACMD41
0002ff60 g     F .text	00000058 _write_r
00023f3c g     F .text	0000018c SD_CMD8
0002103c g     F .text	000001b4 fatComposeShortFilename
000299a0 g     F .text	00000098 read_buf_mem
00033050 g     O .rwdata	00000004 _impure_ptr
00029e88 g     F .text	0000009c DMA_stop
000333a0 g     O .bss	00000004 alt_argc
000209a4 g     F .text	0000007c Fat_Type
0002a428 g     F .text	00000090 myprintf_dwordarray
0002aa8c g     F .text	0000071c __ieee754_log
00020020 g       .exceptions	00000000 alt_irq_entry
00025508 g     F .text	000002f4 Fat_Test
00021be4 g     F .text	000000b0 fat16ClusterType
00025914 g     F .text	0000003c reverse_16
00033064 g     O .rwdata	00000008 alt_fs_list
000240c8 g     F .text	00000180 SD_CMD55
0002f560 g     F .text	0000001c __vfprintf_internal_unused
0002aa80 g     F .text	0000000c nan
000248d8 g     F .text	000001c0 SD_CMD10
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020f24 g     F .text	00000118 fatSameLongFilename
00025f48 g     F .text	00000814 generate_LOAD_routine
00030c90 g     F .text	00000050 alt_ic_isr_register
00033080 g       *ABS*	00000000 _edata
00022300 g     F .text	00000060 fatDumpTime
0002a2b0 g     F .text	00000050 per_cmd_ack
000334f4 g       *ABS*	00000000 _end
00024718 g     F .text	000001c0 SD_CMD9
00033378 g     O .bss	00000004 zero_detected
00020230 g       *ABS*	00000000 __ram_exceptions_end
00029d94 g     F .text	00000094 wait_for_pc
00030d68 g     F .text	0000008c alt_ic_irq_disable
00025d84 g     F .text	000001c4 generate_AF_stack_addition
00027e5c g     F .text	00000a04 load_z80
00033040 g     O .rwdata	00000008 SUPPORTED_EXTENSIONS
000316b4 g     F .text	00000020 exit
00022d2c g     F .text	000000f4 fatMountSdcard
0002bbf4 g     F .text	000000f0 .hidden __floatunsisf
00025970 g     F .text	00000020 get_SAVE_routine_size
0002b22c g     F .text	00000074 .hidden __modsi3
00033054 g     O .rwdata	00000004 __ctype_ptr__
00027524 g     F .text	00000270 save_SNA
00038000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002029c g     F .text	00000120 is_supported_file
00023a40 g     F .text	0000031c SDLIB_Init
00032adc g     O .rodata	00000101 _ctype_
000250c4 g     F .text	000001a8 SD_CMD17
00020730 g     F .text	00000034 close_SD
00031894 g     F .text	00000034 _exit
000279c8 g     F .text	000001f4 generate_regs_z80
0002ee98 g     F .text	0000001c strlen
00033388 g     O .bss	00000004 curr_game_filename_len
000311b8 g     F .text	0000015c open
000203bc g     F .text	00000374 list_files
0002a280 g     F .text	00000030 is_write
0002cfe8 g     F .text	000000dc .hidden __gedf2
00033394 g     O .bss	00000004 __malloc_sbrk_start
00030c70 g     F .text	00000020 alt_icache_flush_all
0003307c g     O .rwdata	00000004 alt_priority_mask
00033398 g     O .bss	00000004 __malloc_free_list
00030ce0 g     F .text	00000088 alt_ic_irq_enable
000237fc g     F .text	000001e0 SDHAL_WriteData
0002fb44 g     F .text	0000001c __vfprintf_internal
00021ef0 g     F .text	00000198 fatFindUnusedCluster
0002da24 g     F .text	000008fc .hidden __subdf3
0003305c g     O .rwdata	00000008 alt_alarm_list
00027828 g     F .text	00000064 is_48k
00025414 g     F .text	00000040 SD_ReadData
00030a6c g     F .text	000000d8 close
00020954 g     F .text	00000050 Fat_Unmount
0003003c g     F .text	00000084 alt_load
00029e28 g     F .text	00000060 wait_until_routine_ends
0002e7bc g     F .text	00000014 free
00022360 g     F .text	00000044 fatIsLastDir
0002457c g     F .text	0000019c SD_CMD3
00023d5c g     F .text	00000080 SDLIB_ReadBlock512



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	108cfd04 	addi	r2,r2,13300
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	108cfd04 	addi	r2,r2,13300
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <_gp+0xfffe50ec>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <_gp+0xfffe50e0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a0de17 	ldw	r2,-31880(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a0de17 	ldw	r2,-31880(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6ac1014 	ori	gp,gp,45120
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20244:	108cdd14 	ori	r2,r2,13172

    movhi r3, %hi(__bss_end)
   20248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2024c:	18cd3d14 	ori	r3,r3,13556

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <_gp+0xfffe5214>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	003003c0 	call	3003c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00300c00 	call	300c0 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <_gp+0xfffe5228>

0002026c <init_SD>:

const char* SUPPORTED_EXTENSIONS[2] = {".z80", ".sna"};
#define N_SUPPORTED_EXTENSIONS (sizeof SUPPORTED_EXTENSIONS / sizeof (const char *))


FAT_HANDLE init_SD() {
   2026c:	defffe04 	addi	sp,sp,-8
   20270:	dfc00115 	stw	ra,4(sp)
   20274:	df000015 	stw	fp,0(sp)
   20278:	d839883a 	mov	fp,sp
	return Fat_Mount(FAT_SD_CARD, 0);
   2027c:	000b883a 	mov	r5,zero
   20280:	0009883a 	mov	r4,zero
   20284:	00209100 	call	20910 <Fat_Mount>
}
   20288:	e037883a 	mov	sp,fp
   2028c:	dfc00117 	ldw	ra,4(sp)
   20290:	df000017 	ldw	fp,0(sp)
   20294:	dec00204 	addi	sp,sp,8
   20298:	f800283a 	ret

0002029c <is_supported_file>:

/**
 * Checks input file's extension and compares it to supported ones
 */
bool is_supported_file(char* filename, size_t len) {
   2029c:	deffeb04 	addi	sp,sp,-84
   202a0:	dfc01415 	stw	ra,80(sp)
   202a4:	df001315 	stw	fp,76(sp)
   202a8:	dc001215 	stw	r16,72(sp)
   202ac:	df001304 	addi	fp,sp,76
   202b0:	e13ffd15 	stw	r4,-12(fp)
   202b4:	e17ffe15 	stw	r5,-8(fp)
	// Making extensions lower case for comparisons
	char to_compare[FILENAME_LEN_SD];
	strncpy(to_compare, filename, len);
   202b8:	e0bff004 	addi	r2,fp,-64
   202bc:	e1bffe17 	ldw	r6,-8(fp)
   202c0:	e17ffd17 	ldw	r5,-12(fp)
   202c4:	1009883a 	mov	r4,r2
   202c8:	002ef740 	call	2ef74 <strncpy>
	for(int i = 1; i < 5; i++) {
   202cc:	00800044 	movi	r2,1
   202d0:	e0bfed15 	stw	r2,-76(fp)
   202d4:	00001506 	br	2032c <is_supported_file+0x90>
		to_compare[len-i] = tolower(filename[len-i]);
   202d8:	e0bfed17 	ldw	r2,-76(fp)
   202dc:	e0fffe17 	ldw	r3,-8(fp)
   202e0:	18a1c83a 	sub	r16,r3,r2
   202e4:	e0bfed17 	ldw	r2,-76(fp)
   202e8:	e0fffe17 	ldw	r3,-8(fp)
   202ec:	1885c83a 	sub	r2,r3,r2
   202f0:	e0fffd17 	ldw	r3,-12(fp)
   202f4:	1885883a 	add	r2,r3,r2
   202f8:	10800003 	ldbu	r2,0(r2)
   202fc:	10803fcc 	andi	r2,r2,255
   20300:	1080201c 	xori	r2,r2,128
   20304:	10bfe004 	addi	r2,r2,-128
   20308:	1009883a 	mov	r4,r2
   2030c:	002f57c0 	call	2f57c <tolower>
   20310:	1007883a 	mov	r3,r2
   20314:	e0bff004 	addi	r2,fp,-64
   20318:	1405883a 	add	r2,r2,r16
   2031c:	10c00005 	stb	r3,0(r2)
 */
bool is_supported_file(char* filename, size_t len) {
	// Making extensions lower case for comparisons
	char to_compare[FILENAME_LEN_SD];
	strncpy(to_compare, filename, len);
	for(int i = 1; i < 5; i++) {
   20320:	e0bfed17 	ldw	r2,-76(fp)
   20324:	10800044 	addi	r2,r2,1
   20328:	e0bfed15 	stw	r2,-76(fp)
   2032c:	e0bfed17 	ldw	r2,-76(fp)
   20330:	10800150 	cmplti	r2,r2,5
   20334:	103fe81e 	bne	r2,zero,202d8 <_gp+0xfffe5298>
		to_compare[len-i] = tolower(filename[len-i]);
	}

	char* extension = to_compare + (len-5);
   20338:	e0bffe17 	ldw	r2,-8(fp)
   2033c:	10bffec4 	addi	r2,r2,-5
   20340:	e0fff004 	addi	r3,fp,-64
   20344:	1885883a 	add	r2,r3,r2
   20348:	e0bfef15 	stw	r2,-68(fp)
	for (int i = 0; i < N_SUPPORTED_EXTENSIONS; i++) {
   2034c:	e03fee15 	stw	zero,-72(fp)
   20350:	00001006 	br	20394 <is_supported_file+0xf8>
		if (strncmp(extension, SUPPORTED_EXTENSIONS[i], 4) == 0) {
   20354:	e0bfee17 	ldw	r2,-72(fp)
   20358:	1085883a 	add	r2,r2,r2
   2035c:	1087883a 	add	r3,r2,r2
   20360:	d0a00004 	addi	r2,gp,-32768
   20364:	1885883a 	add	r2,r3,r2
   20368:	10800017 	ldw	r2,0(r2)
   2036c:	01800104 	movi	r6,4
   20370:	100b883a 	mov	r5,r2
   20374:	e13fef17 	ldw	r4,-68(fp)
   20378:	002ef140 	call	2ef14 <strncmp>
   2037c:	1000021e 	bne	r2,zero,20388 <is_supported_file+0xec>
			return TRUE;
   20380:	00800044 	movi	r2,1
   20384:	00000706 	br	203a4 <is_supported_file+0x108>
	for(int i = 1; i < 5; i++) {
		to_compare[len-i] = tolower(filename[len-i]);
	}

	char* extension = to_compare + (len-5);
	for (int i = 0; i < N_SUPPORTED_EXTENSIONS; i++) {
   20388:	e0bfee17 	ldw	r2,-72(fp)
   2038c:	10800044 	addi	r2,r2,1
   20390:	e0bfee15 	stw	r2,-72(fp)
   20394:	e0bfee17 	ldw	r2,-72(fp)
   20398:	108000b0 	cmpltui	r2,r2,2
   2039c:	103fed1e 	bne	r2,zero,20354 <_gp+0xfffe5314>
		if (strncmp(extension, SUPPORTED_EXTENSIONS[i], 4) == 0) {
			return TRUE;
		}
	}
	return FALSE;
   203a0:	0005883a 	mov	r2,zero
}
   203a4:	e6ffff04 	addi	sp,fp,-4
   203a8:	dfc00217 	ldw	ra,8(sp)
   203ac:	df000117 	ldw	fp,4(sp)
   203b0:	dc000017 	ldw	r16,0(sp)
   203b4:	dec00304 	addi	sp,sp,12
   203b8:	f800283a 	ret

000203bc <list_files>:

FILENAMES list_files(FAT_HANDLE hFat) {
   203bc:	deff9f04 	addi	sp,sp,-388
   203c0:	dfc06015 	stw	ra,384(sp)
   203c4:	df005f15 	stw	fp,380(sp)
   203c8:	dc005e15 	stw	r16,376(sp)
   203cc:	df005f04 	addi	fp,sp,380
   203d0:	e13ffe15 	stw	r4,-8(fp)
	// allocate space for FILENAME_NUM file names
	FILENAMES filenames = {0, NULL};
   203d4:	e03fa815 	stw	zero,-352(fp)
   203d8:	e03fa915 	stw	zero,-348(fp)
	filenames.filenames = (char**) malloc(FILENAME_NUM*sizeof(char*));
   203dc:	01010004 	movi	r4,1024
   203e0:	002e7a80 	call	2e7a8 <malloc>
   203e4:	e0bfa915 	stw	r2,-348(fp)
	for (int i = 0; i < FILENAME_NUM; i++) {
   203e8:	e03fa115 	stw	zero,-380(fp)
   203ec:	00000b06 	br	2041c <list_files+0x60>
		// allocating 50 chars for each file_name
		filenames.filenames[i] = (char*)malloc(FILENAME_LEN_SD*sizeof(char));
   203f0:	e0ffa917 	ldw	r3,-348(fp)
   203f4:	e0bfa117 	ldw	r2,-380(fp)
   203f8:	1085883a 	add	r2,r2,r2
   203fc:	1085883a 	add	r2,r2,r2
   20400:	18a1883a 	add	r16,r3,r2
   20404:	01000c84 	movi	r4,50
   20408:	002e7a80 	call	2e7a8 <malloc>
   2040c:	80800015 	stw	r2,0(r16)

FILENAMES list_files(FAT_HANDLE hFat) {
	// allocate space for FILENAME_NUM file names
	FILENAMES filenames = {0, NULL};
	filenames.filenames = (char**) malloc(FILENAME_NUM*sizeof(char*));
	for (int i = 0; i < FILENAME_NUM; i++) {
   20410:	e0bfa117 	ldw	r2,-380(fp)
   20414:	10800044 	addi	r2,r2,1
   20418:	e0bfa115 	stw	r2,-380(fp)
   2041c:	e0bfa117 	ldw	r2,-380(fp)
   20420:	10804010 	cmplti	r2,r2,256
   20424:	103ff21e 	bne	r2,zero,203f0 <_gp+0xfffe53b0>
		// allocating 50 chars for each file_name
		filenames.filenames[i] = (char*)malloc(FILENAME_LEN_SD*sizeof(char));
	}
	int filename_num = 0;
   20428:	e03fa215 	stw	zero,-376(fp)

	bool bSuccess;
	FAT_BROWSE_HANDLE hBrowse;
	FILE_CONTEXT FileContext;

	bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
   2042c:	e0bfaa04 	addi	r2,fp,-344
   20430:	100b883a 	mov	r5,r2
   20434:	e13ffe17 	ldw	r4,-8(fp)
   20438:	0020a200 	call	20a20 <Fat_FileBrowseBegin>
   2043c:	e0bfa715 	stw	r2,-356(fp)

	if (bSuccess){
   20440:	e0bfa717 	ldw	r2,-356(fp)
   20444:	10009626 	beq	r2,zero,206a0 <list_files+0x2e4>
		while(Fat_FileBrowseNext(&hBrowse, &FileContext)) {
   20448:	00008206 	br	20654 <list_files+0x298>
			char name[FILENAME_LEN];
			//char *name = (char *) malloc(51);
			int len = 0;
   2044c:	e03fa315 	stw	zero,-372(fp)

			//if (page_num == 1) entries = {0};

			if (FileContext.bLongFilename){
   20450:	e0bfec17 	ldw	r2,-80(fp)
   20454:	10003626 	beq	r2,zero,20530 <list_files+0x174>

				alt_u16 *pData16;
				alt_u8 *pData8;
				pData16 = (alt_u16 *)FileContext.szName;
   20458:	e0bfac04 	addi	r2,fp,-336
   2045c:	e0bfa415 	stw	r2,-368(fp)
				pData8 = FileContext.szName;
   20460:	e0bfac04 	addi	r2,fp,-336
   20464:	e0bfa515 	stw	r2,-364(fp)

				//printf("[%d]", nCount);
				while(*pData16 && len < FILENAME_LEN){
   20468:	00002306 	br	204f8 <list_files+0x13c>
					if (*pData8)
   2046c:	e0bfa517 	ldw	r2,-364(fp)
   20470:	10800003 	ldbu	r2,0(r2)
   20474:	10803fcc 	andi	r2,r2,255
   20478:	10000926 	beq	r2,zero,204a0 <list_files+0xe4>
						name[len++] = *pData8;
   2047c:	e0bfa317 	ldw	r2,-372(fp)
   20480:	10c00044 	addi	r3,r2,1
   20484:	e0ffa315 	stw	r3,-372(fp)
   20488:	e0ffa517 	ldw	r3,-364(fp)
   2048c:	18c00003 	ldbu	r3,0(r3)
   20490:	1809883a 	mov	r4,r3
   20494:	e0fff604 	addi	r3,fp,-40
   20498:	1885883a 	add	r2,r3,r2
   2049c:	11000005 	stb	r4,0(r2)
					pData8++;
   204a0:	e0bfa517 	ldw	r2,-364(fp)
   204a4:	10800044 	addi	r2,r2,1
   204a8:	e0bfa515 	stw	r2,-364(fp)
					if (*pData8)
   204ac:	e0bfa517 	ldw	r2,-364(fp)
   204b0:	10800003 	ldbu	r2,0(r2)
   204b4:	10803fcc 	andi	r2,r2,255
   204b8:	10000926 	beq	r2,zero,204e0 <list_files+0x124>
						name[len++] = *pData8;
   204bc:	e0bfa317 	ldw	r2,-372(fp)
   204c0:	10c00044 	addi	r3,r2,1
   204c4:	e0ffa315 	stw	r3,-372(fp)
   204c8:	e0ffa517 	ldw	r3,-364(fp)
   204cc:	18c00003 	ldbu	r3,0(r3)
   204d0:	1809883a 	mov	r4,r3
   204d4:	e0fff604 	addi	r3,fp,-40
   204d8:	1885883a 	add	r2,r3,r2
   204dc:	11000005 	stb	r4,0(r2)
					pData8++;
   204e0:	e0bfa517 	ldw	r2,-364(fp)
   204e4:	10800044 	addi	r2,r2,1
   204e8:	e0bfa515 	stw	r2,-364(fp)
					//
					pData16++;
   204ec:	e0bfa417 	ldw	r2,-368(fp)
   204f0:	10800084 	addi	r2,r2,2
   204f4:	e0bfa415 	stw	r2,-368(fp)
				alt_u8 *pData8;
				pData16 = (alt_u16 *)FileContext.szName;
				pData8 = FileContext.szName;

				//printf("[%d]", nCount);
				while(*pData16 && len < FILENAME_LEN){
   204f8:	e0bfa417 	ldw	r2,-368(fp)
   204fc:	1080000b 	ldhu	r2,0(r2)
   20500:	10bfffcc 	andi	r2,r2,65535
   20504:	10000326 	beq	r2,zero,20514 <list_files+0x158>
   20508:	e0bfa317 	ldw	r2,-372(fp)
   2050c:	10800810 	cmplti	r2,r2,32
   20510:	103fd61e 	bne	r2,zero,2046c <_gp+0xfffe542c>
						name[len++] = *pData8;
					pData8++;
					//
					pData16++;
				}
				name[len++] = '\0';
   20514:	e0bfa317 	ldw	r2,-372(fp)
   20518:	10c00044 	addi	r3,r2,1
   2051c:	e0ffa315 	stw	r3,-372(fp)
   20520:	e0fff604 	addi	r3,fp,-40
   20524:	1885883a 	add	r2,r3,r2
   20528:	10000005 	stb	zero,0(r2)
   2052c:	00001106 	br	20574 <list_files+0x1b8>
			}else {
				len = strlen(FileContext.szName);
   20530:	e0bfac04 	addi	r2,fp,-336
   20534:	1009883a 	mov	r4,r2
   20538:	002ee980 	call	2ee98 <strlen>
   2053c:	e0bfa315 	stw	r2,-372(fp)
				name[len++] = '\0';
   20540:	e0bfa317 	ldw	r2,-372(fp)
   20544:	10c00044 	addi	r3,r2,1
   20548:	e0ffa315 	stw	r3,-372(fp)
   2054c:	e0fff604 	addi	r3,fp,-40
   20550:	1885883a 	add	r2,r3,r2
   20554:	10000005 	stb	zero,0(r2)
				strncpy(name, FileContext.szName, len);
   20558:	e13fa317 	ldw	r4,-372(fp)
   2055c:	e0ffac04 	addi	r3,fp,-336
   20560:	e0bff604 	addi	r2,fp,-40
   20564:	200d883a 	mov	r6,r4
   20568:	180b883a 	mov	r5,r3
   2056c:	1009883a 	mov	r4,r2
   20570:	002ef740 	call	2ef74 <strncpy>
			}

			// Basic filesystem files always present
			if (strncmp(name, "16GB", 4) == 0 || strncmp(name, "System Volume Information", 25) == 0) {
   20574:	e0bff604 	addi	r2,fp,-40
   20578:	01800104 	movi	r6,4
   2057c:	014000f4 	movhi	r5,3
   20580:	29463604 	addi	r5,r5,6360
   20584:	1009883a 	mov	r4,r2
   20588:	002ef140 	call	2ef14 <strncmp>
   2058c:	10002e26 	beq	r2,zero,20648 <list_files+0x28c>
   20590:	e0bff604 	addi	r2,fp,-40
   20594:	01800644 	movi	r6,25
   20598:	014000f4 	movhi	r5,3
   2059c:	29463804 	addi	r5,r5,6368
   205a0:	1009883a 	mov	r4,r2
   205a4:	002ef140 	call	2ef14 <strncmp>
   205a8:	10002726 	beq	r2,zero,20648 <list_files+0x28c>
				continue;
			}

			// Skip unsupported files
			if (!is_supported_file(name, len)) {
   205ac:	e0ffa317 	ldw	r3,-372(fp)
   205b0:	e0bff604 	addi	r2,fp,-40
   205b4:	180b883a 	mov	r5,r3
   205b8:	1009883a 	mov	r4,r2
   205bc:	002029c0 	call	2029c <is_supported_file>
   205c0:	10002326 	beq	r2,zero,20650 <list_files+0x294>
				continue;
			}

			if (len > FILENAME_LEN) {
   205c4:	e0bfa317 	ldw	r2,-372(fp)
   205c8:	10800850 	cmplti	r2,r2,33
   205cc:	1000021e 	bne	r2,zero,205d8 <list_files+0x21c>
				len = FILENAME_LEN;
   205d0:	00800804 	movi	r2,32
   205d4:	e0bfa315 	stw	r2,-372(fp)
			}

			// adding 0x80 to last char of string as a final byte (spectrum uses this in string tables)
			name[len-2] += 0x80;
   205d8:	e0bfa317 	ldw	r2,-372(fp)
   205dc:	10bfff84 	addi	r2,r2,-2
   205e0:	e0ffa317 	ldw	r3,-372(fp)
   205e4:	18ffff84 	addi	r3,r3,-2
   205e8:	e13ff604 	addi	r4,fp,-40
   205ec:	20c7883a 	add	r3,r4,r3
   205f0:	18c00003 	ldbu	r3,0(r3)
   205f4:	18ffe004 	addi	r3,r3,-128
   205f8:	1809883a 	mov	r4,r3
   205fc:	e0fff604 	addi	r3,fp,-40
   20600:	1885883a 	add	r2,r3,r2
   20604:	11000005 	stb	r4,0(r2)

			snprintf(filenames.filenames[filename_num], len, name);
   20608:	e0ffa917 	ldw	r3,-348(fp)
   2060c:	e0bfa217 	ldw	r2,-376(fp)
   20610:	1085883a 	add	r2,r2,r2
   20614:	1085883a 	add	r2,r2,r2
   20618:	1885883a 	add	r2,r3,r2
   2061c:	10800017 	ldw	r2,0(r2)
   20620:	e0ffa317 	ldw	r3,-372(fp)
   20624:	e13ff604 	addi	r4,fp,-40
   20628:	200d883a 	mov	r6,r4
   2062c:	180b883a 	mov	r5,r3
   20630:	1009883a 	mov	r4,r2
   20634:	002ecac0 	call	2ecac <snprintf>
			filename_num++;
   20638:	e0bfa217 	ldw	r2,-376(fp)
   2063c:	10800044 	addi	r2,r2,1
   20640:	e0bfa215 	stw	r2,-376(fp)
   20644:	00000306 	br	20654 <list_files+0x298>
				strncpy(name, FileContext.szName, len);
			}

			// Basic filesystem files always present
			if (strncmp(name, "16GB", 4) == 0 || strncmp(name, "System Volume Information", 25) == 0) {
				continue;
   20648:	0001883a 	nop
   2064c:	00000106 	br	20654 <list_files+0x298>
			}

			// Skip unsupported files
			if (!is_supported_file(name, len)) {
				continue;
   20650:	0001883a 	nop
	FILE_CONTEXT FileContext;

	bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);

	if (bSuccess){
		while(Fat_FileBrowseNext(&hBrowse, &FileContext)) {
   20654:	e0ffac04 	addi	r3,fp,-336
   20658:	e0bfaa04 	addi	r2,fp,-344
   2065c:	180b883a 	mov	r5,r3
   20660:	1009883a 	mov	r4,r2
   20664:	0020a8c0 	call	20a8c <Fat_FileBrowseNext>
   20668:	103f781e 	bne	r2,zero,2044c <_gp+0xfffe540c>
			name[len-2] += 0x80;

			snprintf(filenames.filenames[filename_num], len, name);
			filename_num++;
		}
		filenames.size = filename_num;
   2066c:	e0bfa217 	ldw	r2,-376(fp)
   20670:	e0bfa815 	stw	r2,-352(fp)
		filenames.filenames = (char**) realloc(filenames.filenames, filenames.size*sizeof(char*));
   20674:	e0ffa917 	ldw	r3,-348(fp)
   20678:	e0bfa817 	ldw	r2,-352(fp)
   2067c:	1085883a 	add	r2,r2,r2
   20680:	1085883a 	add	r2,r2,r2
   20684:	100b883a 	mov	r5,r2
   20688:	1809883a 	mov	r4,r3
   2068c:	002eb940 	call	2eb94 <realloc>
   20690:	e0bfa915 	stw	r2,-348(fp)

		return filenames;
   20694:	e0bfa817 	ldw	r2,-352(fp)
   20698:	e0ffa917 	ldw	r3,-348(fp)
   2069c:	00001a06 	br	20708 <list_files+0x34c>
	}

	printf("Listing files failed somehow...\r\n");
   206a0:	010000f4 	movhi	r4,3
   206a4:	21063f04 	addi	r4,r4,6396
   206a8:	002eb800 	call	2eb80 <puts>
	for(int i = 0; i < FILENAME_NUM; i++) {
   206ac:	e03fa615 	stw	zero,-360(fp)
   206b0:	00000b06 	br	206e0 <list_files+0x324>
		free(filenames.filenames[i]);
   206b4:	e0ffa917 	ldw	r3,-348(fp)
   206b8:	e0bfa617 	ldw	r2,-360(fp)
   206bc:	1085883a 	add	r2,r2,r2
   206c0:	1085883a 	add	r2,r2,r2
   206c4:	1885883a 	add	r2,r3,r2
   206c8:	10800017 	ldw	r2,0(r2)
   206cc:	1009883a 	mov	r4,r2
   206d0:	002e7bc0 	call	2e7bc <free>

		return filenames;
	}

	printf("Listing files failed somehow...\r\n");
	for(int i = 0; i < FILENAME_NUM; i++) {
   206d4:	e0bfa617 	ldw	r2,-360(fp)
   206d8:	10800044 	addi	r2,r2,1
   206dc:	e0bfa615 	stw	r2,-360(fp)
   206e0:	e0bfa617 	ldw	r2,-360(fp)
   206e4:	10804010 	cmplti	r2,r2,256
   206e8:	103ff21e 	bne	r2,zero,206b4 <_gp+0xfffe5674>
		free(filenames.filenames[i]);
	}
	free(filenames.filenames);
   206ec:	e0bfa917 	ldw	r2,-348(fp)
   206f0:	1009883a 	mov	r4,r2
   206f4:	002e7bc0 	call	2e7bc <free>

	filenames.size = 0;
   206f8:	e03fa815 	stw	zero,-352(fp)
	filenames.filenames = NULL;
   206fc:	e03fa915 	stw	zero,-348(fp)
	return filenames;
   20700:	e0bfa817 	ldw	r2,-352(fp)
   20704:	e0ffa917 	ldw	r3,-348(fp)
   20708:	1009883a 	mov	r4,r2
   2070c:	180b883a 	mov	r5,r3
}
   20710:	2005883a 	mov	r2,r4
   20714:	2807883a 	mov	r3,r5
   20718:	e6ffff04 	addi	sp,fp,-4
   2071c:	dfc00217 	ldw	ra,8(sp)
   20720:	df000117 	ldw	fp,4(sp)
   20724:	dc000017 	ldw	r16,0(sp)
   20728:	dec00304 	addi	sp,sp,12
   2072c:	f800283a 	ret

00020730 <close_SD>:

void close_SD(FAT_HANDLE hFat) {
   20730:	defffd04 	addi	sp,sp,-12
   20734:	dfc00215 	stw	ra,8(sp)
   20738:	df000115 	stw	fp,4(sp)
   2073c:	df000104 	addi	fp,sp,4
   20740:	e13fff15 	stw	r4,-4(fp)
	Fat_Unmount(hFat);
   20744:	e13fff17 	ldw	r4,-4(fp)
   20748:	00209540 	call	20954 <Fat_Unmount>
}
   2074c:	0001883a 	nop
   20750:	e037883a 	mov	sp,fp
   20754:	dfc00117 	ldw	ra,4(sp)
   20758:	df000017 	ldw	fp,0(sp)
   2075c:	dec00204 	addi	sp,sp,8
   20760:	f800283a 	ret

00020764 <print_filenames>:


void print_filenames(FILENAMES files, bool free_en) {
   20764:	defff504 	addi	sp,sp,-44
   20768:	dfc00a15 	stw	ra,40(sp)
   2076c:	df000915 	stw	fp,36(sp)
   20770:	df000904 	addi	fp,sp,36
   20774:	e13ffd15 	stw	r4,-12(fp)
   20778:	e17ffe15 	stw	r5,-8(fp)
   2077c:	e1bfff15 	stw	r6,-4(fp)
	int page, filename;
	size_t page_max = (files.size + (FILES_PER_PAGE-1)) / FILES_PER_PAGE;
   20780:	e0bffd17 	ldw	r2,-12(fp)
   20784:	108003c4 	addi	r2,r2,15
   20788:	1004d13a 	srli	r2,r2,4
   2078c:	e0bffb15 	stw	r2,-20(fp)
	size_t entries_left = files.size;
   20790:	e0bffd17 	ldw	r2,-12(fp)
   20794:	e0bff915 	stw	r2,-28(fp)
	size_t files_in_page = FILES_PER_PAGE;
   20798:	00800404 	movi	r2,16
   2079c:	e0bffa15 	stw	r2,-24(fp)

	for (page = 0; page < page_max; page++) {
   207a0:	e03ff715 	stw	zero,-36(fp)
   207a4:	00003106 	br	2086c <print_filenames+0x108>
		printf("Page %d:\r\n", page);
   207a8:	e17ff717 	ldw	r5,-36(fp)
   207ac:	010000f4 	movhi	r4,3
   207b0:	21064804 	addi	r4,r4,6432
   207b4:	002ea900 	call	2ea90 <printf>

		if (entries_left < files_in_page) {
   207b8:	e0fff917 	ldw	r3,-28(fp)
   207bc:	e0bffa17 	ldw	r2,-24(fp)
   207c0:	1880022e 	bgeu	r3,r2,207cc <print_filenames+0x68>
			files_in_page = entries_left;
   207c4:	e0bff917 	ldw	r2,-28(fp)
   207c8:	e0bffa15 	stw	r2,-24(fp)
		}

		for (filename = 0; filename < files_in_page; filename++) {
   207cc:	e03ff815 	stw	zero,-32(fp)
   207d0:	00001d06 	br	20848 <print_filenames+0xe4>
			int idx = (page*FILES_PER_PAGE) + filename;
   207d4:	e0bff717 	ldw	r2,-36(fp)
   207d8:	1006913a 	slli	r3,r2,4
   207dc:	e0bff817 	ldw	r2,-32(fp)
   207e0:	1885883a 	add	r2,r3,r2
   207e4:	e0bffc15 	stw	r2,-16(fp)
			printf("\t[%d]: %s\r\n", filename, files.filenames[idx]);
   207e8:	e0fffe17 	ldw	r3,-8(fp)
   207ec:	e0bffc17 	ldw	r2,-16(fp)
   207f0:	1085883a 	add	r2,r2,r2
   207f4:	1085883a 	add	r2,r2,r2
   207f8:	1885883a 	add	r2,r3,r2
   207fc:	10800017 	ldw	r2,0(r2)
   20800:	100d883a 	mov	r6,r2
   20804:	e17ff817 	ldw	r5,-32(fp)
   20808:	010000f4 	movhi	r4,3
   2080c:	21064b04 	addi	r4,r4,6444
   20810:	002ea900 	call	2ea90 <printf>
			if (free_en)
   20814:	e0bfff17 	ldw	r2,-4(fp)
   20818:	10000826 	beq	r2,zero,2083c <print_filenames+0xd8>
				free(files.filenames[idx]);
   2081c:	e0fffe17 	ldw	r3,-8(fp)
   20820:	e0bffc17 	ldw	r2,-16(fp)
   20824:	1085883a 	add	r2,r2,r2
   20828:	1085883a 	add	r2,r2,r2
   2082c:	1885883a 	add	r2,r3,r2
   20830:	10800017 	ldw	r2,0(r2)
   20834:	1009883a 	mov	r4,r2
   20838:	002e7bc0 	call	2e7bc <free>

		if (entries_left < files_in_page) {
			files_in_page = entries_left;
		}

		for (filename = 0; filename < files_in_page; filename++) {
   2083c:	e0bff817 	ldw	r2,-32(fp)
   20840:	10800044 	addi	r2,r2,1
   20844:	e0bff815 	stw	r2,-32(fp)
   20848:	e0fff817 	ldw	r3,-32(fp)
   2084c:	e0bffa17 	ldw	r2,-24(fp)
   20850:	18bfe036 	bltu	r3,r2,207d4 <_gp+0xfffe5794>
			int idx = (page*FILES_PER_PAGE) + filename;
			printf("\t[%d]: %s\r\n", filename, files.filenames[idx]);
			if (free_en)
				free(files.filenames[idx]);
		}
		entries_left -= FILES_PER_PAGE;
   20854:	e0bff917 	ldw	r2,-28(fp)
   20858:	10bffc04 	addi	r2,r2,-16
   2085c:	e0bff915 	stw	r2,-28(fp)
	int page, filename;
	size_t page_max = (files.size + (FILES_PER_PAGE-1)) / FILES_PER_PAGE;
	size_t entries_left = files.size;
	size_t files_in_page = FILES_PER_PAGE;

	for (page = 0; page < page_max; page++) {
   20860:	e0bff717 	ldw	r2,-36(fp)
   20864:	10800044 	addi	r2,r2,1
   20868:	e0bff715 	stw	r2,-36(fp)
   2086c:	e0fff717 	ldw	r3,-36(fp)
   20870:	e0bffb17 	ldw	r2,-20(fp)
   20874:	18bfcc36 	bltu	r3,r2,207a8 <_gp+0xfffe5768>
			if (free_en)
				free(files.filenames[idx]);
		}
		entries_left -= FILES_PER_PAGE;
	}
	if (free_en)
   20878:	e0bfff17 	ldw	r2,-4(fp)
   2087c:	10000326 	beq	r2,zero,2088c <print_filenames+0x128>
		free(files.filenames);
   20880:	e0bffe17 	ldw	r2,-8(fp)
   20884:	1009883a 	mov	r4,r2
   20888:	002e7bc0 	call	2e7bc <free>
}
   2088c:	0001883a 	nop
   20890:	e037883a 	mov	sp,fp
   20894:	dfc00117 	ldw	ra,4(sp)
   20898:	df000017 	ldw	fp,0(sp)
   2089c:	dec00204 	addi	sp,sp,8
   208a0:	f800283a 	ret

000208a4 <init_file>:


FAT_FILE_HANDLE init_file(FAT_HANDLE hFat, const char *pFilename) {
   208a4:	defffc04 	addi	sp,sp,-16
   208a8:	dfc00315 	stw	ra,12(sp)
   208ac:	df000215 	stw	fp,8(sp)
   208b0:	df000204 	addi	fp,sp,8
   208b4:	e13ffe15 	stw	r4,-8(fp)
   208b8:	e17fff15 	stw	r5,-4(fp)
	return Fat_FileOpen(hFat, pFilename);
   208bc:	e17fff17 	ldw	r5,-4(fp)
   208c0:	e13ffe17 	ldw	r4,-8(fp)
   208c4:	00212a00 	call	212a0 <Fat_FileOpen>
}
   208c8:	e037883a 	mov	sp,fp
   208cc:	dfc00117 	ldw	ra,4(sp)
   208d0:	df000017 	ldw	fp,0(sp)
   208d4:	dec00204 	addi	sp,sp,8
   208d8:	f800283a 	ret

000208dc <close_file>:

void close_file(FAT_FILE_HANDLE hFile) {
   208dc:	defffd04 	addi	sp,sp,-12
   208e0:	dfc00215 	stw	ra,8(sp)
   208e4:	df000115 	stw	fp,4(sp)
   208e8:	df000104 	addi	fp,sp,4
   208ec:	e13fff15 	stw	r4,-4(fp)
	Fat_FileClose(hFile);
   208f0:	e13fff17 	ldw	r4,-4(fp)
   208f4:	00219cc0 	call	219cc <Fat_FileClose>
}
   208f8:	0001883a 	nop
   208fc:	e037883a 	mov	sp,fp
   20900:	dfc00117 	ldw	ra,4(sp)
   20904:	df000017 	ldw	fp,0(sp)
   20908:	dec00204 	addi	sp,sp,8
   2090c:	f800283a 	ret

00020910 <Fat_Mount>:
bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2);




FAT_HANDLE Fat_Mount(FAT_DEVICE FatDevice, DEVICE_HANDLE hUsbDisk){
   20910:	defffb04 	addi	sp,sp,-20
   20914:	dfc00415 	stw	ra,16(sp)
   20918:	df000315 	stw	fp,12(sp)
   2091c:	df000304 	addi	fp,sp,12
   20920:	e13ffe15 	stw	r4,-8(fp)
   20924:	e17fff15 	stw	r5,-4(fp)
    
    //Fat_Unmount();
    FAT_HANDLE hFat = 0;
   20928:	e03ffd15 	stw	zero,-12(fp)
    
    if (FatDevice == FAT_SD_CARD){
   2092c:	e0bffe17 	ldw	r2,-8(fp)
   20930:	1000021e 	bne	r2,zero,2093c <Fat_Mount+0x2c>
        #ifdef SUPPORT_SD_CARD
        hFat = fatMountSdcard();
   20934:	0022d2c0 	call	22d2c <fatMountSdcard>
   20938:	e0bffd15 	stw	r2,-12(fp)
    }else if (FatDevice == FAT_USB_DISK){
        #ifdef SUPPORT_USB_DISK
        hFat = fatMountUsbDisk(hUsbDisk);
        #endif
    }  
    return hFat;      
   2093c:	e0bffd17 	ldw	r2,-12(fp)
        
}
   20940:	e037883a 	mov	sp,fp
   20944:	dfc00117 	ldw	ra,4(sp)
   20948:	df000017 	ldw	fp,0(sp)
   2094c:	dec00204 	addi	sp,sp,8
   20950:	f800283a 	ret

00020954 <Fat_Unmount>:

void Fat_Unmount(FAT_HANDLE Fat){
   20954:	defffc04 	addi	sp,sp,-16
   20958:	dfc00315 	stw	ra,12(sp)
   2095c:	df000215 	stw	fp,8(sp)
   20960:	df000204 	addi	fp,sp,8
   20964:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
   20968:	e0bfff17 	ldw	r2,-4(fp)
   2096c:	e0bffe15 	stw	r2,-8(fp)
    if (!pVol)
   20970:	e0bffe17 	ldw	r2,-8(fp)
   20974:	10000526 	beq	r2,zero,2098c <Fat_Unmount+0x38>
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
   20978:	e0bffe17 	ldw	r2,-8(fp)
   2097c:	10000415 	stw	zero,16(r2)
    
    free(pVol);  
   20980:	e13ffe17 	ldw	r4,-8(fp)
   20984:	002e7bc0 	call	2e7bc <free>
   20988:	00000106 	br	20990 <Fat_Unmount+0x3c>
}

void Fat_Unmount(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    if (!pVol)
        return;
   2098c:	0001883a 	nop
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
    
    free(pVol);  
}   
   20990:	e037883a 	mov	sp,fp
   20994:	dfc00117 	ldw	ra,4(sp)
   20998:	df000017 	ldw	fp,0(sp)
   2099c:	dec00204 	addi	sp,sp,8
   209a0:	f800283a 	ret

000209a4 <Fat_Type>:

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
   209a4:	defffc04 	addi	sp,sp,-16
   209a8:	df000315 	stw	fp,12(sp)
   209ac:	df000304 	addi	fp,sp,12
   209b0:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
   209b4:	e0bfff17 	ldw	r2,-4(fp)
   209b8:	e0bffe15 	stw	r2,-8(fp)
    FAT_TYPE Type = FAT_UNKNOWN;
   209bc:	e03ffd15 	stw	zero,-12(fp)
    if (pVol){
   209c0:	e0bffe17 	ldw	r2,-8(fp)
   209c4:	10001126 	beq	r2,zero,20a0c <Fat_Type+0x68>
        if (pVol->Partition_Type == PARTITION_FAT16)
   209c8:	e0bffe17 	ldw	r2,-8(fp)
   209cc:	10800317 	ldw	r2,12(r2)
   209d0:	10800198 	cmpnei	r2,r2,6
   209d4:	1000031e 	bne	r2,zero,209e4 <Fat_Type+0x40>
            Type = FAT_FAT16;
   209d8:	00800044 	movi	r2,1
   209dc:	e0bffd15 	stw	r2,-12(fp)
   209e0:	00000a06 	br	20a0c <Fat_Type+0x68>
        else if (pVol->Partition_Type == PARTITION_FAT32 || pVol->Partition_Type == PARTITION_FAT32_CHS)
   209e4:	e0bffe17 	ldw	r2,-8(fp)
   209e8:	10800317 	ldw	r2,12(r2)
   209ec:	10800320 	cmpeqi	r2,r2,12
   209f0:	1000041e 	bne	r2,zero,20a04 <Fat_Type+0x60>
   209f4:	e0bffe17 	ldw	r2,-8(fp)
   209f8:	10800317 	ldw	r2,12(r2)
   209fc:	108002d8 	cmpnei	r2,r2,11
   20a00:	1000021e 	bne	r2,zero,20a0c <Fat_Type+0x68>
            Type = FAT_FAT32;
   20a04:	00800084 	movi	r2,2
   20a08:	e0bffd15 	stw	r2,-12(fp)
    }
    return Type;        
   20a0c:	e0bffd17 	ldw	r2,-12(fp)
}
   20a10:	e037883a 	mov	sp,fp
   20a14:	df000017 	ldw	fp,0(sp)
   20a18:	dec00104 	addi	sp,sp,4
   20a1c:	f800283a 	ret

00020a20 <Fat_FileBrowseBegin>:

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
   20a20:	defffc04 	addi	sp,sp,-16
   20a24:	df000315 	stw	fp,12(sp)
   20a28:	df000304 	addi	fp,sp,12
   20a2c:	e13ffe15 	stw	r4,-8(fp)
   20a30:	e17fff15 	stw	r5,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
   20a34:	e0bffe17 	ldw	r2,-8(fp)
   20a38:	e0bffd15 	stw	r2,-12(fp)
    if (!pVol)
   20a3c:	e0bffd17 	ldw	r2,-12(fp)
   20a40:	1000021e 	bne	r2,zero,20a4c <Fat_FileBrowseBegin+0x2c>
        return FALSE;
   20a44:	0005883a 	mov	r2,zero
   20a48:	00000c06 	br	20a7c <Fat_FileBrowseBegin+0x5c>
    if (!pVol->bMount)
   20a4c:	e0bffd17 	ldw	r2,-12(fp)
   20a50:	10800417 	ldw	r2,16(r2)
   20a54:	1000021e 	bne	r2,zero,20a60 <Fat_FileBrowseBegin+0x40>
        return FALSE;
   20a58:	0005883a 	mov	r2,zero
   20a5c:	00000706 	br	20a7c <Fat_FileBrowseBegin+0x5c>
    pFatBrowseHandle->DirectoryIndex = -1;
   20a60:	e0bfff17 	ldw	r2,-4(fp)
   20a64:	00ffffc4 	movi	r3,-1
   20a68:	10c00015 	stw	r3,0(r2)
    pFatBrowseHandle->hFat = hFat;
   20a6c:	e0bfff17 	ldw	r2,-4(fp)
   20a70:	e0fffe17 	ldw	r3,-8(fp)
   20a74:	10c00115 	stw	r3,4(r2)
    return TRUE;
   20a78:	00800044 	movi	r2,1
}
   20a7c:	e037883a 	mov	sp,fp
   20a80:	df000017 	ldw	fp,0(sp)
   20a84:	dec00104 	addi	sp,sp,4
   20a88:	f800283a 	ret

00020a8c <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
   20a8c:	defff404 	addi	sp,sp,-48
   20a90:	dfc00b15 	stw	ra,44(sp)
   20a94:	df000a15 	stw	fp,40(sp)
   20a98:	df000a04 	addi	fp,sp,40
   20a9c:	e13ffe15 	stw	r4,-8(fp)
   20aa0:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
   20aa4:	e03ff615 	stw	zero,-40(fp)
   20aa8:	e03ff715 	stw	zero,-36(fp)
   20aac:	e03ff815 	stw	zero,-32(fp)
    int OrderValue = 0;
   20ab0:	e03ff915 	stw	zero,-28(fp)
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
   20ab4:	e0bffe17 	ldw	r2,-8(fp)
   20ab8:	10800117 	ldw	r2,4(r2)
   20abc:	e0bffa15 	stw	r2,-24(fp)
    
    if (!pVol)
   20ac0:	e0bffa17 	ldw	r2,-24(fp)
   20ac4:	1000021e 	bne	r2,zero,20ad0 <Fat_FileBrowseNext+0x44>
        return FALSE;    
   20ac8:	0005883a 	mov	r2,zero
   20acc:	0000f506 	br	20ea4 <Fat_FileBrowseNext+0x418>
    
    if (!pVol->bMount)
   20ad0:	e0bffa17 	ldw	r2,-24(fp)
   20ad4:	10800417 	ldw	r2,16(r2)
   20ad8:	1000021e 	bne	r2,zero,20ae4 <Fat_FileBrowseNext+0x58>
        return FALSE;
   20adc:	0005883a 	mov	r2,zero
   20ae0:	0000f006 	br	20ea4 <Fat_FileBrowseNext+0x418>
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
   20ae4:	e0bffe17 	ldw	r2,-8(fp)
   20ae8:	10800017 	ldw	r2,0(r2)
   20aec:	10c00044 	addi	r3,r2,1
   20af0:	e0bffe17 	ldw	r2,-8(fp)
   20af4:	10c00015 	stw	r3,0(r2)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
   20af8:	e0bffe17 	ldw	r2,-8(fp)
   20afc:	10800017 	ldw	r2,0(r2)
   20b00:	100b883a 	mov	r5,r2
   20b04:	e13ffa17 	ldw	r4,-24(fp)
   20b08:	002275c0 	call	2275c <fatFindDirectory>
   20b0c:	e0bffb15 	stw	r2,-20(fp)
        if (!pDir)
   20b10:	e0bffb17 	ldw	r2,-20(fp)
   20b14:	1000021e 	bne	r2,zero,20b20 <Fat_FileBrowseNext+0x94>
            bError = TRUE;
   20b18:	00800044 	movi	r2,1
   20b1c:	e0bff715 	stw	r2,-36(fp)
            
        if (!bError){                        
   20b20:	e0bff717 	ldw	r2,-36(fp)
   20b24:	1000d71e 	bne	r2,zero,20e84 <Fat_FileBrowseNext+0x3f8>
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
   20b28:	e13ffb17 	ldw	r4,-20(fp)
   20b2c:	00223a40 	call	223a4 <fatIsValidDir>
   20b30:	1000d426 	beq	r2,zero,20e84 <Fat_FileBrowseNext+0x3f8>
   20b34:	e13ffb17 	ldw	r4,-20(fp)
   20b38:	00224500 	call	22450 <fatIsUnusedDir>
   20b3c:	1000d11e 	bne	r2,zero,20e84 <Fat_FileBrowseNext+0x3f8>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
   20b40:	e0bffb17 	ldw	r2,-20(fp)
   20b44:	108002c3 	ldbu	r2,11(r2)
   20b48:	10803fcc 	andi	r2,r2,255
   20b4c:	108003cc 	andi	r2,r2,15
   20b50:	108003d8 	cmpnei	r2,r2,15
   20b54:	1000521e 	bne	r2,zero,20ca0 <Fat_FileBrowseNext+0x214>
                    FAT_LONG_DIRECTORY *pLDIR = (FAT_LONG_DIRECTORY *)pDir;
   20b58:	e0bffb17 	ldw	r2,-20(fp)
   20b5c:	e0bffc15 	stw	r2,-16(fp)
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
   20b60:	e0bffc17 	ldw	r2,-16(fp)
   20b64:	108002c3 	ldbu	r2,11(r2)
   20b68:	10803fcc 	andi	r2,r2,255
   20b6c:	108003cc 	andi	r2,r2,15
   20b70:	108003e0 	cmpeqi	r2,r2,15
   20b74:	1000031e 	bne	r2,zero,20b84 <Fat_FileBrowseNext+0xf8>
                        bError = TRUE;
   20b78:	00800044 	movi	r2,1
   20b7c:	e0bff715 	stw	r2,-36(fp)
   20b80:	00001e06 	br	20bfc <Fat_FileBrowseNext+0x170>
                    }else{                        
                        // check order
                        if (OrderValue == 0){
   20b84:	e0bff917 	ldw	r2,-28(fp)
   20b88:	1000141e 	bne	r2,zero,20bdc <Fat_FileBrowseNext+0x150>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
   20b8c:	e0bff817 	ldw	r2,-32(fp)
   20b90:	1000041e 	bne	r2,zero,20ba4 <Fat_FileBrowseNext+0x118>
   20b94:	e0bff917 	ldw	r2,-28(fp)
   20b98:	10c0100c 	andi	r3,r2,64
   20b9c:	e0bff917 	ldw	r2,-28(fp)
   20ba0:	18800326 	beq	r3,r2,20bb0 <Fat_FileBrowseNext+0x124>
                                bError = TRUE;
   20ba4:	00800044 	movi	r2,1
   20ba8:	e0bff715 	stw	r2,-36(fp)
   20bac:	00000506 	br	20bc4 <Fat_FileBrowseNext+0x138>
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
   20bb0:	e0bffc17 	ldw	r2,-16(fp)
   20bb4:	10800003 	ldbu	r2,0(r2)
   20bb8:	10803fcc 	andi	r2,r2,255
   20bbc:	10800fcc 	andi	r2,r2,63
   20bc0:	e0bff915 	stw	r2,-28(fp)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
   20bc4:	e0bfff17 	ldw	r2,-4(fp)
   20bc8:	01804004 	movi	r6,256
   20bcc:	000b883a 	mov	r5,zero
   20bd0:	1009883a 	mov	r4,r2
   20bd4:	002e7f80 	call	2e7f8 <memset>
   20bd8:	00000806 	br	20bfc <Fat_FileBrowseNext+0x170>
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
   20bdc:	e0bffc17 	ldw	r2,-16(fp)
   20be0:	10800003 	ldbu	r2,0(r2)
   20be4:	10803fcc 	andi	r2,r2,255
   20be8:	10c00fcc 	andi	r3,r2,63
   20bec:	e0bff917 	ldw	r2,-28(fp)
   20bf0:	18800226 	beq	r3,r2,20bfc <Fat_FileBrowseNext+0x170>
                                bError = TRUE;
   20bf4:	00800044 	movi	r2,1
   20bf8:	e0bff715 	stw	r2,-36(fp)
                        }
                    }
                    
                    //                        
                    if (!bError){
   20bfc:	e0bff717 	ldw	r2,-36(fp)
   20c00:	1000a01e 	bne	r2,zero,20e84 <Fat_FileBrowseNext+0x3f8>
                        int BaseOffset;
                        bLongFilename = TRUE;
   20c04:	00800044 	movi	r2,1
   20c08:	e0bff815 	stw	r2,-32(fp)
                        OrderValue--;
   20c0c:	e0bff917 	ldw	r2,-28(fp)
   20c10:	10bfffc4 	addi	r2,r2,-1
   20c14:	e0bff915 	stw	r2,-28(fp)
                        BaseOffset = OrderValue * 26;
   20c18:	01400684 	movi	r5,26
   20c1c:	e13ff917 	ldw	r4,-28(fp)
   20c20:	002b35c0 	call	2b35c <__mulsi3>
   20c24:	e0bffd15 	stw	r2,-12(fp)
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
   20c28:	e0ffff17 	ldw	r3,-4(fp)
   20c2c:	e0bffd17 	ldw	r2,-12(fp)
   20c30:	1887883a 	add	r3,r3,r2
   20c34:	e0bffc17 	ldw	r2,-16(fp)
   20c38:	10800044 	addi	r2,r2,1
   20c3c:	01800284 	movi	r6,10
   20c40:	100b883a 	mov	r5,r2
   20c44:	1809883a 	mov	r4,r3
   20c48:	002e7d00 	call	2e7d0 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
   20c4c:	e0ffff17 	ldw	r3,-4(fp)
   20c50:	e0bffd17 	ldw	r2,-12(fp)
   20c54:	10800284 	addi	r2,r2,10
   20c58:	1887883a 	add	r3,r3,r2
   20c5c:	e0bffc17 	ldw	r2,-16(fp)
   20c60:	10800384 	addi	r2,r2,14
   20c64:	01800304 	movi	r6,12
   20c68:	100b883a 	mov	r5,r2
   20c6c:	1809883a 	mov	r4,r3
   20c70:	002e7d00 	call	2e7d0 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
   20c74:	e0ffff17 	ldw	r3,-4(fp)
   20c78:	e0bffd17 	ldw	r2,-12(fp)
   20c7c:	10800584 	addi	r2,r2,22
   20c80:	1887883a 	add	r3,r3,r2
   20c84:	e0bffc17 	ldw	r2,-16(fp)
   20c88:	10800704 	addi	r2,r2,28
   20c8c:	01800104 	movi	r6,4
   20c90:	100b883a 	mov	r5,r2
   20c94:	1809883a 	mov	r4,r3
   20c98:	002e7d00 	call	2e7d0 <memcpy>
   20c9c:	00007906 	br	20e84 <Fat_FileBrowseNext+0x3f8>
                    }                        
                }else{
                    if (bLongFilename){
   20ca0:	e0bff817 	ldw	r2,-32(fp)
   20ca4:	10000e26 	beq	r2,zero,20ce0 <Fat_FileBrowseNext+0x254>
                        pFileContext->Attribute = ATTR_LONG_NAME;
   20ca8:	e0bfff17 	ldw	r2,-4(fp)
   20cac:	00c003c4 	movi	r3,15
   20cb0:	10c04505 	stb	r3,276(r2)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
   20cb4:	e0bffb17 	ldw	r2,-20(fp)
   20cb8:	108002c3 	ldbu	r2,11(r2)
   20cbc:	10803fcc 	andi	r2,r2,255
   20cc0:	10800c0c 	andi	r2,r2,48
   20cc4:	1000031e 	bne	r2,zero,20cd4 <Fat_FileBrowseNext+0x248>
                            bError = TRUE;
   20cc8:	00800044 	movi	r2,1
   20ccc:	e0bff715 	stw	r2,-36(fp)
   20cd0:	00000906 	br	20cf8 <Fat_FileBrowseNext+0x26c>
                        else    
                            bFind = TRUE;
   20cd4:	00800044 	movi	r2,1
   20cd8:	e0bff615 	stw	r2,-40(fp)
   20cdc:	00000606 	br	20cf8 <Fat_FileBrowseNext+0x26c>
                    }else{
                        fatComposeShortFilename(pDir, pFileContext->szName);
   20ce0:	e0bfff17 	ldw	r2,-4(fp)
   20ce4:	100b883a 	mov	r5,r2
   20ce8:	e13ffb17 	ldw	r4,-20(fp)
   20cec:	002103c0 	call	2103c <fatComposeShortFilename>
                        bFind = TRUE;
   20cf0:	00800044 	movi	r2,1
   20cf4:	e0bff615 	stw	r2,-40(fp)
                    }
                    
                    if (bFind){
   20cf8:	e0bff617 	ldw	r2,-40(fp)
   20cfc:	10006126 	beq	r2,zero,20e84 <Fat_FileBrowseNext+0x3f8>
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
   20d00:	e0bfff17 	ldw	r2,-4(fp)
   20d04:	e0fff817 	ldw	r3,-32(fp)
   20d08:	10c04015 	stw	r3,256(r2)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
   20d0c:	e0bffb17 	ldw	r2,-20(fp)
   20d10:	108002c3 	ldbu	r2,11(r2)
   20d14:	10803fcc 	andi	r2,r2,255
   20d18:	1080080c 	andi	r2,r2,32
   20d1c:	1004c03a 	cmpne	r2,r2,zero
   20d20:	10c03fcc 	andi	r3,r2,255
   20d24:	e0bfff17 	ldw	r2,-4(fp)
   20d28:	10c04115 	stw	r3,260(r2)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
   20d2c:	e0bffb17 	ldw	r2,-20(fp)
   20d30:	108002c3 	ldbu	r2,11(r2)
   20d34:	10803fcc 	andi	r2,r2,255
   20d38:	1080040c 	andi	r2,r2,16
   20d3c:	1004c03a 	cmpne	r2,r2,zero
   20d40:	10c03fcc 	andi	r3,r2,255
   20d44:	e0bfff17 	ldw	r2,-4(fp)
   20d48:	10c04215 	stw	r3,264(r2)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
   20d4c:	e0bffb17 	ldw	r2,-20(fp)
   20d50:	108002c3 	ldbu	r2,11(r2)
   20d54:	10803fcc 	andi	r2,r2,255
   20d58:	1080020c 	andi	r2,r2,8
   20d5c:	1004c03a 	cmpne	r2,r2,zero
   20d60:	10c03fcc 	andi	r3,r2,255
   20d64:	e0bfff17 	ldw	r2,-4(fp)
   20d68:	10c04315 	stw	r3,268(r2)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
   20d6c:	e0bffe17 	ldw	r2,-8(fp)
   20d70:	10c00017 	ldw	r3,0(r2)
   20d74:	e0bfff17 	ldw	r2,-4(fp)
   20d78:	10c04415 	stw	r3,272(r2)
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
   20d7c:	e0bffb17 	ldw	r2,-20(fp)
   20d80:	10c002c3 	ldbu	r3,11(r2)
   20d84:	e0bfff17 	ldw	r2,-4(fp)
   20d88:	10c04505 	stb	r3,276(r2)
                        pFileContext->CreateTime = pDir->CreateTime;
   20d8c:	e0bffb17 	ldw	r2,-20(fp)
   20d90:	10c00383 	ldbu	r3,14(r2)
   20d94:	108003c3 	ldbu	r2,15(r2)
   20d98:	1004923a 	slli	r2,r2,8
   20d9c:	10c4b03a 	or	r2,r2,r3
   20da0:	1007883a 	mov	r3,r2
   20da4:	e0bfff17 	ldw	r2,-4(fp)
   20da8:	10c0458d 	sth	r3,278(r2)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
   20dac:	e0bffb17 	ldw	r2,-20(fp)
   20db0:	10c00483 	ldbu	r3,18(r2)
   20db4:	108004c3 	ldbu	r2,19(r2)
   20db8:	1004923a 	slli	r2,r2,8
   20dbc:	10c4b03a 	or	r2,r2,r3
   20dc0:	1007883a 	mov	r3,r2
   20dc4:	e0bfff17 	ldw	r2,-4(fp)
   20dc8:	10c0468d 	sth	r3,282(r2)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
   20dcc:	e0bffb17 	ldw	r2,-20(fp)
   20dd0:	10c00503 	ldbu	r3,20(r2)
   20dd4:	10800543 	ldbu	r2,21(r2)
   20dd8:	1004923a 	slli	r2,r2,8
   20ddc:	10c4b03a 	or	r2,r2,r3
   20de0:	1007883a 	mov	r3,r2
   20de4:	e0bfff17 	ldw	r2,-4(fp)
   20de8:	10c0470d 	sth	r3,284(r2)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
   20dec:	e0bffb17 	ldw	r2,-20(fp)
   20df0:	10c00583 	ldbu	r3,22(r2)
   20df4:	108005c3 	ldbu	r2,23(r2)
   20df8:	1004923a 	slli	r2,r2,8
   20dfc:	10c4b03a 	or	r2,r2,r3
   20e00:	1007883a 	mov	r3,r2
   20e04:	e0bfff17 	ldw	r2,-4(fp)
   20e08:	10c0478d 	sth	r3,286(r2)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
   20e0c:	e0bffb17 	ldw	r2,-20(fp)
   20e10:	10c00603 	ldbu	r3,24(r2)
   20e14:	10800643 	ldbu	r2,25(r2)
   20e18:	1004923a 	slli	r2,r2,8
   20e1c:	10c4b03a 	or	r2,r2,r3
   20e20:	1007883a 	mov	r3,r2
   20e24:	e0bfff17 	ldw	r2,-4(fp)
   20e28:	10c0480d 	sth	r3,288(r2)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
   20e2c:	e0bffb17 	ldw	r2,-20(fp)
   20e30:	10c00683 	ldbu	r3,26(r2)
   20e34:	108006c3 	ldbu	r2,27(r2)
   20e38:	1004923a 	slli	r2,r2,8
   20e3c:	10c4b03a 	or	r2,r2,r3
   20e40:	1007883a 	mov	r3,r2
   20e44:	e0bfff17 	ldw	r2,-4(fp)
   20e48:	10c0488d 	sth	r3,290(r2)
                        pFileContext->FileSize = pDir->FileSize;
   20e4c:	e0bffb17 	ldw	r2,-20(fp)
   20e50:	10c00703 	ldbu	r3,28(r2)
   20e54:	11000743 	ldbu	r4,29(r2)
   20e58:	2008923a 	slli	r4,r4,8
   20e5c:	20c6b03a 	or	r3,r4,r3
   20e60:	11000783 	ldbu	r4,30(r2)
   20e64:	2008943a 	slli	r4,r4,16
   20e68:	20c6b03a 	or	r3,r4,r3
   20e6c:	108007c3 	ldbu	r2,31(r2)
   20e70:	1004963a 	slli	r2,r2,24
   20e74:	10c4b03a 	or	r2,r2,r3
   20e78:	1007883a 	mov	r3,r2
   20e7c:	e0bfff17 	ldw	r2,-4(fp)
   20e80:	10c04915 	stw	r3,292(r2)
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
   20e84:	e0bff617 	ldw	r2,-40(fp)
   20e88:	1000051e 	bne	r2,zero,20ea0 <Fat_FileBrowseNext+0x414>
   20e8c:	e13ffb17 	ldw	r4,-20(fp)
   20e90:	00223600 	call	22360 <fatIsLastDir>
   20e94:	1000021e 	bne	r2,zero,20ea0 <Fat_FileBrowseNext+0x414>
   20e98:	e0bff717 	ldw	r2,-36(fp)
   20e9c:	103f1126 	beq	r2,zero,20ae4 <_gp+0xfffe5aa4>
    
    return bFind;
   20ea0:	e0bff617 	ldw	r2,-40(fp)
    
}
   20ea4:	e037883a 	mov	sp,fp
   20ea8:	dfc00117 	ldw	ra,4(sp)
   20eac:	df000017 	ldw	fp,0(sp)
   20eb0:	dec00204 	addi	sp,sp,8
   20eb4:	f800283a 	ret

00020eb8 <Fat_FileCount>:


unsigned int Fat_FileCount(FAT_HANDLE Fat){
   20eb8:	deffb004 	addi	sp,sp,-320
   20ebc:	dfc04f15 	stw	ra,316(sp)
   20ec0:	df004e15 	stw	fp,312(sp)
   20ec4:	df004e04 	addi	fp,sp,312
   20ec8:	e13fff15 	stw	r4,-4(fp)
    unsigned int nCount = 0;
   20ecc:	e03fb215 	stw	zero,-312(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
   20ed0:	e0bfb304 	addi	r2,fp,-308
   20ed4:	100b883a 	mov	r5,r2
   20ed8:	e13fff17 	ldw	r4,-4(fp)
   20edc:	0020a200 	call	20a20 <Fat_FileBrowseBegin>
   20ee0:	10000a26 	beq	r2,zero,20f0c <Fat_FileCount+0x54>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
   20ee4:	00000306 	br	20ef4 <Fat_FileCount+0x3c>
            nCount++;
   20ee8:	e0bfb217 	ldw	r2,-312(fp)
   20eec:	10800044 	addi	r2,r2,1
   20ef0:	e0bfb215 	stw	r2,-312(fp)
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
   20ef4:	e0ffb504 	addi	r3,fp,-300
   20ef8:	e0bfb304 	addi	r2,fp,-308
   20efc:	180b883a 	mov	r5,r3
   20f00:	1009883a 	mov	r4,r2
   20f04:	0020a8c0 	call	20a8c <Fat_FileBrowseNext>
   20f08:	103ff71e 	bne	r2,zero,20ee8 <_gp+0xfffe5ea8>
            nCount++;
    }
    
    return nCount;
   20f0c:	e0bfb217 	ldw	r2,-312(fp)
}
   20f10:	e037883a 	mov	sp,fp
   20f14:	dfc00117 	ldw	ra,4(sp)
   20f18:	df000017 	ldw	fp,0(sp)
   20f1c:	dec00204 	addi	sp,sp,8
   20f20:	f800283a 	ret

00020f24 <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
   20f24:	defff804 	addi	sp,sp,-32
   20f28:	dfc00715 	stw	ra,28(sp)
   20f2c:	df000615 	stw	fp,24(sp)
   20f30:	df000604 	addi	fp,sp,24
   20f34:	e13ffe15 	stw	r4,-8(fp)
   20f38:	e17fff15 	stw	r5,-4(fp)
    char* name = (char*) malloc(50 * sizeof(char*));
   20f3c:	01003204 	movi	r4,200
   20f40:	002e7a80 	call	2e7a8 <malloc>
   20f44:	e0bffc15 	stw	r2,-16(fp)
    p2 = (char*) p2;
    int i = 0;
   20f48:	e03ffa15 	stw	zero,-24(fp)
    alt_u8 *pData8 = (alt_u8*) p1;
   20f4c:	e0bffe17 	ldw	r2,-8(fp)
   20f50:	e0bffb15 	stw	r2,-20(fp)
    while(*p1) {
   20f54:	00002306 	br	20fe4 <fatSameLongFilename+0xc0>
        if (*pData8)
   20f58:	e0bffb17 	ldw	r2,-20(fp)
   20f5c:	10800003 	ldbu	r2,0(r2)
   20f60:	10803fcc 	andi	r2,r2,255
   20f64:	10000926 	beq	r2,zero,20f8c <fatSameLongFilename+0x68>
            name[i++] = *pData8;
   20f68:	e0bffa17 	ldw	r2,-24(fp)
   20f6c:	10c00044 	addi	r3,r2,1
   20f70:	e0fffa15 	stw	r3,-24(fp)
   20f74:	1007883a 	mov	r3,r2
   20f78:	e0bffc17 	ldw	r2,-16(fp)
   20f7c:	10c5883a 	add	r2,r2,r3
   20f80:	e0fffb17 	ldw	r3,-20(fp)
   20f84:	18c00003 	ldbu	r3,0(r3)
   20f88:	10c00005 	stb	r3,0(r2)
        pData8++;
   20f8c:	e0bffb17 	ldw	r2,-20(fp)
   20f90:	10800044 	addi	r2,r2,1
   20f94:	e0bffb15 	stw	r2,-20(fp)
        if (*pData8)
   20f98:	e0bffb17 	ldw	r2,-20(fp)
   20f9c:	10800003 	ldbu	r2,0(r2)
   20fa0:	10803fcc 	andi	r2,r2,255
   20fa4:	10000926 	beq	r2,zero,20fcc <fatSameLongFilename+0xa8>
            name[i++] = *pData8;
   20fa8:	e0bffa17 	ldw	r2,-24(fp)
   20fac:	10c00044 	addi	r3,r2,1
   20fb0:	e0fffa15 	stw	r3,-24(fp)
   20fb4:	1007883a 	mov	r3,r2
   20fb8:	e0bffc17 	ldw	r2,-16(fp)
   20fbc:	10c5883a 	add	r2,r2,r3
   20fc0:	e0fffb17 	ldw	r3,-20(fp)
   20fc4:	18c00003 	ldbu	r3,0(r3)
   20fc8:	10c00005 	stb	r3,0(r2)
        pData8++;
   20fcc:	e0bffb17 	ldw	r2,-20(fp)
   20fd0:	10800044 	addi	r2,r2,1
   20fd4:	e0bffb15 	stw	r2,-20(fp)
        p1++;
   20fd8:	e0bffe17 	ldw	r2,-8(fp)
   20fdc:	10800084 	addi	r2,r2,2
   20fe0:	e0bffe15 	stw	r2,-8(fp)
bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    char* name = (char*) malloc(50 * sizeof(char*));
    p2 = (char*) p2;
    int i = 0;
    alt_u8 *pData8 = (alt_u8*) p1;
    while(*p1) {
   20fe4:	e0bffe17 	ldw	r2,-8(fp)
   20fe8:	1080000b 	ldhu	r2,0(r2)
   20fec:	10bfffcc 	andi	r2,r2,65535
   20ff0:	103fd91e 	bne	r2,zero,20f58 <_gp+0xfffe5f18>
        if (*pData8)
            name[i++] = *pData8;
        pData8++;
        p1++;
    }
    name[i] = '\0';
   20ff4:	e0bffa17 	ldw	r2,-24(fp)
   20ff8:	e0fffc17 	ldw	r3,-16(fp)
   20ffc:	1885883a 	add	r2,r3,r2
   21000:	10000005 	stb	zero,0(r2)
    int res = strcmpi(name, p2);
   21004:	e17fff17 	ldw	r5,-4(fp)
   21008:	e13ffc17 	ldw	r4,-16(fp)
   2100c:	002ee400 	call	2ee40 <strcasecmp>
   21010:	e0bffd15 	stw	r2,-12(fp)
    
    free(name);
   21014:	e13ffc17 	ldw	r4,-16(fp)
   21018:	002e7bc0 	call	2e7bc <free>
    return res == 0 ? TRUE : FALSE;
   2101c:	e0bffd17 	ldw	r2,-12(fp)
   21020:	1005003a 	cmpeq	r2,r2,zero
   21024:	10803fcc 	andi	r2,r2,255
}
   21028:	e037883a 	mov	sp,fp
   2102c:	dfc00117 	ldw	ra,4(sp)
   21030:	df000017 	ldw	fp,0(sp)
   21034:	dec00204 	addi	sp,sp,8
   21038:	f800283a 	ret

0002103c <fatComposeShortFilename>:


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
   2103c:	defffb04 	addi	sp,sp,-20
   21040:	df000415 	stw	fp,16(sp)
   21044:	df000404 	addi	fp,sp,16
   21048:	e13ffe15 	stw	r4,-8(fp)
   2104c:	e17fff15 	stw	r5,-4(fp)
    int i,nPos=0;
   21050:	e03ffd15 	stw	zero,-12(fp)
    
    i=0;
   21054:	e03ffc15 	stw	zero,-16(fp)
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
   21058:	00000d06 	br	21090 <fatComposeShortFilename+0x54>
        szFilename[nPos++] = pDir->Name[i++];
   2105c:	e0bffd17 	ldw	r2,-12(fp)
   21060:	10c00044 	addi	r3,r2,1
   21064:	e0fffd15 	stw	r3,-12(fp)
   21068:	1007883a 	mov	r3,r2
   2106c:	e0bfff17 	ldw	r2,-4(fp)
   21070:	10c7883a 	add	r3,r2,r3
   21074:	e0bffc17 	ldw	r2,-16(fp)
   21078:	11000044 	addi	r4,r2,1
   2107c:	e13ffc15 	stw	r4,-16(fp)
   21080:	e13ffe17 	ldw	r4,-8(fp)
   21084:	2085883a 	add	r2,r4,r2
   21088:	10800003 	ldbu	r2,0(r2)
   2108c:	18800005 	stb	r2,0(r3)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
   21090:	e0bffc17 	ldw	r2,-16(fp)
   21094:	10800208 	cmpgei	r2,r2,8
   21098:	1000111e 	bne	r2,zero,210e0 <fatComposeShortFilename+0xa4>
   2109c:	e0fffe17 	ldw	r3,-8(fp)
   210a0:	e0bffc17 	ldw	r2,-16(fp)
   210a4:	1885883a 	add	r2,r3,r2
   210a8:	10800003 	ldbu	r2,0(r2)
   210ac:	10803fcc 	andi	r2,r2,255
   210b0:	1080201c 	xori	r2,r2,128
   210b4:	10bfe004 	addi	r2,r2,-128
   210b8:	10000926 	beq	r2,zero,210e0 <fatComposeShortFilename+0xa4>
   210bc:	e0fffe17 	ldw	r3,-8(fp)
   210c0:	e0bffc17 	ldw	r2,-16(fp)
   210c4:	1885883a 	add	r2,r3,r2
   210c8:	10800003 	ldbu	r2,0(r2)
   210cc:	10803fcc 	andi	r2,r2,255
   210d0:	1080201c 	xori	r2,r2,128
   210d4:	10bfe004 	addi	r2,r2,-128
   210d8:	10800818 	cmpnei	r2,r2,32
   210dc:	103fdf1e 	bne	r2,zero,2105c <_gp+0xfffe601c>
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
   210e0:	e0bffe17 	ldw	r2,-8(fp)
   210e4:	108002c3 	ldbu	r2,11(r2)
   210e8:	10803fcc 	andi	r2,r2,255
   210ec:	10800c0c 	andi	r2,r2,48
   210f0:	10003326 	beq	r2,zero,211c0 <fatComposeShortFilename+0x184>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
   210f4:	e0bffe17 	ldw	r2,-8(fp)
   210f8:	108002c3 	ldbu	r2,11(r2)
   210fc:	10803fcc 	andi	r2,r2,255
   21100:	10800c0c 	andi	r2,r2,48
   21104:	10000826 	beq	r2,zero,21128 <fatComposeShortFilename+0xec>
            szFilename[nPos++] = '.';   
   21108:	e0bffd17 	ldw	r2,-12(fp)
   2110c:	10c00044 	addi	r3,r2,1
   21110:	e0fffd15 	stw	r3,-12(fp)
   21114:	1007883a 	mov	r3,r2
   21118:	e0bfff17 	ldw	r2,-4(fp)
   2111c:	10c5883a 	add	r2,r2,r3
   21120:	00c00b84 	movi	r3,46
   21124:	10c00005 	stb	r3,0(r2)
        i=0;
   21128:	e03ffc15 	stw	zero,-16(fp)
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
   2112c:	00000e06 	br	21168 <fatComposeShortFilename+0x12c>
            szFilename[nPos++] = pDir->Extension[i++];
   21130:	e0bffd17 	ldw	r2,-12(fp)
   21134:	10c00044 	addi	r3,r2,1
   21138:	e0fffd15 	stw	r3,-12(fp)
   2113c:	1007883a 	mov	r3,r2
   21140:	e0bfff17 	ldw	r2,-4(fp)
   21144:	10c7883a 	add	r3,r2,r3
   21148:	e0bffc17 	ldw	r2,-16(fp)
   2114c:	11000044 	addi	r4,r2,1
   21150:	e13ffc15 	stw	r4,-16(fp)
   21154:	e13ffe17 	ldw	r4,-8(fp)
   21158:	2085883a 	add	r2,r4,r2
   2115c:	10800204 	addi	r2,r2,8
   21160:	10800003 	ldbu	r2,0(r2)
   21164:	18800005 	stb	r2,0(r3)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
   21168:	e0bffc17 	ldw	r2,-16(fp)
   2116c:	108000c8 	cmpgei	r2,r2,3
   21170:	1000131e 	bne	r2,zero,211c0 <fatComposeShortFilename+0x184>
   21174:	e0fffe17 	ldw	r3,-8(fp)
   21178:	e0bffc17 	ldw	r2,-16(fp)
   2117c:	1885883a 	add	r2,r3,r2
   21180:	10800204 	addi	r2,r2,8
   21184:	10800003 	ldbu	r2,0(r2)
   21188:	10803fcc 	andi	r2,r2,255
   2118c:	1080201c 	xori	r2,r2,128
   21190:	10bfe004 	addi	r2,r2,-128
   21194:	10000a26 	beq	r2,zero,211c0 <fatComposeShortFilename+0x184>
   21198:	e0fffe17 	ldw	r3,-8(fp)
   2119c:	e0bffc17 	ldw	r2,-16(fp)
   211a0:	1885883a 	add	r2,r3,r2
   211a4:	10800204 	addi	r2,r2,8
   211a8:	10800003 	ldbu	r2,0(r2)
   211ac:	10803fcc 	andi	r2,r2,255
   211b0:	1080201c 	xori	r2,r2,128
   211b4:	10bfe004 	addi	r2,r2,-128
   211b8:	10800818 	cmpnei	r2,r2,32
   211bc:	103fdc1e 	bne	r2,zero,21130 <_gp+0xfffe60f0>
            szFilename[nPos++] = pDir->Extension[i++];
    }            
    szFilename[nPos++] = 0;
   211c0:	e0bffd17 	ldw	r2,-12(fp)
   211c4:	10c00044 	addi	r3,r2,1
   211c8:	e0fffd15 	stw	r3,-12(fp)
   211cc:	1007883a 	mov	r3,r2
   211d0:	e0bfff17 	ldw	r2,-4(fp)
   211d4:	10c5883a 	add	r2,r2,r3
   211d8:	10000005 	stb	zero,0(r2)
}
   211dc:	0001883a 	nop
   211e0:	e037883a 	mov	sp,fp
   211e4:	df000017 	ldw	fp,0(sp)
   211e8:	dec00104 	addi	sp,sp,4
   211ec:	f800283a 	ret

000211f0 <Fat_FileExist>:





bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
   211f0:	deffaf04 	addi	sp,sp,-324
   211f4:	dfc05015 	stw	ra,320(sp)
   211f8:	df004f15 	stw	fp,316(sp)
   211fc:	df004f04 	addi	fp,sp,316
   21200:	e13ffe15 	stw	r4,-8(fp)
   21204:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
   21208:	e03fb115 	stw	zero,-316(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
   2120c:	e0bfb204 	addi	r2,fp,-312
   21210:	100b883a 	mov	r5,r2
   21214:	e13ffe17 	ldw	r4,-8(fp)
   21218:	0020a200 	call	20a20 <Fat_FileBrowseBegin>
   2121c:	10001a26 	beq	r2,zero,21288 <Fat_FileExist+0x98>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   21220:	00000f06 	br	21260 <Fat_FileExist+0x70>
            if (FileContext.bLongFilename){
   21224:	e0bff417 	ldw	r2,-48(fp)
   21228:	10000626 	beq	r2,zero,21244 <Fat_FileExist+0x54>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
   2122c:	e0bfb404 	addi	r2,fp,-304
   21230:	e17fff17 	ldw	r5,-4(fp)
   21234:	1009883a 	mov	r4,r2
   21238:	0020f240 	call	20f24 <fatSameLongFilename>
   2123c:	e0bfb115 	stw	r2,-316(fp)
   21240:	00000706 	br	21260 <Fat_FileExist+0x70>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
   21244:	e0bfb404 	addi	r2,fp,-304
   21248:	e17fff17 	ldw	r5,-4(fp)
   2124c:	1009883a 	mov	r4,r2
   21250:	002ee400 	call	2ee40 <strcasecmp>
   21254:	1000021e 	bne	r2,zero,21260 <Fat_FileExist+0x70>
                    bFind = TRUE;
   21258:	00800044 	movi	r2,1
   2125c:	e0bfb115 	stw	r2,-316(fp)
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   21260:	e0bfb117 	ldw	r2,-316(fp)
   21264:	1000061e 	bne	r2,zero,21280 <Fat_FileExist+0x90>
   21268:	e0ffb404 	addi	r3,fp,-304
   2126c:	e0bfb204 	addi	r2,fp,-312
   21270:	180b883a 	mov	r5,r3
   21274:	1009883a 	mov	r4,r2
   21278:	0020a8c0 	call	20a8c <Fat_FileBrowseNext>
   2127c:	103fe91e 	bne	r2,zero,21224 <_gp+0xfffe61e4>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        Fat_FileClose(Fat); 
   21280:	e13ffe17 	ldw	r4,-8(fp)
   21284:	00219cc0 	call	219cc <Fat_FileClose>
    }
    return bFind;            
   21288:	e0bfb117 	ldw	r2,-316(fp)
}    
   2128c:	e037883a 	mov	sp,fp
   21290:	dfc00117 	ldw	ra,4(sp)
   21294:	df000017 	ldw	fp,0(sp)
   21298:	dec00204 	addi	sp,sp,8
   2129c:	f800283a 	ret

000212a0 <Fat_FileOpen>:
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
   212a0:	deffae04 	addi	sp,sp,-328
   212a4:	dfc05115 	stw	ra,324(sp)
   212a8:	df005015 	stw	fp,320(sp)
   212ac:	df005004 	addi	fp,sp,320
   212b0:	e13ffe15 	stw	r4,-8(fp)
   212b4:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
   212b8:	e03fb015 	stw	zero,-320(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
   212bc:	e03fb115 	stw	zero,-316(fp)
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
   212c0:	e0bfb204 	addi	r2,fp,-312
   212c4:	100b883a 	mov	r5,r2
   212c8:	e13ffe17 	ldw	r4,-8(fp)
   212cc:	0020a200 	call	20a20 <Fat_FileBrowseBegin>
   212d0:	10003826 	beq	r2,zero,213b4 <Fat_FileOpen+0x114>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   212d4:	00000f06 	br	21314 <Fat_FileOpen+0x74>
            if (FileContext.bLongFilename){
   212d8:	e0bff417 	ldw	r2,-48(fp)
   212dc:	10000626 	beq	r2,zero,212f8 <Fat_FileOpen+0x58>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
   212e0:	e0bfb404 	addi	r2,fp,-304
   212e4:	e17fff17 	ldw	r5,-4(fp)
   212e8:	1009883a 	mov	r4,r2
   212ec:	0020f240 	call	20f24 <fatSameLongFilename>
   212f0:	e0bfb015 	stw	r2,-320(fp)
   212f4:	00000706 	br	21314 <Fat_FileOpen+0x74>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
   212f8:	e0bfb404 	addi	r2,fp,-304
   212fc:	e17fff17 	ldw	r5,-4(fp)
   21300:	1009883a 	mov	r4,r2
   21304:	002ee400 	call	2ee40 <strcasecmp>
   21308:	1000021e 	bne	r2,zero,21314 <Fat_FileOpen+0x74>
                    bFind = TRUE;
   2130c:	00800044 	movi	r2,1
   21310:	e0bfb015 	stw	r2,-320(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   21314:	e0bfb017 	ldw	r2,-320(fp)
   21318:	1000061e 	bne	r2,zero,21334 <Fat_FileOpen+0x94>
   2131c:	e0ffb404 	addi	r3,fp,-304
   21320:	e0bfb204 	addi	r2,fp,-312
   21324:	180b883a 	mov	r5,r3
   21328:	1009883a 	mov	r4,r2
   2132c:	0020a8c0 	call	20a8c <Fat_FileBrowseNext>
   21330:	103fe91e 	bne	r2,zero,212d8 <_gp+0xfffe6298>
                if (strcmpi(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        
        if (bFind){
   21334:	e0bfb017 	ldw	r2,-320(fp)
   21338:	10001e26 	beq	r2,zero,213b4 <Fat_FileOpen+0x114>
            pFile = malloc(sizeof(FAT_FILE_INFO));
   2133c:	01005004 	movi	r4,320
   21340:	002e7a80 	call	2e7a8 <malloc>
   21344:	e0bfb115 	stw	r2,-316(fp)
            if (pFile){
   21348:	e0bfb117 	ldw	r2,-316(fp)
   2134c:	10001926 	beq	r2,zero,213b4 <Fat_FileOpen+0x114>
                pFile->OpenAttribute = FILE_OPEN_READ; 
   21350:	e0bfb117 	ldw	r2,-316(fp)
   21354:	00c00044 	movi	r3,1
   21358:	10c00115 	stw	r3,4(r2)
                pFile->SeekPos = 0;
   2135c:	e0bfb117 	ldw	r2,-316(fp)
   21360:	10000215 	stw	zero,8(r2)
                pFile->Directory = FileContext;
   21364:	e0bfb117 	ldw	r2,-316(fp)
   21368:	10800504 	addi	r2,r2,20
   2136c:	e0ffb404 	addi	r3,fp,-304
   21370:	01004a04 	movi	r4,296
   21374:	200d883a 	mov	r6,r4
   21378:	180b883a 	mov	r5,r3
   2137c:	1009883a 	mov	r4,r2
   21380:	002e7d00 	call	2e7d0 <memcpy>
                pFile->IsOpened = TRUE;
   21384:	e0bfb117 	ldw	r2,-316(fp)
   21388:	00c00044 	movi	r3,1
   2138c:	10c00015 	stw	r3,0(r2)
                pFile->Cluster = FileContext.FirstLogicalCluster;
   21390:	e0bffc8b 	ldhu	r2,-14(fp)
   21394:	10ffffcc 	andi	r3,r2,65535
   21398:	e0bfb117 	ldw	r2,-316(fp)
   2139c:	10c00315 	stw	r3,12(r2)
                pFile->ClusterSeq = 0;
   213a0:	e0bfb117 	ldw	r2,-316(fp)
   213a4:	10000415 	stw	zero,16(r2)
                pFile->Fat = Fat;
   213a8:	e0bfb117 	ldw	r2,-316(fp)
   213ac:	e0fffe17 	ldw	r3,-8(fp)
   213b0:	10c04f15 	stw	r3,316(r2)
            }    
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
   213b4:	e0bfb117 	ldw	r2,-316(fp)
}
   213b8:	e037883a 	mov	sp,fp
   213bc:	dfc00117 	ldw	ra,4(sp)
   213c0:	df000017 	ldw	fp,0(sp)
   213c4:	dec00204 	addi	sp,sp,8
   213c8:	f800283a 	ret

000213cc <Fat_FileSize>:


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
   213cc:	defffd04 	addi	sp,sp,-12
   213d0:	df000215 	stw	fp,8(sp)
   213d4:	df000204 	addi	fp,sp,8
   213d8:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   213dc:	e0bfff17 	ldw	r2,-4(fp)
   213e0:	e0bffe15 	stw	r2,-8(fp)
    if (f->IsOpened)
   213e4:	e0bffe17 	ldw	r2,-8(fp)
   213e8:	10800017 	ldw	r2,0(r2)
   213ec:	10000326 	beq	r2,zero,213fc <Fat_FileSize+0x30>
        return f->Directory.FileSize;
   213f0:	e0bffe17 	ldw	r2,-8(fp)
   213f4:	10804e17 	ldw	r2,312(r2)
   213f8:	00000106 	br	21400 <Fat_FileSize+0x34>
    return 0;        
   213fc:	0005883a 	mov	r2,zero
}
   21400:	e037883a 	mov	sp,fp
   21404:	df000017 	ldw	fp,0(sp)
   21408:	dec00104 	addi	sp,sp,4
   2140c:	f800283a 	ret

00021410 <Fat_FileRead>:


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
   21410:	deffef04 	addi	sp,sp,-68
   21414:	dfc01015 	stw	ra,64(sp)
   21418:	df000f15 	stw	fp,60(sp)
   2141c:	df000f04 	addi	fp,sp,60
   21420:	e13ffd15 	stw	r4,-12(fp)
   21424:	e17ffe15 	stw	r5,-8(fp)
   21428:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   2142c:	e0bffd17 	ldw	r2,-12(fp)
   21430:	e0bff915 	stw	r2,-28(fp)
    VOLUME_INFO *pVol;
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
   21434:	e03ff415 	stw	zero,-48(fp)
    int s;
    bool bSuccess= TRUE;
   21438:	00800044 	movi	r2,1
   2143c:	e0bff715 	stw	r2,-36(fp)
    
    if (!f || !f->Fat)
   21440:	e0bff917 	ldw	r2,-28(fp)
   21444:	10000326 	beq	r2,zero,21454 <Fat_FileRead+0x44>
   21448:	e0bff917 	ldw	r2,-28(fp)
   2144c:	10804f17 	ldw	r2,316(r2)
   21450:	1000021e 	bne	r2,zero,2145c <Fat_FileRead+0x4c>
        return FALSE;
   21454:	0005883a 	mov	r2,zero
   21458:	00011706 	br	218b8 <Fat_FileRead+0x4a8>
    pVol = (VOLUME_INFO *)f->Fat;        
   2145c:	e0bff917 	ldw	r2,-28(fp)
   21460:	10804f17 	ldw	r2,316(r2)
   21464:	e0bffa15 	stw	r2,-24(fp)
    
    if (!f->IsOpened){
   21468:	e0bff917 	ldw	r2,-28(fp)
   2146c:	10800017 	ldw	r2,0(r2)
   21470:	1000071e 	bne	r2,zero,21490 <Fat_FileRead+0x80>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
   21474:	014000f4 	movhi	r5,3
   21478:	29464e04 	addi	r5,r5,6456
   2147c:	010000f4 	movhi	r4,3
   21480:	21065804 	addi	r4,r4,6496
   21484:	002ea900 	call	2ea90 <printf>
        return bSuccess;
   21488:	e0bff717 	ldw	r2,-36(fp)
   2148c:	00010a06 	br	218b8 <Fat_FileRead+0x4a8>
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
   21490:	e0bffa17 	ldw	r2,-24(fp)
   21494:	10800c17 	ldw	r2,48(r2)
   21498:	e0bffb15 	stw	r2,-20(fp)
    Pos = f->SeekPos;
   2149c:	e0bff917 	ldw	r2,-28(fp)
   214a0:	10800217 	ldw	r2,8(r2)
   214a4:	e0bff115 	stw	r2,-60(fp)
    if (BytesPerCluster == 32768){
   214a8:	e0fffb17 	ldw	r3,-20(fp)
   214ac:	00a00014 	movui	r2,32768
   214b0:	18800a1e 	bne	r3,r2,214dc <Fat_FileRead+0xcc>
        nClusterSeq = Pos >> 15;
   214b4:	e0bff117 	ldw	r2,-60(fp)
   214b8:	1004d3fa 	srli	r2,r2,15
   214bc:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 15);
   214c0:	e0bff917 	ldw	r2,-28(fp)
   214c4:	10800417 	ldw	r2,16(r2)
   214c8:	100493fa 	slli	r2,r2,15
   214cc:	e0fff117 	ldw	r3,-60(fp)
   214d0:	1885c83a 	sub	r2,r3,r2
   214d4:	e0bff115 	stw	r2,-60(fp)
   214d8:	00002706 	br	21578 <Fat_FileRead+0x168>
    }else if (BytesPerCluster == 16384){
   214dc:	e0bffb17 	ldw	r2,-20(fp)
   214e0:	10900018 	cmpnei	r2,r2,16384
   214e4:	10000a1e 	bne	r2,zero,21510 <Fat_FileRead+0x100>
        nClusterSeq = Pos >> 14;
   214e8:	e0bff117 	ldw	r2,-60(fp)
   214ec:	1004d3ba 	srli	r2,r2,14
   214f0:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 14);
   214f4:	e0bff917 	ldw	r2,-28(fp)
   214f8:	10800417 	ldw	r2,16(r2)
   214fc:	100493ba 	slli	r2,r2,14
   21500:	e0fff117 	ldw	r3,-60(fp)
   21504:	1885c83a 	sub	r2,r3,r2
   21508:	e0bff115 	stw	r2,-60(fp)
   2150c:	00001a06 	br	21578 <Fat_FileRead+0x168>
    }else if (BytesPerCluster == 2048){
   21510:	e0bffb17 	ldw	r2,-20(fp)
   21514:	10820018 	cmpnei	r2,r2,2048
   21518:	10000a1e 	bne	r2,zero,21544 <Fat_FileRead+0x134>
        nClusterSeq = Pos >> 11;
   2151c:	e0bff117 	ldw	r2,-60(fp)
   21520:	1004d2fa 	srli	r2,r2,11
   21524:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 11);
   21528:	e0bff917 	ldw	r2,-28(fp)
   2152c:	10800417 	ldw	r2,16(r2)
   21530:	100492fa 	slli	r2,r2,11
   21534:	e0fff117 	ldw	r3,-60(fp)
   21538:	1885c83a 	sub	r2,r3,r2
   2153c:	e0bff115 	stw	r2,-60(fp)
   21540:	00000d06 	br	21578 <Fat_FileRead+0x168>
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
   21544:	e17ffb17 	ldw	r5,-20(fp)
   21548:	e13ff117 	ldw	r4,-60(fp)
   2154c:	002b2a00 	call	2b2a0 <__udivsi3>
   21550:	e0bff515 	stw	r2,-44(fp)
        Pos -= f->ClusterSeq*BytesPerCluster;
   21554:	e0bff917 	ldw	r2,-28(fp)
   21558:	10800417 	ldw	r2,16(r2)
   2155c:	e17ffb17 	ldw	r5,-20(fp)
   21560:	1009883a 	mov	r4,r2
   21564:	002b35c0 	call	2b35c <__mulsi3>
   21568:	1007883a 	mov	r3,r2
   2156c:	e0bff117 	ldw	r2,-60(fp)
   21570:	10c5c83a 	sub	r2,r2,r3
   21574:	e0bff115 	stw	r2,-60(fp)
    }    
        
       
    Cluster = f->Cluster;
   21578:	e0bff917 	ldw	r2,-28(fp)
   2157c:	10800317 	ldw	r2,12(r2)
   21580:	e0bff315 	stw	r2,-52(fp)
    if (nClusterSeq != f->ClusterSeq){
   21584:	e0bff917 	ldw	r2,-28(fp)
   21588:	10c00417 	ldw	r3,16(r2)
   2158c:	e0bff517 	ldw	r2,-44(fp)
   21590:	1880bb26 	beq	r3,r2,21880 <Fat_FileRead+0x470>
        Cluster = f->Cluster;  //11/20/2007, richard
   21594:	e0bff917 	ldw	r2,-28(fp)
   21598:	10800317 	ldw	r2,12(r2)
   2159c:	e0bff315 	stw	r2,-52(fp)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
   215a0:	00001a06 	br	2160c <Fat_FileRead+0x1fc>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
   215a4:	e17ff317 	ldw	r5,-52(fp)
   215a8:	e13ffa17 	ldw	r4,-24(fp)
   215ac:	0021d600 	call	21d60 <fatNextCluster>
   215b0:	e0bffc15 	stw	r2,-16(fp)
            if (NextCluster == 0){
   215b4:	e0bffc17 	ldw	r2,-16(fp)
   215b8:	1000061e 	bne	r2,zero,215d4 <Fat_FileRead+0x1c4>
                bSuccess = FALSE;
   215bc:	e03ff715 	stw	zero,-36(fp)
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
   215c0:	e17ff317 	ldw	r5,-52(fp)
   215c4:	010000f4 	movhi	r4,3
   215c8:	21065804 	addi	r4,r4,6496
   215cc:	002ea900 	call	2ea90 <printf>
   215d0:	00000206 	br	215dc <Fat_FileRead+0x1cc>
            }else{
                Cluster = NextCluster;
   215d4:	e0bffc17 	ldw	r2,-16(fp)
   215d8:	e0bff315 	stw	r2,-52(fp)
            }        
            Pos -= BytesPerCluster;
   215dc:	e0fff117 	ldw	r3,-60(fp)
   215e0:	e0bffb17 	ldw	r2,-20(fp)
   215e4:	1885c83a 	sub	r2,r3,r2
   215e8:	e0bff115 	stw	r2,-60(fp)
            f->Cluster = Cluster;
   215ec:	e0bff917 	ldw	r2,-28(fp)
   215f0:	e0fff317 	ldw	r3,-52(fp)
   215f4:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
   215f8:	e0bff917 	ldw	r2,-28(fp)
   215fc:	10800417 	ldw	r2,16(r2)
   21600:	10c00044 	addi	r3,r2,1
   21604:	e0bff917 	ldw	r2,-28(fp)
   21608:	10c00415 	stw	r3,16(r2)
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
   2160c:	e0fff117 	ldw	r3,-60(fp)
   21610:	e0bffb17 	ldw	r2,-20(fp)
   21614:	18809a36 	bltu	r3,r2,21880 <Fat_FileRead+0x470>
   21618:	e0bff717 	ldw	r2,-36(fp)
   2161c:	103fe11e 	bne	r2,zero,215a4 <_gp+0xfffe6564>
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
   21620:	00009706 	br	21880 <Fat_FileRead+0x470>
        if (pVol->BPB_SecPerCluster == 32)
   21624:	e0bffa17 	ldw	r2,-24(fp)
   21628:	10800717 	ldw	r2,28(r2)
   2162c:	10800818 	cmpnei	r2,r2,32
   21630:	1000081e 	bne	r2,zero,21654 <Fat_FileRead+0x244>
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
   21634:	e0bff317 	ldw	r2,-52(fp)
   21638:	10bfff84 	addi	r2,r2,-2
   2163c:	1006917a 	slli	r3,r2,5
   21640:	e0bffa17 	ldw	r2,-24(fp)
   21644:	10800f17 	ldw	r2,60(r2)
   21648:	1885883a 	add	r2,r3,r2
   2164c:	e0bff215 	stw	r2,-56(fp)
   21650:	00001806 	br	216b4 <Fat_FileRead+0x2a4>
        else if (pVol->BPB_SecPerCluster == 64)
   21654:	e0bffa17 	ldw	r2,-24(fp)
   21658:	10800717 	ldw	r2,28(r2)
   2165c:	10801018 	cmpnei	r2,r2,64
   21660:	1000081e 	bne	r2,zero,21684 <Fat_FileRead+0x274>
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
   21664:	e0bff317 	ldw	r2,-52(fp)
   21668:	10bfff84 	addi	r2,r2,-2
   2166c:	100691ba 	slli	r3,r2,6
   21670:	e0bffa17 	ldw	r2,-24(fp)
   21674:	10800f17 	ldw	r2,60(r2)
   21678:	1885883a 	add	r2,r3,r2
   2167c:	e0bff215 	stw	r2,-56(fp)
   21680:	00000c06 	br	216b4 <Fat_FileRead+0x2a4>
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
   21684:	e0bff317 	ldw	r2,-52(fp)
   21688:	10ffff84 	addi	r3,r2,-2
   2168c:	e0bffa17 	ldw	r2,-24(fp)
   21690:	10800717 	ldw	r2,28(r2)
   21694:	100b883a 	mov	r5,r2
   21698:	1809883a 	mov	r4,r3
   2169c:	002b35c0 	call	2b35c <__mulsi3>
   216a0:	1007883a 	mov	r3,r2
   216a4:	e0bffa17 	ldw	r2,-24(fp)
   216a8:	10800f17 	ldw	r2,60(r2)
   216ac:	1885883a 	add	r2,r3,r2
   216b0:	e0bff215 	stw	r2,-56(fp)
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
   216b4:	e03ff615 	stw	zero,-40(fp)
   216b8:	00004e06 	br	217f4 <Fat_FileRead+0x3e4>
            if (Pos >= pVol->BPB_BytsPerSec){
   216bc:	e0bffa17 	ldw	r2,-24(fp)
   216c0:	10800617 	ldw	r2,24(r2)
   216c4:	e0fff117 	ldw	r3,-60(fp)
   216c8:	18800636 	bltu	r3,r2,216e4 <Fat_FileRead+0x2d4>
                Pos -= pVol->BPB_BytsPerSec;
   216cc:	e0bffa17 	ldw	r2,-24(fp)
   216d0:	10800617 	ldw	r2,24(r2)
   216d4:	e0fff117 	ldw	r3,-60(fp)
   216d8:	1885c83a 	sub	r2,r3,r2
   216dc:	e0bff115 	stw	r2,-60(fp)
   216e0:	00003e06 	br	217dc <Fat_FileRead+0x3cc>
            }else{
                // read secter data
                bSuccess = fatReadSecter(pVol, PhysicalSecter);
   216e4:	e17ff217 	ldw	r5,-56(fp)
   216e8:	e13ffa17 	ldw	r4,-24(fp)
   216ec:	00226cc0 	call	226cc <fatReadSecter>
   216f0:	e0bff715 	stw	r2,-36(fp)
                
                if (bSuccess){
   216f4:	e0bff717 	ldw	r2,-36(fp)
   216f8:	10003826 	beq	r2,zero,217dc <Fat_FileRead+0x3cc>
                    // copy data to user buffer
                
                    int nCopyCount;
                    nCopyCount = pVol->BPB_BytsPerSec;
   216fc:	e0bffa17 	ldw	r2,-24(fp)
   21700:	10800617 	ldw	r2,24(r2)
   21704:	e0bff815 	stw	r2,-32(fp)
                    if (Pos)
   21708:	e0bff117 	ldw	r2,-60(fp)
   2170c:	10000426 	beq	r2,zero,21720 <Fat_FileRead+0x310>
                        nCopyCount -= Pos;
   21710:	e0fff817 	ldw	r3,-32(fp)
   21714:	e0bff117 	ldw	r2,-60(fp)
   21718:	1885c83a 	sub	r2,r3,r2
   2171c:	e0bff815 	stw	r2,-32(fp)
                    if (nCopyCount > (nBufferSize-nReadCount))
   21720:	e0ffff17 	ldw	r3,-4(fp)
   21724:	e0bff417 	ldw	r2,-48(fp)
   21728:	1887c83a 	sub	r3,r3,r2
   2172c:	e0bff817 	ldw	r2,-32(fp)
   21730:	1880042e 	bgeu	r3,r2,21744 <Fat_FileRead+0x334>
                        nCopyCount = nBufferSize-nReadCount;
   21734:	e0ffff17 	ldw	r3,-4(fp)
   21738:	e0bff417 	ldw	r2,-48(fp)
   2173c:	1885c83a 	sub	r2,r3,r2
   21740:	e0bff815 	stw	r2,-32(fp)
                    if (nCopyCount == 512){
   21744:	e0bff817 	ldw	r2,-32(fp)
   21748:	10808018 	cmpnei	r2,r2,512
   2174c:	1000111e 	bne	r2,zero,21794 <Fat_FileRead+0x384>
                        memcpy((char *)pBuffer+nReadCount, pVol->Secter_Data, 512);
   21750:	e0fffe17 	ldw	r3,-8(fp)
   21754:	e0bff417 	ldw	r2,-48(fp)
   21758:	1887883a 	add	r3,r3,r2
   2175c:	e0bffa17 	ldw	r2,-24(fp)
   21760:	10801004 	addi	r2,r2,64
   21764:	01808004 	movi	r6,512
   21768:	100b883a 	mov	r5,r2
   2176c:	1809883a 	mov	r4,r3
   21770:	002e7d00 	call	2e7d0 <memcpy>
                        nReadCount += nCopyCount;
   21774:	e0bff817 	ldw	r2,-32(fp)
   21778:	e0fff417 	ldw	r3,-48(fp)
   2177c:	1885883a 	add	r2,r3,r2
   21780:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
   21784:	e0bff117 	ldw	r2,-60(fp)
   21788:	10001426 	beq	r2,zero,217dc <Fat_FileRead+0x3cc>
                            Pos = 0;
   2178c:	e03ff115 	stw	zero,-60(fp)
   21790:	00001206 	br	217dc <Fat_FileRead+0x3cc>
                    }else{
                        memcpy((void *)((char *)pBuffer+nReadCount), pVol->Secter_Data+Pos,nCopyCount);
   21794:	e0fffe17 	ldw	r3,-8(fp)
   21798:	e0bff417 	ldw	r2,-48(fp)
   2179c:	1889883a 	add	r4,r3,r2
   217a0:	e0bffa17 	ldw	r2,-24(fp)
   217a4:	10c01004 	addi	r3,r2,64
   217a8:	e0bff117 	ldw	r2,-60(fp)
   217ac:	1885883a 	add	r2,r3,r2
   217b0:	e0fff817 	ldw	r3,-32(fp)
   217b4:	180d883a 	mov	r6,r3
   217b8:	100b883a 	mov	r5,r2
   217bc:	002e7d00 	call	2e7d0 <memcpy>
                        nReadCount += nCopyCount;
   217c0:	e0bff817 	ldw	r2,-32(fp)
   217c4:	e0fff417 	ldw	r3,-48(fp)
   217c8:	1885883a 	add	r2,r3,r2
   217cc:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
   217d0:	e0bff117 	ldw	r2,-60(fp)
   217d4:	10000126 	beq	r2,zero,217dc <Fat_FileRead+0x3cc>
                            Pos = 0;
   217d8:	e03ff115 	stw	zero,-60(fp)
                    }         
                }    // if bSuccess
                    
            }
            PhysicalSecter++;
   217dc:	e0bff217 	ldw	r2,-56(fp)
   217e0:	10800044 	addi	r2,r2,1
   217e4:	e0bff215 	stw	r2,-56(fp)
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else if (pVol->BPB_SecPerCluster == 64)
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
   217e8:	e0bff617 	ldw	r2,-40(fp)
   217ec:	10800044 	addi	r2,r2,1
   217f0:	e0bff615 	stw	r2,-40(fp)
   217f4:	e0bffa17 	ldw	r2,-24(fp)
   217f8:	10800717 	ldw	r2,28(r2)
   217fc:	e0fff617 	ldw	r3,-40(fp)
   21800:	1880052e 	bgeu	r3,r2,21818 <Fat_FileRead+0x408>
   21804:	e0bfff17 	ldw	r2,-4(fp)
   21808:	e0fff417 	ldw	r3,-48(fp)
   2180c:	1880022e 	bgeu	r3,r2,21818 <Fat_FileRead+0x408>
   21810:	e0bff717 	ldw	r2,-36(fp)
   21814:	103fa91e 	bne	r2,zero,216bc <_gp+0xfffe667c>
            }
            PhysicalSecter++;
        }    
            
        // next cluster
        if (nReadCount < nBufferSize){
   21818:	e0bfff17 	ldw	r2,-4(fp)
   2181c:	e0fff417 	ldw	r3,-48(fp)
   21820:	1880172e 	bgeu	r3,r2,21880 <Fat_FileRead+0x470>
            NextCluster = fatNextCluster(pVol, Cluster); 
   21824:	e17ff317 	ldw	r5,-52(fp)
   21828:	e13ffa17 	ldw	r4,-24(fp)
   2182c:	0021d600 	call	21d60 <fatNextCluster>
   21830:	e0bffc15 	stw	r2,-16(fp)
            if (NextCluster == 0){
   21834:	e0bffc17 	ldw	r2,-16(fp)
   21838:	1000071e 	bne	r2,zero,21858 <Fat_FileRead+0x448>
                bSuccess = FALSE;
   2183c:	e03ff715 	stw	zero,-36(fp)
                FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
   21840:	014000f4 	movhi	r5,3
   21844:	29465c04 	addi	r5,r5,6512
   21848:	010000f4 	movhi	r4,3
   2184c:	21065804 	addi	r4,r4,6496
   21850:	002ea900 	call	2ea90 <printf>
   21854:	00000206 	br	21860 <Fat_FileRead+0x450>
            }else{
                Cluster = NextCluster;
   21858:	e0bffc17 	ldw	r2,-16(fp)
   2185c:	e0bff315 	stw	r2,-52(fp)
            }    
            //    
            f->ClusterSeq++; 
   21860:	e0bff917 	ldw	r2,-28(fp)
   21864:	10800417 	ldw	r2,16(r2)
   21868:	10c00044 	addi	r3,r2,1
   2186c:	e0bff917 	ldw	r2,-28(fp)
   21870:	10c00415 	stw	r3,16(r2)
            f->Cluster = Cluster;
   21874:	e0bff917 	ldw	r2,-28(fp)
   21878:	e0fff317 	ldw	r3,-52(fp)
   2187c:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
   21880:	e0bfff17 	ldw	r2,-4(fp)
   21884:	e0fff417 	ldw	r3,-48(fp)
   21888:	1880022e 	bgeu	r3,r2,21894 <Fat_FileRead+0x484>
   2188c:	e0bff717 	ldw	r2,-36(fp)
   21890:	103f641e 	bne	r2,zero,21624 <_gp+0xfffe65e4>
            f->ClusterSeq++; 
            f->Cluster = Cluster;
        }                    
    }
    
    if (bSuccess){
   21894:	e0bff717 	ldw	r2,-36(fp)
   21898:	10000626 	beq	r2,zero,218b4 <Fat_FileRead+0x4a4>
        f->SeekPos += nBufferSize;
   2189c:	e0bff917 	ldw	r2,-28(fp)
   218a0:	10c00217 	ldw	r3,8(r2)
   218a4:	e0bfff17 	ldw	r2,-4(fp)
   218a8:	1887883a 	add	r3,r3,r2
   218ac:	e0bff917 	ldw	r2,-28(fp)
   218b0:	10c00215 	stw	r3,8(r2)
    }        
        
    
    return bSuccess;
   218b4:	e0bff717 	ldw	r2,-36(fp)
}
   218b8:	e037883a 	mov	sp,fp
   218bc:	dfc00117 	ldw	ra,4(sp)
   218c0:	df000017 	ldw	fp,0(sp)
   218c4:	dec00204 	addi	sp,sp,8
   218c8:	f800283a 	ret

000218cc <Fat_FileSeek>:


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
   218cc:	defff904 	addi	sp,sp,-28
   218d0:	df000615 	stw	fp,24(sp)
   218d4:	df000604 	addi	fp,sp,24
   218d8:	e13ffd15 	stw	r4,-12(fp)
   218dc:	e17ffe15 	stw	r5,-8(fp)
   218e0:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   218e4:	e0bffd17 	ldw	r2,-12(fp)
   218e8:	e0bffb15 	stw	r2,-20(fp)
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
   218ec:	00800044 	movi	r2,1
   218f0:	e0bffa15 	stw	r2,-24(fp)

    if (!f || !f->Fat)
   218f4:	e0bffb17 	ldw	r2,-20(fp)
   218f8:	10000326 	beq	r2,zero,21908 <Fat_FileSeek+0x3c>
   218fc:	e0bffb17 	ldw	r2,-20(fp)
   21900:	10804f17 	ldw	r2,316(r2)
   21904:	1000021e 	bne	r2,zero,21910 <Fat_FileSeek+0x44>
        return FALSE;
   21908:	0005883a 	mov	r2,zero
   2190c:	00002b06 	br	219bc <Fat_FileSeek+0xf0>
    pVol = (VOLUME_INFO *)f->Fat;        
   21910:	e0bffb17 	ldw	r2,-20(fp)
   21914:	10804f17 	ldw	r2,316(r2)
   21918:	e0bffc15 	stw	r2,-16(fp)
    
    if (!f->IsOpened)
   2191c:	e0bffb17 	ldw	r2,-20(fp)
   21920:	10800017 	ldw	r2,0(r2)
   21924:	1000021e 	bne	r2,zero,21930 <Fat_FileSeek+0x64>
        return FALSE;
   21928:	0005883a 	mov	r2,zero
   2192c:	00002306 	br	219bc <Fat_FileSeek+0xf0>
        
    switch(SeekPos){
   21930:	e0bffe17 	ldw	r2,-8(fp)
   21934:	10c00060 	cmpeqi	r3,r2,1
   21938:	1800081e 	bne	r3,zero,2195c <Fat_FileSeek+0x90>
   2193c:	0080032e 	bgeu	zero,r2,2194c <Fat_FileSeek+0x80>
   21940:	108000a0 	cmpeqi	r2,r2,2
   21944:	10000c1e 	bne	r2,zero,21978 <Fat_FileSeek+0xac>
   21948:	00001206 	br	21994 <Fat_FileSeek+0xc8>
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
   2194c:	e0ffff17 	ldw	r3,-4(fp)
   21950:	e0bffb17 	ldw	r2,-20(fp)
   21954:	10c00215 	stw	r3,8(r2)
            break;
   21958:	00001006 	br	2199c <Fat_FileSeek+0xd0>
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
   2195c:	e0bffb17 	ldw	r2,-20(fp)
   21960:	10c00217 	ldw	r3,8(r2)
   21964:	e0bfff17 	ldw	r2,-4(fp)
   21968:	1887883a 	add	r3,r3,r2
   2196c:	e0bffb17 	ldw	r2,-20(fp)
   21970:	10c00215 	stw	r3,8(r2)
            break;
   21974:	00000906 	br	2199c <Fat_FileSeek+0xd0>
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
   21978:	e0bffb17 	ldw	r2,-20(fp)
   2197c:	10c04e17 	ldw	r3,312(r2)
   21980:	e0bfff17 	ldw	r2,-4(fp)
   21984:	1887883a 	add	r3,r3,r2
   21988:	e0bffb17 	ldw	r2,-20(fp)
   2198c:	10c00215 	stw	r3,8(r2)
            break;
   21990:	00000206 	br	2199c <Fat_FileSeek+0xd0>
        default:
            bSuccess = FALSE;
   21994:	e03ffa15 	stw	zero,-24(fp)
            break;    
   21998:	0001883a 	nop
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
   2199c:	e0bffb17 	ldw	r2,-20(fp)
   219a0:	10804d8b 	ldhu	r2,310(r2)
   219a4:	10ffffcc 	andi	r3,r2,65535
   219a8:	e0bffb17 	ldw	r2,-20(fp)
   219ac:	10c00315 	stw	r3,12(r2)
    f->ClusterSeq = 0;
   219b0:	e0bffb17 	ldw	r2,-20(fp)
   219b4:	10000415 	stw	zero,16(r2)
    
    return bSuccess;
   219b8:	e0bffa17 	ldw	r2,-24(fp)
    
}
   219bc:	e037883a 	mov	sp,fp
   219c0:	df000017 	ldw	fp,0(sp)
   219c4:	dec00104 	addi	sp,sp,4
   219c8:	f800283a 	ret

000219cc <Fat_FileClose>:

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
   219cc:	defffc04 	addi	sp,sp,-16
   219d0:	dfc00315 	stw	ra,12(sp)
   219d4:	df000215 	stw	fp,8(sp)
   219d8:	df000204 	addi	fp,sp,8
   219dc:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   219e0:	e0bfff17 	ldw	r2,-4(fp)
   219e4:	e0bffe15 	stw	r2,-8(fp)
    if (!f)
   219e8:	e0bffe17 	ldw	r2,-8(fp)
   219ec:	10000326 	beq	r2,zero,219fc <Fat_FileClose+0x30>
        return;
        
    free(f);        
   219f0:	e13ffe17 	ldw	r4,-8(fp)
   219f4:	002e7bc0 	call	2e7bc <free>
   219f8:	00000106 	br	21a00 <Fat_FileClose+0x34>
}

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    if (!f)
        return;
   219fc:	0001883a 	nop
        
    free(f);        
}
   21a00:	e037883a 	mov	sp,fp
   21a04:	dfc00117 	ldw	ra,4(sp)
   21a08:	df000017 	ldw	fp,0(sp)
   21a0c:	dec00204 	addi	sp,sp,8
   21a10:	f800283a 	ret

00021a14 <Fat_SpeedTest>:



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
   21a14:	deff7304 	addi	sp,sp,-564
   21a18:	dfc08c15 	stw	ra,560(sp)
   21a1c:	df008b15 	stw	fp,556(sp)
   21a20:	dc008a15 	stw	r16,552(sp)
   21a24:	df008b04 	addi	fp,sp,556
   21a28:	e13ffd15 	stw	r4,-12(fp)
   21a2c:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = TRUE;
   21a30:	00800044 	movi	r2,1
   21a34:	e0bf7515 	stw	r2,-556(fp)
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
   21a38:	e03f7615 	stw	zero,-552(fp)
    int nSecter = 0;
   21a3c:	e03f7715 	stw	zero,-548(fp)
    float fMegaBytePerSec = 0;
   21a40:	e03f7815 	stw	zero,-544(fp)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
   21a44:	e0bffd17 	ldw	r2,-12(fp)
   21a48:	e0bf7915 	stw	r2,-540(fp)
    if (!pVol)
   21a4c:	e0bf7917 	ldw	r2,-540(fp)
   21a50:	1000021e 	bne	r2,zero,21a5c <Fat_SpeedTest+0x48>
        return 0;
   21a54:	0005883a 	mov	r2,zero
   21a58:	00005a06 	br	21bc4 <Fat_SpeedTest+0x1b0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   21a5c:	d0a0dc17 	ldw	r2,-31888(gp)
    time_start = alt_nticks();
   21a60:	e0bf7a15 	stw	r2,-536(fp)
   21a64:	d420dc17 	ldw	r16,-31888(gp)
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
   21a68:	0140fa04 	movi	r5,1000
   21a6c:	e13ffe17 	ldw	r4,-8(fp)
   21a70:	002b35c0 	call	2b35c <__mulsi3>
   21a74:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21a78:	d0a0db17 	ldw	r2,-31892(gp)
   21a7c:	100b883a 	mov	r5,r2
   21a80:	1809883a 	mov	r4,r3
   21a84:	002b2a00 	call	2b2a0 <__udivsi3>
   21a88:	8085883a 	add	r2,r16,r2
   21a8c:	e0bf7b15 	stw	r2,-532(fp)
    while(alt_nticks() < time_finish && bSuccess){
   21a90:	00001106 	br	21ad8 <Fat_SpeedTest+0xc4>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
   21a94:	e0bf7917 	ldw	r2,-540(fp)
   21a98:	10800117 	ldw	r2,4(r2)
   21a9c:	e0ff7917 	ldw	r3,-540(fp)
   21aa0:	18c00017 	ldw	r3,0(r3)
   21aa4:	e13f7717 	ldw	r4,-548(fp)
   21aa8:	e17f7d04 	addi	r5,fp,-524
   21aac:	280d883a 	mov	r6,r5
   21ab0:	200b883a 	mov	r5,r4
   21ab4:	1809883a 	mov	r4,r3
   21ab8:	103ee83a 	callr	r2
   21abc:	e0bf7515 	stw	r2,-556(fp)
        nSecter++;
   21ac0:	e0bf7717 	ldw	r2,-548(fp)
   21ac4:	10800044 	addi	r2,r2,1
   21ac8:	e0bf7715 	stw	r2,-548(fp)
        TotalReadBytes += sizeof(szBlock);
   21acc:	e0bf7617 	ldw	r2,-552(fp)
   21ad0:	10808004 	addi	r2,r2,512
   21ad4:	e0bf7615 	stw	r2,-552(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   21ad8:	d0e0dc17 	ldw	r3,-31888(gp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
   21adc:	e0bf7b17 	ldw	r2,-532(fp)
   21ae0:	1880022e 	bgeu	r3,r2,21aec <Fat_SpeedTest+0xd8>
   21ae4:	e0bf7517 	ldw	r2,-556(fp)
   21ae8:	103fea1e 	bne	r2,zero,21a94 <_gp+0xfffe6a54>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
        nSecter++;
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
   21aec:	e0bf7517 	ldw	r2,-556(fp)
   21af0:	10003326 	beq	r2,zero,21bc0 <Fat_SpeedTest+0x1ac>
   21af4:	d0e0dc17 	ldw	r3,-31888(gp)
        time_elapsed = alt_nticks() - time_start;
   21af8:	e0bf7a17 	ldw	r2,-536(fp)
   21afc:	1885c83a 	sub	r2,r3,r2
   21b00:	e0bf7c15 	stw	r2,-528(fp)
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
   21b04:	e13f7617 	ldw	r4,-552(fp)
   21b08:	002bbf40 	call	2bbf4 <__floatunsisf>
   21b0c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21b10:	d0a0db17 	ldw	r2,-31892(gp)
   21b14:	1009883a 	mov	r4,r2
   21b18:	002bbf40 	call	2bbf4 <__floatunsisf>
   21b1c:	1007883a 	mov	r3,r2
   21b20:	180b883a 	mov	r5,r3
   21b24:	8009883a 	mov	r4,r16
   21b28:	002b7c40 	call	2b7c4 <__mulsf3>
   21b2c:	1007883a 	mov	r3,r2
   21b30:	1821883a 	mov	r16,r3
   21b34:	e13f7c17 	ldw	r4,-528(fp)
   21b38:	002bbf40 	call	2bbf4 <__floatunsisf>
   21b3c:	1007883a 	mov	r3,r2
   21b40:	180b883a 	mov	r5,r3
   21b44:	8009883a 	mov	r4,r16
   21b48:	002b3840 	call	2b384 <__divsf3>
   21b4c:	1007883a 	mov	r3,r2
   21b50:	1805883a 	mov	r2,r3
   21b54:	1009883a 	mov	r4,r2
   21b58:	002e47c0 	call	2e47c <__extendsfdf2>
   21b5c:	1011883a 	mov	r8,r2
   21b60:	1813883a 	mov	r9,r3
   21b64:	000d883a 	mov	r6,zero
   21b68:	01d02434 	movhi	r7,16528
   21b6c:	4009883a 	mov	r4,r8
   21b70:	480b883a 	mov	r5,r9
   21b74:	002c5900 	call	2c590 <__divdf3>
   21b78:	1009883a 	mov	r4,r2
   21b7c:	180b883a 	mov	r5,r3
   21b80:	2005883a 	mov	r2,r4
   21b84:	2807883a 	mov	r3,r5
   21b88:	000d883a 	mov	r6,zero
   21b8c:	01d02434 	movhi	r7,16528
   21b90:	1009883a 	mov	r4,r2
   21b94:	180b883a 	mov	r5,r3
   21b98:	002c5900 	call	2c590 <__divdf3>
   21b9c:	1009883a 	mov	r4,r2
   21ba0:	180b883a 	mov	r5,r3
   21ba4:	2005883a 	mov	r2,r4
   21ba8:	2807883a 	mov	r3,r5
   21bac:	1009883a 	mov	r4,r2
   21bb0:	180b883a 	mov	r5,r3
   21bb4:	002e58c0 	call	2e58c <__truncdfsf2>
   21bb8:	1007883a 	mov	r3,r2
   21bbc:	e0ff7815 	stw	r3,-544(fp)
    }        
    return fMegaBytePerSec;
   21bc0:	e0bf7817 	ldw	r2,-544(fp)
   21bc4:	1007883a 	mov	r3,r2
    
   
}
   21bc8:	1805883a 	mov	r2,r3
   21bcc:	e6ffff04 	addi	sp,fp,-4
   21bd0:	dfc00217 	ldw	ra,8(sp)
   21bd4:	df000117 	ldw	fp,4(sp)
   21bd8:	dc000017 	ldw	r16,0(sp)
   21bdc:	dec00304 	addi	sp,sp,12
   21be0:	f800283a 	ret

00021be4 <fat16ClusterType>:
//extern VOLUME_INFO gVolumeInfo;




CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
   21be4:	defffd04 	addi	sp,sp,-12
   21be8:	df000215 	stw	fp,8(sp)
   21bec:	df000204 	addi	fp,sp,8
   21bf0:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
   21bf4:	e0bfff17 	ldw	r2,-4(fp)
   21bf8:	10bfffcc 	andi	r2,r2,65535
   21bfc:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFF0)
   21c00:	e0bfff17 	ldw	r2,-4(fp)
   21c04:	10000626 	beq	r2,zero,21c20 <fat16ClusterType+0x3c>
   21c08:	e0bfff17 	ldw	r2,-4(fp)
   21c0c:	10bffc28 	cmpgeui	r2,r2,65520
   21c10:	1000031e 	bne	r2,zero,21c20 <fat16ClusterType+0x3c>
        Type = CLUSTER_NEXT_INFILE;
   21c14:	00800104 	movi	r2,4
   21c18:	e0bffe15 	stw	r2,-8(fp)
   21c1c:	00001806 	br	21c80 <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
   21c20:	e0bfff17 	ldw	r2,-4(fp)
   21c24:	10bffe30 	cmpltui	r2,r2,65528
   21c28:	1000031e 	bne	r2,zero,21c38 <fat16ClusterType+0x54>
        Type = CLUSTER_LAST_INFILE;
   21c2c:	008000c4 	movi	r2,3
   21c30:	e0bffe15 	stw	r2,-8(fp)
   21c34:	00001206 	br	21c80 <fat16ClusterType+0x9c>
    else if (Fat == (alt_u16)0x00)
   21c38:	e0bfff17 	ldw	r2,-4(fp)
   21c3c:	1000021e 	bne	r2,zero,21c48 <fat16ClusterType+0x64>
        Type = CLUSTER_UNUSED;
   21c40:	e03ffe15 	stw	zero,-8(fp)
   21c44:	00000e06 	br	21c80 <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
   21c48:	e0bfff17 	ldw	r2,-4(fp)
   21c4c:	10bffc30 	cmpltui	r2,r2,65520
   21c50:	1000061e 	bne	r2,zero,21c6c <fat16ClusterType+0x88>
   21c54:	e0bfff17 	ldw	r2,-4(fp)
   21c58:	10bffde8 	cmpgeui	r2,r2,65527
   21c5c:	1000031e 	bne	r2,zero,21c6c <fat16ClusterType+0x88>
        Type = CLUSTER_RESERVED;
   21c60:	00800044 	movi	r2,1
   21c64:	e0bffe15 	stw	r2,-8(fp)
   21c68:	00000506 	br	21c80 <fat16ClusterType+0x9c>
    else if (Fat == 0xFFF7)
   21c6c:	e0ffff17 	ldw	r3,-4(fp)
   21c70:	00bffdd4 	movui	r2,65527
   21c74:	1880021e 	bne	r3,r2,21c80 <fat16ClusterType+0x9c>
        Type = CLUSTER_BAD;
   21c78:	00800084 	movi	r2,2
   21c7c:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
   21c80:	e0bffe17 	ldw	r2,-8(fp)
         
}
   21c84:	e037883a 	mov	sp,fp
   21c88:	df000017 	ldw	fp,0(sp)
   21c8c:	dec00104 	addi	sp,sp,4
   21c90:	f800283a 	ret

00021c94 <fat32ClusterType>:

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
   21c94:	defffd04 	addi	sp,sp,-12
   21c98:	df000215 	stw	fp,8(sp)
   21c9c:	df000204 	addi	fp,sp,8
   21ca0:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
   21ca4:	e0ffff17 	ldw	r3,-4(fp)
   21ca8:	00840034 	movhi	r2,4096
   21cac:	10bfffc4 	addi	r2,r2,-1
   21cb0:	1884703a 	and	r2,r3,r2
   21cb4:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
   21cb8:	e0bfff17 	ldw	r2,-4(fp)
   21cbc:	10000726 	beq	r2,zero,21cdc <fat32ClusterType+0x48>
   21cc0:	e0ffff17 	ldw	r3,-4(fp)
   21cc4:	00840034 	movhi	r2,4096
   21cc8:	10bffbc4 	addi	r2,r2,-17
   21ccc:	10c00336 	bltu	r2,r3,21cdc <fat32ClusterType+0x48>
        Type = CLUSTER_NEXT_INFILE;
   21cd0:	00800104 	movi	r2,4
   21cd4:	e0bffe15 	stw	r2,-8(fp)
   21cd8:	00001c06 	br	21d4c <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
   21cdc:	e0ffff17 	ldw	r3,-4(fp)
   21ce0:	00840034 	movhi	r2,4096
   21ce4:	10bffdc4 	addi	r2,r2,-9
   21ce8:	10c0032e 	bgeu	r2,r3,21cf8 <fat32ClusterType+0x64>
        Type = CLUSTER_LAST_INFILE;
   21cec:	008000c4 	movi	r2,3
   21cf0:	e0bffe15 	stw	r2,-8(fp)
   21cf4:	00001506 	br	21d4c <fat32ClusterType+0xb8>
    else if (Fat == (alt_u32)0x00)
   21cf8:	e0bfff17 	ldw	r2,-4(fp)
   21cfc:	1000021e 	bne	r2,zero,21d08 <fat32ClusterType+0x74>
        Type = CLUSTER_UNUSED;
   21d00:	e03ffe15 	stw	zero,-8(fp)
   21d04:	00001106 	br	21d4c <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
   21d08:	e0ffff17 	ldw	r3,-4(fp)
   21d0c:	00840034 	movhi	r2,4096
   21d10:	10bffbc4 	addi	r2,r2,-17
   21d14:	10c0072e 	bgeu	r2,r3,21d34 <fat32ClusterType+0xa0>
   21d18:	e0ffff17 	ldw	r3,-4(fp)
   21d1c:	00840034 	movhi	r2,4096
   21d20:	10bffd84 	addi	r2,r2,-10
   21d24:	10c00336 	bltu	r2,r3,21d34 <fat32ClusterType+0xa0>
        Type = CLUSTER_RESERVED;
   21d28:	00800044 	movi	r2,1
   21d2c:	e0bffe15 	stw	r2,-8(fp)
   21d30:	00000606 	br	21d4c <fat32ClusterType+0xb8>
    else if (Fat == 0xFFFFFF7)
   21d34:	e0ffff17 	ldw	r3,-4(fp)
   21d38:	00840034 	movhi	r2,4096
   21d3c:	10bffdc4 	addi	r2,r2,-9
   21d40:	1880021e 	bne	r3,r2,21d4c <fat32ClusterType+0xb8>
        Type = CLUSTER_BAD;
   21d44:	00800084 	movi	r2,2
   21d48:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
   21d4c:	e0bffe17 	ldw	r2,-8(fp)
         
}
   21d50:	e037883a 	mov	sp,fp
   21d54:	df000017 	ldw	fp,0(sp)
   21d58:	dec00104 	addi	sp,sp,4
   21d5c:	f800283a 	ret

00021d60 <fatNextCluster>:

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
   21d60:	defff604 	addi	sp,sp,-40
   21d64:	dfc00915 	stw	ra,36(sp)
   21d68:	df000815 	stw	fp,32(sp)
   21d6c:	dc000715 	stw	r16,28(sp)
   21d70:	df000804 	addi	fp,sp,32
   21d74:	e13ffd15 	stw	r4,-12(fp)
   21d78:	e17ffe15 	stw	r5,-8(fp)
    if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
        NextCluster = 0;  // invalid cluster
    }        
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT16)?2:4; // 2 byte for FAT16
   21d7c:	e0bffd17 	ldw	r2,-12(fp)
   21d80:	10800317 	ldw	r2,12(r2)
   21d84:	10800198 	cmpnei	r2,r2,6
   21d88:	1000021e 	bne	r2,zero,21d94 <fatNextCluster+0x34>
   21d8c:	00800084 	movi	r2,2
   21d90:	00000106 	br	21d98 <fatNextCluster+0x38>
   21d94:	00800104 	movi	r2,4
   21d98:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
   21d9c:	e0bffd17 	ldw	r2,-12(fp)
   21da0:	10800617 	ldw	r2,24(r2)
   21da4:	e0fffa17 	ldw	r3,-24(fp)
   21da8:	180b883a 	mov	r5,r3
   21dac:	1009883a 	mov	r4,r2
   21db0:	002b2a00 	call	2b2a0 <__udivsi3>
   21db4:	e0bffb15 	stw	r2,-20(fp)
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
   21db8:	e0bffd17 	ldw	r2,-12(fp)
   21dbc:	14000d17 	ldw	r16,52(r2)
   21dc0:	e0bffa17 	ldw	r2,-24(fp)
   21dc4:	e17ffe17 	ldw	r5,-8(fp)
   21dc8:	1009883a 	mov	r4,r2
   21dcc:	002b35c0 	call	2b35c <__mulsi3>
   21dd0:	1007883a 	mov	r3,r2
   21dd4:	e0bffd17 	ldw	r2,-12(fp)
   21dd8:	10800617 	ldw	r2,24(r2)
   21ddc:	100b883a 	mov	r5,r2
   21de0:	1809883a 	mov	r4,r3
   21de4:	002b2a00 	call	2b2a0 <__udivsi3>
   21de8:	8085883a 	add	r2,r16,r2
   21dec:	e0bffc15 	stw	r2,-16(fp)
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
   21df0:	e17ffc17 	ldw	r5,-16(fp)
   21df4:	e13ffd17 	ldw	r4,-12(fp)
   21df8:	00226cc0 	call	226cc <fatReadSecter>
   21dfc:	10003526 	beq	r2,zero,21ed4 <fatNextCluster+0x174>
    	if (pVol->Partition_Type == PARTITION_FAT32 || pVol->Partition_Type == PARTITION_FAT32_CHS){
   21e00:	e0bffd17 	ldw	r2,-12(fp)
   21e04:	10800317 	ldw	r2,12(r2)
   21e08:	10800320 	cmpeqi	r2,r2,12
   21e0c:	1000041e 	bne	r2,zero,21e20 <fatNextCluster+0xc0>
   21e10:	e0bffd17 	ldw	r2,-12(fp)
   21e14:	10800317 	ldw	r2,12(r2)
   21e18:	108002d8 	cmpnei	r2,r2,11
   21e1c:	1000131e 	bne	r2,zero,21e6c <fatNextCluster+0x10c>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
   21e20:	e0bffd17 	ldw	r2,-12(fp)
   21e24:	14001004 	addi	r16,r2,64
   21e28:	e0fffb17 	ldw	r3,-20(fp)
   21e2c:	e0bffe17 	ldw	r2,-8(fp)
   21e30:	180b883a 	mov	r5,r3
   21e34:	1009883a 	mov	r4,r2
   21e38:	002b3040 	call	2b304 <__umodsi3>
   21e3c:	1007883a 	mov	r3,r2
   21e40:	e0bffa17 	ldw	r2,-24(fp)
   21e44:	100b883a 	mov	r5,r2
   21e48:	1809883a 	mov	r4,r3
   21e4c:	002b35c0 	call	2b35c <__mulsi3>
   21e50:	8085883a 	add	r2,r16,r2
   21e54:	10800017 	ldw	r2,0(r2)
   21e58:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat32ClusterType(NextCluster);
   21e5c:	e13ff917 	ldw	r4,-28(fp)
   21e60:	0021c940 	call	21c94 <fat32ClusterType>
   21e64:	e0bff815 	stw	r2,-32(fp)
   21e68:	00001306 	br	21eb8 <fatNextCluster+0x158>
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
   21e6c:	e0bffd17 	ldw	r2,-12(fp)
   21e70:	14001004 	addi	r16,r2,64
   21e74:	e0fffb17 	ldw	r3,-20(fp)
   21e78:	e0bffe17 	ldw	r2,-8(fp)
   21e7c:	180b883a 	mov	r5,r3
   21e80:	1009883a 	mov	r4,r2
   21e84:	002b3040 	call	2b304 <__umodsi3>
   21e88:	1007883a 	mov	r3,r2
   21e8c:	e0bffa17 	ldw	r2,-24(fp)
   21e90:	100b883a 	mov	r5,r2
   21e94:	1809883a 	mov	r4,r3
   21e98:	002b35c0 	call	2b35c <__mulsi3>
   21e9c:	8085883a 	add	r2,r16,r2
   21ea0:	1080000b 	ldhu	r2,0(r2)
   21ea4:	10bfffcc 	andi	r2,r2,65535
   21ea8:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat16ClusterType(NextCluster);
   21eac:	e13ff917 	ldw	r4,-28(fp)
   21eb0:	0021be40 	call	21be4 <fat16ClusterType>
   21eb4:	e0bff815 	stw	r2,-32(fp)
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
   21eb8:	e0bff817 	ldw	r2,-32(fp)
   21ebc:	10800120 	cmpeqi	r2,r2,4
   21ec0:	1000041e 	bne	r2,zero,21ed4 <fatNextCluster+0x174>
   21ec4:	e0bff817 	ldw	r2,-32(fp)
   21ec8:	108000e0 	cmpeqi	r2,r2,3
   21ecc:	1000011e 	bne	r2,zero,21ed4 <fatNextCluster+0x174>
            NextCluster = 0;  // invalid cluster
   21ed0:	e03ff915 	stw	zero,-28(fp)
    }                
    
    
    return NextCluster;
   21ed4:	e0bff917 	ldw	r2,-28(fp)

#endif    
    
    return NextCluster;
}
   21ed8:	e6ffff04 	addi	sp,fp,-4
   21edc:	dfc00217 	ldw	ra,8(sp)
   21ee0:	df000117 	ldw	fp,4(sp)
   21ee4:	dc000017 	ldw	r16,0(sp)
   21ee8:	dec00304 	addi	sp,sp,12
   21eec:	f800283a 	ret

00021ef0 <fatFindUnusedCluster>:

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
   21ef0:	defff304 	addi	sp,sp,-52
   21ef4:	dfc00c15 	stw	ra,48(sp)
   21ef8:	df000b15 	stw	fp,44(sp)
   21efc:	dc000a15 	stw	r16,40(sp)
   21f00:	df000b04 	addi	fp,sp,44
   21f04:	e13ffe15 	stw	r4,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
   21f08:	00bfffc4 	movi	r2,-1
   21f0c:	e0bff615 	stw	r2,-40(fp)
   21f10:	00800084 	movi	r2,2
   21f14:	e0bff715 	stw	r2,-36(fp)
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT16)?2:4; // 2 byte for FAT16
   21f18:	e0bffe17 	ldw	r2,-8(fp)
   21f1c:	10800317 	ldw	r2,12(r2)
   21f20:	10800198 	cmpnei	r2,r2,6
   21f24:	1000021e 	bne	r2,zero,21f30 <fatFindUnusedCluster+0x40>
   21f28:	00800084 	movi	r2,2
   21f2c:	00000106 	br	21f34 <fatFindUnusedCluster+0x44>
   21f30:	00800104 	movi	r2,4
   21f34:	e0bff915 	stw	r2,-28(fp)
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
   21f38:	e0bffe17 	ldw	r2,-8(fp)
   21f3c:	10800617 	ldw	r2,24(r2)
   21f40:	e0fff917 	ldw	r3,-28(fp)
   21f44:	180b883a 	mov	r5,r3
   21f48:	1009883a 	mov	r4,r2
   21f4c:	002b2a00 	call	2b2a0 <__udivsi3>
   21f50:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
    bool bDone = FALSE;
   21f54:	e03ff815 	stw	zero,-32(fp)

    while(!bDone){     
   21f58:	00004206 	br	22064 <fatFindUnusedCluster+0x174>
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
   21f5c:	e0bffe17 	ldw	r2,-8(fp)
   21f60:	14000d17 	ldw	r16,52(r2)
   21f64:	e0bff917 	ldw	r2,-28(fp)
   21f68:	e17ff717 	ldw	r5,-36(fp)
   21f6c:	1009883a 	mov	r4,r2
   21f70:	002b35c0 	call	2b35c <__mulsi3>
   21f74:	1007883a 	mov	r3,r2
   21f78:	e0bffe17 	ldw	r2,-8(fp)
   21f7c:	10800617 	ldw	r2,24(r2)
   21f80:	100b883a 	mov	r5,r2
   21f84:	1809883a 	mov	r4,r3
   21f88:	002b2a00 	call	2b2a0 <__udivsi3>
   21f8c:	8085883a 	add	r2,r16,r2
   21f90:	e0bffb15 	stw	r2,-20(fp)
        if (fatReadSecter(pVol, Secter)){
   21f94:	e17ffb17 	ldw	r5,-20(fp)
   21f98:	e13ffe17 	ldw	r4,-8(fp)
   21f9c:	00226cc0 	call	226cc <fatReadSecter>
   21fa0:	10002b26 	beq	r2,zero,22050 <fatFindUnusedCluster+0x160>
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
   21fa4:	e0bffe17 	ldw	r2,-8(fp)
   21fa8:	14001004 	addi	r16,r2,64
   21fac:	e0fffa17 	ldw	r3,-24(fp)
   21fb0:	e0bff717 	ldw	r2,-36(fp)
   21fb4:	180b883a 	mov	r5,r3
   21fb8:	1009883a 	mov	r4,r2
   21fbc:	002b3040 	call	2b304 <__umodsi3>
   21fc0:	1007883a 	mov	r3,r2
   21fc4:	e0bff917 	ldw	r2,-28(fp)
   21fc8:	100b883a 	mov	r5,r2
   21fcc:	1809883a 	mov	r4,r3
   21fd0:	002b35c0 	call	2b35c <__mulsi3>
   21fd4:	8085883a 	add	r2,r16,r2
   21fd8:	e0bffc15 	stw	r2,-16(fp)
            if (pVol->Partition_Type == PARTITION_FAT32 || pVol->Partition_Type == PARTITION_FAT32_CHS){
   21fdc:	e0bffe17 	ldw	r2,-8(fp)
   21fe0:	10800317 	ldw	r2,12(r2)
   21fe4:	10800320 	cmpeqi	r2,r2,12
   21fe8:	1000041e 	bne	r2,zero,21ffc <fatFindUnusedCluster+0x10c>
   21fec:	e0bffe17 	ldw	r2,-8(fp)
   21ff0:	10800317 	ldw	r2,12(r2)
   21ff4:	108002d8 	cmpnei	r2,r2,11
   21ff8:	1000071e 	bne	r2,zero,22018 <fatFindUnusedCluster+0x128>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
   21ffc:	e0bffc17 	ldw	r2,-16(fp)
   22000:	10800017 	ldw	r2,0(r2)
   22004:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
   22008:	e13ffd17 	ldw	r4,-12(fp)
   2200c:	0021c940 	call	21c94 <fat32ClusterType>
   22010:	e0bff515 	stw	r2,-44(fp)
   22014:	00000706 	br	22034 <fatFindUnusedCluster+0x144>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
   22018:	e0bffc17 	ldw	r2,-16(fp)
   2201c:	1080000b 	ldhu	r2,0(r2)
   22020:	10bfffcc 	andi	r2,r2,65535
   22024:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
   22028:	e13ffd17 	ldw	r4,-12(fp)
   2202c:	0021be40 	call	21be4 <fat16ClusterType>
   22030:	e0bff515 	stw	r2,-44(fp)
            }    
            if (ClusterType == CLUSTER_UNUSED){
   22034:	e0bff517 	ldw	r2,-44(fp)
   22038:	1000071e 	bne	r2,zero,22058 <fatFindUnusedCluster+0x168>
                UnusedCluster = ThisCluster;  // invalid cluster
   2203c:	e0bff717 	ldw	r2,-36(fp)
   22040:	e0bff615 	stw	r2,-40(fp)
                bDone = TRUE;
   22044:	00800044 	movi	r2,1
   22048:	e0bff815 	stw	r2,-32(fp)
   2204c:	00000206 	br	22058 <fatFindUnusedCluster+0x168>
            }    
        }else{
            bDone = TRUE;
   22050:	00800044 	movi	r2,1
   22054:	e0bff815 	stw	r2,-32(fp)
        }     
        ThisCluster++;           
   22058:	e0bff717 	ldw	r2,-36(fp)
   2205c:	10800044 	addi	r2,r2,1
   22060:	e0bff715 	stw	r2,-36(fp)
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT16)?2:4; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
   22064:	e0bff817 	ldw	r2,-32(fp)
   22068:	103fbc26 	beq	r2,zero,21f5c <_gp+0xfffe6f1c>
            bDone = TRUE;
        }     
        ThisCluster++;           
    }                
    
    return UnusedCluster;
   2206c:	e0bff617 	ldw	r2,-40(fp)

}
   22070:	e6ffff04 	addi	sp,fp,-4
   22074:	dfc00217 	ldw	ra,8(sp)
   22078:	df000117 	ldw	fp,4(sp)
   2207c:	dc000017 	ldw	r16,0(sp)
   22080:	dec00304 	addi	sp,sp,12
   22084:	f800283a 	ret

00022088 <fatDelClusterList>:


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
   22088:	defff204 	addi	sp,sp,-56
   2208c:	dfc00d15 	stw	ra,52(sp)
   22090:	df000c15 	stw	fp,48(sp)
   22094:	dc000b15 	stw	r16,44(sp)
   22098:	df000c04 	addi	fp,sp,48
   2209c:	e13ffd15 	stw	r4,-12(fp)
   220a0:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
   220a4:	00800044 	movi	r2,1
   220a8:	e0bff515 	stw	r2,-44(fp)
    bool bDone = FALSE;
   220ac:	e03ff615 	stw	zero,-40(fp)
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT16)?2:4; // 2 byte for FAT16
   220b0:	e0bffd17 	ldw	r2,-12(fp)
   220b4:	10800317 	ldw	r2,12(r2)
   220b8:	10800198 	cmpnei	r2,r2,6
   220bc:	1000021e 	bne	r2,zero,220c8 <fatDelClusterList+0x40>
   220c0:	00800084 	movi	r2,2
   220c4:	00000106 	br	220cc <fatDelClusterList+0x44>
   220c8:	00800104 	movi	r2,4
   220cc:	e0bff715 	stw	r2,-36(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
   220d0:	e0bffd17 	ldw	r2,-12(fp)
   220d4:	10800617 	ldw	r2,24(r2)
   220d8:	e0fff717 	ldw	r3,-36(fp)
   220dc:	180b883a 	mov	r5,r3
   220e0:	1009883a 	mov	r4,r2
   220e4:	002b2a00 	call	2b2a0 <__udivsi3>
   220e8:	e0bff815 	stw	r2,-32(fp)
     
    ClusterIndex = StartCluster;
   220ec:	e0bffe17 	ldw	r2,-8(fp)
   220f0:	e0bff915 	stw	r2,-28(fp)
    while(bSuccess && !bDone){
   220f4:	00005f06 	br	22274 <fatDelClusterList+0x1ec>
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
   220f8:	e0bffd17 	ldw	r2,-12(fp)
   220fc:	14000d17 	ldw	r16,52(r2)
   22100:	e0bff717 	ldw	r2,-36(fp)
   22104:	e17ff917 	ldw	r5,-28(fp)
   22108:	1009883a 	mov	r4,r2
   2210c:	002b35c0 	call	2b35c <__mulsi3>
   22110:	1007883a 	mov	r3,r2
   22114:	e0bffd17 	ldw	r2,-12(fp)
   22118:	10800617 	ldw	r2,24(r2)
   2211c:	100b883a 	mov	r5,r2
   22120:	1809883a 	mov	r4,r3
   22124:	002b2a00 	call	2b2a0 <__udivsi3>
   22128:	8085883a 	add	r2,r16,r2
   2212c:	e0bffa15 	stw	r2,-24(fp)
        bSuccess = fatReadSecter(pVol, Secter);
   22130:	e17ffa17 	ldw	r5,-24(fp)
   22134:	e13ffd17 	ldw	r4,-12(fp)
   22138:	00226cc0 	call	226cc <fatReadSecter>
   2213c:	e0bff515 	stw	r2,-44(fp)
        if (bSuccess){
   22140:	e0bff517 	ldw	r2,-44(fp)
   22144:	10004b26 	beq	r2,zero,22274 <fatDelClusterList+0x1ec>
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
   22148:	e0bffd17 	ldw	r2,-12(fp)
   2214c:	14001004 	addi	r16,r2,64
   22150:	e0fff817 	ldw	r3,-32(fp)
   22154:	e0bff917 	ldw	r2,-28(fp)
   22158:	180b883a 	mov	r5,r3
   2215c:	1009883a 	mov	r4,r2
   22160:	002b3040 	call	2b304 <__umodsi3>
   22164:	1007883a 	mov	r3,r2
   22168:	e0bff717 	ldw	r2,-36(fp)
   2216c:	100b883a 	mov	r5,r2
   22170:	1809883a 	mov	r4,r3
   22174:	002b35c0 	call	2b35c <__mulsi3>
   22178:	8085883a 	add	r2,r16,r2
   2217c:	e0bffb15 	stw	r2,-20(fp)
            if (pVol->Partition_Type == PARTITION_FAT32 || pVol->Partition_Type == PARTITION_FAT32_CHS){
   22180:	e0bffd17 	ldw	r2,-12(fp)
   22184:	10800317 	ldw	r2,12(r2)
   22188:	10800320 	cmpeqi	r2,r2,12
   2218c:	1000041e 	bne	r2,zero,221a0 <fatDelClusterList+0x118>
   22190:	e0bffd17 	ldw	r2,-12(fp)
   22194:	10800317 	ldw	r2,12(r2)
   22198:	108002d8 	cmpnei	r2,r2,11
   2219c:	1000071e 	bne	r2,zero,221bc <fatDelClusterList+0x134>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
   221a0:	e0bffb17 	ldw	r2,-20(fp)
   221a4:	10800017 	ldw	r2,0(r2)
   221a8:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
   221ac:	e13ffc17 	ldw	r4,-16(fp)
   221b0:	0021c940 	call	21c94 <fat32ClusterType>
   221b4:	e0bff415 	stw	r2,-48(fp)
   221b8:	00000706 	br	221d8 <fatDelClusterList+0x150>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
   221bc:	e0bffb17 	ldw	r2,-20(fp)
   221c0:	1080000b 	ldhu	r2,0(r2)
   221c4:	10bfffcc 	andi	r2,r2,65535
   221c8:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
   221cc:	e13ffc17 	ldw	r4,-16(fp)
   221d0:	0021be40 	call	21be4 <fat16ClusterType>
   221d4:	e0bff415 	stw	r2,-48(fp)
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
   221d8:	e0bff417 	ldw	r2,-48(fp)
   221dc:	10800120 	cmpeqi	r2,r2,4
   221e0:	1000071e 	bne	r2,zero,22200 <fatDelClusterList+0x178>
   221e4:	e0bff417 	ldw	r2,-48(fp)
   221e8:	108000e0 	cmpeqi	r2,r2,3
   221ec:	1000041e 	bne	r2,zero,22200 <fatDelClusterList+0x178>
                bDone = TRUE;
   221f0:	00800044 	movi	r2,1
   221f4:	e0bff615 	stw	r2,-40(fp)
                bSuccess = FALSE;
   221f8:	e03ff515 	stw	zero,-44(fp)
   221fc:	00001d06 	br	22274 <fatDelClusterList+0x1ec>
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
   22200:	e0bff417 	ldw	r2,-48(fp)
   22204:	108000d8 	cmpnei	r2,r2,3
   22208:	1000021e 	bne	r2,zero,22214 <fatDelClusterList+0x18c>
                    bDone = TRUE; // the last cluster
   2220c:	00800044 	movi	r2,1
   22210:	e0bff615 	stw	r2,-40(fp)
                // update
                if (pVol->Partition_Type == PARTITION_FAT32 || pVol->Partition_Type == PARTITION_FAT32_CHS)
   22214:	e0bffd17 	ldw	r2,-12(fp)
   22218:	10800317 	ldw	r2,12(r2)
   2221c:	10800320 	cmpeqi	r2,r2,12
   22220:	1000041e 	bne	r2,zero,22234 <fatDelClusterList+0x1ac>
   22224:	e0bffd17 	ldw	r2,-12(fp)
   22228:	10800317 	ldw	r2,12(r2)
   2222c:	108002d8 	cmpnei	r2,r2,11
   22230:	1000031e 	bne	r2,zero,22240 <fatDelClusterList+0x1b8>
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
   22234:	e0bffb17 	ldw	r2,-20(fp)
   22238:	10000015 	stw	zero,0(r2)
   2223c:	00000206 	br	22248 <fatDelClusterList+0x1c0>
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
   22240:	e0bffb17 	ldw	r2,-20(fp)
   22244:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
   22248:	e0bffd17 	ldw	r2,-12(fp)
   2224c:	10800217 	ldw	r2,8(r2)
   22250:	e0fffd17 	ldw	r3,-12(fp)
   22254:	19000017 	ldw	r4,0(r3)
   22258:	e0fffd17 	ldw	r3,-12(fp)
   2225c:	19409017 	ldw	r5,576(r3)
   22260:	e0fffd17 	ldw	r3,-12(fp)
   22264:	18c01004 	addi	r3,r3,64
   22268:	180d883a 	mov	r6,r3
   2226c:	103ee83a 	callr	r2
   22270:	e0bff515 	stw	r2,-44(fp)
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT16)?2:4; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
   22274:	e0bff517 	ldw	r2,-44(fp)
   22278:	10000226 	beq	r2,zero,22284 <fatDelClusterList+0x1fc>
   2227c:	e0bff617 	ldw	r2,-40(fp)
   22280:	103f9d26 	beq	r2,zero,220f8 <_gp+0xfffe70b8>
            }    
        }                
    }  // while                
    
    
    return bSuccess;
   22284:	e0bff517 	ldw	r2,-44(fp)

}
   22288:	e6ffff04 	addi	sp,fp,-4
   2228c:	dfc00217 	ldw	ra,8(sp)
   22290:	df000117 	ldw	fp,4(sp)
   22294:	dc000017 	ldw	r16,0(sp)
   22298:	dec00304 	addi	sp,sp,12
   2229c:	f800283a 	ret

000222a0 <fatDumpDate>:


void fatDumpDate(unsigned short Date){
   222a0:	defffb04 	addi	sp,sp,-20
   222a4:	df000415 	stw	fp,16(sp)
   222a8:	df000404 	addi	fp,sp,16
   222ac:	2005883a 	mov	r2,r4
   222b0:	e0bfff0d 	sth	r2,-4(fp)
    int Year, Month, Day;
    Year = ((Date >> 9) & 0x1F) + 1980;
   222b4:	e0bfff0b 	ldhu	r2,-4(fp)
   222b8:	1004d27a 	srli	r2,r2,9
   222bc:	10bfffcc 	andi	r2,r2,65535
   222c0:	108007cc 	andi	r2,r2,31
   222c4:	1081ef04 	addi	r2,r2,1980
   222c8:	e0bffc15 	stw	r2,-16(fp)
    Month = ((Date >> 5) & 0xF);
   222cc:	e0bfff0b 	ldhu	r2,-4(fp)
   222d0:	1004d17a 	srli	r2,r2,5
   222d4:	10bfffcc 	andi	r2,r2,65535
   222d8:	108003cc 	andi	r2,r2,15
   222dc:	e0bffd15 	stw	r2,-12(fp)
    Day = ((Date >> 0) & 0x1F);
   222e0:	e0bfff0b 	ldhu	r2,-4(fp)
   222e4:	108007cc 	andi	r2,r2,31
   222e8:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
}
   222ec:	0001883a 	nop
   222f0:	e037883a 	mov	sp,fp
   222f4:	df000017 	ldw	fp,0(sp)
   222f8:	dec00104 	addi	sp,sp,4
   222fc:	f800283a 	ret

00022300 <fatDumpTime>:

void fatDumpTime(unsigned short Date){
   22300:	defffb04 	addi	sp,sp,-20
   22304:	df000415 	stw	fp,16(sp)
   22308:	df000404 	addi	fp,sp,16
   2230c:	2005883a 	mov	r2,r4
   22310:	e0bfff0d 	sth	r2,-4(fp)
    int H,M,S;
    H = ((Date >> 9) & 0x1F);
   22314:	e0bfff0b 	ldhu	r2,-4(fp)
   22318:	1004d27a 	srli	r2,r2,9
   2231c:	10bfffcc 	andi	r2,r2,65535
   22320:	108007cc 	andi	r2,r2,31
   22324:	e0bffc15 	stw	r2,-16(fp)
    M = ((Date >> 5) & 0x3F);
   22328:	e0bfff0b 	ldhu	r2,-4(fp)
   2232c:	1004d17a 	srli	r2,r2,5
   22330:	10bfffcc 	andi	r2,r2,65535
   22334:	10800fcc 	andi	r2,r2,63
   22338:	e0bffd15 	stw	r2,-12(fp)
    S = ((Date >> 0) & 0x1F)*2;
   2233c:	e0bfff0b 	ldhu	r2,-4(fp)
   22340:	108007cc 	andi	r2,r2,31
   22344:	1085883a 	add	r2,r2,r2
   22348:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}
   2234c:	0001883a 	nop
   22350:	e037883a 	mov	sp,fp
   22354:	df000017 	ldw	fp,0(sp)
   22358:	dec00104 	addi	sp,sp,4
   2235c:	f800283a 	ret

00022360 <fatIsLastDir>:

bool fatIsLastDir(FAT_DIRECTORY *pDir){
   22360:	defffe04 	addi	sp,sp,-8
   22364:	df000115 	stw	fp,4(sp)
   22368:	df000104 	addi	fp,sp,4
   2236c:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
   22370:	e0bfff17 	ldw	r2,-4(fp)
   22374:	10800003 	ldbu	r2,0(r2)
   22378:	10803fcc 	andi	r2,r2,255
   2237c:	1080201c 	xori	r2,r2,128
   22380:	10bfe004 	addi	r2,r2,-128
   22384:	1000021e 	bne	r2,zero,22390 <fatIsLastDir+0x30>
        return TRUE;
   22388:	00800044 	movi	r2,1
   2238c:	00000106 	br	22394 <fatIsLastDir+0x34>
    return FALSE;        
   22390:	0005883a 	mov	r2,zero
}
   22394:	e037883a 	mov	sp,fp
   22398:	df000017 	ldw	fp,0(sp)
   2239c:	dec00104 	addi	sp,sp,4
   223a0:	f800283a 	ret

000223a4 <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
   223a4:	defff704 	addi	sp,sp,-36
   223a8:	dfc00815 	stw	ra,32(sp)
   223ac:	df000715 	stw	fp,28(sp)
   223b0:	df000704 	addi	fp,sp,28
   223b4:	e13fff15 	stw	r4,-4(fp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
   223b8:	008000f4 	movhi	r2,3
   223bc:	10866604 	addi	r2,r2,6552
   223c0:	e0fffa04 	addi	r3,fp,-24
   223c4:	1009883a 	mov	r4,r2
   223c8:	00800444 	movi	r2,17
   223cc:	100d883a 	mov	r6,r2
   223d0:	200b883a 	mov	r5,r4
   223d4:	1809883a 	mov	r4,r3
   223d8:	002e7d00 	call	2e7d0 <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
   223dc:	e03ff915 	stw	zero,-28(fp)
   223e0:	00001206 	br	2242c <fatIsValidDir+0x88>
        if (pDir->Name[0] == szTest[i]){
   223e4:	e0bfff17 	ldw	r2,-4(fp)
   223e8:	11000003 	ldbu	r4,0(r2)
   223ec:	e0fffa04 	addi	r3,fp,-24
   223f0:	e0bff917 	ldw	r2,-28(fp)
   223f4:	1885883a 	add	r2,r3,r2
   223f8:	10800003 	ldbu	r2,0(r2)
   223fc:	20c03fcc 	andi	r3,r4,255
   22400:	18c0201c 	xori	r3,r3,128
   22404:	18ffe004 	addi	r3,r3,-128
   22408:	10803fcc 	andi	r2,r2,255
   2240c:	1080201c 	xori	r2,r2,128
   22410:	10bfe004 	addi	r2,r2,-128
   22414:	1880021e 	bne	r3,r2,22420 <fatIsValidDir+0x7c>
            return FALSE;
   22418:	0005883a 	mov	r2,zero
   2241c:	00000706 	br	2243c <fatIsValidDir+0x98>

bool fatIsValidDir(FAT_DIRECTORY *pDir){
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
   22420:	e0bff917 	ldw	r2,-28(fp)
   22424:	10800044 	addi	r2,r2,1
   22428:	e0bff915 	stw	r2,-28(fp)
   2242c:	e0bff917 	ldw	r2,-28(fp)
   22430:	10800470 	cmpltui	r2,r2,17
   22434:	103feb1e 	bne	r2,zero,223e4 <_gp+0xfffe73a4>
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
        }
    }    
    return TRUE;
   22438:	00800044 	movi	r2,1
    
}
   2243c:	e037883a 	mov	sp,fp
   22440:	dfc00117 	ldw	ra,4(sp)
   22444:	df000017 	ldw	fp,0(sp)
   22448:	dec00204 	addi	sp,sp,8
   2244c:	f800283a 	ret

00022450 <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
   22450:	defffe04 	addi	sp,sp,-8
   22454:	df000115 	stw	fp,4(sp)
   22458:	df000104 	addi	fp,sp,4
   2245c:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
   22460:	e0bfff17 	ldw	r2,-4(fp)
   22464:	10800003 	ldbu	r2,0(r2)
   22468:	10803fcc 	andi	r2,r2,255
   2246c:	1080201c 	xori	r2,r2,128
   22470:	10bfe004 	addi	r2,r2,-128
   22474:	10bff958 	cmpnei	r2,r2,-27
   22478:	1000021e 	bne	r2,zero,22484 <fatIsUnusedDir+0x34>
        return TRUE;
   2247c:	00800044 	movi	r2,1
   22480:	00000106 	br	22488 <fatIsUnusedDir+0x38>
    return FALSE; 
   22484:	0005883a 	mov	r2,zero
}
   22488:	e037883a 	mov	sp,fp
   2248c:	df000017 	ldw	fp,0(sp)
   22490:	dec00104 	addi	sp,sp,4
   22494:	f800283a 	ret

00022498 <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
   22498:	defff804 	addi	sp,sp,-32
   2249c:	dfc00715 	stw	ra,28(sp)
   224a0:	df000615 	stw	fp,24(sp)
   224a4:	df000604 	addi	fp,sp,24
   224a8:	e13fff15 	stw	r4,-4(fp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
   224ac:	008000f4 	movhi	r2,3
   224b0:	10866a44 	addi	r2,r2,6569
   224b4:	e0fffb04 	addi	r3,fp,-20
   224b8:	1009883a 	mov	r4,r2
   224bc:	008003c4 	movi	r2,15
   224c0:	100d883a 	mov	r6,r2
   224c4:	200b883a 	mov	r5,r4
   224c8:	1809883a 	mov	r4,r3
   224cc:	002e7d00 	call	2e7d0 <memcpy>
    int i;
    if (pDir->Name[0] == (char)0xE5){
   224d0:	e0bfff17 	ldw	r2,-4(fp)
   224d4:	10800003 	ldbu	r2,0(r2)
   224d8:	10803fcc 	andi	r2,r2,255
   224dc:	1080201c 	xori	r2,r2,128
   224e0:	10bfe004 	addi	r2,r2,-128
   224e4:	10bff958 	cmpnei	r2,r2,-27
   224e8:	10004a26 	beq	r2,zero,22614 <fatDump+0x17c>
        FAT_DEBUG(("the directory entry is free.\n"));
        return;
    }
    if (pDir->Name[0] == 0x00){
   224ec:	e0bfff17 	ldw	r2,-4(fp)
   224f0:	10800003 	ldbu	r2,0(r2)
   224f4:	10803fcc 	andi	r2,r2,255
   224f8:	1080201c 	xori	r2,r2,128
   224fc:	10bfe004 	addi	r2,r2,-128
   22500:	10004626 	beq	r2,zero,2261c <fatDump+0x184>
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
        return;
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
   22504:	e0bfff17 	ldw	r2,-4(fp)
   22508:	10800003 	ldbu	r2,0(r2)
   2250c:	10803fcc 	andi	r2,r2,255
   22510:	1080201c 	xori	r2,r2,128
   22514:	10bfe004 	addi	r2,r2,-128
   22518:	10800848 	cmpgei	r2,r2,33
   2251c:	1000071e 	bne	r2,zero,2253c <fatDump+0xa4>
   22520:	e0bfff17 	ldw	r2,-4(fp)
   22524:	10800003 	ldbu	r2,0(r2)
   22528:	10803fcc 	andi	r2,r2,255
   2252c:	1080201c 	xori	r2,r2,128
   22530:	10bfe004 	addi	r2,r2,-128
   22534:	10800160 	cmpeqi	r2,r2,5
   22538:	10003a26 	beq	r2,zero,22624 <fatDump+0x18c>
        FAT_DEBUG(("Invalid file name.\n"));
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
   2253c:	e03ffa15 	stw	zero,-24(fp)
   22540:	00001006 	br	22584 <fatDump+0xec>
        if (pDir->Name[0] == szInvalidName[i]){
   22544:	e0bfff17 	ldw	r2,-4(fp)
   22548:	11000003 	ldbu	r4,0(r2)
   2254c:	e0fffb04 	addi	r3,fp,-20
   22550:	e0bffa17 	ldw	r2,-24(fp)
   22554:	1885883a 	add	r2,r3,r2
   22558:	10800003 	ldbu	r2,0(r2)
   2255c:	20c03fcc 	andi	r3,r4,255
   22560:	18c0201c 	xori	r3,r3,128
   22564:	18ffe004 	addi	r3,r3,-128
   22568:	10803fcc 	andi	r2,r2,255
   2256c:	1080201c 	xori	r2,r2,128
   22570:	10bfe004 	addi	r2,r2,-128
   22574:	18802d26 	beq	r3,r2,2262c <fatDump+0x194>
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
        FAT_DEBUG(("Invalid file name.\n"));
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
   22578:	e0bffa17 	ldw	r2,-24(fp)
   2257c:	10800044 	addi	r2,r2,1
   22580:	e0bffa15 	stw	r2,-24(fp)
   22584:	e0bffa17 	ldw	r2,-24(fp)
   22588:	108003f0 	cmpltui	r2,r2,15
   2258c:	103fed1e 	bne	r2,zero,22544 <_gp+0xfffe7504>
        FAT_DEBUG(("  Directory\n"));
    if (pDir->Attribute & ATTR_ARCHIVE)
        FAT_DEBUG(("  Archive\n"));
    if (pDir->Attribute & ATTR_LONG_NAME)
        FAT_DEBUG(("  Long Name\n"));
    FAT_DEBUG(("CreateTime:")); fatDumpTime(pDir->CreateTime);FAT_DEBUG(("\n"));
   22590:	e0bfff17 	ldw	r2,-4(fp)
   22594:	10c00383 	ldbu	r3,14(r2)
   22598:	108003c3 	ldbu	r2,15(r2)
   2259c:	1004923a 	slli	r2,r2,8
   225a0:	10c4b03a 	or	r2,r2,r3
   225a4:	10bfffcc 	andi	r2,r2,65535
   225a8:	1009883a 	mov	r4,r2
   225ac:	00223000 	call	22300 <fatDumpTime>
    FAT_DEBUG(("CreateDate:")); fatDumpDate(pDir->LastAccessDate);FAT_DEBUG(("\n"));
   225b0:	e0bfff17 	ldw	r2,-4(fp)
   225b4:	10c00483 	ldbu	r3,18(r2)
   225b8:	108004c3 	ldbu	r2,19(r2)
   225bc:	1004923a 	slli	r2,r2,8
   225c0:	10c4b03a 	or	r2,r2,r3
   225c4:	10bfffcc 	andi	r2,r2,65535
   225c8:	1009883a 	mov	r4,r2
   225cc:	00222a00 	call	222a0 <fatDumpDate>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
   225d0:	e0bfff17 	ldw	r2,-4(fp)
   225d4:	10c00583 	ldbu	r3,22(r2)
   225d8:	108005c3 	ldbu	r2,23(r2)
   225dc:	1004923a 	slli	r2,r2,8
   225e0:	10c4b03a 	or	r2,r2,r3
   225e4:	10bfffcc 	andi	r2,r2,65535
   225e8:	1009883a 	mov	r4,r2
   225ec:	00223000 	call	22300 <fatDumpTime>
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
   225f0:	e0bfff17 	ldw	r2,-4(fp)
   225f4:	10c00603 	ldbu	r3,24(r2)
   225f8:	10800643 	ldbu	r2,25(r2)
   225fc:	1004923a 	slli	r2,r2,8
   22600:	10c4b03a 	or	r2,r2,r3
   22604:	10bfffcc 	andi	r2,r2,65535
   22608:	1009883a 	mov	r4,r2
   2260c:	00222a00 	call	222a0 <fatDumpDate>
   22610:	00000706 	br	22630 <fatDump+0x198>
void fatDump(FAT_DIRECTORY *pDir){
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    if (pDir->Name[0] == (char)0xE5){
        FAT_DEBUG(("the directory entry is free.\n"));
        return;
   22614:	0001883a 	nop
   22618:	00000506 	br	22630 <fatDump+0x198>
    }
    if (pDir->Name[0] == 0x00){
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
        return;
   2261c:	0001883a 	nop
   22620:	00000306 	br	22630 <fatDump+0x198>
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
        FAT_DEBUG(("Invalid file name.\n"));
        return;
   22624:	0001883a 	nop
   22628:	00000106 	br	22630 <fatDump+0x198>
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
        if (pDir->Name[0] == szInvalidName[i]){
            FAT_DEBUG(("Invalid file name.\n"));
            return;
   2262c:	0001883a 	nop
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
}
   22630:	e037883a 	mov	sp,fp
   22634:	dfc00117 	ldw	ra,4(sp)
   22638:	df000017 	ldw	fp,0(sp)
   2263c:	dec00204 	addi	sp,sp,8
   22640:	f800283a 	ret

00022644 <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
   22644:	defffa04 	addi	sp,sp,-24
   22648:	df000515 	stw	fp,20(sp)
   2264c:	df000504 	addi	fp,sp,20
   22650:	e13ffe15 	stw	r4,-8(fp)
   22654:	e17fff15 	stw	r5,-4(fp)
    alt_u8 *pMSB = (pValue + nNum - 1);
   22658:	e0bfff17 	ldw	r2,-4(fp)
   2265c:	10bfffc4 	addi	r2,r2,-1
   22660:	e0fffe17 	ldw	r3,-8(fp)
   22664:	1885883a 	add	r2,r3,r2
   22668:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
   2266c:	e03ffd15 	stw	zero,-12(fp)
   22670:	00000e06 	br	226ac <fatArray2Value+0x68>
        nValue <<= 8;
   22674:	e0bffc17 	ldw	r2,-16(fp)
   22678:	1004923a 	slli	r2,r2,8
   2267c:	e0bffc15 	stw	r2,-16(fp)
        nValue |= *pMSB--;
   22680:	e0bffb17 	ldw	r2,-20(fp)
   22684:	10ffffc4 	addi	r3,r2,-1
   22688:	e0fffb15 	stw	r3,-20(fp)
   2268c:	10800003 	ldbu	r2,0(r2)
   22690:	10803fcc 	andi	r2,r2,255
   22694:	e0fffc17 	ldw	r3,-16(fp)
   22698:	1884b03a 	or	r2,r3,r2
   2269c:	e0bffc15 	stw	r2,-16(fp)

unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
   226a0:	e0bffd17 	ldw	r2,-12(fp)
   226a4:	10800044 	addi	r2,r2,1
   226a8:	e0bffd15 	stw	r2,-12(fp)
   226ac:	e0fffd17 	ldw	r3,-12(fp)
   226b0:	e0bfff17 	ldw	r2,-4(fp)
   226b4:	18bfef36 	bltu	r3,r2,22674 <_gp+0xfffe7634>
        nValue <<= 8;
        nValue |= *pMSB--;
        
    }
    
    return nValue;
   226b8:	e0bffc17 	ldw	r2,-16(fp)
}
   226bc:	e037883a 	mov	sp,fp
   226c0:	df000017 	ldw	fp,0(sp)
   226c4:	dec00104 	addi	sp,sp,4
   226c8:	f800283a 	ret

000226cc <fatReadSecter>:

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
   226cc:	defffb04 	addi	sp,sp,-20
   226d0:	dfc00415 	stw	ra,16(sp)
   226d4:	df000315 	stw	fp,12(sp)
   226d8:	df000304 	addi	fp,sp,12
   226dc:	e13ffe15 	stw	r4,-8(fp)
   226e0:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
   226e4:	00800044 	movi	r2,1
   226e8:	e0bffd15 	stw	r2,-12(fp)
    if (nSecter != pVol->Secter_Index){
   226ec:	e0bffe17 	ldw	r2,-8(fp)
   226f0:	10c09017 	ldw	r3,576(r2)
   226f4:	e0bfff17 	ldw	r2,-4(fp)
   226f8:	18801226 	beq	r3,r2,22744 <fatReadSecter+0x78>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
   226fc:	e0bffe17 	ldw	r2,-8(fp)
   22700:	10800117 	ldw	r2,4(r2)
   22704:	e0fffe17 	ldw	r3,-8(fp)
   22708:	19000017 	ldw	r4,0(r3)
   2270c:	e0fffe17 	ldw	r3,-8(fp)
   22710:	18c01004 	addi	r3,r3,64
   22714:	180d883a 	mov	r6,r3
   22718:	e17fff17 	ldw	r5,-4(fp)
   2271c:	103ee83a 	callr	r2
   22720:	1000051e 	bne	r2,zero,22738 <fatReadSecter+0x6c>
            pVol->Secter_Index = -1;
   22724:	e0bffe17 	ldw	r2,-8(fp)
   22728:	00ffffc4 	movi	r3,-1
   2272c:	10c09015 	stw	r3,576(r2)
            bSuccess = FALSE;
   22730:	e03ffd15 	stw	zero,-12(fp)
   22734:	00000306 	br	22744 <fatReadSecter+0x78>
        }else{
            pVol->Secter_Index = nSecter;
   22738:	e0bffe17 	ldw	r2,-8(fp)
   2273c:	e0ffff17 	ldw	r3,-4(fp)
   22740:	10c09015 	stw	r3,576(r2)
        }
    }
    return bSuccess;          
   22744:	e0bffd17 	ldw	r2,-12(fp)
}     
   22748:	e037883a 	mov	sp,fp
   2274c:	dfc00117 	ldw	ra,4(sp)
   22750:	df000017 	ldw	fp,0(sp)
   22754:	dec00204 	addi	sp,sp,8
   22758:	f800283a 	ret

0002275c <fatFindDirectory>:

//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
   2275c:	defff804 	addi	sp,sp,-32
   22760:	dfc00715 	stw	ra,28(sp)
   22764:	df000615 	stw	fp,24(sp)
   22768:	df000604 	addi	fp,sp,24
   2276c:	e13ffe15 	stw	r4,-8(fp)
   22770:	e17fff15 	stw	r5,-4(fp)
    FAT_DIRECTORY *pDir=NULL;
   22774:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
   22778:	e0bfff17 	ldw	r2,-4(fp)
   2277c:	1006917a 	slli	r3,r2,5
   22780:	e0bffe17 	ldw	r2,-8(fp)
   22784:	10800617 	ldw	r2,24(r2)
   22788:	100b883a 	mov	r5,r2
   2278c:	1809883a 	mov	r4,r3
   22790:	002b2a00 	call	2b2a0 <__udivsi3>
   22794:	e0bffb15 	stw	r2,-20(fp)
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
   22798:	e0bffe17 	ldw	r2,-8(fp)
   2279c:	10c00e17 	ldw	r3,56(r2)
   227a0:	e0bffb17 	ldw	r2,-20(fp)
   227a4:	1885883a 	add	r2,r3,r2
   227a8:	e0bffc15 	stw	r2,-16(fp)
        // read sector
    if (fatReadSecter(pVol, nSecter)){
   227ac:	e17ffc17 	ldw	r5,-16(fp)
   227b0:	e13ffe17 	ldw	r4,-8(fp)
   227b4:	00226cc0 	call	226cc <fatReadSecter>
   227b8:	10000d26 	beq	r2,zero,227f0 <fatFindDirectory+0x94>
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
   227bc:	e0bfff17 	ldw	r2,-4(fp)
   227c0:	1006917a 	slli	r3,r2,5
   227c4:	e0bffe17 	ldw	r2,-8(fp)
   227c8:	10800617 	ldw	r2,24(r2)
   227cc:	100b883a 	mov	r5,r2
   227d0:	1809883a 	mov	r4,r3
   227d4:	002b3040 	call	2b304 <__umodsi3>
   227d8:	e0bffd15 	stw	r2,-12(fp)
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
   227dc:	e0bffe17 	ldw	r2,-8(fp)
   227e0:	10c01004 	addi	r3,r2,64
   227e4:	e0bffd17 	ldw	r2,-12(fp)
   227e8:	1885883a 	add	r2,r3,r2
   227ec:	e0bffa15 	stw	r2,-24(fp)
    }        
        
    return pDir;        
   227f0:	e0bffa17 	ldw	r2,-24(fp)
}
   227f4:	e037883a 	mov	sp,fp
   227f8:	dfc00117 	ldw	ra,4(sp)
   227fc:	df000017 	ldw	fp,0(sp)
   22800:	dec00204 	addi	sp,sp,8
   22804:	f800283a 	ret

00022808 <fatFindUnusedDirectory>:

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
   22808:	defff604 	addi	sp,sp,-40
   2280c:	dfc00915 	stw	ra,36(sp)
   22810:	df000815 	stw	fp,32(sp)
   22814:	df000804 	addi	fp,sp,32
   22818:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Dir = -1;
   2281c:	00bfffc4 	movi	r2,-1
   22820:	e0bff815 	stw	r2,-32(fp)
    FAT_DIRECTORY *pDir=NULL;
   22824:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
   22828:	00800084 	movi	r2,2
   2282c:	e0bff915 	stw	r2,-28(fp)
    bool bDone = FALSE;
   22830:	e03ffa15 	stw	zero,-24(fp)
             
    while(!bDone){             
   22834:	00003006 	br	228f8 <fatFindUnusedDirectory+0xf0>
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
   22838:	e0bff917 	ldw	r2,-28(fp)
   2283c:	1006917a 	slli	r3,r2,5
   22840:	e0bfff17 	ldw	r2,-4(fp)
   22844:	10800617 	ldw	r2,24(r2)
   22848:	100b883a 	mov	r5,r2
   2284c:	1809883a 	mov	r4,r3
   22850:	002b2a00 	call	2b2a0 <__udivsi3>
   22854:	e0bffc15 	stw	r2,-16(fp)
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
   22858:	e0bfff17 	ldw	r2,-4(fp)
   2285c:	10c00e17 	ldw	r3,56(r2)
   22860:	e0bffc17 	ldw	r2,-16(fp)
   22864:	1885883a 	add	r2,r3,r2
   22868:	e0bffd15 	stw	r2,-12(fp)
            // read sector
        if (fatReadSecter(pVol, nSecter)){
   2286c:	e17ffd17 	ldw	r5,-12(fp)
   22870:	e13fff17 	ldw	r4,-4(fp)
   22874:	00226cc0 	call	226cc <fatReadSecter>
   22878:	10001e26 	beq	r2,zero,228f4 <fatFindUnusedDirectory+0xec>
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
   2287c:	e0bff917 	ldw	r2,-28(fp)
   22880:	1006917a 	slli	r3,r2,5
   22884:	e0bfff17 	ldw	r2,-4(fp)
   22888:	10800617 	ldw	r2,24(r2)
   2288c:	100b883a 	mov	r5,r2
   22890:	1809883a 	mov	r4,r3
   22894:	002b3040 	call	2b304 <__umodsi3>
   22898:	e0bffe15 	stw	r2,-8(fp)
            pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
   2289c:	e0bfff17 	ldw	r2,-4(fp)
   228a0:	10c01004 	addi	r3,r2,64
   228a4:	e0bffe17 	ldw	r2,-8(fp)
   228a8:	1885883a 	add	r2,r3,r2
   228ac:	e0bffb15 	stw	r2,-20(fp)
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
   228b0:	e13ffb17 	ldw	r4,-20(fp)
   228b4:	00223600 	call	22360 <fatIsLastDir>
   228b8:	1000031e 	bne	r2,zero,228c8 <fatFindUnusedDirectory+0xc0>
   228bc:	e13ffb17 	ldw	r4,-20(fp)
   228c0:	00224500 	call	22450 <fatIsUnusedDir>
   228c4:	10000726 	beq	r2,zero,228e4 <fatFindUnusedDirectory+0xdc>
                bDone = TRUE;
   228c8:	00800044 	movi	r2,1
   228cc:	e0bffa15 	stw	r2,-24(fp)
                if (fatIsUnusedDir(pDir))
   228d0:	e13ffb17 	ldw	r4,-20(fp)
   228d4:	00224500 	call	22450 <fatIsUnusedDir>
   228d8:	10000226 	beq	r2,zero,228e4 <fatFindUnusedDirectory+0xdc>
                    Dir = nDirectoryIndex;
   228dc:	e0bff917 	ldw	r2,-28(fp)
   228e0:	e0bff815 	stw	r2,-32(fp)
            }
            nDirectoryIndex++;        
   228e4:	e0bff917 	ldw	r2,-28(fp)
   228e8:	10800044 	addi	r2,r2,1
   228ec:	e0bff915 	stw	r2,-28(fp)
   228f0:	00000106 	br	228f8 <fatFindUnusedDirectory+0xf0>
        }else{
                bDone = FALSE;
   228f4:	e03ffa15 	stw	zero,-24(fp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
   228f8:	e0bffa17 	ldw	r2,-24(fp)
   228fc:	103fce26 	beq	r2,zero,22838 <_gp+0xfffe77f8>
        }else{
                bDone = FALSE;
        }
    }             
    
    return Dir;      
   22900:	e0bff817 	ldw	r2,-32(fp)
}
   22904:	e037883a 	mov	sp,fp
   22908:	dfc00117 	ldw	ra,4(sp)
   2290c:	df000017 	ldw	fp,0(sp)
   22910:	dec00204 	addi	sp,sp,8
   22914:	f800283a 	ret

00022918 <fatMount>:

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
   22918:	deff7604 	addi	sp,sp,-552
   2291c:	dfc08915 	stw	ra,548(sp)
   22920:	df008815 	stw	fp,544(sp)
   22924:	dc008715 	stw	r16,540(sp)
   22928:	df008804 	addi	fp,sp,544
   2292c:	e13ffe15 	stw	r4,-8(fp)
    bool bSuccess = TRUE;
   22930:	00800044 	movi	r2,1
   22934:	e0bf7815 	stw	r2,-544(fp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
   22938:	e0bffe17 	ldw	r2,-8(fp)
   2293c:	10800117 	ldw	r2,4(r2)
   22940:	e0fffe17 	ldw	r3,-8(fp)
   22944:	18c00017 	ldw	r3,0(r3)
   22948:	e13f7e04 	addi	r4,fp,-520
   2294c:	200d883a 	mov	r6,r4
   22950:	000b883a 	mov	r5,zero
   22954:	1809883a 	mov	r4,r3
   22958:	103ee83a 	callr	r2
   2295c:	1000021e 	bne	r2,zero,22968 <fatMount+0x50>
    //if (!pVol->ReadBlock512(pVol->DiskHandle, 8192, szBlock)){
        FAT_DEBUG(("Read section 0 error.\n"));
        return FALSE;
   22960:	0005883a 	mov	r2,zero
   22964:	0000cd06 	br	22c9c <fatMount+0x384>
        return FALSE;
    }
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
   22968:	00806f84 	movi	r2,446
   2296c:	e0bf7915 	stw	r2,-540(fp)
    PartitionType = szBlock[FirstPartitionEntry + 4];
   22970:	e0bf7917 	ldw	r2,-540(fp)
   22974:	10800104 	addi	r2,r2,4
   22978:	e0ff7e04 	addi	r3,fp,-520
   2297c:	1885883a 	add	r2,r3,r2
   22980:	10800003 	ldbu	r2,0(r2)
   22984:	10803fcc 	andi	r2,r2,255
   22988:	e0bf7a15 	stw	r2,-536(fp)
    if (PartitionType == PARTITION_FAT16){
   2298c:	e0bf7a17 	ldw	r2,-536(fp)
   22990:	108001a0 	cmpeqi	r2,r2,6
   22994:	1000081e 	bne	r2,zero,229b8 <fatMount+0xa0>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32 || PartitionType == PARTITION_FAT32_CHS){
   22998:	e0bf7a17 	ldw	r2,-536(fp)
   2299c:	10800320 	cmpeqi	r2,r2,12
   229a0:	1000051e 	bne	r2,zero,229b8 <fatMount+0xa0>
   229a4:	e0bf7a17 	ldw	r2,-536(fp)
   229a8:	108002e0 	cmpeqi	r2,r2,11
   229ac:	1000021e 	bne	r2,zero,229b8 <fatMount+0xa0>
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
   229b0:	0005883a 	mov	r2,zero
   229b4:	0000b906 	br	22c9c <fatMount+0x384>
    }       
    pVol->Partition_Type = PartitionType; 
   229b8:	e0ff7a17 	ldw	r3,-536(fp)
   229bc:	e0bffe17 	ldw	r2,-8(fp)
   229c0:	10c00315 	stw	r3,12(r2)
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
   229c4:	e0bf7917 	ldw	r2,-540(fp)
   229c8:	10800204 	addi	r2,r2,8
   229cc:	e0ff7e04 	addi	r3,fp,-520
   229d0:	1885883a 	add	r2,r3,r2
   229d4:	01400104 	movi	r5,4
   229d8:	1009883a 	mov	r4,r2
   229dc:	00226440 	call	22644 <fatArray2Value>
   229e0:	e0bf7b15 	stw	r2,-532(fp)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
   229e4:	e0bffe17 	ldw	r2,-8(fp)
   229e8:	10800117 	ldw	r2,4(r2)
   229ec:	e0fffe17 	ldw	r3,-8(fp)
   229f0:	18c00017 	ldw	r3,0(r3)
   229f4:	e13f7b17 	ldw	r4,-532(fp)
   229f8:	e17f7e04 	addi	r5,fp,-520
   229fc:	280d883a 	mov	r6,r5
   22a00:	200b883a 	mov	r5,r4
   22a04:	1809883a 	mov	r4,r3
   22a08:	103ee83a 	callr	r2
   22a0c:	1000021e 	bne	r2,zero,22a18 <fatMount+0x100>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
   22a10:	0005883a 	mov	r2,zero
   22a14:	0000a106 	br	22c9c <fatMount+0x384>
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
   22a18:	e0ff7b17 	ldw	r3,-532(fp)
   22a1c:	e0bffe17 	ldw	r2,-8(fp)
   22a20:	10c00515 	stw	r3,20(r2)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
   22a24:	e0bf8103 	ldbu	r2,-508(fp)
   22a28:	10803fcc 	andi	r2,r2,255
   22a2c:	1006923a 	slli	r3,r2,8
   22a30:	e0bf80c3 	ldbu	r2,-509(fp)
   22a34:	10803fcc 	andi	r2,r2,255
   22a38:	1885883a 	add	r2,r3,r2
   22a3c:	1007883a 	mov	r3,r2
   22a40:	e0bffe17 	ldw	r2,-8(fp)
   22a44:	10c00615 	stw	r3,24(r2)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
   22a48:	e0bf8143 	ldbu	r2,-507(fp)
   22a4c:	10c03fcc 	andi	r3,r2,255
   22a50:	e0bffe17 	ldw	r2,-8(fp)
   22a54:	10c00715 	stw	r3,28(r2)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
   22a58:	e0bf81c3 	ldbu	r2,-505(fp)
   22a5c:	10803fcc 	andi	r2,r2,255
   22a60:	1006923a 	slli	r3,r2,8
   22a64:	e0bf8183 	ldbu	r2,-506(fp)
   22a68:	10803fcc 	andi	r2,r2,255
   22a6c:	1885883a 	add	r2,r3,r2
   22a70:	1007883a 	mov	r3,r2
   22a74:	e0bffe17 	ldw	r2,-8(fp)
   22a78:	10c00815 	stw	r3,32(r2)
    pVol->BPB_NumFATs = szBlock[0x10];
   22a7c:	e0bf8203 	ldbu	r2,-504(fp)
   22a80:	10c03fcc 	andi	r3,r2,255
   22a84:	e0bffe17 	ldw	r2,-8(fp)
   22a88:	10c00915 	stw	r3,36(r2)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
   22a8c:	e0bf8283 	ldbu	r2,-502(fp)
   22a90:	10803fcc 	andi	r2,r2,255
   22a94:	1006923a 	slli	r3,r2,8
   22a98:	e0bf8243 	ldbu	r2,-503(fp)
   22a9c:	10803fcc 	andi	r2,r2,255
   22aa0:	1885883a 	add	r2,r3,r2
   22aa4:	1007883a 	mov	r3,r2
   22aa8:	e0bffe17 	ldw	r2,-8(fp)
   22aac:	10c00a15 	stw	r3,40(r2)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
   22ab0:	e0bf83c3 	ldbu	r2,-497(fp)
   22ab4:	10803fcc 	andi	r2,r2,255
   22ab8:	1006923a 	slli	r3,r2,8
   22abc:	e0bf8383 	ldbu	r2,-498(fp)
   22ac0:	10803fcc 	andi	r2,r2,255
   22ac4:	1885883a 	add	r2,r3,r2
   22ac8:	1007883a 	mov	r3,r2
   22acc:	e0bffe17 	ldw	r2,-8(fp)
   22ad0:	10c00b15 	stw	r3,44(r2)
    
    // add for v2.0
    pVol->Secter_Index = -1;
   22ad4:	e0bffe17 	ldw	r2,-8(fp)
   22ad8:	00ffffc4 	movi	r3,-1
   22adc:	10c09015 	stw	r3,576(r2)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
   22ae0:	e0bffe17 	ldw	r2,-8(fp)
   22ae4:	10801004 	addi	r2,r2,64
   22ae8:	01808004 	movi	r6,512
   22aec:	000b883a 	mov	r5,zero
   22af0:	1009883a 	mov	r4,r2
   22af4:	002e7f80 	call	2e7f8 <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32 || pVol->Partition_Type == PARTITION_FAT32_CHS){
   22af8:	e0bffe17 	ldw	r2,-8(fp)
   22afc:	10800317 	ldw	r2,12(r2)
   22b00:	10800320 	cmpeqi	r2,r2,12
   22b04:	1000041e 	bne	r2,zero,22b18 <fatMount+0x200>
   22b08:	e0bffe17 	ldw	r2,-8(fp)
   22b0c:	10800317 	ldw	r2,12(r2)
   22b10:	108002d8 	cmpnei	r2,r2,11
   22b14:	1000081e 	bne	r2,zero,22b38 <fatMount+0x220>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
   22b18:	e0bf7e04 	addi	r2,fp,-520
   22b1c:	10800904 	addi	r2,r2,36
   22b20:	01400104 	movi	r5,4
   22b24:	1009883a 	mov	r4,r2
   22b28:	00226440 	call	22644 <fatArray2Value>
   22b2c:	1007883a 	mov	r3,r2
   22b30:	e0bffe17 	ldw	r2,-8(fp)
   22b34:	10c00b15 	stw	r3,44(r2)
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
   22b38:	e0bffe17 	ldw	r2,-8(fp)
   22b3c:	10800617 	ldw	r2,24(r2)
   22b40:	10808020 	cmpeqi	r2,r2,512
   22b44:	1000021e 	bne	r2,zero,22b50 <fatMount+0x238>
        FAT_DEBUG(("This program only supports FAT BPB_BytsPerSec == %d\n", MY_SECTER_SIZE));
        return FALSE; // only support FAT16 in this example
   22b48:	0005883a 	mov	r2,zero
   22b4c:	00005306 	br	22c9c <fatMount+0x384>
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", gVolumeInfo.BPB_NumFATs, gVolumeInfo.BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", gVolumeInfo.BPB_RootEntCnt, gVolumeInfo.BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
   22b50:	e0bffe17 	ldw	r2,-8(fp)
   22b54:	10c00517 	ldw	r3,20(r2)
   22b58:	e0bffe17 	ldw	r2,-8(fp)
   22b5c:	10800817 	ldw	r2,32(r2)
   22b60:	1887883a 	add	r3,r3,r2
   22b64:	e0bffe17 	ldw	r2,-8(fp)
   22b68:	10c00d15 	stw	r3,52(r2)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
   22b6c:	e0bffe17 	ldw	r2,-8(fp)
   22b70:	14000d17 	ldw	r16,52(r2)
   22b74:	e0bffe17 	ldw	r2,-8(fp)
   22b78:	10c00917 	ldw	r3,36(r2)
   22b7c:	e0bffe17 	ldw	r2,-8(fp)
   22b80:	10800b17 	ldw	r2,44(r2)
   22b84:	100b883a 	mov	r5,r2
   22b88:	1809883a 	mov	r4,r3
   22b8c:	002b35c0 	call	2b35c <__mulsi3>
   22b90:	8087883a 	add	r3,r16,r2
   22b94:	e0bffe17 	ldw	r2,-8(fp)
   22b98:	10c00e15 	stw	r3,56(r2)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
   22b9c:	e0bffe17 	ldw	r2,-8(fp)
   22ba0:	14000e17 	ldw	r16,56(r2)
   22ba4:	e0bffe17 	ldw	r2,-8(fp)
   22ba8:	10800a17 	ldw	r2,40(r2)
   22bac:	1006917a 	slli	r3,r2,5
   22bb0:	e0bffe17 	ldw	r2,-8(fp)
   22bb4:	10800617 	ldw	r2,24(r2)
   22bb8:	1885883a 	add	r2,r3,r2
   22bbc:	10ffffc4 	addi	r3,r2,-1
   22bc0:	e0bffe17 	ldw	r2,-8(fp)
   22bc4:	10800617 	ldw	r2,24(r2)
   22bc8:	100b883a 	mov	r5,r2
   22bcc:	1809883a 	mov	r4,r3
   22bd0:	002b2a00 	call	2b2a0 <__udivsi3>
   22bd4:	8087883a 	add	r3,r16,r2
   22bd8:	e0bffe17 	ldw	r2,-8(fp)
   22bdc:	10c00f15 	stw	r3,60(r2)
    printf("ENTRY SECTOR: %d\r\n", pVol->FatEntrySecter);
   22be0:	e0bffe17 	ldw	r2,-8(fp)
   22be4:	10800d17 	ldw	r2,52(r2)
   22be8:	100b883a 	mov	r5,r2
   22bec:	010000f4 	movhi	r4,3
   22bf0:	21066e04 	addi	r4,r4,6584
   22bf4:	002ea900 	call	2ea90 <printf>
    printf("ROOT DIR SECTOR: %d\r\n", pVol->RootDirectoryEntrySecter);
   22bf8:	e0bffe17 	ldw	r2,-8(fp)
   22bfc:	10800e17 	ldw	r2,56(r2)
   22c00:	100b883a 	mov	r5,r2
   22c04:	010000f4 	movhi	r4,3
   22c08:	21067304 	addi	r4,r4,6604
   22c0c:	002ea900 	call	2ea90 <printf>
    printf("DATA SECTOR: %d\r\n", pVol->DataEntrySecter);
   22c10:	e0bffe17 	ldw	r2,-8(fp)
   22c14:	10800f17 	ldw	r2,60(r2)
   22c18:	100b883a 	mov	r5,r2
   22c1c:	010000f4 	movhi	r4,3
   22c20:	21067904 	addi	r4,r4,6628
   22c24:	002ea900 	call	2ea90 <printf>
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
   22c28:	e0bffe17 	ldw	r2,-8(fp)
   22c2c:	10c00617 	ldw	r3,24(r2)
   22c30:	e0bffe17 	ldw	r2,-8(fp)
   22c34:	10800717 	ldw	r2,28(r2)
   22c38:	100b883a 	mov	r5,r2
   22c3c:	1809883a 	mov	r4,r3
   22c40:	002b35c0 	call	2b35c <__mulsi3>
   22c44:	1007883a 	mov	r3,r2
   22c48:	e0bffe17 	ldw	r2,-8(fp)
   22c4c:	10c00c15 	stw	r3,48(r2)
    nFatTableSecterNum = pVol->BPB_NumFATs * pVol->BPB_FATSz;
   22c50:	e0bffe17 	ldw	r2,-8(fp)
   22c54:	10c00917 	ldw	r3,36(r2)
   22c58:	e0bffe17 	ldw	r2,-8(fp)
   22c5c:	10800b17 	ldw	r2,44(r2)
   22c60:	100b883a 	mov	r5,r2
   22c64:	1809883a 	mov	r4,r3
   22c68:	002b35c0 	call	2b35c <__mulsi3>
   22c6c:	e0bf7c15 	stw	r2,-528(fp)
    nFatTableSize = nFatTableSecterNum * pVol->BPB_BytsPerSec;
   22c70:	e0bffe17 	ldw	r2,-8(fp)
   22c74:	10800617 	ldw	r2,24(r2)
   22c78:	e0ff7c17 	ldw	r3,-528(fp)
   22c7c:	180b883a 	mov	r5,r3
   22c80:	1009883a 	mov	r4,r2
   22c84:	002b35c0 	call	2b35c <__mulsi3>
   22c88:	e0bf7d15 	stw	r2,-524(fp)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
   22c8c:	e0bffe17 	ldw	r2,-8(fp)
   22c90:	e0ff7817 	ldw	r3,-544(fp)
   22c94:	10c00415 	stw	r3,16(r2)
    return bSuccess;   
   22c98:	e0bf7817 	ldw	r2,-544(fp)
    

}
   22c9c:	e6ffff04 	addi	sp,fp,-4
   22ca0:	dfc00217 	ldw	ra,8(sp)
   22ca4:	df000117 	ldw	fp,4(sp)
   22ca8:	dc000017 	ldw	r16,0(sp)
   22cac:	dec00304 	addi	sp,sp,12
   22cb0:	f800283a 	ret

00022cb4 <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
   22cb4:	defffb04 	addi	sp,sp,-20
   22cb8:	dfc00415 	stw	ra,16(sp)
   22cbc:	df000315 	stw	fp,12(sp)
   22cc0:	df000304 	addi	fp,sp,12
   22cc4:	e13ffd15 	stw	r4,-12(fp)
   22cc8:	e17ffe15 	stw	r5,-8(fp)
   22ccc:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
   22cd0:	e17fff17 	ldw	r5,-4(fp)
   22cd4:	e13ffe17 	ldw	r4,-8(fp)
   22cd8:	0023d5c0 	call	23d5c <SDLIB_ReadBlock512>
}
   22cdc:	e037883a 	mov	sp,fp
   22ce0:	dfc00117 	ldw	ra,4(sp)
   22ce4:	df000017 	ldw	fp,0(sp)
   22ce8:	dec00204 	addi	sp,sp,8
   22cec:	f800283a 	ret

00022cf0 <SD_WriteBlock512>:

bool SD_WriteBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
   22cf0:	defffb04 	addi	sp,sp,-20
   22cf4:	dfc00415 	stw	ra,16(sp)
   22cf8:	df000315 	stw	fp,12(sp)
   22cfc:	df000304 	addi	fp,sp,12
   22d00:	e13ffd15 	stw	r4,-12(fp)
   22d04:	e17ffe15 	stw	r5,-8(fp)
   22d08:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_WriteBlock512(PysicalSelector, szBuf);
   22d0c:	e17fff17 	ldw	r5,-4(fp)
   22d10:	e13ffe17 	ldw	r4,-8(fp)
   22d14:	0023ddc0 	call	23ddc <SDLIB_WriteBlock512>
}
   22d18:	e037883a 	mov	sp,fp
   22d1c:	dfc00117 	ldw	ra,4(sp)
   22d20:	df000017 	ldw	fp,0(sp)
   22d24:	dec00204 	addi	sp,sp,8
   22d28:	f800283a 	ret

00022d2c <fatMountSdcard>:

FAT_HANDLE fatMountSdcard(void){
   22d2c:	defff804 	addi	sp,sp,-32
   22d30:	dfc00715 	stw	ra,28(sp)
   22d34:	df000615 	stw	fp,24(sp)
   22d38:	df000604 	addi	fp,sp,24
    FAT_HANDLE hFat = 0;
   22d3c:	e03ffa15 	stw	zero,-24(fp)
    VOLUME_INFO *pVol;
    const int nMaxTry=10;
   22d40:	00800284 	movi	r2,10
   22d44:	e0bffd15 	stw	r2,-12(fp)
    bool bFind = FALSE;
   22d48:	e03ffb15 	stw	zero,-20(fp)
    int nTry=0;
   22d4c:	e03ffc15 	stw	zero,-16(fp)
    bool bSuccess = TRUE;
   22d50:	00800044 	movi	r2,1
   22d54:	e0bffe15 	stw	r2,-8(fp)
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
   22d58:	00000706 	br	22d78 <fatMountSdcard+0x4c>
        bFind = SDLIB_Init();
   22d5c:	0023a400 	call	23a40 <SDLIB_Init>
   22d60:	e0bffb15 	stw	r2,-20(fp)
        if (!bFind)
   22d64:	e0bffb17 	ldw	r2,-20(fp)
   22d68:	1000031e 	bne	r2,zero,22d78 <fatMountSdcard+0x4c>
            usleep(100*1000);
   22d6c:	010000b4 	movhi	r4,2
   22d70:	2121a804 	addi	r4,r4,-31072
   22d74:	00303800 	call	30380 <usleep>
    int nTry=0;
    bool bSuccess = TRUE;
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
   22d78:	e0bffb17 	ldw	r2,-20(fp)
   22d7c:	1000051e 	bne	r2,zero,22d94 <fatMountSdcard+0x68>
   22d80:	e0bffc17 	ldw	r2,-16(fp)
   22d84:	10c00044 	addi	r3,r2,1
   22d88:	e0fffc15 	stw	r3,-16(fp)
   22d8c:	e0fffd17 	ldw	r3,-12(fp)
   22d90:	10fff216 	blt	r2,r3,22d5c <_gp+0xfffe7d1c>
        bFind = SDLIB_Init();
        if (!bFind)
            usleep(100*1000);
    }
    if (!bFind){
   22d94:	e0bffb17 	ldw	r2,-20(fp)
   22d98:	1000021e 	bne	r2,zero,22da4 <fatMountSdcard+0x78>
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
   22d9c:	e0bffa17 	ldw	r2,-24(fp)
   22da0:	00001a06 	br	22e0c <fatMountSdcard+0xe0>
    }    
    
    hFat = malloc(sizeof(VOLUME_INFO));
   22da4:	01009104 	movi	r4,580
   22da8:	002e7a80 	call	2e7a8 <malloc>
   22dac:	e0bffa15 	stw	r2,-24(fp)
    pVol = (VOLUME_INFO *)hFat;
   22db0:	e0bffa17 	ldw	r2,-24(fp)
   22db4:	e0bfff15 	stw	r2,-4(fp)
    pVol->ReadBlock512 = SD_ReadBlock512;
   22db8:	e0ffff17 	ldw	r3,-4(fp)
   22dbc:	008000b4 	movhi	r2,2
   22dc0:	108b2d04 	addi	r2,r2,11444
   22dc4:	18800115 	stw	r2,4(r3)
    pVol->WriteBlock512 = SD_WriteBlock512;
   22dc8:	e0ffff17 	ldw	r3,-4(fp)
   22dcc:	008000b4 	movhi	r2,2
   22dd0:	108b3c04 	addi	r2,r2,11504
   22dd4:	18800215 	stw	r2,8(r3)
    bSuccess = fatMount(pVol);
   22dd8:	e13fff17 	ldw	r4,-4(fp)
   22ddc:	00229180 	call	22918 <fatMount>
   22de0:	e0bffe15 	stw	r2,-8(fp)
  
    if (bSuccess){
   22de4:	e0bffe17 	ldw	r2,-8(fp)
   22de8:	10000426 	beq	r2,zero,22dfc <fatMountSdcard+0xd0>
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
   22dec:	e0bfff17 	ldw	r2,-4(fp)
   22df0:	00c00044 	movi	r3,1
   22df4:	10c00415 	stw	r3,16(r2)
   22df8:	00000306 	br	22e08 <fatMountSdcard+0xdc>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
        free((void *)hFat);
   22dfc:	e13ffa17 	ldw	r4,-24(fp)
   22e00:	002e7bc0 	call	2e7bc <free>
        hFat = 0;
   22e04:	e03ffa15 	stw	zero,-24(fp)
    }        

    return hFat;
   22e08:	e0bffa17 	ldw	r2,-24(fp)
}
   22e0c:	e037883a 	mov	sp,fp
   22e10:	dfc00117 	ldw	ra,4(sp)
   22e14:	df000017 	ldw	fp,0(sp)
   22e18:	dec00204 	addi	sp,sp,8
   22e1c:	f800283a 	ret

00022e20 <crc16>:
    0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,
    0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
    0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
alt_u16 crc16(const alt_u8 *buffer, int len){
   22e20:	defffb04 	addi	sp,sp,-20
   22e24:	df000415 	stw	fp,16(sp)
   22e28:	df000404 	addi	fp,sp,16
   22e2c:	e13ffe15 	stw	r4,-8(fp)
   22e30:	e17fff15 	stw	r5,-4(fp)

    int counter;
    alt_u16 crc = 0;
   22e34:	e03ffd0d 	sth	zero,-12(fp)
    for( counter = 0; counter < len; counter++)
   22e38:	e03ffc15 	stw	zero,-16(fp)
   22e3c:	00001906 	br	22ea4 <crc16+0x84>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
   22e40:	e0bffd0b 	ldhu	r2,-12(fp)
   22e44:	1004923a 	slli	r2,r2,8
   22e48:	100b883a 	mov	r5,r2
   22e4c:	e0bffd0b 	ldhu	r2,-12(fp)
   22e50:	1004d23a 	srli	r2,r2,8
   22e54:	10ffffcc 	andi	r3,r2,65535
   22e58:	e0bffe17 	ldw	r2,-8(fp)
   22e5c:	11000044 	addi	r4,r2,1
   22e60:	e13ffe15 	stw	r4,-8(fp)
   22e64:	10800003 	ldbu	r2,0(r2)
   22e68:	10803fcc 	andi	r2,r2,255
   22e6c:	1080201c 	xori	r2,r2,128
   22e70:	10bfe004 	addi	r2,r2,-128
   22e74:	1884f03a 	xor	r2,r3,r2
   22e78:	10c03fcc 	andi	r3,r2,255
   22e7c:	008000f4 	movhi	r2,3
   22e80:	10867d84 	addi	r2,r2,6646
   22e84:	18c7883a 	add	r3,r3,r3
   22e88:	10c5883a 	add	r2,r2,r3
   22e8c:	1080000b 	ldhu	r2,0(r2)
   22e90:	2884f03a 	xor	r2,r5,r2
   22e94:	e0bffd0d 	sth	r2,-12(fp)
  
alt_u16 crc16(const alt_u8 *buffer, int len){

    int counter;
    alt_u16 crc = 0;
    for( counter = 0; counter < len; counter++)
   22e98:	e0bffc17 	ldw	r2,-16(fp)
   22e9c:	10800044 	addi	r2,r2,1
   22ea0:	e0bffc15 	stw	r2,-16(fp)
   22ea4:	e0fffc17 	ldw	r3,-16(fp)
   22ea8:	e0bfff17 	ldw	r2,-4(fp)
   22eac:	18bfe416 	blt	r3,r2,22e40 <_gp+0xfffe7e00>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
    return crc;
   22eb0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   22eb4:	e037883a 	mov	sp,fp
   22eb8:	df000017 	ldw	fp,0(sp)
   22ebc:	dec00104 	addi	sp,sp,4
   22ec0:	f800283a 	ret

00022ec4 <crc7_byte>:
      0x0e, 0x07, 0x1c, 0x15, 0x2a, 0x23, 0x38, 0x31,
      0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

alt_u8 crc7_byte(alt_u8 crc, alt_u8 data)
{
   22ec4:	defffd04 	addi	sp,sp,-12
   22ec8:	df000215 	stw	fp,8(sp)
   22ecc:	df000204 	addi	fp,sp,8
   22ed0:	2007883a 	mov	r3,r4
   22ed4:	2805883a 	mov	r2,r5
   22ed8:	e0fffe05 	stb	r3,-8(fp)
   22edc:	e0bfff05 	stb	r2,-4(fp)
        return crc7_syndrome_table[(crc << 1) ^ data];
   22ee0:	e0bffe03 	ldbu	r2,-8(fp)
   22ee4:	1085883a 	add	r2,r2,r2
   22ee8:	1007883a 	mov	r3,r2
   22eec:	e0bfff03 	ldbu	r2,-4(fp)
   22ef0:	1886f03a 	xor	r3,r3,r2
   22ef4:	008000f4 	movhi	r2,3
   22ef8:	1086fd84 	addi	r2,r2,7158
   22efc:	10c5883a 	add	r2,r2,r3
   22f00:	10800003 	ldbu	r2,0(r2)
}
   22f04:	e037883a 	mov	sp,fp
   22f08:	df000017 	ldw	fp,0(sp)
   22f0c:	dec00104 	addi	sp,sp,4
   22f10:	f800283a 	ret

00022f14 <crc7>:
 * Context: any
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
   22f14:	defffb04 	addi	sp,sp,-20
   22f18:	dfc00415 	stw	ra,16(sp)
   22f1c:	df000315 	stw	fp,12(sp)
   22f20:	df000304 	addi	fp,sp,12
   22f24:	2005883a 	mov	r2,r4
   22f28:	e17ffe15 	stw	r5,-8(fp)
   22f2c:	e1bfff15 	stw	r6,-4(fp)
   22f30:	e0bffd05 	stb	r2,-12(fp)
      while (len--)
   22f34:	00000906 	br	22f5c <crc7+0x48>
            crc = crc7_byte(crc, *buffer++);
   22f38:	e13ffd03 	ldbu	r4,-12(fp)
   22f3c:	e0bffe17 	ldw	r2,-8(fp)
   22f40:	10c00044 	addi	r3,r2,1
   22f44:	e0fffe15 	stw	r3,-8(fp)
   22f48:	10800003 	ldbu	r2,0(r2)
   22f4c:	10803fcc 	andi	r2,r2,255
   22f50:	100b883a 	mov	r5,r2
   22f54:	0022ec40 	call	22ec4 <crc7_byte>
   22f58:	e0bffd05 	stb	r2,-12(fp)
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
      while (len--)
   22f5c:	e0bfff17 	ldw	r2,-4(fp)
   22f60:	10ffffc4 	addi	r3,r2,-1
   22f64:	e0ffff15 	stw	r3,-4(fp)
   22f68:	103ff31e 	bne	r2,zero,22f38 <_gp+0xfffe7ef8>
            crc = crc7_byte(crc, *buffer++);
      return crc;
   22f6c:	e0bffd03 	ldbu	r2,-12(fp)
}
   22f70:	e037883a 	mov	sp,fp
   22f74:	dfc00117 	ldw	ra,4(sp)
   22f78:	df000017 	ldw	fp,0(sp)
   22f7c:	dec00204 	addi	sp,sp,8
   22f80:	f800283a 	ret

00022f84 <SDHAL_IsSupport4Bits>:

#include "sd_hw.h"
#include "crc16.h"


bool SDHAL_IsSupport4Bits(void){
   22f84:	defffe04 	addi	sp,sp,-8
   22f88:	df000115 	stw	fp,4(sp)
   22f8c:	df000104 	addi	fp,sp,4
    bool bYes = FALSE;
   22f90:	e03fff15 	stw	zero,-4(fp)
#ifdef SD_4BIT_MODE
    bYes = TRUE;
   22f94:	00800044 	movi	r2,1
   22f98:	e0bfff15 	stw	r2,-4(fp)
#endif    
    return bYes;
   22f9c:	e0bfff17 	ldw	r2,-4(fp)
}
   22fa0:	e037883a 	mov	sp,fp
   22fa4:	df000017 	ldw	fp,0(sp)
   22fa8:	dec00104 	addi	sp,sp,4
   22fac:	f800283a 	ret

00022fb0 <SDHAL_Init>:

void SDHAL_Init(void){
   22fb0:	deffff04 	addi	sp,sp,-4
   22fb4:	df000015 	stw	fp,0(sp)
   22fb8:	d839883a 	mov	fp,sp
    SD_CMD_OUT;
   22fbc:	00c00044 	movi	r3,1
   22fc0:	00800134 	movhi	r2,4
   22fc4:	10844104 	addi	r2,r2,4356
   22fc8:	10c00035 	stwio	r3,0(r2)
    SD_DAT_IN;
   22fcc:	0007883a 	mov	r3,zero
   22fd0:	00800134 	movhi	r2,4
   22fd4:	10843d04 	addi	r2,r2,4340
   22fd8:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   22fdc:	00c00044 	movi	r3,1
   22fe0:	00800134 	movhi	r2,4
   22fe4:	10844404 	addi	r2,r2,4368
   22fe8:	10c00035 	stwio	r3,0(r2)
    SD_CMD_HIGH;
   22fec:	00c00044 	movi	r3,1
   22ff0:	00800134 	movhi	r2,4
   22ff4:	10844004 	addi	r2,r2,4352
   22ff8:	10c00035 	stwio	r3,0(r2)
    SD_DAT_LOW;    
   22ffc:	0007883a 	mov	r3,zero
   23000:	00800134 	movhi	r2,4
   23004:	10843c04 	addi	r2,r2,4336
   23008:	10c00035 	stwio	r3,0(r2)
}
   2300c:	0001883a 	nop
   23010:	e037883a 	mov	sp,fp
   23014:	df000017 	ldw	fp,0(sp)
   23018:	dec00104 	addi	sp,sp,4
   2301c:	f800283a 	ret

00023020 <SDHAL_SendCmd>:

void SDHAL_SendCmd(alt_u8 szCommand[6], int nCmdLen){
   23020:	defffa04 	addi	sp,sp,-24
   23024:	df000515 	stw	fp,20(sp)
   23028:	df000504 	addi	fp,sp,20
   2302c:	e13ffe15 	stw	r4,-8(fp)
   23030:	e17fff15 	stw	r5,-4(fp)

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
   23034:	00c00044 	movi	r3,1
   23038:	00800134 	movhi	r2,4
   2303c:	10844104 	addi	r2,r2,4356
   23040:	10c00035 	stwio	r3,0(r2)
    for(i=0;i<nCmdLen;i++){
   23044:	e03ffb15 	stw	zero,-20(fp)
   23048:	00002b06 	br	230f8 <SDHAL_SendCmd+0xd8>
        Mask = 0x80;
   2304c:	00bfe004 	movi	r2,-128
   23050:	e0bffd05 	stb	r2,-12(fp)
        Data = szCommand[i];
   23054:	e0bffb17 	ldw	r2,-20(fp)
   23058:	e0fffe17 	ldw	r3,-8(fp)
   2305c:	1885883a 	add	r2,r3,r2
   23060:	10800003 	ldbu	r2,0(r2)
   23064:	e0bffd45 	stb	r2,-11(fp)
        for(k=0;k<8;k++){
   23068:	e03ffc15 	stw	zero,-16(fp)
   2306c:	00001c06 	br	230e0 <SDHAL_SendCmd+0xc0>
            SD_CLK_LOW;
   23070:	0007883a 	mov	r3,zero
   23074:	00800134 	movhi	r2,4
   23078:	10844404 	addi	r2,r2,4368
   2307c:	10c00035 	stwio	r3,0(r2)
            if (Data & Mask)
   23080:	e0fffd43 	ldbu	r3,-11(fp)
   23084:	e0bffd03 	ldbu	r2,-12(fp)
   23088:	1884703a 	and	r2,r3,r2
   2308c:	10803fcc 	andi	r2,r2,255
   23090:	10000526 	beq	r2,zero,230a8 <SDHAL_SendCmd+0x88>
                SD_CMD_HIGH;
   23094:	00c00044 	movi	r3,1
   23098:	00800134 	movhi	r2,4
   2309c:	10844004 	addi	r2,r2,4352
   230a0:	10c00035 	stwio	r3,0(r2)
   230a4:	00000406 	br	230b8 <SDHAL_SendCmd+0x98>
            else
                SD_CMD_LOW;
   230a8:	0007883a 	mov	r3,zero
   230ac:	00800134 	movhi	r2,4
   230b0:	10844004 	addi	r2,r2,4352
   230b4:	10c00035 	stwio	r3,0(r2)
            SD_CLK_HIGH;
   230b8:	00c00044 	movi	r3,1
   230bc:	00800134 	movhi	r2,4
   230c0:	10844404 	addi	r2,r2,4368
   230c4:	10c00035 	stwio	r3,0(r2)
            //    
            Mask >>= 1;
   230c8:	e0bffd03 	ldbu	r2,-12(fp)
   230cc:	1004d07a 	srli	r2,r2,1
   230d0:	e0bffd05 	stb	r2,-12(fp)
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
        Mask = 0x80;
        Data = szCommand[i];
        for(k=0;k<8;k++){
   230d4:	e0bffc17 	ldw	r2,-16(fp)
   230d8:	10800044 	addi	r2,r2,1
   230dc:	e0bffc15 	stw	r2,-16(fp)
   230e0:	e0bffc17 	ldw	r2,-16(fp)
   230e4:	10800210 	cmplti	r2,r2,8
   230e8:	103fe11e 	bne	r2,zero,23070 <_gp+0xfffe8030>

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
   230ec:	e0bffb17 	ldw	r2,-20(fp)
   230f0:	10800044 	addi	r2,r2,1
   230f4:	e0bffb15 	stw	r2,-20(fp)
   230f8:	e0fffb17 	ldw	r3,-20(fp)
   230fc:	e0bfff17 	ldw	r2,-4(fp)
   23100:	18bfd216 	blt	r3,r2,2304c <_gp+0xfffe800c>
            //    
            Mask >>= 1;
           // usleep(1);
        }
    }
}
   23104:	0001883a 	nop
   23108:	e037883a 	mov	sp,fp
   2310c:	df000017 	ldw	fp,0(sp)
   23110:	dec00104 	addi	sp,sp,4
   23114:	f800283a 	ret

00023118 <SDHAL_GetResponse>:




bool SDHAL_GetResponse(alt_u8 szResponse[], int nLen){
   23118:	defff504 	addi	sp,sp,-44
   2311c:	dfc00a15 	stw	ra,40(sp)
   23120:	df000915 	stw	fp,36(sp)
   23124:	df000904 	addi	fp,sp,36
   23128:	e13ffe15 	stw	r4,-8(fp)
   2312c:	e17fff15 	stw	r5,-4(fp)
    bool bDone, bTimeout;
    const int nMaxCnt = 20; // !!!! Note. the value should be large than 8
   23130:	00800504 	movi	r2,20
   23134:	e0bffc15 	stw	r2,-16(fp)
    int nCnt, nBitCnt, nIndex;
    alt_u8 Value;
    

    SD_CMD_IN;
   23138:	0007883a 	mov	r3,zero
   2313c:	00800134 	movhi	r2,4
   23140:	10844104 	addi	r2,r2,4356
   23144:	10c00035 	stwio	r3,0(r2)
    
    //===== check start bit == 0
    nCnt = 0;
   23148:	e03ff915 	stw	zero,-28(fp)
    bDone = FALSE;
   2314c:	e03ff715 	stw	zero,-36(fp)
    bTimeout = FALSE;
   23150:	e03ff815 	stw	zero,-32(fp)
    while(!bDone && !bTimeout){
   23154:	00001606 	br	231b0 <SDHAL_GetResponse+0x98>
        SD_CLK_LOW;
   23158:	0007883a 	mov	r3,zero
   2315c:	00800134 	movhi	r2,4
   23160:	10844404 	addi	r2,r2,4368
   23164:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   23168:	00c00044 	movi	r3,1
   2316c:	00800134 	movhi	r2,4
   23170:	10844404 	addi	r2,r2,4368
   23174:	10c00035 	stwio	r3,0(r2)
        if(!(SD_TEST_CMD))
   23178:	00800134 	movhi	r2,4
   2317c:	10844004 	addi	r2,r2,4352
   23180:	10800037 	ldwio	r2,0(r2)
   23184:	1000031e 	bne	r2,zero,23194 <SDHAL_GetResponse+0x7c>
            bDone = TRUE;
   23188:	00800044 	movi	r2,1
   2318c:	e0bff715 	stw	r2,-36(fp)
   23190:	00000706 	br	231b0 <SDHAL_GetResponse+0x98>
        else if(nCnt++ > nMaxCnt)
   23194:	e0bff917 	ldw	r2,-28(fp)
   23198:	10c00044 	addi	r3,r2,1
   2319c:	e0fff915 	stw	r3,-28(fp)
   231a0:	e0fffc17 	ldw	r3,-16(fp)
   231a4:	1880020e 	bge	r3,r2,231b0 <SDHAL_GetResponse+0x98>
            bTimeout = TRUE;
   231a8:	00800044 	movi	r2,1
   231ac:	e0bff815 	stw	r2,-32(fp)
    
    //===== check start bit == 0
    nCnt = 0;
    bDone = FALSE;
    bTimeout = FALSE;
    while(!bDone && !bTimeout){
   231b0:	e0bff717 	ldw	r2,-36(fp)
   231b4:	1000021e 	bne	r2,zero,231c0 <SDHAL_GetResponse+0xa8>
   231b8:	e0bff817 	ldw	r2,-32(fp)
   231bc:	103fe626 	beq	r2,zero,23158 <_gp+0xfffe8118>
            bDone = TRUE;
        else if(nCnt++ > nMaxCnt)
            bTimeout = TRUE;
    }
    
    if (!bDone || bTimeout)
   231c0:	e0bff717 	ldw	r2,-36(fp)
   231c4:	10000226 	beq	r2,zero,231d0 <SDHAL_GetResponse+0xb8>
   231c8:	e0bff817 	ldw	r2,-32(fp)
   231cc:	10000226 	beq	r2,zero,231d8 <SDHAL_GetResponse+0xc0>
        return FALSE;
   231d0:	0005883a 	mov	r2,zero
   231d4:	00005006 	br	23318 <SDHAL_GetResponse+0x200>
  
    //===== check transmitter bit == 0

    SD_CLK_LOW;
   231d8:	0007883a 	mov	r3,zero
   231dc:	00800134 	movhi	r2,4
   231e0:	10844404 	addi	r2,r2,4368
   231e4:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   231e8:	00c00044 	movi	r3,1
   231ec:	00800134 	movhi	r2,4
   231f0:	10844404 	addi	r2,r2,4368
   231f4:	10c00035 	stwio	r3,0(r2)
    if (SD_TEST_CMD)
   231f8:	00800134 	movhi	r2,4
   231fc:	10844004 	addi	r2,r2,4352
   23200:	10800037 	ldwio	r2,0(r2)
   23204:	10000226 	beq	r2,zero,23210 <SDHAL_GetResponse+0xf8>
        return FALSE;   // 0 is expected
   23208:	0005883a 	mov	r2,zero
   2320c:	00004206 	br	23318 <SDHAL_GetResponse+0x200>

    
    //===== read content + CRC + end-bits ======
    nIndex = 2;
   23210:	00800084 	movi	r2,2
   23214:	e0bffa15 	stw	r2,-24(fp)
    nBitCnt = nLen*8;
   23218:	e0bfff17 	ldw	r2,-4(fp)
   2321c:	100490fa 	slli	r2,r2,3
   23220:	e0bffd15 	stw	r2,-12(fp)
    bDone = FALSE;
   23224:	e03ff715 	stw	zero,-36(fp)
    Value = 0;
   23228:	e03ffb05 	stb	zero,-20(fp)
    while(nIndex < nBitCnt){
   2322c:	00003406 	br	23300 <SDHAL_GetResponse+0x1e8>
        SD_CLK_LOW;
   23230:	0007883a 	mov	r3,zero
   23234:	00800134 	movhi	r2,4
   23238:	10844404 	addi	r2,r2,4368
   2323c:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   23240:	00c00044 	movi	r3,1
   23244:	00800134 	movhi	r2,4
   23248:	10844404 	addi	r2,r2,4368
   2324c:	10c00035 	stwio	r3,0(r2)
        if (SD_TEST_CMD){
   23250:	00800134 	movhi	r2,4
   23254:	10844004 	addi	r2,r2,4352
   23258:	10800037 	ldwio	r2,0(r2)
   2325c:	10001026 	beq	r2,zero,232a0 <SDHAL_GetResponse+0x188>
            Value |= 0x80 >> (nIndex % 8);
   23260:	e0fffa17 	ldw	r3,-24(fp)
   23264:	00a00034 	movhi	r2,32768
   23268:	108001c4 	addi	r2,r2,7
   2326c:	1884703a 	and	r2,r3,r2
   23270:	1000040e 	bge	r2,zero,23284 <SDHAL_GetResponse+0x16c>
   23274:	10bfffc4 	addi	r2,r2,-1
   23278:	00fffe04 	movi	r3,-8
   2327c:	10c4b03a 	or	r2,r2,r3
   23280:	10800044 	addi	r2,r2,1
   23284:	1007883a 	mov	r3,r2
   23288:	00802004 	movi	r2,128
   2328c:	10c5d83a 	sra	r2,r2,r3
   23290:	1007883a 	mov	r3,r2
   23294:	e0bffb03 	ldbu	r2,-20(fp)
   23298:	1884b03a 	or	r2,r3,r2
   2329c:	e0bffb05 	stb	r2,-20(fp)
        }
        if (nIndex%8 == 7){
   232a0:	e0fffa17 	ldw	r3,-24(fp)
   232a4:	00a00034 	movhi	r2,32768
   232a8:	108001c4 	addi	r2,r2,7
   232ac:	1884703a 	and	r2,r3,r2
   232b0:	1000040e 	bge	r2,zero,232c4 <SDHAL_GetResponse+0x1ac>
   232b4:	10bfffc4 	addi	r2,r2,-1
   232b8:	00fffe04 	movi	r3,-8
   232bc:	10c4b03a 	or	r2,r2,r3
   232c0:	10800044 	addi	r2,r2,1
   232c4:	108001d8 	cmpnei	r2,r2,7
   232c8:	10000a1e 	bne	r2,zero,232f4 <SDHAL_GetResponse+0x1dc>
            szResponse[nIndex/8] = Value;
   232cc:	e0bffa17 	ldw	r2,-24(fp)
   232d0:	1000010e 	bge	r2,zero,232d8 <SDHAL_GetResponse+0x1c0>
   232d4:	108001c4 	addi	r2,r2,7
   232d8:	1005d0fa 	srai	r2,r2,3
   232dc:	1007883a 	mov	r3,r2
   232e0:	e0bffe17 	ldw	r2,-8(fp)
   232e4:	10c5883a 	add	r2,r2,r3
   232e8:	e0fffb03 	ldbu	r3,-20(fp)
   232ec:	10c00005 	stb	r3,0(r2)
            Value = 0;
   232f0:	e03ffb05 	stb	zero,-20(fp)
        }
        nIndex++;
   232f4:	e0bffa17 	ldw	r2,-24(fp)
   232f8:	10800044 	addi	r2,r2,1
   232fc:	e0bffa15 	stw	r2,-24(fp)
    //===== read content + CRC + end-bits ======
    nIndex = 2;
    nBitCnt = nLen*8;
    bDone = FALSE;
    Value = 0;
    while(nIndex < nBitCnt){
   23300:	e0fffa17 	ldw	r3,-24(fp)
   23304:	e0bffd17 	ldw	r2,-12(fp)
   23308:	18bfc916 	blt	r3,r2,23230 <_gp+0xfffe81f0>
        }
        nIndex++;
    } 
    
    // A command with response. 8 clocks after the card response end bit.
    SDHAL_DummyClock(8);
   2330c:	01000204 	movi	r4,8
   23310:	00239dc0 	call	239dc <SDHAL_DummyClock>
    
    return TRUE;
   23314:	00800044 	movi	r2,1
}
   23318:	e037883a 	mov	sp,fp
   2331c:	dfc00117 	ldw	ra,4(sp)
   23320:	df000017 	ldw	fp,0(sp)
   23324:	dec00204 	addi	sp,sp,8
   23328:	f800283a 	ret

0002332c <SDHAL_ReadData>:


bool SDHAL_ReadData(alt_u8 szBuf[], int nBufLen){
   2332c:	deff6e04 	addi	sp,sp,-584
   23330:	dfc09115 	stw	ra,580(sp)
   23334:	df009015 	stw	fp,576(sp)
   23338:	df009004 	addi	fp,sp,576
   2333c:	e13ffe15 	stw	r4,-8(fp)
   23340:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
   23344:	00800044 	movi	r2,1
   23348:	e0bf7015 	stw	r2,-576(fp)
    int nTry = 0;
   2334c:	e03f7115 	stw	zero,-572(fp)
    const int nMaxTry = 5000; 
   23350:	0084e204 	movi	r2,5000
   23354:	e0bf7a15 	stw	r2,-536(fp)
    int i, j,k,n=0;   
   23358:	e03f7515 	stw	zero,-556(fp)
    
    alt_u8 Data8_0,Data8_1,Data8_2,Data8_3;
    
#endif    
    
    SD_DAT_IN;
   2335c:	0007883a 	mov	r3,zero
   23360:	00800134 	movhi	r2,4
   23364:	10843d04 	addi	r2,r2,4340
   23368:	10c00035 	stwio	r3,0(r2)
    
    // wait start bits (zero)
    while(1){
      SD_CLK_LOW;
   2336c:	0007883a 	mov	r3,zero
   23370:	00800134 	movhi	r2,4
   23374:	10844404 	addi	r2,r2,4368
   23378:	10c00035 	stwio	r3,0(r2)
      SD_CLK_HIGH;
   2337c:	00c00044 	movi	r3,1
   23380:	00800134 	movhi	r2,4
   23384:	10844404 	addi	r2,r2,4368
   23388:	10c00035 	stwio	r3,0(r2)
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
   2338c:	00800134 	movhi	r2,4
   23390:	10843c04 	addi	r2,r2,4336
   23394:	10800037 	ldwio	r2,0(r2)
   23398:	108003cc 	andi	r2,r2,15
   2339c:	10000726 	beq	r2,zero,233bc <SDHAL_ReadData+0x90>
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
      if (nTry++ > nMaxTry)
   233a0:	e0bf7117 	ldw	r2,-572(fp)
   233a4:	10c00044 	addi	r3,r2,1
   233a8:	e0ff7115 	stw	r3,-572(fp)
   233ac:	e0ff7a17 	ldw	r3,-536(fp)
   233b0:	18bfee0e 	bge	r3,r2,2336c <_gp+0xfffe832c>
        return FALSE;        
   233b4:	0005883a 	mov	r2,zero
   233b8:	00010b06 	br	237e8 <SDHAL_ReadData+0x4bc>
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
   233bc:	0001883a 	nop
    }     
    
    // read data (512byte = 1 block)
    
#ifdef SD_4BIT_MODE
     for(i=0;i<nBufLen/4;i++)
   233c0:	e03f7215 	stw	zero,-568(fp)
   233c4:	00007106 	br	2358c <SDHAL_ReadData+0x260>
     {
        k = 0;
   233c8:	e03f7415 	stw	zero,-560(fp)
        Data8   = 0;
   233cc:	e03f7605 	stb	zero,-552(fp)
        Data8_0 = 0;
   233d0:	e03f7885 	stb	zero,-542(fp)
        Data8_1 = 0;
   233d4:	e03f78c5 	stb	zero,-541(fp)
        Data8_2 = 0;
   233d8:	e03f7905 	stb	zero,-540(fp)
        Data8_3 = 0;
   233dc:	e03f7945 	stb	zero,-539(fp)
        
        for(j=0;j<8;j++)
   233e0:	e03f7315 	stw	zero,-564(fp)
   233e4:	00004f06 	br	23524 <SDHAL_ReadData+0x1f8>
        {
          SD_CLK_LOW;
   233e8:	0007883a 	mov	r3,zero
   233ec:	00800134 	movhi	r2,4
   233f0:	10844404 	addi	r2,r2,4368
   233f4:	10c00035 	stwio	r3,0(r2)
          SD_CLK_HIGH;
   233f8:	00c00044 	movi	r3,1
   233fc:	00800134 	movhi	r2,4
   23400:	10844404 	addi	r2,r2,4368
   23404:	10c00035 	stwio	r3,0(r2)
          Data8   <<= 4;
   23408:	e0bf7603 	ldbu	r2,-552(fp)
   2340c:	1004913a 	slli	r2,r2,4
   23410:	e0bf7605 	stb	r2,-552(fp)
          Data8_0 <<= 1;
   23414:	e0bf7883 	ldbu	r2,-542(fp)
   23418:	1085883a 	add	r2,r2,r2
   2341c:	e0bf7885 	stb	r2,-542(fp)
          Data8_1 <<= 1;
   23420:	e0bf78c3 	ldbu	r2,-541(fp)
   23424:	1085883a 	add	r2,r2,r2
   23428:	e0bf78c5 	stb	r2,-541(fp)
          Data8_2 <<= 1;
   2342c:	e0bf7903 	ldbu	r2,-540(fp)
   23430:	1085883a 	add	r2,r2,r2
   23434:	e0bf7905 	stb	r2,-540(fp)
          Data8_3 <<= 1; 
   23438:	e0bf7943 	ldbu	r2,-539(fp)
   2343c:	1085883a 	add	r2,r2,r2
   23440:	e0bf7945 	stb	r2,-539(fp)
          
          DataTemp = SD_TEST_DAT;
   23444:	00800134 	movhi	r2,4
   23448:	10843c04 	addi	r2,r2,4336
   2344c:	10800037 	ldwio	r2,0(r2)
   23450:	e0bf7b05 	stb	r2,-532(fp)
          Data8   |= (DataTemp & 0x0F);
   23454:	e0bf7b03 	ldbu	r2,-532(fp)
   23458:	108003cc 	andi	r2,r2,15
   2345c:	1007883a 	mov	r3,r2
   23460:	e0bf7603 	ldbu	r2,-552(fp)
   23464:	1884b03a 	or	r2,r3,r2
   23468:	e0bf7605 	stb	r2,-552(fp)
          Data8_0 |= (DataTemp & 0x01);
   2346c:	e0bf7b03 	ldbu	r2,-532(fp)
   23470:	1080004c 	andi	r2,r2,1
   23474:	1007883a 	mov	r3,r2
   23478:	e0bf7883 	ldbu	r2,-542(fp)
   2347c:	1884b03a 	or	r2,r3,r2
   23480:	e0bf7885 	stb	r2,-542(fp)
          Data8_1 |= ((DataTemp >> 1) & 0x01);
   23484:	e0bf7b03 	ldbu	r2,-532(fp)
   23488:	1004d07a 	srli	r2,r2,1
   2348c:	1080004c 	andi	r2,r2,1
   23490:	1007883a 	mov	r3,r2
   23494:	e0bf78c3 	ldbu	r2,-541(fp)
   23498:	1884b03a 	or	r2,r3,r2
   2349c:	e0bf78c5 	stb	r2,-541(fp)
          Data8_2 |= ((DataTemp >> 2) & 0x01);
   234a0:	e0bf7b03 	ldbu	r2,-532(fp)
   234a4:	1004d0ba 	srli	r2,r2,2
   234a8:	1080004c 	andi	r2,r2,1
   234ac:	1007883a 	mov	r3,r2
   234b0:	e0bf7903 	ldbu	r2,-540(fp)
   234b4:	1884b03a 	or	r2,r3,r2
   234b8:	e0bf7905 	stb	r2,-540(fp)
          Data8_3 |= ((DataTemp >> 3) & 0x01);
   234bc:	e0bf7b03 	ldbu	r2,-532(fp)
   234c0:	1004d0fa 	srli	r2,r2,3
   234c4:	1080004c 	andi	r2,r2,1
   234c8:	1007883a 	mov	r3,r2
   234cc:	e0bf7943 	ldbu	r2,-539(fp)
   234d0:	1884b03a 	or	r2,r3,r2
   234d4:	e0bf7945 	stb	r2,-539(fp)
          
          k++;
   234d8:	e0bf7417 	ldw	r2,-560(fp)
   234dc:	10800044 	addi	r2,r2,1
   234e0:	e0bf7415 	stw	r2,-560(fp)
          if(k == 2)
   234e4:	e0bf7417 	ldw	r2,-560(fp)
   234e8:	10800098 	cmpnei	r2,r2,2
   234ec:	10000a1e 	bne	r2,zero,23518 <SDHAL_ReadData+0x1ec>
          {
            szBuf[n++] = Data8;
   234f0:	e0bf7517 	ldw	r2,-556(fp)
   234f4:	10c00044 	addi	r3,r2,1
   234f8:	e0ff7515 	stw	r3,-556(fp)
   234fc:	1007883a 	mov	r3,r2
   23500:	e0bffe17 	ldw	r2,-8(fp)
   23504:	10c5883a 	add	r2,r2,r3
   23508:	e0ff7603 	ldbu	r3,-552(fp)
   2350c:	10c00005 	stb	r3,0(r2)
            Data8 = 0;
   23510:	e03f7605 	stb	zero,-552(fp)
            k = 0;
   23514:	e03f7415 	stw	zero,-560(fp)
        Data8_0 = 0;
        Data8_1 = 0;
        Data8_2 = 0;
        Data8_3 = 0;
        
        for(j=0;j<8;j++)
   23518:	e0bf7317 	ldw	r2,-564(fp)
   2351c:	10800044 	addi	r2,r2,1
   23520:	e0bf7315 	stw	r2,-564(fp)
   23524:	e0bf7317 	ldw	r2,-564(fp)
   23528:	10800210 	cmplti	r2,r2,8
   2352c:	103fae1e 	bne	r2,zero,233e8 <_gp+0xfffe83a8>
            szBuf[n++] = Data8;
            Data8 = 0;
            k = 0;
          }
        } 
        szBuf_0[i] = Data8_0;
   23530:	e0ff7d84 	addi	r3,fp,-522
   23534:	e0bf7217 	ldw	r2,-568(fp)
   23538:	1885883a 	add	r2,r3,r2
   2353c:	e0ff7883 	ldbu	r3,-542(fp)
   23540:	10c00005 	stb	r3,0(r2)
        szBuf_1[i] = Data8_1;
   23544:	e0ff9d84 	addi	r3,fp,-394
   23548:	e0bf7217 	ldw	r2,-568(fp)
   2354c:	1885883a 	add	r2,r3,r2
   23550:	e0ff78c3 	ldbu	r3,-541(fp)
   23554:	10c00005 	stb	r3,0(r2)
        szBuf_2[i] = Data8_2;
   23558:	e0ffbd84 	addi	r3,fp,-266
   2355c:	e0bf7217 	ldw	r2,-568(fp)
   23560:	1885883a 	add	r2,r3,r2
   23564:	e0ff7903 	ldbu	r3,-540(fp)
   23568:	10c00005 	stb	r3,0(r2)
        szBuf_3[i] = Data8_3;
   2356c:	e0ffdd84 	addi	r3,fp,-138
   23570:	e0bf7217 	ldw	r2,-568(fp)
   23574:	1885883a 	add	r2,r3,r2
   23578:	e0ff7943 	ldbu	r3,-539(fp)
   2357c:	10c00005 	stb	r3,0(r2)
    }     
    
    // read data (512byte = 1 block)
    
#ifdef SD_4BIT_MODE
     for(i=0;i<nBufLen/4;i++)
   23580:	e0bf7217 	ldw	r2,-568(fp)
   23584:	10800044 	addi	r2,r2,1
   23588:	e0bf7215 	stw	r2,-568(fp)
   2358c:	e0bfff17 	ldw	r2,-4(fp)
   23590:	1000010e 	bge	r2,zero,23598 <SDHAL_ReadData+0x26c>
   23594:	108000c4 	addi	r2,r2,3
   23598:	1005d0ba 	srai	r2,r2,2
   2359c:	1007883a 	mov	r3,r2
   235a0:	e0bf7217 	ldw	r2,-568(fp)
   235a4:	10ff8816 	blt	r2,r3,233c8 <_gp+0xfffe8388>
#endif

    //===== CRC16 and end-bit check (each channel is seperated)
#ifdef SD_4BIT_MODE 
    // Not implement yet
    DataCrc16_0 = 0;
   235a8:	e03f768d 	sth	zero,-550(fp)
    DataCrc16_1 = 0;
   235ac:	e03f770d 	sth	zero,-548(fp)
    DataCrc16_2 = 0;
   235b0:	e03f778d 	sth	zero,-546(fp)
    DataCrc16_3 = 0;
   235b4:	e03f780d 	sth	zero,-544(fp)
    for(i=0;i<16;i++)
   235b8:	e03f7215 	stw	zero,-568(fp)
   235bc:	00003306 	br	2368c <SDHAL_ReadData+0x360>
    {
        SD_CLK_LOW;
   235c0:	0007883a 	mov	r3,zero
   235c4:	00800134 	movhi	r2,4
   235c8:	10844404 	addi	r2,r2,4368
   235cc:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   235d0:	00c00044 	movi	r3,1
   235d4:	00800134 	movhi	r2,4
   235d8:	10844404 	addi	r2,r2,4368
   235dc:	10c00035 	stwio	r3,0(r2)
        
        DataCrc16_0 <<= 1;
   235e0:	e0bf768b 	ldhu	r2,-550(fp)
   235e4:	1085883a 	add	r2,r2,r2
   235e8:	e0bf768d 	sth	r2,-550(fp)
        DataCrc16_1 <<= 1;
   235ec:	e0bf770b 	ldhu	r2,-548(fp)
   235f0:	1085883a 	add	r2,r2,r2
   235f4:	e0bf770d 	sth	r2,-548(fp)
        DataCrc16_2 <<= 1;
   235f8:	e0bf778b 	ldhu	r2,-546(fp)
   235fc:	1085883a 	add	r2,r2,r2
   23600:	e0bf778d 	sth	r2,-546(fp)
        DataCrc16_3 <<= 1;
   23604:	e0bf780b 	ldhu	r2,-544(fp)
   23608:	1085883a 	add	r2,r2,r2
   2360c:	e0bf780d 	sth	r2,-544(fp)
        
        DataTemp = SD_TEST_DAT;
   23610:	00800134 	movhi	r2,4
   23614:	10843c04 	addi	r2,r2,4336
   23618:	10800037 	ldwio	r2,0(r2)
   2361c:	e0bf7b05 	stb	r2,-532(fp)
        
        if (DataTemp & 0x01)
   23620:	e0bf7b03 	ldbu	r2,-532(fp)
   23624:	1080004c 	andi	r2,r2,1
   23628:	10000326 	beq	r2,zero,23638 <SDHAL_ReadData+0x30c>
            DataCrc16_0 |= 0x01;
   2362c:	e0bf768b 	ldhu	r2,-550(fp)
   23630:	10800054 	ori	r2,r2,1
   23634:	e0bf768d 	sth	r2,-550(fp)
         if(DataTemp & 0x02)
   23638:	e0bf7b03 	ldbu	r2,-532(fp)
   2363c:	1080008c 	andi	r2,r2,2
   23640:	10000326 	beq	r2,zero,23650 <SDHAL_ReadData+0x324>
            DataCrc16_1 |= 0x01;
   23644:	e0bf770b 	ldhu	r2,-548(fp)
   23648:	10800054 	ori	r2,r2,1
   2364c:	e0bf770d 	sth	r2,-548(fp)
         if(DataTemp & 0x04)
   23650:	e0bf7b03 	ldbu	r2,-532(fp)
   23654:	1080010c 	andi	r2,r2,4
   23658:	10000326 	beq	r2,zero,23668 <SDHAL_ReadData+0x33c>
            DataCrc16_2 |= 0x01;
   2365c:	e0bf778b 	ldhu	r2,-546(fp)
   23660:	10800054 	ori	r2,r2,1
   23664:	e0bf778d 	sth	r2,-546(fp)
         if(DataTemp & 0x08)
   23668:	e0bf7b03 	ldbu	r2,-532(fp)
   2366c:	1080020c 	andi	r2,r2,8
   23670:	10000326 	beq	r2,zero,23680 <SDHAL_ReadData+0x354>
            DataCrc16_3 |= 0x01;
   23674:	e0bf780b 	ldhu	r2,-544(fp)
   23678:	10800054 	ori	r2,r2,1
   2367c:	e0bf780d 	sth	r2,-544(fp)
    // Not implement yet
    DataCrc16_0 = 0;
    DataCrc16_1 = 0;
    DataCrc16_2 = 0;
    DataCrc16_3 = 0;
    for(i=0;i<16;i++)
   23680:	e0bf7217 	ldw	r2,-568(fp)
   23684:	10800044 	addi	r2,r2,1
   23688:	e0bf7215 	stw	r2,-568(fp)
   2368c:	e0bf7217 	ldw	r2,-568(fp)
   23690:	10800410 	cmplti	r2,r2,16
   23694:	103fca1e 	bne	r2,zero,235c0 <_gp+0xfffe8580>
         if(DataTemp & 0x08)
            DataCrc16_3 |= 0x01;
    }
    
    // check end bit (value 'one' is expected
    SD_CLK_LOW;
   23698:	0007883a 	mov	r3,zero
   2369c:	00800134 	movhi	r2,4
   236a0:	10844404 	addi	r2,r2,4368
   236a4:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   236a8:	00c00044 	movi	r3,1
   236ac:	00800134 	movhi	r2,4
   236b0:	10844404 	addi	r2,r2,4368
   236b4:	10c00035 	stwio	r3,0(r2)
    if ((SD_TEST_DAT & 0x0F) != 0x0F)
   236b8:	00800134 	movhi	r2,4
   236bc:	10843c04 	addi	r2,r2,4336
   236c0:	10800037 	ldwio	r2,0(r2)
   236c4:	108003cc 	andi	r2,r2,15
   236c8:	108003e0 	cmpeqi	r2,r2,15
   236cc:	1000011e 	bne	r2,zero,236d4 <SDHAL_ReadData+0x3a8>
        bSuccess = FALSE;
   236d0:	e03f7015 	stw	zero,-576(fp)
     
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
   236d4:	01000204 	movi	r4,8
   236d8:	00239dc0 	call	239dc <SDHAL_DummyClock>
     
    // check crc    
    if (bSuccess){
   236dc:	e0bf7017 	ldw	r2,-576(fp)
   236e0:	10000e26 	beq	r2,zero,2371c <SDHAL_ReadData+0x3f0>
        MyCrc16_0 = crc16(szBuf_0, nBufLen/4);
   236e4:	e0bfff17 	ldw	r2,-4(fp)
   236e8:	1000010e 	bge	r2,zero,236f0 <SDHAL_ReadData+0x3c4>
   236ec:	108000c4 	addi	r2,r2,3
   236f0:	1005d0ba 	srai	r2,r2,2
   236f4:	1007883a 	mov	r3,r2
   236f8:	e0bf7d84 	addi	r2,fp,-522
   236fc:	180b883a 	mov	r5,r3
   23700:	1009883a 	mov	r4,r2
   23704:	0022e200 	call	22e20 <crc16>
   23708:	e0bf7b8d 	sth	r2,-530(fp)
        if (MyCrc16_0 != DataCrc16_0)
   2370c:	e0ff7b8b 	ldhu	r3,-530(fp)
   23710:	e0bf768b 	ldhu	r2,-550(fp)
   23714:	18800126 	beq	r3,r2,2371c <SDHAL_ReadData+0x3f0>
            bSuccess = FALSE;
   23718:	e03f7015 	stw	zero,-576(fp)
    }    
    if (bSuccess){
   2371c:	e0bf7017 	ldw	r2,-576(fp)
   23720:	10000e26 	beq	r2,zero,2375c <SDHAL_ReadData+0x430>
        MyCrc16_1 = crc16(szBuf_1, nBufLen/4);
   23724:	e0bfff17 	ldw	r2,-4(fp)
   23728:	1000010e 	bge	r2,zero,23730 <SDHAL_ReadData+0x404>
   2372c:	108000c4 	addi	r2,r2,3
   23730:	1005d0ba 	srai	r2,r2,2
   23734:	1007883a 	mov	r3,r2
   23738:	e0bf9d84 	addi	r2,fp,-394
   2373c:	180b883a 	mov	r5,r3
   23740:	1009883a 	mov	r4,r2
   23744:	0022e200 	call	22e20 <crc16>
   23748:	e0bf7c0d 	sth	r2,-528(fp)
        if (MyCrc16_1 != DataCrc16_1)
   2374c:	e0ff7c0b 	ldhu	r3,-528(fp)
   23750:	e0bf770b 	ldhu	r2,-548(fp)
   23754:	18800126 	beq	r3,r2,2375c <SDHAL_ReadData+0x430>
            bSuccess = FALSE;
   23758:	e03f7015 	stw	zero,-576(fp)
    }   
    if (bSuccess){
   2375c:	e0bf7017 	ldw	r2,-576(fp)
   23760:	10000e26 	beq	r2,zero,2379c <SDHAL_ReadData+0x470>
        MyCrc16_2 = crc16(szBuf_2, nBufLen/4);
   23764:	e0bfff17 	ldw	r2,-4(fp)
   23768:	1000010e 	bge	r2,zero,23770 <SDHAL_ReadData+0x444>
   2376c:	108000c4 	addi	r2,r2,3
   23770:	1005d0ba 	srai	r2,r2,2
   23774:	1007883a 	mov	r3,r2
   23778:	e0bfbd84 	addi	r2,fp,-266
   2377c:	180b883a 	mov	r5,r3
   23780:	1009883a 	mov	r4,r2
   23784:	0022e200 	call	22e20 <crc16>
   23788:	e0bf7c8d 	sth	r2,-526(fp)
        if (MyCrc16_2 != DataCrc16_2)
   2378c:	e0ff7c8b 	ldhu	r3,-526(fp)
   23790:	e0bf778b 	ldhu	r2,-546(fp)
   23794:	18800126 	beq	r3,r2,2379c <SDHAL_ReadData+0x470>
            bSuccess = FALSE;
   23798:	e03f7015 	stw	zero,-576(fp)
    } 
    if (bSuccess){
   2379c:	e0bf7017 	ldw	r2,-576(fp)
   237a0:	10000e26 	beq	r2,zero,237dc <SDHAL_ReadData+0x4b0>
        MyCrc16_3 = crc16(szBuf_3, nBufLen/4);
   237a4:	e0bfff17 	ldw	r2,-4(fp)
   237a8:	1000010e 	bge	r2,zero,237b0 <SDHAL_ReadData+0x484>
   237ac:	108000c4 	addi	r2,r2,3
   237b0:	1005d0ba 	srai	r2,r2,2
   237b4:	1007883a 	mov	r3,r2
   237b8:	e0bfdd84 	addi	r2,fp,-138
   237bc:	180b883a 	mov	r5,r3
   237c0:	1009883a 	mov	r4,r2
   237c4:	0022e200 	call	22e20 <crc16>
   237c8:	e0bf7d0d 	sth	r2,-524(fp)
        if (MyCrc16_3 != DataCrc16_3)
   237cc:	e0ff7d0b 	ldhu	r3,-524(fp)
   237d0:	e0bf780b 	ldhu	r2,-544(fp)
   237d4:	18800126 	beq	r3,r2,237dc <SDHAL_ReadData+0x4b0>
            bSuccess = FALSE;
   237d8:	e03f7015 	stw	zero,-576(fp)
            j=0;
        }
    }
    printf("\r\n");*/
    //usleep(500);
    usleep(10000);
   237dc:	0109c404 	movi	r4,10000
   237e0:	00303800 	call	30380 <usleep>
    return bSuccess;
   237e4:	e0bf7017 	ldw	r2,-576(fp)
}
   237e8:	e037883a 	mov	sp,fp
   237ec:	dfc00117 	ldw	ra,4(sp)
   237f0:	df000017 	ldw	fp,0(sp)
   237f4:	dec00204 	addi	sp,sp,8
   237f8:	f800283a 	ret

000237fc <SDHAL_WriteData>:

bool SDHAL_WriteData(alt_u8 szDataWrite[], int nDataLen){
   237fc:	defff604 	addi	sp,sp,-40
   23800:	dfc00915 	stw	ra,36(sp)
   23804:	df000815 	stw	fp,32(sp)
   23808:	df000804 	addi	fp,sp,32
   2380c:	e13ffe15 	stw	r4,-8(fp)
   23810:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
   23814:	00800044 	movi	r2,1
   23818:	e0bff815 	stw	r2,-32(fp)
  //  const int nMaxTry = 5000; 
    int i, j;   
    alt_u8 Data8;
    alt_u16 DataCrc16;
    
    DataCrc16 = crc16(szDataWrite, nDataLen);
   2381c:	e17fff17 	ldw	r5,-4(fp)
   23820:	e13ffe17 	ldw	r4,-8(fp)
   23824:	0022e200 	call	22e20 <crc16>
   23828:	e0bffd0d 	sth	r2,-12(fp)
        break;
      if (nTry++ > nMaxTry)
        return FALSE;        
    } */    
    
    SD_DAT_OUT;
   2382c:	00c00044 	movi	r3,1
   23830:	00800134 	movhi	r2,4
   23834:	10843d04 	addi	r2,r2,4340
   23838:	10c00035 	stwio	r3,0(r2)
    // start bits (zero value)
    SD_CLK_LOW;
   2383c:	0007883a 	mov	r3,zero
   23840:	00800134 	movhi	r2,4
   23844:	10844404 	addi	r2,r2,4368
   23848:	10c00035 	stwio	r3,0(r2)
    SD_DAT_WRITE(0x00);  
   2384c:	0007883a 	mov	r3,zero
   23850:	00800134 	movhi	r2,4
   23854:	10843c04 	addi	r2,r2,4336
   23858:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   2385c:	00c00044 	movi	r3,1
   23860:	00800134 	movhi	r2,4
   23864:	10844404 	addi	r2,r2,4368
   23868:	10c00035 	stwio	r3,0(r2)
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
   2386c:	e03ff915 	stw	zero,-28(fp)
   23870:	00002206 	br	238fc <SDHAL_WriteData+0x100>
    {
      Data8 = szDataWrite[i];
   23874:	e0bff917 	ldw	r2,-28(fp)
   23878:	e0fffe17 	ldw	r3,-8(fp)
   2387c:	1885883a 	add	r2,r3,r2
   23880:	10800003 	ldbu	r2,0(r2)
   23884:	e0bffb05 	stb	r2,-20(fp)
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
   23888:	e03ffa15 	stw	zero,-24(fp)
   2388c:	00001506 	br	238e4 <SDHAL_WriteData+0xe8>
      {
        SD_CLK_LOW;
   23890:	0007883a 	mov	r3,zero
   23894:	00800134 	movhi	r2,4
   23898:	10844404 	addi	r2,r2,4368
   2389c:	10c00035 	stwio	r3,0(r2)
        //
        SD_DAT_WRITE((Data8 >> 4) & 0x0F);
   238a0:	e0bffb03 	ldbu	r2,-20(fp)
   238a4:	1004d13a 	srli	r2,r2,4
   238a8:	10803fcc 	andi	r2,r2,255
   238ac:	10c003cc 	andi	r3,r2,15
   238b0:	00800134 	movhi	r2,4
   238b4:	10843c04 	addi	r2,r2,4336
   238b8:	10c00035 	stwio	r3,0(r2)
        //            
        SD_CLK_HIGH;
   238bc:	00c00044 	movi	r3,1
   238c0:	00800134 	movhi	r2,4
   238c4:	10844404 	addi	r2,r2,4368
   238c8:	10c00035 	stwio	r3,0(r2)
        Data8 <<= 4; 
   238cc:	e0bffb03 	ldbu	r2,-20(fp)
   238d0:	1004913a 	slli	r2,r2,4
   238d4:	e0bffb05 	stb	r2,-20(fp)
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
    {
      Data8 = szDataWrite[i];
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
   238d8:	e0bffa17 	ldw	r2,-24(fp)
   238dc:	10800044 	addi	r2,r2,1
   238e0:	e0bffa15 	stw	r2,-24(fp)
   238e4:	e0bffa17 	ldw	r2,-24(fp)
   238e8:	10800090 	cmplti	r2,r2,2
   238ec:	103fe81e 	bne	r2,zero,23890 <_gp+0xfffe8850>
    SD_CLK_LOW;
    SD_DAT_WRITE(0x00);  
    SD_CLK_HIGH;
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
   238f0:	e0bff917 	ldw	r2,-28(fp)
   238f4:	10800044 	addi	r2,r2,1
   238f8:	e0bff915 	stw	r2,-28(fp)
   238fc:	e0fff917 	ldw	r3,-28(fp)
   23900:	e0bfff17 	ldw	r2,-4(fp)
   23904:	18bfdb16 	blt	r3,r2,23874 <_gp+0xfffe8834>

    
#endif    

    // stop bits (value 'one')
    SD_CLK_LOW;
   23908:	0007883a 	mov	r3,zero
   2390c:	00800134 	movhi	r2,4
   23910:	10844404 	addi	r2,r2,4368
   23914:	10c00035 	stwio	r3,0(r2)
#ifdef SD_4BIT_MODE
    SD_DAT_WRITE(0x0F);
   23918:	00c003c4 	movi	r3,15
   2391c:	00800134 	movhi	r2,4
   23920:	10843c04 	addi	r2,r2,4336
   23924:	10c00035 	stwio	r3,0(r2)
#else    
    SD_DAT_HIGH;
#endif     
    SD_CLK_HIGH;
   23928:	00c00044 	movi	r3,1
   2392c:	00800134 	movhi	r2,4
   23930:	10844404 	addi	r2,r2,4368
   23934:	10c00035 	stwio	r3,0(r2)
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
   23938:	0007883a 	mov	r3,zero
   2393c:	00800134 	movhi	r2,4
   23940:	10843d04 	addi	r2,r2,4340
   23944:	10c00035 	stwio	r3,0(r2)
bool bWriteSuccess = FALSE;    
   23948:	e03ffc15 	stw	zero,-16(fp)
for(i=0;i<32 && !bWriteSuccess;i++){        
   2394c:	e03ff915 	stw	zero,-28(fp)
   23950:	00001206 	br	2399c <SDHAL_WriteData+0x1a0>
    SD_CLK_LOW;
   23954:	0007883a 	mov	r3,zero
   23958:	00800134 	movhi	r2,4
   2395c:	10844404 	addi	r2,r2,4368
   23960:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   23964:	00c00044 	movi	r3,1
   23968:	00800134 	movhi	r2,4
   2396c:	10844404 	addi	r2,r2,4368
   23970:	10c00035 	stwio	r3,0(r2)
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
   23974:	00800134 	movhi	r2,4
   23978:	10843c04 	addi	r2,r2,4336
   2397c:	10800037 	ldwio	r2,0(r2)
   23980:	1080004c 	andi	r2,r2,1
   23984:	10000226 	beq	r2,zero,23990 <SDHAL_WriteData+0x194>
        bWriteSuccess = TRUE;
   23988:	00800044 	movi	r2,1
   2398c:	e0bffc15 	stw	r2,-16(fp)
    SD_CLK_HIGH;
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
bool bWriteSuccess = FALSE;    
for(i=0;i<32 && !bWriteSuccess;i++){        
   23990:	e0bff917 	ldw	r2,-28(fp)
   23994:	10800044 	addi	r2,r2,1
   23998:	e0bff915 	stw	r2,-28(fp)
   2399c:	e0bff917 	ldw	r2,-28(fp)
   239a0:	10800808 	cmpgei	r2,r2,32
   239a4:	1000021e 	bne	r2,zero,239b0 <SDHAL_WriteData+0x1b4>
   239a8:	e0bffc17 	ldw	r2,-16(fp)
   239ac:	103fe926 	beq	r2,zero,23954 <_gp+0xfffe8914>
    SD_CLK_LOW;
    SD_CLK_HIGH;
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
        bWriteSuccess = TRUE;
}
    if (!bWriteSuccess)
   239b0:	e0bffc17 	ldw	r2,-16(fp)
   239b4:	1000011e 	bne	r2,zero,239bc <SDHAL_WriteData+0x1c0>
        bSuccess = FALSE;
   239b8:	e03ff815 	stw	zero,-32(fp)
                
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
   239bc:	01000204 	movi	r4,8
   239c0:	00239dc0 	call	239dc <SDHAL_DummyClock>
    for(i=0; i<16; i++){
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }*/
    
    return bSuccess;
   239c4:	e0bff817 	ldw	r2,-32(fp)
    
}
   239c8:	e037883a 	mov	sp,fp
   239cc:	dfc00117 	ldw	ra,4(sp)
   239d0:	df000017 	ldw	fp,0(sp)
   239d4:	dec00204 	addi	sp,sp,8
   239d8:	f800283a 	ret

000239dc <SDHAL_DummyClock>:


void SDHAL_DummyClock(int nClockCnt){
   239dc:	defffd04 	addi	sp,sp,-12
   239e0:	df000215 	stw	fp,8(sp)
   239e4:	df000204 	addi	fp,sp,8
   239e8:	e13fff15 	stw	r4,-4(fp)
    int i;
    for(i=0;i<nClockCnt;i++){
   239ec:	e03ffe15 	stw	zero,-8(fp)
   239f0:	00000b06 	br	23a20 <SDHAL_DummyClock+0x44>
        SD_CLK_LOW;
   239f4:	0007883a 	mov	r3,zero
   239f8:	00800134 	movhi	r2,4
   239fc:	10844404 	addi	r2,r2,4368
   23a00:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   23a04:	00c00044 	movi	r3,1
   23a08:	00800134 	movhi	r2,4
   23a0c:	10844404 	addi	r2,r2,4368
   23a10:	10c00035 	stwio	r3,0(r2)
}


void SDHAL_DummyClock(int nClockCnt){
    int i;
    for(i=0;i<nClockCnt;i++){
   23a14:	e0bffe17 	ldw	r2,-8(fp)
   23a18:	10800044 	addi	r2,r2,1
   23a1c:	e0bffe15 	stw	r2,-8(fp)
   23a20:	e0fffe17 	ldw	r3,-8(fp)
   23a24:	e0bfff17 	ldw	r2,-4(fp)
   23a28:	18bff216 	blt	r3,r2,239f4 <_gp+0xfffe89b4>
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }
}
   23a2c:	0001883a 	nop
   23a30:	e037883a 	mov	sp,fp
   23a34:	df000017 	ldw	fp,0(sp)
   23a38:	dec00104 	addi	sp,sp,4
   23a3c:	f800283a 	ret

00023a40 <SDLIB_Init>:
static SD_INFO gSdInfo;


//-------------------------------------------------------------------------
bool SDLIB_Init(void)
{
   23a40:	defff604 	addi	sp,sp,-40
   23a44:	dfc00915 	stw	ra,36(sp)
   23a48:	df000815 	stw	fp,32(sp)
   23a4c:	df000804 	addi	fp,sp,32
    bool bSuccess = FALSE, bTimeout = FALSE;
   23a50:	e03ff815 	stw	zero,-32(fp)
   23a54:	e03ff915 	stw	zero,-28(fp)
   23a58:	d0a0db17 	ldw	r2,-31892(gp)
    alt_u8  szThisCID[16];
    const int nTimeout = alt_ticks_per_second();
   23a5c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 TimeStart;

    
   // alt_u8 x,y;
    memset(&gSdInfo, 0, sizeof(gSdInfo));
   23a60:	01800e04 	movi	r6,56
   23a64:	000b883a 	mov	r5,zero
   23a68:	010000f4 	movhi	r4,3
   23a6c:	210cef04 	addi	r4,r4,13244
   23a70:	002e7f80 	call	2e7f8 <memset>
    gSdInfo.bSupport4Bits = SD_IsSupport4Bits();
   23a74:	0023e880 	call	23e88 <SD_IsSupport4Bits>
   23a78:	1007883a 	mov	r3,r2
   23a7c:	008000f4 	movhi	r2,3
   23a80:	108cef04 	addi	r2,r2,13244
   23a84:	10c00015 	stw	r3,0(r2)

    SDCARD_DEBUG(("--- Power On, Card Identification Mode, Idle State\r\n"));
    SDCARD_DEBUG(("sd %d-bit mode\r\n", gSdInfo.bSupport4Bits?4:1));
  
    usleep(74*10);
   23a88:	0100b904 	movi	r4,740
   23a8c:	00303800 	call	30380 <usleep>
    
    SD_Init();
   23a90:	0023e5c0 	call	23e5c <SD_Init>

    
    //========================== CMD0 (None Response) ========
    // Reset all cards to idle state
    SD_CMD0();
   23a94:	0023eb00 	call	23eb0 <SD_CMD0>
    usleep(100*1000);
   23a98:	010000b4 	movhi	r4,2
   23a9c:	2121a804 	addi	r4,r4,-31072
   23aa0:	00303800 	call	30380 <usleep>
    
    //========================== CMD8 (Response R7) ==========
    //Sends SD Memory Card interface condition (Added in SDHC 2.0)
    if (SD_CMD8(SD_VHS_2V7_3V6, CMD8_DEFAULT_TEST_PATTERN)){
   23aa4:	01402a84 	movi	r5,170
   23aa8:	01000044 	movi	r4,1
   23aac:	0023f3c0 	call	23f3c <SD_CMD8>
   23ab0:	10000e26 	beq	r2,zero,23aec <SDLIB_Init+0xac>
        // OCR: Operation Condistions Register
        //gSdInfo.HostOCR32 = 0x01 << 30; //argument=0x40FF8000; // support HC
        gSdInfo.HostOCR32 = 0x40FF8000;
   23ab4:	008000f4 	movhi	r2,3
   23ab8:	108cef04 	addi	r2,r2,13244
   23abc:	00d04034 	movhi	r3,16640
   23ac0:	18e00004 	addi	r3,r3,-32768
   23ac4:	10c00315 	stw	r3,12(r2)
        gSdInfo.bVer2 = TRUE;
   23ac8:	008000f4 	movhi	r2,3
   23acc:	108cef04 	addi	r2,r2,13244
   23ad0:	00c00044 	movi	r3,1
   23ad4:	10c00115 	stw	r3,4(r2)
        gSdInfo.bSDHC = TRUE;
   23ad8:	008000f4 	movhi	r2,3
   23adc:	108cef04 	addi	r2,r2,13244
   23ae0:	00c00044 	movi	r3,1
   23ae4:	10c00215 	stw	r3,8(r2)
   23ae8:	00000806 	br	23b0c <SDLIB_Init+0xcc>
        SDCARD_DEBUG((" 2.0 \r\n"));
    }else{
        gSdInfo.HostOCR32 = 0x00040000;   
   23aec:	008000f4 	movhi	r2,3
   23af0:	108cef04 	addi	r2,r2,13244
   23af4:	00c00134 	movhi	r3,4
   23af8:	10c00315 	stw	r3,12(r2)
        SDCARD_TRACE(("CMD8 not supported\r\n"));
        
        // Reset cards to idle state
        SD_CMD0();
   23afc:	0023eb00 	call	23eb0 <SD_CMD0>
        usleep(100*1000);        
   23b00:	010000b4 	movhi	r4,2
   23b04:	2121a804 	addi	r4,r4,-31072
   23b08:	00303800 	call	30380 <usleep>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   23b0c:	d0a0dc17 	ldw	r2,-31888(gp)
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
   23b10:	e0bffb15 	stw	r2,-20(fp)
    while(!bSuccess && !bTimeout){
   23b14:	00002c06 	br	23bc8 <SDLIB_Init+0x188>
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_IDLE)){  // execute cmd55 before execute and ACMD
   23b18:	008000f4 	movhi	r2,3
   23b1c:	108cef04 	addi	r2,r2,13244
   23b20:	1080050b 	ldhu	r2,20(r2)
   23b24:	10bfffcc 	andi	r2,r2,65535
   23b28:	000b883a 	mov	r5,zero
   23b2c:	1009883a 	mov	r4,r2
   23b30:	00240c80 	call	240c8 <SD_CMD55>
   23b34:	1000021e 	bne	r2,zero,23b40 <SDLIB_Init+0x100>
            SDCARD_ERROR(("CMD55 NG\r\n"));
            return FALSE;
   23b38:	0005883a 	mov	r2,zero
   23b3c:	00008206 	br	23d48 <SDLIB_Init+0x308>
        }else{    
            bSuccess = SD_ACMD41(gSdInfo.HostOCR32, &gSdInfo.OCR32);
   23b40:	008000f4 	movhi	r2,3
   23b44:	108cef04 	addi	r2,r2,13244
   23b48:	10800317 	ldw	r2,12(r2)
   23b4c:	014000f4 	movhi	r5,3
   23b50:	294cf304 	addi	r5,r5,13260
   23b54:	1009883a 	mov	r4,r2
   23b58:	00242480 	call	24248 <SD_ACMD41>
   23b5c:	e0bff815 	stw	r2,-32(fp)
            if (bSuccess && gSdInfo.bSDHC && ((gSdInfo.OCR32 & 0x40000000) == 0x00)){
   23b60:	e0bff817 	ldw	r2,-32(fp)
   23b64:	10000c26 	beq	r2,zero,23b98 <SDLIB_Init+0x158>
   23b68:	008000f4 	movhi	r2,3
   23b6c:	108cef04 	addi	r2,r2,13244
   23b70:	10800217 	ldw	r2,8(r2)
   23b74:	10000826 	beq	r2,zero,23b98 <SDLIB_Init+0x158>
   23b78:	008000f4 	movhi	r2,3
   23b7c:	108cef04 	addi	r2,r2,13244
   23b80:	10800417 	ldw	r2,16(r2)
   23b84:	1090002c 	andhi	r2,r2,16384
   23b88:	1000031e 	bne	r2,zero,23b98 <SDLIB_Init+0x158>
                gSdInfo.bSDHC = FALSE;
   23b8c:	008000f4 	movhi	r2,3
   23b90:	108cef04 	addi	r2,r2,13244
   23b94:	10000215 	stw	zero,8(r2)
            }    
            // check timeout
            if (!bSuccess){
   23b98:	e0bff817 	ldw	r2,-32(fp)
   23b9c:	10000a1e 	bne	r2,zero,23bc8 <SDLIB_Init+0x188>
   23ba0:	d0e0dc17 	ldw	r3,-31888(gp)
                if ((alt_nticks() - TimeStart) > nTimeout){
   23ba4:	e0bffb17 	ldw	r2,-20(fp)
   23ba8:	1885c83a 	sub	r2,r3,r2
   23bac:	e0fffa17 	ldw	r3,-24(fp)
   23bb0:	1880032e 	bgeu	r3,r2,23bc0 <SDLIB_Init+0x180>
                    SDCARD_ERROR(("ACMD41[SD_APP_OP_COND] fail\r\n"));
                    bTimeout = TRUE;
   23bb4:	00800044 	movi	r2,1
   23bb8:	e0bff915 	stw	r2,-28(fp)
   23bbc:	00000206 	br	23bc8 <SDLIB_Init+0x188>
                }else{
                    usleep(10*1000);
   23bc0:	0109c404 	movi	r4,10000
   23bc4:	00303800 	call	30380 <usleep>
        SD_CMD0();
        usleep(100*1000);        
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
    while(!bSuccess && !bTimeout){
   23bc8:	e0bff817 	ldw	r2,-32(fp)
   23bcc:	1000021e 	bne	r2,zero,23bd8 <SDLIB_Init+0x198>
   23bd0:	e0bff917 	ldw	r2,-28(fp)
   23bd4:	103fd026 	beq	r2,zero,23b18 <_gp+0xfffe8ad8>
                    usleep(10*1000);
                }    
            }
        }
    }
    if (!bSuccess){
   23bd8:	e0bff817 	ldw	r2,-32(fp)
   23bdc:	1000021e 	bne	r2,zero,23be8 <SDLIB_Init+0x1a8>
        return FALSE;
   23be0:	0005883a 	mov	r2,zero
   23be4:	00005806 	br	23d48 <SDLIB_Init+0x308>
    }
   
    //========================== CMD2 ========================    
    // issue cmd2 & wait response 
    // ALL_SEND_CID (CMD2): Asks any card to send the CID numbers on the CMD line
    if (!SD_CMD2(gSdInfo.szCID, sizeof(gSdInfo.szCID))){
   23be8:	01400444 	movi	r5,17
   23bec:	010000f4 	movhi	r4,3
   23bf0:	210cf484 	addi	r4,r4,13266
   23bf4:	00243e40 	call	243e4 <SD_CMD2>
   23bf8:	1000021e 	bne	r2,zero,23c04 <SDLIB_Init+0x1c4>
        SDCARD_ERROR(("CMD2 fail\r\n"));
        return FALSE;
   23bfc:	0005883a 	mov	r2,zero
   23c00:	00005106 	br	23d48 <SDLIB_Init+0x308>
    SDCARD_TRACE(("--- Power On, Card Identification Mode, Identification State\r\n"));

    //========================== CMD3 ========================        
    // issue cmd3 & wait response, finally get RCA
    // CMD3 (SEND_RELATIVE_ADDR): Ask the card to publish a new relative address (RCA)
    if (!SD_CMD3(&gSdInfo.RCA16)){
   23c04:	010000f4 	movhi	r4,3
   23c08:	210cf404 	addi	r4,r4,13264
   23c0c:	002457c0 	call	2457c <SD_CMD3>
   23c10:	1000021e 	bne	r2,zero,23c1c <SDLIB_Init+0x1dc>
        SDCARD_ERROR(("CMD3 fail\r\n"));
        return FALSE;
   23c14:	0005883a 	mov	r2,zero
   23c18:	00004b06 	br	23d48 <SDLIB_Init+0x308>
    //### Standby-by state in Data-transfer mode
    
    //========================== CMD9 ========================
    SDCARD_DEBUG(("--- enter data-transfer mode, Standby state\r\n"));
    // issue cmd9 with given RCA & wait response 
    if (!SD_CMD9(gSdInfo.RCA16, gSdInfo.szCSD, sizeof(gSdInfo.szCSD))){
   23c1c:	008000f4 	movhi	r2,3
   23c20:	108cef04 	addi	r2,r2,13244
   23c24:	1080050b 	ldhu	r2,20(r2)
   23c28:	10bfffcc 	andi	r2,r2,65535
   23c2c:	01800444 	movi	r6,17
   23c30:	014000f4 	movhi	r5,3
   23c34:	294cf8c4 	addi	r5,r5,13283
   23c38:	1009883a 	mov	r4,r2
   23c3c:	00247180 	call	24718 <SD_CMD9>
   23c40:	1000021e 	bne	r2,zero,23c4c <SDLIB_Init+0x20c>
        SDCARD_DEBUG(("CMD9 fail\r\n"));
        return FALSE;
   23c44:	0005883a 	mov	r2,zero
   23c48:	00003f06 	br	23d48 <SDLIB_Init+0x308>
    }
    
    //========================== CMD10 ========================
    // richard add  (query card identification)  
    if (!SD_CMD10(gSdInfo.RCA16, szThisCID, sizeof(szThisCID))){
   23c4c:	008000f4 	movhi	r2,3
   23c50:	108cef04 	addi	r2,r2,13244
   23c54:	1080050b 	ldhu	r2,20(r2)
   23c58:	10bfffcc 	andi	r2,r2,65535
   23c5c:	e0fffc04 	addi	r3,fp,-16
   23c60:	01800404 	movi	r6,16
   23c64:	180b883a 	mov	r5,r3
   23c68:	1009883a 	mov	r4,r2
   23c6c:	00248d80 	call	248d8 <SD_CMD10>
   23c70:	1000021e 	bne	r2,zero,23c7c <SDLIB_Init+0x23c>
        SDCARD_DEBUG(("CMD10 fail\r\n"));
        return FALSE;
   23c74:	0005883a 	mov	r2,zero
   23c78:	00003306 	br	23d48 <SDLIB_Init+0x308>
    // issue cmd9 with given RCA & wait response
    
    //========================== CMD7 ========================
    // richard: issue cmd7 to enter transfer state
    // cmd7: toggle between Standy-by and Trasfer State
    if (!SD_CMD7(gSdInfo.RCA16)){
   23c7c:	008000f4 	movhi	r2,3
   23c80:	108cef04 	addi	r2,r2,13244
   23c84:	1080050b 	ldhu	r2,20(r2)
   23c88:	10bfffcc 	andi	r2,r2,65535
   23c8c:	1009883a 	mov	r4,r2
   23c90:	0024a980 	call	24a98 <SD_CMD7>
   23c94:	1000021e 	bne	r2,zero,23ca0 <SDLIB_Init+0x260>
        SDCARD_DEBUG(("CMD7 fail\r\n"));
        return FALSE;
   23c98:	0005883a 	mov	r2,zero
   23c9c:	00002a06 	br	23d48 <SDLIB_Init+0x308>
    //### Transfer state in Data-transfer mode     
    SDCARD_DEBUG(("--- enter data-transfer mode, Transfer state\r\n"));
       
    //========================== CMD16 ========================   
    // issue cmd16 (select a block length) & wait response
    if (!SD_CMD16(512)){  // 512 bytes
   23ca0:	01008004 	movi	r4,512
   23ca4:	0024c180 	call	24c18 <SD_CMD16>
   23ca8:	1000021e 	bne	r2,zero,23cb4 <SDLIB_Init+0x274>
        SDCARD_DEBUG(("CMD16 fail\r\n"));
        return FALSE;
   23cac:	0005883a 	mov	r2,zero
   23cb0:	00002506 	br	23d48 <SDLIB_Init+0x308>
    }       
    
    if (gSdInfo.bSupport4Bits){ 
   23cb4:	008000f4 	movhi	r2,3
   23cb8:	108cef04 	addi	r2,r2,13244
   23cbc:	10800017 	ldw	r2,0(r2)
   23cc0:	10002026 	beq	r2,zero,23d44 <SDLIB_Init+0x304>
        // richard add: set bus width
        // Note. This command is valid only in "transfer state", i.e. after CMD7 is issued

        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
   23cc4:	008000f4 	movhi	r2,3
   23cc8:	108cef04 	addi	r2,r2,13244
   23ccc:	1080050b 	ldhu	r2,20(r2)
   23cd0:	10bfffcc 	andi	r2,r2,65535
   23cd4:	01400104 	movi	r5,4
   23cd8:	1009883a 	mov	r4,r2
   23cdc:	00240c80 	call	240c8 <SD_CMD55>
   23ce0:	1000021e 	bne	r2,zero,23cec <SDLIB_Init+0x2ac>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
   23ce4:	0005883a 	mov	r2,zero
   23ce8:	00001706 	br	23d48 <SDLIB_Init+0x308>
        }       
    
        SDCARD_DEBUG(("ACMD6[SET_BUS_WIDTH], 4-bit\r\n"));
        if (!SD_ACMD6(TRUE, SD_STATE_TRAN)){  // 4-bit mode
   23cec:	01400104 	movi	r5,4
   23cf0:	01000044 	movi	r4,1
   23cf4:	0024db80 	call	24db8 <SD_ACMD6>
   23cf8:	1000021e 	bne	r2,zero,23d04 <SDLIB_Init+0x2c4>
            SDCARD_DEBUG(("ACMD6 NG\r\n"));
            return FALSE;
   23cfc:	0005883a 	mov	r2,zero
   23d00:	00001106 	br	23d48 <SDLIB_Init+0x308>
        }         
    
    
        //
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
   23d04:	008000f4 	movhi	r2,3
   23d08:	108cef04 	addi	r2,r2,13244
   23d0c:	1080050b 	ldhu	r2,20(r2)
   23d10:	10bfffcc 	andi	r2,r2,65535
   23d14:	01400104 	movi	r5,4
   23d18:	1009883a 	mov	r4,r2
   23d1c:	00240c80 	call	240c8 <SD_CMD55>
   23d20:	1000021e 	bne	r2,zero,23d2c <SDLIB_Init+0x2ec>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
   23d24:	0005883a 	mov	r2,zero
   23d28:	00000706 	br	23d48 <SDLIB_Init+0x308>
        }    
    
       
        SDCARD_DEBUG(("ACMD42[SET_CLR_CARD_DETECT], connect card\r\n"));
        if (!SD_ACMD42(TRUE, SD_STATE_TRAN)){  // connect card
   23d2c:	01400104 	movi	r5,4
   23d30:	01000044 	movi	r4,1
   23d34:	0024f440 	call	24f44 <SD_ACMD42>
   23d38:	1000021e 	bne	r2,zero,23d44 <SDLIB_Init+0x304>
            SDCARD_DEBUG(("ACMD42 NG\r\n"));
            return FALSE;
   23d3c:	0005883a 	mov	r2,zero
   23d40:	00000106 	br	23d48 <SDLIB_Init+0x308>
        }   
    }
     
    SDCARD_DEBUG(("SDLIB_Init success\r\n"));
    
    return TRUE;
   23d44:	00800044 	movi	r2,1
}
   23d48:	e037883a 	mov	sp,fp
   23d4c:	dfc00117 	ldw	ra,4(sp)
   23d50:	df000017 	ldw	fp,0(sp)
   23d54:	dec00204 	addi	sp,sp,8
   23d58:	f800283a 	ret

00023d5c <SDLIB_ReadBlock512>:


bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff)
{
   23d5c:	defffa04 	addi	sp,sp,-24
   23d60:	dfc00515 	stw	ra,20(sp)
   23d64:	df000415 	stw	fp,16(sp)
   23d68:	df000404 	addi	fp,sp,16
   23d6c:	e13ffe15 	stw	r4,-8(fp)
   23d70:	e17fff15 	stw	r5,-4(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd17 for 'Single Block Read'. parameter: block address
    if (gSdInfo.bSDHC)
   23d74:	008000f4 	movhi	r2,3
   23d78:	108cef04 	addi	r2,r2,13244
   23d7c:	10800217 	ldw	r2,8(r2)
   23d80:	10000326 	beq	r2,zero,23d90 <SDLIB_ReadBlock512+0x34>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
   23d84:	e0bffe17 	ldw	r2,-8(fp)
   23d88:	e0bffc15 	stw	r2,-16(fp)
   23d8c:	00000306 	br	23d9c <SDLIB_ReadBlock512+0x40>
    else 
        addr = block_number * 512;
   23d90:	e0bffe17 	ldw	r2,-8(fp)
   23d94:	1004927a 	slli	r2,r2,9
   23d98:	e0bffc15 	stw	r2,-16(fp)
    if (!SD_CMD17(addr, SD_STATE_TRAN)){  // 4-bit mode
   23d9c:	01400104 	movi	r5,4
   23da0:	e13ffc17 	ldw	r4,-16(fp)
   23da4:	00250c40 	call	250c4 <SD_CMD17>
   23da8:	1000021e 	bne	r2,zero,23db4 <SDLIB_ReadBlock512+0x58>
        SDCARD_DEBUG(("CMD17 NG\r\n"));
        return FALSE;
   23dac:	0005883a 	mov	r2,zero
   23db0:	00000506 	br	23dc8 <SDLIB_ReadBlock512+0x6c>
    }
    //

    bSuccess = SD_ReadData(buff, 512);  // read 512 bytes
   23db4:	01408004 	movi	r5,512
   23db8:	e13fff17 	ldw	r4,-4(fp)
   23dbc:	00254140 	call	25414 <SD_ReadData>
   23dc0:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
   23dc4:	e0bffd17 	ldw	r2,-12(fp)
}
   23dc8:	e037883a 	mov	sp,fp
   23dcc:	dfc00117 	ldw	ra,4(sp)
   23dd0:	df000017 	ldw	fp,0(sp)
   23dd4:	dec00204 	addi	sp,sp,8
   23dd8:	f800283a 	ret

00023ddc <SDLIB_WriteBlock512>:

bool SDLIB_WriteBlock512(alt_u32 block_number, alt_u8 *szDataWrite)
{
   23ddc:	defffa04 	addi	sp,sp,-24
   23de0:	dfc00515 	stw	ra,20(sp)
   23de4:	df000415 	stw	fp,16(sp)
   23de8:	df000404 	addi	fp,sp,16
   23dec:	e13ffe15 	stw	r4,-8(fp)
   23df0:	e17fff15 	stw	r5,-4(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd24 for 'Single Block write'. parameter: block address
    if (gSdInfo.bSDHC)
   23df4:	008000f4 	movhi	r2,3
   23df8:	108cef04 	addi	r2,r2,13244
   23dfc:	10800217 	ldw	r2,8(r2)
   23e00:	10000326 	beq	r2,zero,23e10 <SDLIB_WriteBlock512+0x34>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
   23e04:	e0bffe17 	ldw	r2,-8(fp)
   23e08:	e0bffc15 	stw	r2,-16(fp)
   23e0c:	00000306 	br	23e1c <SDLIB_WriteBlock512+0x40>
    else 
        addr = block_number * 512;
   23e10:	e0bffe17 	ldw	r2,-8(fp)
   23e14:	1004927a 	slli	r2,r2,9
   23e18:	e0bffc15 	stw	r2,-16(fp)
    if (!SD_CMD24(addr, SD_STATE_TRAN)){ 
   23e1c:	01400104 	movi	r5,4
   23e20:	e13ffc17 	ldw	r4,-16(fp)
   23e24:	002526c0 	call	2526c <SD_CMD24>
   23e28:	1000021e 	bne	r2,zero,23e34 <SDLIB_WriteBlock512+0x58>
        SDCARD_DEBUG(("CMD24 NG\r\n"));
        return FALSE;
   23e2c:	0005883a 	mov	r2,zero
   23e30:	00000506 	br	23e48 <SDLIB_WriteBlock512+0x6c>
    }
    //

    bSuccess = SD_WriteData(szDataWrite, 512);  // Write 512 bytes
   23e34:	01408004 	movi	r5,512
   23e38:	e13fff17 	ldw	r4,-4(fp)
   23e3c:	00254540 	call	25454 <SD_WriteData>
   23e40:	e0bffd15 	stw	r2,-12(fp)
    
    //
    return bSuccess;
   23e44:	e0bffd17 	ldw	r2,-12(fp)
}
   23e48:	e037883a 	mov	sp,fp
   23e4c:	dfc00117 	ldw	ra,4(sp)
   23e50:	df000017 	ldw	fp,0(sp)
   23e54:	dec00204 	addi	sp,sp,8
   23e58:	f800283a 	ret

00023e5c <SD_Init>:
// internal function
alt_u32 ArrayToU32(alt_u8 szData[]);

//============================================================

void SD_Init(void){
   23e5c:	defffe04 	addi	sp,sp,-8
   23e60:	dfc00115 	stw	ra,4(sp)
   23e64:	df000015 	stw	fp,0(sp)
   23e68:	d839883a 	mov	fp,sp
    SDHAL_Init();
   23e6c:	0022fb00 	call	22fb0 <SDHAL_Init>
}
   23e70:	0001883a 	nop
   23e74:	e037883a 	mov	sp,fp
   23e78:	dfc00117 	ldw	ra,4(sp)
   23e7c:	df000017 	ldw	fp,0(sp)
   23e80:	dec00204 	addi	sp,sp,8
   23e84:	f800283a 	ret

00023e88 <SD_IsSupport4Bits>:

bool SD_IsSupport4Bits(void){
   23e88:	defffe04 	addi	sp,sp,-8
   23e8c:	dfc00115 	stw	ra,4(sp)
   23e90:	df000015 	stw	fp,0(sp)
   23e94:	d839883a 	mov	fp,sp
    return SDHAL_IsSupport4Bits();
   23e98:	0022f840 	call	22f84 <SDHAL_IsSupport4Bits>
}
   23e9c:	e037883a 	mov	sp,fp
   23ea0:	dfc00117 	ldw	ra,4(sp)
   23ea4:	df000017 	ldw	fp,0(sp)
   23ea8:	dec00204 	addi	sp,sp,8
   23eac:	f800283a 	ret

00023eb0 <SD_CMD0>:



void SD_CMD0(void){
   23eb0:	defffc04 	addi	sp,sp,-16
   23eb4:	dfc00315 	stw	ra,12(sp)
   23eb8:	df000215 	stw	fp,8(sp)
   23ebc:	df000204 	addi	fp,sp,8
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   23ec0:	00801004 	movi	r2,64
   23ec4:	e0bffe45 	stb	r2,-7(fp)
   23ec8:	e03ffe85 	stb	zero,-6(fp)
   23ecc:	e03ffec5 	stb	zero,-5(fp)
   23ed0:	e03fff05 	stb	zero,-4(fp)
   23ed4:	e03fff45 	stb	zero,-3(fp)
   23ed8:	e03fff85 	stb	zero,-2(fp)

    SDCARD_TRACE(("CMD0\r\n"));
    // build packet    
    szCmd[0] |= 0X00;
   23edc:	e0bffe43 	ldbu	r2,-7(fp)
   23ee0:	e0bffe45 	stb	r2,-7(fp)
    crc = crc7(0, szCmd, 5);
   23ee4:	e0bffe44 	addi	r2,fp,-7
   23ee8:	01800144 	movi	r6,5
   23eec:	100b883a 	mov	r5,r2
   23ef0:	0009883a 	mov	r4,zero
   23ef4:	0022f140 	call	22f14 <crc7>
   23ef8:	e0bffe05 	stb	r2,-8(fp)
    szCmd[5] = (crc << 1) | 0x01;
   23efc:	e0bffe03 	ldbu	r2,-8(fp)
   23f00:	1085883a 	add	r2,r2,r2
   23f04:	10800054 	ori	r2,r2,1
   23f08:	e0bfff85 	stb	r2,-2(fp)
    
    // Tx 100 clock for power on sequence 
   // SDHAL_DummyClock(100);
    //
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   23f0c:	e0bffe44 	addi	r2,fp,-7
   23f10:	01400184 	movi	r5,6
   23f14:	1009883a 	mov	r4,r2
   23f18:	00230200 	call	23020 <SDHAL_SendCmd>
    
    // A command with no response. 8 clocks after the host command end bit.
    // !!!!!!!!!! Note. Remember to add dummy clock here
    SDHAL_DummyClock(8);
   23f1c:	01000204 	movi	r4,8
   23f20:	00239dc0 	call	239dc <SDHAL_DummyClock>
    
}
   23f24:	0001883a 	nop
   23f28:	e037883a 	mov	sp,fp
   23f2c:	dfc00117 	ldw	ra,4(sp)
   23f30:	df000017 	ldw	fp,0(sp)
   23f34:	dec00204 	addi	sp,sp,8
   23f38:	f800283a 	ret

00023f3c <SD_CMD8>:


bool SD_CMD8(alt_u8 VolId, alt_u8 TestPattern){
   23f3c:	defff704 	addi	sp,sp,-36
   23f40:	dfc00815 	stw	ra,32(sp)
   23f44:	df000715 	stw	fp,28(sp)
   23f48:	df000704 	addi	fp,sp,28
   23f4c:	2007883a 	mov	r3,r4
   23f50:	2805883a 	mov	r2,r5
   23f54:	e0fffe05 	stb	r3,-8(fp)
   23f58:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 8;
   23f5c:	00800204 	movi	r2,8
   23f60:	e0bffa05 	stb	r2,-24(fp)
   // int x;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   23f64:	00801004 	movi	r2,64
   23f68:	e0bffc45 	stb	r2,-15(fp)
   23f6c:	e03ffc85 	stb	zero,-14(fp)
   23f70:	e03ffcc5 	stb	zero,-13(fp)
   23f74:	e03ffd05 	stb	zero,-12(fp)
   23f78:	e03ffd45 	stb	zero,-11(fp)
   23f7c:	e03ffd85 	stb	zero,-10(fp)

    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   23f80:	e0fffc43 	ldbu	r3,-15(fp)
   23f84:	e0bffa03 	ldbu	r2,-24(fp)
   23f88:	1884b03a 	or	r2,r3,r2
   23f8c:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (VolId & 0x0F);
   23f90:	e0bffd03 	ldbu	r2,-12(fp)
   23f94:	1007883a 	mov	r3,r2
   23f98:	e0bffe03 	ldbu	r2,-8(fp)
   23f9c:	108003cc 	andi	r2,r2,15
   23fa0:	1884b03a 	or	r2,r3,r2
   23fa4:	e0bffd05 	stb	r2,-12(fp)
    szCmd[4] = TestPattern;
   23fa8:	e0bfff03 	ldbu	r2,-4(fp)
   23fac:	e0bffd45 	stb	r2,-11(fp)
    crc = crc7(0, szCmd, 5);
   23fb0:	e0bffc44 	addi	r2,fp,-15
   23fb4:	01800144 	movi	r6,5
   23fb8:	100b883a 	mov	r5,r2
   23fbc:	0009883a 	mov	r4,zero
   23fc0:	0022f140 	call	22f14 <crc7>
   23fc4:	e0bffa45 	stb	r2,-23(fp)
    szCmd[5] = (crc << 1) | 0x01;
   23fc8:	e0bffa43 	ldbu	r2,-23(fp)
   23fcc:	1085883a 	add	r2,r2,r2
   23fd0:	10800054 	ori	r2,r2,1
   23fd4:	e0bffd85 	stb	r2,-10(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   23fd8:	e0bffc44 	addi	r2,fp,-15
   23fdc:	01400184 	movi	r5,6
   23fe0:	1009883a 	mov	r4,r2
   23fe4:	00230200 	call	23020 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   23fe8:	e0bffac4 	addi	r2,fp,-21
   23fec:	01400184 	movi	r5,6
   23ff0:	1009883a 	mov	r4,r2
   23ff4:	00231180 	call	23118 <SDHAL_GetResponse>
   23ff8:	e0bff915 	stw	r2,-28(fp)
    
    // check response content
    if (bSuccess){
   23ffc:	e0bff917 	ldw	r2,-28(fp)
   24000:	10002b26 	beq	r2,zero,240b0 <SD_CMD8+0x174>
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   24004:	e0bff917 	ldw	r2,-28(fp)
   24008:	10000526 	beq	r2,zero,24020 <SD_CMD8+0xe4>
   2400c:	e0bffac3 	ldbu	r2,-21(fp)
   24010:	10c03fcc 	andi	r3,r2,255
   24014:	e0bffa03 	ldbu	r2,-24(fp)
   24018:	18800126 	beq	r3,r2,24020 <SD_CMD8+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
   2401c:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check voltage supplied        
        if (bSuccess && szResponse[3] != VolId){
   24020:	e0bff917 	ldw	r2,-28(fp)
   24024:	10000526 	beq	r2,zero,2403c <SD_CMD8+0x100>
   24028:	e0bffb83 	ldbu	r2,-18(fp)
   2402c:	10c03fcc 	andi	r3,r2,255
   24030:	e0bffe03 	ldbu	r2,-8(fp)
   24034:	18800126 	beq	r3,r2,2403c <SD_CMD8+0x100>
            SDCARD_DEBUG(("CMD%d Response: Invalid Void Id\r\n", Cmd));
            bSuccess = FALSE;
   24038:	e03ff915 	stw	zero,-28(fp)
        }        

        // check test pattern        
        if (bSuccess && szResponse[4] != TestPattern){
   2403c:	e0bff917 	ldw	r2,-28(fp)
   24040:	10000526 	beq	r2,zero,24058 <SD_CMD8+0x11c>
   24044:	e0bffbc3 	ldbu	r2,-17(fp)
   24048:	10c03fcc 	andi	r3,r2,255
   2404c:	e0bfff03 	ldbu	r2,-4(fp)
   24050:	18800126 	beq	r3,r2,24058 <SD_CMD8+0x11c>
            SDCARD_DEBUG(("CMD%d Response: Invalid Test pattern\r\n", Cmd));
            bSuccess = FALSE;
   24054:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check crc
        if (bSuccess){
   24058:	e0bff917 	ldw	r2,-28(fp)
   2405c:	10000d26 	beq	r2,zero,24094 <SD_CMD8+0x158>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   24060:	e0bffac4 	addi	r2,fp,-21
   24064:	01800144 	movi	r6,5
   24068:	100b883a 	mov	r5,r2
   2406c:	0009883a 	mov	r4,zero
   24070:	0022f140 	call	22f14 <crc7>
   24074:	e0bffa85 	stb	r2,-22(fp)
            if (crc != (szResponse[5] >> 1)){
   24078:	e0bffc03 	ldbu	r2,-16(fp)
   2407c:	10803fcc 	andi	r2,r2,255
   24080:	1004d07a 	srli	r2,r2,1
   24084:	10c03fcc 	andi	r3,r2,255
   24088:	e0bffa83 	ldbu	r2,-22(fp)
   2408c:	18800126 	beq	r3,r2,24094 <SD_CMD8+0x158>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   24090:	e03ff915 	stw	zero,-28(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   24094:	e0bff917 	ldw	r2,-28(fp)
   24098:	10000526 	beq	r2,zero,240b0 <SD_CMD8+0x174>
   2409c:	e0bffc03 	ldbu	r2,-16(fp)
   240a0:	10803fcc 	andi	r2,r2,255
   240a4:	1080004c 	andi	r2,r2,1
   240a8:	1000011e 	bne	r2,zero,240b0 <SD_CMD8+0x174>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   240ac:	e03ff915 	stw	zero,-28(fp)
        }
        
         
    }
    
    return bSuccess;
   240b0:	e0bff917 	ldw	r2,-28(fp)
    
}
   240b4:	e037883a 	mov	sp,fp
   240b8:	dfc00117 	ldw	ra,4(sp)
   240bc:	df000017 	ldw	fp,0(sp)
   240c0:	dec00204 	addi	sp,sp,8
   240c4:	f800283a 	ret

000240c8 <SD_CMD55>:

bool SD_CMD55(alt_u16 RCA16, alt_u8 ExpectedState){
   240c8:	defff404 	addi	sp,sp,-48
   240cc:	dfc00b15 	stw	ra,44(sp)
   240d0:	df000a15 	stw	fp,40(sp)
   240d4:	df000a04 	addi	fp,sp,40
   240d8:	2007883a 	mov	r3,r4
   240dc:	2805883a 	mov	r2,r5
   240e0:	e0fffe0d 	sth	r3,-8(fp)
   240e4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 55;
   240e8:	00800dc4 	movi	r2,55
   240ec:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   240f0:	00801004 	movi	r2,64
   240f4:	e0bffbc5 	stb	r2,-17(fp)
   240f8:	e03ffc05 	stb	zero,-16(fp)
   240fc:	e03ffc45 	stb	zero,-15(fp)
   24100:	e03ffc85 	stb	zero,-14(fp)
   24104:	e03ffcc5 	stb	zero,-13(fp)
   24108:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD55\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   2410c:	e0fffbc3 	ldbu	r3,-17(fp)
   24110:	e0bff703 	ldbu	r2,-36(fp)
   24114:	1884b03a 	or	r2,r3,r2
   24118:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] = RCA16 >> 8;
   2411c:	e0bffe0b 	ldhu	r2,-8(fp)
   24120:	1004d23a 	srli	r2,r2,8
   24124:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] = RCA16 & 0xFF;
   24128:	e0bffe0b 	ldhu	r2,-8(fp)
   2412c:	e0bffc45 	stb	r2,-15(fp)
    crc = crc7(0, szCmd, 5);
   24130:	e0bffbc4 	addi	r2,fp,-17
   24134:	01800144 	movi	r6,5
   24138:	100b883a 	mov	r5,r2
   2413c:	0009883a 	mov	r4,zero
   24140:	0022f140 	call	22f14 <crc7>
   24144:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   24148:	e0bff743 	ldbu	r2,-35(fp)
   2414c:	1085883a 	add	r2,r2,r2
   24150:	10800054 	ori	r2,r2,1
   24154:	e0bffd05 	stb	r2,-12(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   24158:	e0bffbc4 	addi	r2,fp,-17
   2415c:	01400184 	movi	r5,6
   24160:	1009883a 	mov	r4,r2
   24164:	00230200 	call	23020 <SDHAL_SendCmd>
  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   24168:	e0bffa44 	addi	r2,fp,-23
   2416c:	01400184 	movi	r5,6
   24170:	1009883a 	mov	r4,r2
   24174:	00231180 	call	23118 <SDHAL_GetResponse>
   24178:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
   2417c:	e0bff617 	ldw	r2,-40(fp)
   24180:	10002b26 	beq	r2,zero,24230 <SD_CMD55+0x168>
        alt_u32 CardStatus, ExpectedStatus;  // define in 4.10
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   24184:	e0bff617 	ldw	r2,-40(fp)
   24188:	10000526 	beq	r2,zero,241a0 <SD_CMD55+0xd8>
   2418c:	e0bffa43 	ldbu	r2,-23(fp)
   24190:	10c03fcc 	andi	r3,r2,255
   24194:	e0bff703 	ldbu	r2,-36(fp)
   24198:	18800126 	beq	r3,r2,241a0 <SD_CMD55+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
   2419c:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   241a0:	e0bffa44 	addi	r2,fp,-23
   241a4:	10800044 	addi	r2,r2,1
   241a8:	1009883a 	mov	r4,r2
   241ac:	00254940 	call	25494 <ArrayToU32>
   241b0:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
   241b4:	e0bfff03 	ldbu	r2,-4(fp)
   241b8:	108003cc 	andi	r2,r2,15
   241bc:	1004927a 	slli	r2,r2,9
   241c0:	10804814 	ori	r2,r2,288
   241c4:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   241c8:	e0fff817 	ldw	r3,-32(fp)
   241cc:	e0bff917 	ldw	r2,-28(fp)
   241d0:	18800126 	beq	r3,r2,241d8 <SD_CMD55+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   241d4:	e03ff615 	stw	zero,-40(fp)
        }
        
        // check crc
        if (bSuccess){
   241d8:	e0bff617 	ldw	r2,-40(fp)
   241dc:	10000d26 	beq	r2,zero,24214 <SD_CMD55+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   241e0:	e0bffa44 	addi	r2,fp,-23
   241e4:	01800144 	movi	r6,5
   241e8:	100b883a 	mov	r5,r2
   241ec:	0009883a 	mov	r4,zero
   241f0:	0022f140 	call	22f14 <crc7>
   241f4:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   241f8:	e0bffb83 	ldbu	r2,-18(fp)
   241fc:	10803fcc 	andi	r2,r2,255
   24200:	1004d07a 	srli	r2,r2,1
   24204:	10c03fcc 	andi	r3,r2,255
   24208:	e0bffa03 	ldbu	r2,-24(fp)
   2420c:	18800126 	beq	r3,r2,24214 <SD_CMD55+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   24210:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   24214:	e0bff617 	ldw	r2,-40(fp)
   24218:	10000526 	beq	r2,zero,24230 <SD_CMD55+0x168>
   2421c:	e0bffb83 	ldbu	r2,-18(fp)
   24220:	10803fcc 	andi	r2,r2,255
   24224:	1080004c 	andi	r2,r2,1
   24228:	1000011e 	bne	r2,zero,24230 <SD_CMD55+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   2422c:	e03ff615 	stw	zero,-40(fp)
        }
          
    }
    
    return bSuccess;
   24230:	e0bff617 	ldw	r2,-40(fp)
    
}
   24234:	e037883a 	mov	sp,fp
   24238:	dfc00117 	ldw	ra,4(sp)
   2423c:	df000017 	ldw	fp,0(sp)
   24240:	dec00204 	addi	sp,sp,8
   24244:	f800283a 	ret

00024248 <SD_ACMD41>:

// Response: R3
bool SD_ACMD41(alt_u32 HostOCR32, alt_u32 *pOCR32){
   24248:	defff504 	addi	sp,sp,-44
   2424c:	dfc00a15 	stw	ra,40(sp)
   24250:	df000915 	stw	fp,36(sp)
   24254:	df000904 	addi	fp,sp,36
   24258:	e13ffe15 	stw	r4,-8(fp)
   2425c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 OCR;
    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 41;
   24260:	00800a44 	movi	r2,41
   24264:	e0bffa05 	stb	r2,-24(fp)
    //alt_u8 szCmd[6]  = {0x40,0x0f,0xf0,0x00,0x00, 0x00}, crc;
    //alt_u8 szCmd[6]  = {0x40,0x00,0xff,0x80,0x00, 0x00}, crc;  // 2.7~3.6V
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;  
   24268:	00801004 	movi	r2,64
   2426c:	e0bffc05 	stb	r2,-16(fp)
   24270:	e03ffc45 	stb	zero,-15(fp)
   24274:	e03ffc85 	stb	zero,-14(fp)
   24278:	e03ffcc5 	stb	zero,-13(fp)
   2427c:	e03ffd05 	stb	zero,-12(fp)
   24280:	e03ffd45 	stb	zero,-11(fp)
    
    SDCARD_TRACE(("ACMD41\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   24284:	e0fffc03 	ldbu	r3,-16(fp)
   24288:	e0bffa03 	ldbu	r2,-24(fp)
   2428c:	1884b03a 	or	r2,r3,r2
   24290:	e0bffc05 	stb	r2,-16(fp)
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
   24294:	e0bffc43 	ldbu	r2,-15(fp)
   24298:	e0fffe17 	ldw	r3,-8(fp)
   2429c:	1806d63a 	srli	r3,r3,24
   242a0:	18c0100c 	andi	r3,r3,64
   242a4:	10c4b03a 	or	r2,r2,r3
   242a8:	e0bffc45 	stb	r2,-15(fp)
    szCmd[2] = (HostOCR32 >> 16) & 0xFF;
   242ac:	e0bffe17 	ldw	r2,-8(fp)
   242b0:	1004d43a 	srli	r2,r2,16
   242b4:	e0bffc85 	stb	r2,-14(fp)
    szCmd[3] = (HostOCR32 >> 8) & 0xFF;
   242b8:	e0bffe17 	ldw	r2,-8(fp)
   242bc:	1004d23a 	srli	r2,r2,8
   242c0:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[4] = HostOCR32 & 0xFF;
   242c4:	e0bffe17 	ldw	r2,-8(fp)
   242c8:	e0bffd05 	stb	r2,-12(fp)
    /*szCmd[0] = 0x69;
    szCmd[1] = 0x40;
    szCmd[2] = 0xFF;
    szCmd[3] = 0x80;
    szCmd[4] = 0x00;*/
    crc = crc7(0, szCmd, 5);
   242cc:	e0bffc04 	addi	r2,fp,-16
   242d0:	01800144 	movi	r6,5
   242d4:	100b883a 	mov	r5,r2
   242d8:	0009883a 	mov	r4,zero
   242dc:	0022f140 	call	22f14 <crc7>
   242e0:	e0bffa45 	stb	r2,-23(fp)
    szCmd[5] = (crc << 1) | 0x01;
   242e4:	e0bffa43 	ldbu	r2,-23(fp)
   242e8:	1085883a 	add	r2,r2,r2
   242ec:	10800054 	ori	r2,r2,1
   242f0:	e0bffd45 	stb	r2,-11(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   242f4:	e0bffc04 	addi	r2,fp,-16
   242f8:	01400184 	movi	r5,6
   242fc:	1009883a 	mov	r4,r2
   24300:	00230200 	call	23020 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   24304:	e0bffa84 	addi	r2,fp,-22
   24308:	01400184 	movi	r5,6
   2430c:	1009883a 	mov	r4,r2
   24310:	00231180 	call	23118 <SDHAL_GetResponse>
   24314:	e0bff815 	stw	r2,-32(fp)
    
    if (bSuccess){
   24318:	e0bff817 	ldw	r2,-32(fp)
   2431c:	10002626 	beq	r2,zero,243b8 <SD_ACMD41+0x170>
        int i;
        // check command
        if (bSuccess && szResponse[0] != 0x3F){
   24320:	e0bff817 	ldw	r2,-32(fp)
   24324:	10000526 	beq	r2,zero,2433c <SD_ACMD41+0xf4>
   24328:	e0bffa83 	ldbu	r2,-22(fp)
   2432c:	10803fcc 	andi	r2,r2,255
   24330:	10800fe0 	cmpeqi	r2,r2,63
   24334:	1000011e 	bne	r2,zero,2433c <SD_ACMD41+0xf4>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
   24338:	e03ff815 	stw	zero,-32(fp)
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
   2433c:	e03ff715 	stw	zero,-36(fp)
        for(i=0;i<4;i++){
   24340:	e03ff915 	stw	zero,-28(fp)
   24344:	00000f06 	br	24384 <SD_ACMD41+0x13c>
            OCR <<= 8;
   24348:	e0bff717 	ldw	r2,-36(fp)
   2434c:	1004923a 	slli	r2,r2,8
   24350:	e0bff715 	stw	r2,-36(fp)
            OCR |= szResponse[i+1];
   24354:	e0bff917 	ldw	r2,-28(fp)
   24358:	10800044 	addi	r2,r2,1
   2435c:	e0fffa84 	addi	r3,fp,-22
   24360:	1885883a 	add	r2,r3,r2
   24364:	10800003 	ldbu	r2,0(r2)
   24368:	10803fcc 	andi	r2,r2,255
   2436c:	e0fff717 	ldw	r3,-36(fp)
   24370:	1884b03a 	or	r2,r3,r2
   24374:	e0bff715 	stw	r2,-36(fp)
            bSuccess = FALSE;
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
        for(i=0;i<4;i++){
   24378:	e0bff917 	ldw	r2,-28(fp)
   2437c:	10800044 	addi	r2,r2,1
   24380:	e0bff915 	stw	r2,-28(fp)
   24384:	e0bff917 	ldw	r2,-28(fp)
   24388:	10800110 	cmplti	r2,r2,4
   2438c:	103fee1e 	bne	r2,zero,24348 <_gp+0xfffe9308>
            OCR <<= 8;
            OCR |= szResponse[i+1];
        }           
        
        //!!!!!!!!!! note. bit31(Card power up status bit) is LOW when the card is busy.
        if ((OCR & 0x80000000) != 0x80000000){
   24390:	e0bff717 	ldw	r2,-36(fp)
   24394:	10000116 	blt	r2,zero,2439c <SD_ACMD41+0x154>
            // busy
            SDCARD_DEBUG(("ACMD%d Response: card is busy\r\n", Cmd));
            bSuccess = FALSE;
   24398:	e03ff815 	stw	zero,-32(fp)
        } 
        
        // check reserved bits and end-bits
        if (bSuccess && (szResponse[5] != 0xFF)){
   2439c:	e0bff817 	ldw	r2,-32(fp)
   243a0:	10000526 	beq	r2,zero,243b8 <SD_ACMD41+0x170>
   243a4:	e0bffbc3 	ldbu	r2,-17(fp)
   243a8:	10803fcc 	andi	r2,r2,255
   243ac:	10803fe0 	cmpeqi	r2,r2,255
   243b0:	1000011e 	bne	r2,zero,243b8 <SD_ACMD41+0x170>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved & end-bits\r\n", Cmd));
            bSuccess = FALSE;
   243b4:	e03ff815 	stw	zero,-32(fp)
        }
          
    }      
    
   if (bSuccess)
   243b8:	e0bff817 	ldw	r2,-32(fp)
   243bc:	10000326 	beq	r2,zero,243cc <SD_ACMD41+0x184>
      *pOCR32 = OCR;  
   243c0:	e0bfff17 	ldw	r2,-4(fp)
   243c4:	e0fff717 	ldw	r3,-36(fp)
   243c8:	10c00015 	stw	r3,0(r2)

    return bSuccess;
   243cc:	e0bff817 	ldw	r2,-32(fp)
}
   243d0:	e037883a 	mov	sp,fp
   243d4:	dfc00117 	ldw	ra,4(sp)
   243d8:	df000017 	ldw	fp,0(sp)
   243dc:	dec00204 	addi	sp,sp,8
   243e0:	f800283a 	ret

000243e4 <SD_CMD2>:

// function: Asks any card to send the CID numbers on the CMD line (4.7.4)
// response: 4.9.3 R2 (CMD2 & CMD10)
// CID(Card IDentification): 128 bits = 128/8 = 16 bytes
bool SD_CMD2(alt_u8 szCID[], int nBufLen){
   243e4:	defff204 	addi	sp,sp,-56
   243e8:	dfc00d15 	stw	ra,52(sp)
   243ec:	df000c15 	stw	fp,48(sp)
   243f0:	df000c04 	addi	fp,sp,48
   243f4:	e13ffe15 	stw	r4,-8(fp)
   243f8:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[17];  // 136/8 = 17
    const alt_u8 Cmd = 2;
   243fc:	00800084 	movi	r2,2
   24400:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   24404:	00801004 	movi	r2,64
   24408:	e0bffc05 	stb	r2,-16(fp)
   2440c:	e03ffc45 	stb	zero,-15(fp)
   24410:	e03ffc85 	stb	zero,-14(fp)
   24414:	e03ffcc5 	stb	zero,-13(fp)
   24418:	e03ffd05 	stb	zero,-12(fp)
   2441c:	e03ffd45 	stb	zero,-11(fp)

    SDCARD_TRACE(("CMD2\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   24420:	e0fffc03 	ldbu	r3,-16(fp)
   24424:	e0bff703 	ldbu	r2,-36(fp)
   24428:	1884b03a 	or	r2,r3,r2
   2442c:	e0bffc05 	stb	r2,-16(fp)
    crc = crc7(0, szCmd, 5);
   24430:	e0bffc04 	addi	r2,fp,-16
   24434:	01800144 	movi	r6,5
   24438:	100b883a 	mov	r5,r2
   2443c:	0009883a 	mov	r4,zero
   24440:	0022f140 	call	22f14 <crc7>
   24444:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   24448:	e0bff743 	ldbu	r2,-35(fp)
   2444c:	1085883a 	add	r2,r2,r2
   24450:	10800054 	ori	r2,r2,1
   24454:	e0bffd45 	stb	r2,-11(fp)
    
    //
 //   sd_Ncc();
    //for(x=0;x<40;x++)
    //    sd_Ncr();
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   24458:	e0bffc04 	addi	r2,fp,-16
   2445c:	01400184 	movi	r5,6
   24460:	1009883a 	mov	r4,r2
   24464:	00230200 	call	23020 <SDHAL_SendCmd>
  //  sd_Ncr();
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   24468:	e0bff7c4 	addi	r2,fp,-33
   2446c:	01400444 	movi	r5,17
   24470:	1009883a 	mov	r4,r2
   24474:	00231180 	call	23118 <SDHAL_GetResponse>
   24478:	e0bff415 	stw	r2,-48(fp)
    
    // check response content
    if (bSuccess){
   2447c:	e0bff417 	ldw	r2,-48(fp)
   24480:	10001e26 	beq	r2,zero,244fc <SD_CMD2+0x118>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
   24484:	e0bff417 	ldw	r2,-48(fp)
   24488:	10000526 	beq	r2,zero,244a0 <SD_CMD2+0xbc>
   2448c:	e0bff7c3 	ldbu	r2,-33(fp)
   24490:	10803fcc 	andi	r2,r2,255
   24494:	10800fe0 	cmpeqi	r2,r2,63
   24498:	1000011e 	bne	r2,zero,244a0 <SD_CMD2+0xbc>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   2449c:	e03ff415 	stw	zero,-48(fp)
        }
        
        
        // check crc
        if (bSuccess){
   244a0:	e0bff417 	ldw	r2,-48(fp)
   244a4:	10000e26 	beq	r2,zero,244e0 <SD_CMD2+0xfc>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
   244a8:	e0bff7c4 	addi	r2,fp,-33
   244ac:	10800044 	addi	r2,r2,1
   244b0:	018003c4 	movi	r6,15
   244b4:	100b883a 	mov	r5,r2
   244b8:	0009883a 	mov	r4,zero
   244bc:	0022f140 	call	22f14 <crc7>
   244c0:	e0bff785 	stb	r2,-34(fp)
            if (crc != (szResponse[16] >> 1)){
   244c4:	e0bffbc3 	ldbu	r2,-17(fp)
   244c8:	10803fcc 	andi	r2,r2,255
   244cc:	1004d07a 	srli	r2,r2,1
   244d0:	10c03fcc 	andi	r3,r2,255
   244d4:	e0bff783 	ldbu	r2,-34(fp)
   244d8:	18800126 	beq	r3,r2,244e0 <SD_CMD2+0xfc>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   244dc:	e03ff415 	stw	zero,-48(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
   244e0:	e0bff417 	ldw	r2,-48(fp)
   244e4:	10000526 	beq	r2,zero,244fc <SD_CMD2+0x118>
   244e8:	e0bffbc3 	ldbu	r2,-17(fp)
   244ec:	10803fcc 	andi	r2,r2,255
   244f0:	1080004c 	andi	r2,r2,1
   244f4:	1000011e 	bne	r2,zero,244fc <SD_CMD2+0x118>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   244f8:	e03ff415 	stw	zero,-48(fp)
        }
          
    }
    
    if (bSuccess){
   244fc:	e0bff417 	ldw	r2,-48(fp)
   24500:	10001826 	beq	r2,zero,24564 <SD_CMD2+0x180>
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
   24504:	e0bfff17 	ldw	r2,-4(fp)
   24508:	e0bff515 	stw	r2,-44(fp)
        if (nCopyLen > 16)
   2450c:	e0bff517 	ldw	r2,-44(fp)
   24510:	10800450 	cmplti	r2,r2,17
   24514:	1000021e 	bne	r2,zero,24520 <SD_CMD2+0x13c>
            nCopyLen = 16;
   24518:	00800404 	movi	r2,16
   2451c:	e0bff515 	stw	r2,-44(fp)
        for(x=0;x<nCopyLen;x++)
   24520:	e03ff615 	stw	zero,-40(fp)
   24524:	00000c06 	br	24558 <SD_CMD2+0x174>
            szCID[x] = szResponse[x+1];
   24528:	e0bff617 	ldw	r2,-40(fp)
   2452c:	e0fffe17 	ldw	r3,-8(fp)
   24530:	1885883a 	add	r2,r3,r2
   24534:	e0fff617 	ldw	r3,-40(fp)
   24538:	18c00044 	addi	r3,r3,1
   2453c:	e13ff7c4 	addi	r4,fp,-33
   24540:	20c7883a 	add	r3,r4,r3
   24544:	18c00003 	ldbu	r3,0(r3)
   24548:	10c00005 	stb	r3,0(r2)
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
   2454c:	e0bff617 	ldw	r2,-40(fp)
   24550:	10800044 	addi	r2,r2,1
   24554:	e0bff615 	stw	r2,-40(fp)
   24558:	e0fff617 	ldw	r3,-40(fp)
   2455c:	e0bff517 	ldw	r2,-44(fp)
   24560:	18bff116 	blt	r3,r2,24528 <_gp+0xfffe94e8>
            szCID[x] = szResponse[x+1];
        
    }
    
    return bSuccess;
   24564:	e0bff417 	ldw	r2,-48(fp)
    
}
   24568:	e037883a 	mov	sp,fp
   2456c:	dfc00117 	ldw	ra,4(sp)
   24570:	df000017 	ldw	fp,0(sp)
   24574:	dec00204 	addi	sp,sp,8
   24578:	f800283a 	ret

0002457c <SD_CMD3>:

//
bool SD_CMD3(alt_u16 *pRCA16){
   2457c:	defff704 	addi	sp,sp,-36
   24580:	dfc00815 	stw	ra,32(sp)
   24584:	df000715 	stw	fp,28(sp)
   24588:	df000704 	addi	fp,sp,28
   2458c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 RCA16;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 3;
   24590:	008000c4 	movi	r2,3
   24594:	e0bffa85 	stb	r2,-22(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   24598:	00801004 	movi	r2,64
   2459c:	e0bffd85 	stb	r2,-10(fp)
   245a0:	e03ffdc5 	stb	zero,-9(fp)
   245a4:	e03ffe05 	stb	zero,-8(fp)
   245a8:	e03ffe45 	stb	zero,-7(fp)
   245ac:	e03ffe85 	stb	zero,-6(fp)
   245b0:	e03ffec5 	stb	zero,-5(fp)

    SDCARD_TRACE(("CMD3\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   245b4:	e0fffd83 	ldbu	r3,-10(fp)
   245b8:	e0bffa83 	ldbu	r2,-22(fp)
   245bc:	1884b03a 	or	r2,r3,r2
   245c0:	e0bffd85 	stb	r2,-10(fp)
    crc = crc7(0, szCmd, 5);
   245c4:	e0bffd84 	addi	r2,fp,-10
   245c8:	01800144 	movi	r6,5
   245cc:	100b883a 	mov	r5,r2
   245d0:	0009883a 	mov	r4,zero
   245d4:	0022f140 	call	22f14 <crc7>
   245d8:	e0bffac5 	stb	r2,-21(fp)
    szCmd[5] = (crc << 1) | 0x01;
   245dc:	e0bffac3 	ldbu	r2,-21(fp)
   245e0:	1085883a 	add	r2,r2,r2
   245e4:	10800054 	ori	r2,r2,1
   245e8:	e0bffec5 	stb	r2,-5(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   245ec:	e0bffd84 	addi	r2,fp,-10
   245f0:	01400184 	movi	r5,6
   245f4:	1009883a 	mov	r4,r2
   245f8:	00230200 	call	23020 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   245fc:	e0bffc04 	addi	r2,fp,-16
   24600:	01400184 	movi	r5,6
   24604:	1009883a 	mov	r4,r2
   24608:	00231180 	call	23118 <SDHAL_GetResponse>
   2460c:	e0bff915 	stw	r2,-28(fp)
    
    // check response content
    if (bSuccess){
   24610:	e0bff917 	ldw	r2,-28(fp)
   24614:	10003526 	beq	r2,zero,246ec <SD_CMD3+0x170>
        alt_u16 Status16;
        alt_u8  State8;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   24618:	e0bff917 	ldw	r2,-28(fp)
   2461c:	10000526 	beq	r2,zero,24634 <SD_CMD3+0xb8>
   24620:	e0bffc03 	ldbu	r2,-16(fp)
   24624:	10c03fcc 	andi	r3,r2,255
   24628:	e0bffa83 	ldbu	r2,-22(fp)
   2462c:	18800126 	beq	r3,r2,24634 <SD_CMD3+0xb8>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   24630:	e03ff915 	stw	zero,-28(fp)
        }
        
        // New published RCA[31:16] of the card
        RCA16 = (szResponse[1] << 8) | szResponse[2];
   24634:	e0bffc43 	ldbu	r2,-15(fp)
   24638:	10803fcc 	andi	r2,r2,255
   2463c:	1004923a 	slli	r2,r2,8
   24640:	1007883a 	mov	r3,r2
   24644:	e0bffc83 	ldbu	r2,-14(fp)
   24648:	10803fcc 	andi	r2,r2,255
   2464c:	1884b03a 	or	r2,r3,r2
   24650:	e0bffa0d 	sth	r2,-24(fp)
        
        // [15:0] card status bits (16 bits: 23, 22, 19, 12~0) 0x500   
        Status16 = (szResponse[3] << 8) | szResponse[4];
   24654:	e0bffcc3 	ldbu	r2,-13(fp)
   24658:	10803fcc 	andi	r2,r2,255
   2465c:	1004923a 	slli	r2,r2,8
   24660:	1007883a 	mov	r3,r2
   24664:	e0bffd03 	ldbu	r2,-12(fp)
   24668:	10803fcc 	andi	r2,r2,255
   2466c:	1884b03a 	or	r2,r3,r2
   24670:	e0bffb0d 	sth	r2,-20(fp)
        State8 = SD_CURRENT_STATE_DECODE(Status16);
   24674:	e0bffb0b 	ldhu	r2,-20(fp)
   24678:	1004d27a 	srli	r2,r2,9
   2467c:	108003cc 	andi	r2,r2,15
   24680:	e0bffb85 	stb	r2,-18(fp)
        if (State8 != SD_STATE_IDENT){
   24684:	e0bffb83 	ldbu	r2,-18(fp)
   24688:	108000a0 	cmpeqi	r2,r2,2
   2468c:	1000011e 	bne	r2,zero,24694 <SD_CMD3+0x118>
           SDCARD_DEBUG(("CMD%d Response: Unexpected CURRENT_STATE\r\n", Cmd));
           bSuccess = FALSE;
   24690:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check crc
        if (bSuccess){
   24694:	e0bff917 	ldw	r2,-28(fp)
   24698:	10000d26 	beq	r2,zero,246d0 <SD_CMD3+0x154>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   2469c:	e0bffc04 	addi	r2,fp,-16
   246a0:	01800144 	movi	r6,5
   246a4:	100b883a 	mov	r5,r2
   246a8:	0009883a 	mov	r4,zero
   246ac:	0022f140 	call	22f14 <crc7>
   246b0:	e0bffbc5 	stb	r2,-17(fp)
            if (crc != (szResponse[5] >> 1)){
   246b4:	e0bffd43 	ldbu	r2,-11(fp)
   246b8:	10803fcc 	andi	r2,r2,255
   246bc:	1004d07a 	srli	r2,r2,1
   246c0:	10c03fcc 	andi	r3,r2,255
   246c4:	e0bffbc3 	ldbu	r2,-17(fp)
   246c8:	18800126 	beq	r3,r2,246d0 <SD_CMD3+0x154>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   246cc:	e03ff915 	stw	zero,-28(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   246d0:	e0bff917 	ldw	r2,-28(fp)
   246d4:	10000526 	beq	r2,zero,246ec <SD_CMD3+0x170>
   246d8:	e0bffd43 	ldbu	r2,-11(fp)
   246dc:	10803fcc 	andi	r2,r2,255
   246e0:	1080004c 	andi	r2,r2,1
   246e4:	1000011e 	bne	r2,zero,246ec <SD_CMD3+0x170>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   246e8:	e03ff915 	stw	zero,-28(fp)
        }
          
    }
    
    if (bSuccess)
   246ec:	e0bff917 	ldw	r2,-28(fp)
   246f0:	10000326 	beq	r2,zero,24700 <SD_CMD3+0x184>
        *pRCA16 = RCA16;
   246f4:	e0bfff17 	ldw	r2,-4(fp)
   246f8:	e0fffa0b 	ldhu	r3,-24(fp)
   246fc:	10c0000d 	sth	r3,0(r2)
    
    return bSuccess;
   24700:	e0bff917 	ldw	r2,-28(fp)
    
}
   24704:	e037883a 	mov	sp,fp
   24708:	dfc00117 	ldw	ra,4(sp)
   2470c:	df000017 	ldw	fp,0(sp)
   24710:	dec00204 	addi	sp,sp,8
   24714:	f800283a 	ret

00024718 <SD_CMD9>:

bool SD_CMD9(alt_u16 RCA16, alt_u8 szCSD[], int nBufLen){
   24718:	defff104 	addi	sp,sp,-60
   2471c:	dfc00e15 	stw	ra,56(sp)
   24720:	df000d15 	stw	fp,52(sp)
   24724:	df000d04 	addi	fp,sp,52
   24728:	2005883a 	mov	r2,r4
   2472c:	e17ffe15 	stw	r5,-8(fp)
   24730:	e1bfff15 	stw	r6,-4(fp)
   24734:	e0bffd0d 	sth	r2,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 9;
   24738:	00800244 	movi	r2,9
   2473c:	e0bff605 	stb	r2,-40(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   24740:	00801004 	movi	r2,64
   24744:	e0bffb05 	stb	r2,-20(fp)
   24748:	e03ffb45 	stb	zero,-19(fp)
   2474c:	e03ffb85 	stb	zero,-18(fp)
   24750:	e03ffbc5 	stb	zero,-17(fp)
   24754:	e03ffc05 	stb	zero,-16(fp)
   24758:	e03ffc45 	stb	zero,-15(fp)

    SDCARD_TRACE(("CMD9\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   2475c:	e0fffb03 	ldbu	r3,-20(fp)
   24760:	e0bff603 	ldbu	r2,-40(fp)
   24764:	1884b03a 	or	r2,r3,r2
   24768:	e0bffb05 	stb	r2,-20(fp)
    szCmd[1] |= RCA16 >> 8;
   2476c:	e0bffb43 	ldbu	r2,-19(fp)
   24770:	e0fffd0b 	ldhu	r3,-12(fp)
   24774:	1806d23a 	srli	r3,r3,8
   24778:	10c4b03a 	or	r2,r2,r3
   2477c:	e0bffb45 	stb	r2,-19(fp)
    szCmd[2] |= RCA16 & 0xFF;
   24780:	e0bffb83 	ldbu	r2,-18(fp)
   24784:	1007883a 	mov	r3,r2
   24788:	e0bffd0b 	ldhu	r2,-12(fp)
   2478c:	1884b03a 	or	r2,r3,r2
   24790:	e0bffb85 	stb	r2,-18(fp)
    crc = crc7(0, szCmd, 5);
   24794:	e0bffb04 	addi	r2,fp,-20
   24798:	01800144 	movi	r6,5
   2479c:	100b883a 	mov	r5,r2
   247a0:	0009883a 	mov	r4,zero
   247a4:	0022f140 	call	22f14 <crc7>
   247a8:	e0bff645 	stb	r2,-39(fp)
    szCmd[5] = (crc << 1) | 0x01;
   247ac:	e0bff643 	ldbu	r2,-39(fp)
   247b0:	1085883a 	add	r2,r2,r2
   247b4:	10800054 	ori	r2,r2,1
   247b8:	e0bffc45 	stb	r2,-15(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   247bc:	e0bffb04 	addi	r2,fp,-20
   247c0:	01400184 	movi	r5,6
   247c4:	1009883a 	mov	r4,r2
   247c8:	00230200 	call	23020 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   247cc:	e0bff6c4 	addi	r2,fp,-37
   247d0:	01400444 	movi	r5,17
   247d4:	1009883a 	mov	r4,r2
   247d8:	00231180 	call	23118 <SDHAL_GetResponse>
   247dc:	e0bff315 	stw	r2,-52(fp)
    
    // check response content
    if (bSuccess){
   247e0:	e0bff317 	ldw	r2,-52(fp)
   247e4:	10001e26 	beq	r2,zero,24860 <SD_CMD9+0x148>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
   247e8:	e0bff317 	ldw	r2,-52(fp)
   247ec:	10000526 	beq	r2,zero,24804 <SD_CMD9+0xec>
   247f0:	e0bff6c3 	ldbu	r2,-37(fp)
   247f4:	10803fcc 	andi	r2,r2,255
   247f8:	10800fe0 	cmpeqi	r2,r2,63
   247fc:	1000011e 	bne	r2,zero,24804 <SD_CMD9+0xec>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   24800:	e03ff315 	stw	zero,-52(fp)
        }
        
        // check crc
        if (bSuccess){
   24804:	e0bff317 	ldw	r2,-52(fp)
   24808:	10000e26 	beq	r2,zero,24844 <SD_CMD9+0x12c>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
   2480c:	e0bff6c4 	addi	r2,fp,-37
   24810:	10800044 	addi	r2,r2,1
   24814:	018003c4 	movi	r6,15
   24818:	100b883a 	mov	r5,r2
   2481c:	0009883a 	mov	r4,zero
   24820:	0022f140 	call	22f14 <crc7>
   24824:	e0bff685 	stb	r2,-38(fp)
            if (crc != (szResponse[16] >> 1)){
   24828:	e0bffac3 	ldbu	r2,-21(fp)
   2482c:	10803fcc 	andi	r2,r2,255
   24830:	1004d07a 	srli	r2,r2,1
   24834:	10c03fcc 	andi	r3,r2,255
   24838:	e0bff683 	ldbu	r2,-38(fp)
   2483c:	18800126 	beq	r3,r2,24844 <SD_CMD9+0x12c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   24840:	e03ff315 	stw	zero,-52(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
   24844:	e0bff317 	ldw	r2,-52(fp)
   24848:	10000526 	beq	r2,zero,24860 <SD_CMD9+0x148>
   2484c:	e0bffac3 	ldbu	r2,-21(fp)
   24850:	10803fcc 	andi	r2,r2,255
   24854:	1080004c 	andi	r2,r2,1
   24858:	1000011e 	bne	r2,zero,24860 <SD_CMD9+0x148>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   2485c:	e03ff315 	stw	zero,-52(fp)
        }
          
    }
    
    if (bSuccess){
   24860:	e0bff317 	ldw	r2,-52(fp)
   24864:	10001626 	beq	r2,zero,248c0 <SD_CMD9+0x1a8>
        int nCopyLen, x;
        if (nCopyLen > 16)
   24868:	e0bff417 	ldw	r2,-48(fp)
   2486c:	10800450 	cmplti	r2,r2,17
   24870:	1000021e 	bne	r2,zero,2487c <SD_CMD9+0x164>
            nCopyLen = 16;
   24874:	00800404 	movi	r2,16
   24878:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
   2487c:	e03ff515 	stw	zero,-44(fp)
   24880:	00000c06 	br	248b4 <SD_CMD9+0x19c>
            szCSD[x] = szResponse[x+1];           
   24884:	e0bff517 	ldw	r2,-44(fp)
   24888:	e0fffe17 	ldw	r3,-8(fp)
   2488c:	1885883a 	add	r2,r3,r2
   24890:	e0fff517 	ldw	r3,-44(fp)
   24894:	18c00044 	addi	r3,r3,1
   24898:	e13ff6c4 	addi	r4,fp,-37
   2489c:	20c7883a 	add	r3,r4,r3
   248a0:	18c00003 	ldbu	r3,0(r3)
   248a4:	10c00005 	stb	r3,0(r2)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
   248a8:	e0bff517 	ldw	r2,-44(fp)
   248ac:	10800044 	addi	r2,r2,1
   248b0:	e0bff515 	stw	r2,-44(fp)
   248b4:	e0fff517 	ldw	r3,-44(fp)
   248b8:	e0bff417 	ldw	r2,-48(fp)
   248bc:	18bff116 	blt	r3,r2,24884 <_gp+0xfffe9844>
            szCSD[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
   248c0:	e0bff317 	ldw	r2,-52(fp)
}
   248c4:	e037883a 	mov	sp,fp
   248c8:	dfc00117 	ldw	ra,4(sp)
   248cc:	df000017 	ldw	fp,0(sp)
   248d0:	dec00204 	addi	sp,sp,8
   248d4:	f800283a 	ret

000248d8 <SD_CMD10>:

bool SD_CMD10(alt_u16 RCA16, alt_u8 szCID[], int nBufLen){
   248d8:	defff104 	addi	sp,sp,-60
   248dc:	dfc00e15 	stw	ra,56(sp)
   248e0:	df000d15 	stw	fp,52(sp)
   248e4:	df000d04 	addi	fp,sp,52
   248e8:	2005883a 	mov	r2,r4
   248ec:	e17ffe15 	stw	r5,-8(fp)
   248f0:	e1bfff15 	stw	r6,-4(fp)
   248f4:	e0bffd0d 	sth	r2,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 10;
   248f8:	00800284 	movi	r2,10
   248fc:	e0bff605 	stb	r2,-40(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   24900:	00801004 	movi	r2,64
   24904:	e0bffb05 	stb	r2,-20(fp)
   24908:	e03ffb45 	stb	zero,-19(fp)
   2490c:	e03ffb85 	stb	zero,-18(fp)
   24910:	e03ffbc5 	stb	zero,-17(fp)
   24914:	e03ffc05 	stb	zero,-16(fp)
   24918:	e03ffc45 	stb	zero,-15(fp)

    SDCARD_TRACE(("CMD10\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   2491c:	e0fffb03 	ldbu	r3,-20(fp)
   24920:	e0bff603 	ldbu	r2,-40(fp)
   24924:	1884b03a 	or	r2,r3,r2
   24928:	e0bffb05 	stb	r2,-20(fp)
    szCmd[1] |= RCA16 >> 8;
   2492c:	e0bffb43 	ldbu	r2,-19(fp)
   24930:	e0fffd0b 	ldhu	r3,-12(fp)
   24934:	1806d23a 	srli	r3,r3,8
   24938:	10c4b03a 	or	r2,r2,r3
   2493c:	e0bffb45 	stb	r2,-19(fp)
    szCmd[2] |= RCA16 & 0xFF;
   24940:	e0bffb83 	ldbu	r2,-18(fp)
   24944:	1007883a 	mov	r3,r2
   24948:	e0bffd0b 	ldhu	r2,-12(fp)
   2494c:	1884b03a 	or	r2,r3,r2
   24950:	e0bffb85 	stb	r2,-18(fp)
    crc = crc7(0, szCmd, 5);
   24954:	e0bffb04 	addi	r2,fp,-20
   24958:	01800144 	movi	r6,5
   2495c:	100b883a 	mov	r5,r2
   24960:	0009883a 	mov	r4,zero
   24964:	0022f140 	call	22f14 <crc7>
   24968:	e0bff645 	stb	r2,-39(fp)
    szCmd[5] = (crc << 1) | 0x01;
   2496c:	e0bff643 	ldbu	r2,-39(fp)
   24970:	1085883a 	add	r2,r2,r2
   24974:	10800054 	ori	r2,r2,1
   24978:	e0bffc45 	stb	r2,-15(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   2497c:	e0bffb04 	addi	r2,fp,-20
   24980:	01400184 	movi	r5,6
   24984:	1009883a 	mov	r4,r2
   24988:	00230200 	call	23020 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   2498c:	e0bff6c4 	addi	r2,fp,-37
   24990:	01400444 	movi	r5,17
   24994:	1009883a 	mov	r4,r2
   24998:	00231180 	call	23118 <SDHAL_GetResponse>
   2499c:	e0bff315 	stw	r2,-52(fp)
    
    // check response content
    if (bSuccess){
   249a0:	e0bff317 	ldw	r2,-52(fp)
   249a4:	10001e26 	beq	r2,zero,24a20 <SD_CMD10+0x148>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
   249a8:	e0bff317 	ldw	r2,-52(fp)
   249ac:	10000526 	beq	r2,zero,249c4 <SD_CMD10+0xec>
   249b0:	e0bff6c3 	ldbu	r2,-37(fp)
   249b4:	10803fcc 	andi	r2,r2,255
   249b8:	10800fe0 	cmpeqi	r2,r2,63
   249bc:	1000011e 	bne	r2,zero,249c4 <SD_CMD10+0xec>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   249c0:	e03ff315 	stw	zero,-52(fp)
        }
        
        // check crc
        if (bSuccess){
   249c4:	e0bff317 	ldw	r2,-52(fp)
   249c8:	10000e26 	beq	r2,zero,24a04 <SD_CMD10+0x12c>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
   249cc:	e0bff6c4 	addi	r2,fp,-37
   249d0:	10800044 	addi	r2,r2,1
   249d4:	018003c4 	movi	r6,15
   249d8:	100b883a 	mov	r5,r2
   249dc:	0009883a 	mov	r4,zero
   249e0:	0022f140 	call	22f14 <crc7>
   249e4:	e0bff685 	stb	r2,-38(fp)
            if (crc != (szResponse[16] >> 1)){
   249e8:	e0bffac3 	ldbu	r2,-21(fp)
   249ec:	10803fcc 	andi	r2,r2,255
   249f0:	1004d07a 	srli	r2,r2,1
   249f4:	10c03fcc 	andi	r3,r2,255
   249f8:	e0bff683 	ldbu	r2,-38(fp)
   249fc:	18800126 	beq	r3,r2,24a04 <SD_CMD10+0x12c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   24a00:	e03ff315 	stw	zero,-52(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
   24a04:	e0bff317 	ldw	r2,-52(fp)
   24a08:	10000526 	beq	r2,zero,24a20 <SD_CMD10+0x148>
   24a0c:	e0bffac3 	ldbu	r2,-21(fp)
   24a10:	10803fcc 	andi	r2,r2,255
   24a14:	1080004c 	andi	r2,r2,1
   24a18:	1000011e 	bne	r2,zero,24a20 <SD_CMD10+0x148>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   24a1c:	e03ff315 	stw	zero,-52(fp)
        }
          
    }
    
    if (bSuccess){
   24a20:	e0bff317 	ldw	r2,-52(fp)
   24a24:	10001626 	beq	r2,zero,24a80 <SD_CMD10+0x1a8>
        int nCopyLen, x;
        if (nCopyLen > 16)
   24a28:	e0bff417 	ldw	r2,-48(fp)
   24a2c:	10800450 	cmplti	r2,r2,17
   24a30:	1000021e 	bne	r2,zero,24a3c <SD_CMD10+0x164>
            nCopyLen = 16;
   24a34:	00800404 	movi	r2,16
   24a38:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
   24a3c:	e03ff515 	stw	zero,-44(fp)
   24a40:	00000c06 	br	24a74 <SD_CMD10+0x19c>
            szCID[x] = szResponse[x+1];           
   24a44:	e0bff517 	ldw	r2,-44(fp)
   24a48:	e0fffe17 	ldw	r3,-8(fp)
   24a4c:	1885883a 	add	r2,r3,r2
   24a50:	e0fff517 	ldw	r3,-44(fp)
   24a54:	18c00044 	addi	r3,r3,1
   24a58:	e13ff6c4 	addi	r4,fp,-37
   24a5c:	20c7883a 	add	r3,r4,r3
   24a60:	18c00003 	ldbu	r3,0(r3)
   24a64:	10c00005 	stb	r3,0(r2)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
   24a68:	e0bff517 	ldw	r2,-44(fp)
   24a6c:	10800044 	addi	r2,r2,1
   24a70:	e0bff515 	stw	r2,-44(fp)
   24a74:	e0fff517 	ldw	r3,-44(fp)
   24a78:	e0bff417 	ldw	r2,-48(fp)
   24a7c:	18bff116 	blt	r3,r2,24a44 <_gp+0xfffe9a04>
            szCID[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
   24a80:	e0bff317 	ldw	r2,-52(fp)
}
   24a84:	e037883a 	mov	sp,fp
   24a88:	dfc00117 	ldw	ra,4(sp)
   24a8c:	df000017 	ldw	fp,0(sp)
   24a90:	dec00204 	addi	sp,sp,8
   24a94:	f800283a 	ret

00024a98 <SD_CMD7>:


bool SD_CMD7(alt_u16 RCA16){
   24a98:	defff504 	addi	sp,sp,-44
   24a9c:	dfc00a15 	stw	ra,40(sp)
   24aa0:	df000915 	stw	fp,36(sp)
   24aa4:	df000904 	addi	fp,sp,36
   24aa8:	2005883a 	mov	r2,r4
   24aac:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 7;
   24ab0:	008001c4 	movi	r2,7
   24ab4:	e0bff805 	stb	r2,-32(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   24ab8:	00801004 	movi	r2,64
   24abc:	e0bffcc5 	stb	r2,-13(fp)
   24ac0:	e03ffd05 	stb	zero,-12(fp)
   24ac4:	e03ffd45 	stb	zero,-11(fp)
   24ac8:	e03ffd85 	stb	zero,-10(fp)
   24acc:	e03ffdc5 	stb	zero,-9(fp)
   24ad0:	e03ffe05 	stb	zero,-8(fp)

    SDCARD_TRACE(("CMD7\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   24ad4:	e0fffcc3 	ldbu	r3,-13(fp)
   24ad8:	e0bff803 	ldbu	r2,-32(fp)
   24adc:	1884b03a 	or	r2,r3,r2
   24ae0:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[1] |= RCA16 >> 8;
   24ae4:	e0bffd03 	ldbu	r2,-12(fp)
   24ae8:	e0ffff0b 	ldhu	r3,-4(fp)
   24aec:	1806d23a 	srli	r3,r3,8
   24af0:	10c4b03a 	or	r2,r2,r3
   24af4:	e0bffd05 	stb	r2,-12(fp)
    szCmd[2] |= RCA16 & 0xFF;
   24af8:	e0bffd43 	ldbu	r2,-11(fp)
   24afc:	1007883a 	mov	r3,r2
   24b00:	e0bfff0b 	ldhu	r2,-4(fp)
   24b04:	1884b03a 	or	r2,r3,r2
   24b08:	e0bffd45 	stb	r2,-11(fp)
    crc = crc7(0, szCmd, 5);
   24b0c:	e0bffcc4 	addi	r2,fp,-13
   24b10:	01800144 	movi	r6,5
   24b14:	100b883a 	mov	r5,r2
   24b18:	0009883a 	mov	r4,zero
   24b1c:	0022f140 	call	22f14 <crc7>
   24b20:	e0bff845 	stb	r2,-31(fp)
    szCmd[5] = (crc << 1) | 0x01;
   24b24:	e0bff843 	ldbu	r2,-31(fp)
   24b28:	1085883a 	add	r2,r2,r2
   24b2c:	10800054 	ori	r2,r2,1
   24b30:	e0bffe05 	stb	r2,-8(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   24b34:	e0bffcc4 	addi	r2,fp,-13
   24b38:	01400184 	movi	r5,6
   24b3c:	1009883a 	mov	r4,r2
   24b40:	00230200 	call	23020 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   24b44:	e0bffb44 	addi	r2,fp,-19
   24b48:	01400184 	movi	r5,6
   24b4c:	1009883a 	mov	r4,r2
   24b50:	00231180 	call	23118 <SDHAL_GetResponse>
   24b54:	e0bff715 	stw	r2,-36(fp)
    
    // check response content
    if (bSuccess){
   24b58:	e0bff717 	ldw	r2,-36(fp)
   24b5c:	10002826 	beq	r2,zero,24c00 <SD_CMD7+0x168>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   24b60:	e0bff717 	ldw	r2,-36(fp)
   24b64:	10000526 	beq	r2,zero,24b7c <SD_CMD7+0xe4>
   24b68:	e0bffb43 	ldbu	r2,-19(fp)
   24b6c:	10c03fcc 	andi	r3,r2,255
   24b70:	e0bff803 	ldbu	r2,-32(fp)
   24b74:	18800126 	beq	r3,r2,24b7c <SD_CMD7+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   24b78:	e03ff715 	stw	zero,-36(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   24b7c:	e0bffb44 	addi	r2,fp,-19
   24b80:	10800044 	addi	r2,r2,1
   24b84:	1009883a 	mov	r4,r2
   24b88:	00254940 	call	25494 <ArrayToU32>
   24b8c:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_STBY);
   24b90:	0081c004 	movi	r2,1792
   24b94:	e0bffa15 	stw	r2,-24(fp)
        if (CardStatus != ExpectedStatus){
   24b98:	e0fff917 	ldw	r3,-28(fp)
   24b9c:	e0bffa17 	ldw	r2,-24(fp)
   24ba0:	18800126 	beq	r3,r2,24ba8 <SD_CMD7+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   24ba4:	e03ff715 	stw	zero,-36(fp)
        }        
        
        // check crc
        if (bSuccess){
   24ba8:	e0bff717 	ldw	r2,-36(fp)
   24bac:	10000d26 	beq	r2,zero,24be4 <SD_CMD7+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   24bb0:	e0bffb44 	addi	r2,fp,-19
   24bb4:	01800144 	movi	r6,5
   24bb8:	100b883a 	mov	r5,r2
   24bbc:	0009883a 	mov	r4,zero
   24bc0:	0022f140 	call	22f14 <crc7>
   24bc4:	e0bffb05 	stb	r2,-20(fp)
            if (crc != (szResponse[5] >> 1)){
   24bc8:	e0bffc83 	ldbu	r2,-14(fp)
   24bcc:	10803fcc 	andi	r2,r2,255
   24bd0:	1004d07a 	srli	r2,r2,1
   24bd4:	10c03fcc 	andi	r3,r2,255
   24bd8:	e0bffb03 	ldbu	r2,-20(fp)
   24bdc:	18800126 	beq	r3,r2,24be4 <SD_CMD7+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   24be0:	e03ff715 	stw	zero,-36(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   24be4:	e0bff717 	ldw	r2,-36(fp)
   24be8:	10000526 	beq	r2,zero,24c00 <SD_CMD7+0x168>
   24bec:	e0bffc83 	ldbu	r2,-14(fp)
   24bf0:	10803fcc 	andi	r2,r2,255
   24bf4:	1080004c 	andi	r2,r2,1
   24bf8:	1000011e 	bne	r2,zero,24c00 <SD_CMD7+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   24bfc:	e03ff715 	stw	zero,-36(fp)
          
    }
    
     
    
    return bSuccess;
   24c00:	e0bff717 	ldw	r2,-36(fp)
}
   24c04:	e037883a 	mov	sp,fp
   24c08:	dfc00117 	ldw	ra,4(sp)
   24c0c:	df000017 	ldw	fp,0(sp)
   24c10:	dec00204 	addi	sp,sp,8
   24c14:	f800283a 	ret

00024c18 <SD_CMD16>:

bool SD_CMD16(alt_u32 BlockSize){
   24c18:	defff504 	addi	sp,sp,-44
   24c1c:	dfc00a15 	stw	ra,40(sp)
   24c20:	df000915 	stw	fp,36(sp)
   24c24:	df000904 	addi	fp,sp,36
   24c28:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 16;
   24c2c:	00800404 	movi	r2,16
   24c30:	e0bff805 	stb	r2,-32(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   24c34:	00801004 	movi	r2,64
   24c38:	e0bffcc5 	stb	r2,-13(fp)
   24c3c:	e03ffd05 	stb	zero,-12(fp)
   24c40:	e03ffd45 	stb	zero,-11(fp)
   24c44:	e03ffd85 	stb	zero,-10(fp)
   24c48:	e03ffdc5 	stb	zero,-9(fp)
   24c4c:	e03ffe05 	stb	zero,-8(fp)

    SDCARD_TRACE(("CMD16\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   24c50:	e0fffcc3 	ldbu	r3,-13(fp)
   24c54:	e0bff803 	ldbu	r2,-32(fp)
   24c58:	1884b03a 	or	r2,r3,r2
   24c5c:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[1] |= BlockSize >> 24;
   24c60:	e0bffd03 	ldbu	r2,-12(fp)
   24c64:	e0ffff17 	ldw	r3,-4(fp)
   24c68:	1806d63a 	srli	r3,r3,24
   24c6c:	10c4b03a 	or	r2,r2,r3
   24c70:	e0bffd05 	stb	r2,-12(fp)
    szCmd[2] |= BlockSize >> 16;
   24c74:	e0bffd43 	ldbu	r2,-11(fp)
   24c78:	e0ffff17 	ldw	r3,-4(fp)
   24c7c:	1806d43a 	srli	r3,r3,16
   24c80:	10c4b03a 	or	r2,r2,r3
   24c84:	e0bffd45 	stb	r2,-11(fp)
    szCmd[3] |= BlockSize >> 8;
   24c88:	e0bffd83 	ldbu	r2,-10(fp)
   24c8c:	e0ffff17 	ldw	r3,-4(fp)
   24c90:	1806d23a 	srli	r3,r3,8
   24c94:	10c4b03a 	or	r2,r2,r3
   24c98:	e0bffd85 	stb	r2,-10(fp)
    szCmd[4] |= BlockSize & 0xFF;
   24c9c:	e0bffdc3 	ldbu	r2,-9(fp)
   24ca0:	e0ffff17 	ldw	r3,-4(fp)
   24ca4:	10c4b03a 	or	r2,r2,r3
   24ca8:	e0bffdc5 	stb	r2,-9(fp)
    crc = crc7(0, szCmd, 5);
   24cac:	e0bffcc4 	addi	r2,fp,-13
   24cb0:	01800144 	movi	r6,5
   24cb4:	100b883a 	mov	r5,r2
   24cb8:	0009883a 	mov	r4,zero
   24cbc:	0022f140 	call	22f14 <crc7>
   24cc0:	e0bff845 	stb	r2,-31(fp)
    szCmd[5] = (crc << 1) | 0x01;
   24cc4:	e0bff843 	ldbu	r2,-31(fp)
   24cc8:	1085883a 	add	r2,r2,r2
   24ccc:	10800054 	ori	r2,r2,1
   24cd0:	e0bffe05 	stb	r2,-8(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   24cd4:	e0bffcc4 	addi	r2,fp,-13
   24cd8:	01400184 	movi	r5,6
   24cdc:	1009883a 	mov	r4,r2
   24ce0:	00230200 	call	23020 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   24ce4:	e0bffb44 	addi	r2,fp,-19
   24ce8:	01400184 	movi	r5,6
   24cec:	1009883a 	mov	r4,r2
   24cf0:	00231180 	call	23118 <SDHAL_GetResponse>
   24cf4:	e0bff715 	stw	r2,-36(fp)
    
    // check response content
    if (bSuccess){
   24cf8:	e0bff717 	ldw	r2,-36(fp)
   24cfc:	10002826 	beq	r2,zero,24da0 <SD_CMD16+0x188>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   24d00:	e0bff717 	ldw	r2,-36(fp)
   24d04:	10000526 	beq	r2,zero,24d1c <SD_CMD16+0x104>
   24d08:	e0bffb43 	ldbu	r2,-19(fp)
   24d0c:	10c03fcc 	andi	r3,r2,255
   24d10:	e0bff803 	ldbu	r2,-32(fp)
   24d14:	18800126 	beq	r3,r2,24d1c <SD_CMD16+0x104>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   24d18:	e03ff715 	stw	zero,-36(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   24d1c:	e0bffb44 	addi	r2,fp,-19
   24d20:	10800044 	addi	r2,r2,1
   24d24:	1009883a 	mov	r4,r2
   24d28:	00254940 	call	25494 <ArrayToU32>
   24d2c:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
   24d30:	00824004 	movi	r2,2304
   24d34:	e0bffa15 	stw	r2,-24(fp)
        if (CardStatus != ExpectedStatus){
   24d38:	e0fff917 	ldw	r3,-28(fp)
   24d3c:	e0bffa17 	ldw	r2,-24(fp)
   24d40:	18800126 	beq	r3,r2,24d48 <SD_CMD16+0x130>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   24d44:	e03ff715 	stw	zero,-36(fp)
        }        
        
        // check crc
        if (bSuccess){
   24d48:	e0bff717 	ldw	r2,-36(fp)
   24d4c:	10000d26 	beq	r2,zero,24d84 <SD_CMD16+0x16c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   24d50:	e0bffb44 	addi	r2,fp,-19
   24d54:	01800144 	movi	r6,5
   24d58:	100b883a 	mov	r5,r2
   24d5c:	0009883a 	mov	r4,zero
   24d60:	0022f140 	call	22f14 <crc7>
   24d64:	e0bffb05 	stb	r2,-20(fp)
            if (crc != (szResponse[5] >> 1)){
   24d68:	e0bffc83 	ldbu	r2,-14(fp)
   24d6c:	10803fcc 	andi	r2,r2,255
   24d70:	1004d07a 	srli	r2,r2,1
   24d74:	10c03fcc 	andi	r3,r2,255
   24d78:	e0bffb03 	ldbu	r2,-20(fp)
   24d7c:	18800126 	beq	r3,r2,24d84 <SD_CMD16+0x16c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   24d80:	e03ff715 	stw	zero,-36(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   24d84:	e0bff717 	ldw	r2,-36(fp)
   24d88:	10000526 	beq	r2,zero,24da0 <SD_CMD16+0x188>
   24d8c:	e0bffc83 	ldbu	r2,-14(fp)
   24d90:	10803fcc 	andi	r2,r2,255
   24d94:	1080004c 	andi	r2,r2,1
   24d98:	1000011e 	bne	r2,zero,24da0 <SD_CMD16+0x188>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   24d9c:	e03ff715 	stw	zero,-36(fp)
          
    }
    
     
    
    return bSuccess;
   24da0:	e0bff717 	ldw	r2,-36(fp)
}
   24da4:	e037883a 	mov	sp,fp
   24da8:	dfc00117 	ldw	ra,4(sp)
   24dac:	df000017 	ldw	fp,0(sp)
   24db0:	dec00204 	addi	sp,sp,8
   24db4:	f800283a 	ret

00024db8 <SD_ACMD6>:

// SET_BUS_WIDTH
// Response: R1
bool SD_ACMD6(bool b4BitsBus, alt_u8 ExpectedState){
   24db8:	defff404 	addi	sp,sp,-48
   24dbc:	dfc00b15 	stw	ra,44(sp)
   24dc0:	df000a15 	stw	fp,40(sp)
   24dc4:	df000a04 	addi	fp,sp,40
   24dc8:	e13ffe15 	stw	r4,-8(fp)
   24dcc:	2805883a 	mov	r2,r5
   24dd0:	e0bfff05 	stb	r2,-4(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 6;
   24dd4:	00800184 	movi	r2,6
   24dd8:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
   24ddc:	00801004 	movi	r2,64
   24de0:	e0bffbc5 	stb	r2,-17(fp)
   24de4:	e03ffc05 	stb	zero,-16(fp)
   24de8:	e03ffc45 	stb	zero,-15(fp)
   24dec:	e03ffc85 	stb	zero,-14(fp)
   24df0:	e03ffcc5 	stb	zero,-13(fp)
   24df4:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("ACMD6\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   24df8:	e0fffbc3 	ldbu	r3,-17(fp)
   24dfc:	e0bff703 	ldbu	r2,-36(fp)
   24e00:	1884b03a 	or	r2,r3,r2
   24e04:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[4] |= b4BitsBus?2:0;
   24e08:	e0bffcc3 	ldbu	r2,-13(fp)
   24e0c:	1007883a 	mov	r3,r2
   24e10:	e0bffe17 	ldw	r2,-8(fp)
   24e14:	10000226 	beq	r2,zero,24e20 <SD_ACMD6+0x68>
   24e18:	00800084 	movi	r2,2
   24e1c:	00000106 	br	24e24 <SD_ACMD6+0x6c>
   24e20:	0005883a 	mov	r2,zero
   24e24:	1884b03a 	or	r2,r3,r2
   24e28:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   24e2c:	e0bffbc4 	addi	r2,fp,-17
   24e30:	01800144 	movi	r6,5
   24e34:	100b883a 	mov	r5,r2
   24e38:	0009883a 	mov	r4,zero
   24e3c:	0022f140 	call	22f14 <crc7>
   24e40:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   24e44:	e0bff743 	ldbu	r2,-35(fp)
   24e48:	1085883a 	add	r2,r2,r2
   24e4c:	10800054 	ori	r2,r2,1
   24e50:	e0bffd05 	stb	r2,-12(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   24e54:	e0bffbc4 	addi	r2,fp,-17
   24e58:	01400184 	movi	r5,6
   24e5c:	1009883a 	mov	r4,r2
   24e60:	00230200 	call	23020 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   24e64:	e0bffa44 	addi	r2,fp,-23
   24e68:	01400184 	movi	r5,6
   24e6c:	1009883a 	mov	r4,r2
   24e70:	00231180 	call	23118 <SDHAL_GetResponse>
   24e74:	e0bff615 	stw	r2,-40(fp)
    
    if (bSuccess){
   24e78:	e0bff617 	ldw	r2,-40(fp)
   24e7c:	10002b26 	beq	r2,zero,24f2c <SD_ACMD6+0x174>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   24e80:	e0bff617 	ldw	r2,-40(fp)
   24e84:	10000526 	beq	r2,zero,24e9c <SD_ACMD6+0xe4>
   24e88:	e0bffa43 	ldbu	r2,-23(fp)
   24e8c:	10c03fcc 	andi	r3,r2,255
   24e90:	e0bff703 	ldbu	r2,-36(fp)
   24e94:	18800126 	beq	r3,r2,24e9c <SD_ACMD6+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
   24e98:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
   24e9c:	e0bffa44 	addi	r2,fp,-23
   24ea0:	10800044 	addi	r2,r2,1
   24ea4:	1009883a 	mov	r4,r2
   24ea8:	00254940 	call	25494 <ArrayToU32>
   24eac:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
   24eb0:	e0bfff03 	ldbu	r2,-4(fp)
   24eb4:	108003cc 	andi	r2,r2,15
   24eb8:	1004927a 	slli	r2,r2,9
   24ebc:	10804814 	ori	r2,r2,288
   24ec0:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   24ec4:	e0fff817 	ldw	r3,-32(fp)
   24ec8:	e0bff917 	ldw	r2,-28(fp)
   24ecc:	18800126 	beq	r3,r2,24ed4 <SD_ACMD6+0x11c>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   24ed0:	e03ff615 	stw	zero,-40(fp)
        }
                
        // check crc
        if (bSuccess){
   24ed4:	e0bff617 	ldw	r2,-40(fp)
   24ed8:	10000d26 	beq	r2,zero,24f10 <SD_ACMD6+0x158>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   24edc:	e0bffa44 	addi	r2,fp,-23
   24ee0:	01800144 	movi	r6,5
   24ee4:	100b883a 	mov	r5,r2
   24ee8:	0009883a 	mov	r4,zero
   24eec:	0022f140 	call	22f14 <crc7>
   24ef0:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   24ef4:	e0bffb83 	ldbu	r2,-18(fp)
   24ef8:	10803fcc 	andi	r2,r2,255
   24efc:	1004d07a 	srli	r2,r2,1
   24f00:	10c03fcc 	andi	r3,r2,255
   24f04:	e0bffa03 	ldbu	r2,-24(fp)
   24f08:	18800126 	beq	r3,r2,24f10 <SD_ACMD6+0x158>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   24f0c:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   24f10:	e0bff617 	ldw	r2,-40(fp)
   24f14:	10000526 	beq	r2,zero,24f2c <SD_ACMD6+0x174>
   24f18:	e0bffb83 	ldbu	r2,-18(fp)
   24f1c:	10803fcc 	andi	r2,r2,255
   24f20:	1080004c 	andi	r2,r2,1
   24f24:	1000011e 	bne	r2,zero,24f2c <SD_ACMD6+0x174>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   24f28:	e03ff615 	stw	zero,-40(fp)
        }
          
    }      
    

    return bSuccess;
   24f2c:	e0bff617 	ldw	r2,-40(fp)
}
   24f30:	e037883a 	mov	sp,fp
   24f34:	dfc00117 	ldw	ra,4(sp)
   24f38:	df000017 	ldw	fp,0(sp)
   24f3c:	dec00204 	addi	sp,sp,8
   24f40:	f800283a 	ret

00024f44 <SD_ACMD42>:

// SET_CLR_CARD_DETECT
// Response: R1
bool SD_ACMD42(bool b4BitsBus, alt_u8 ExpectedState){
   24f44:	defff404 	addi	sp,sp,-48
   24f48:	dfc00b15 	stw	ra,44(sp)
   24f4c:	df000a15 	stw	fp,40(sp)
   24f50:	df000a04 	addi	fp,sp,40
   24f54:	e13ffe15 	stw	r4,-8(fp)
   24f58:	2805883a 	mov	r2,r5
   24f5c:	e0bfff05 	stb	r2,-4(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 42;
   24f60:	00800a84 	movi	r2,42
   24f64:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
   24f68:	00801004 	movi	r2,64
   24f6c:	e0bffbc5 	stb	r2,-17(fp)
   24f70:	e03ffc05 	stb	zero,-16(fp)
   24f74:	e03ffc45 	stb	zero,-15(fp)
   24f78:	e03ffc85 	stb	zero,-14(fp)
   24f7c:	e03ffcc5 	stb	zero,-13(fp)
   24f80:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("ACMD42\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   24f84:	e0fffbc3 	ldbu	r3,-17(fp)
   24f88:	e0bff703 	ldbu	r2,-36(fp)
   24f8c:	1884b03a 	or	r2,r3,r2
   24f90:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[4] |= b4BitsBus?1:0;
   24f94:	e0bffcc3 	ldbu	r2,-13(fp)
   24f98:	1007883a 	mov	r3,r2
   24f9c:	e0bffe17 	ldw	r2,-8(fp)
   24fa0:	1004c03a 	cmpne	r2,r2,zero
   24fa4:	1884b03a 	or	r2,r3,r2
   24fa8:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   24fac:	e0bffbc4 	addi	r2,fp,-17
   24fb0:	01800144 	movi	r6,5
   24fb4:	100b883a 	mov	r5,r2
   24fb8:	0009883a 	mov	r4,zero
   24fbc:	0022f140 	call	22f14 <crc7>
   24fc0:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   24fc4:	e0bff743 	ldbu	r2,-35(fp)
   24fc8:	1085883a 	add	r2,r2,r2
   24fcc:	10800054 	ori	r2,r2,1
   24fd0:	e0bffd05 	stb	r2,-12(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   24fd4:	e0bffbc4 	addi	r2,fp,-17
   24fd8:	01400184 	movi	r5,6
   24fdc:	1009883a 	mov	r4,r2
   24fe0:	00230200 	call	23020 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   24fe4:	e0bffa44 	addi	r2,fp,-23
   24fe8:	01400184 	movi	r5,6
   24fec:	1009883a 	mov	r4,r2
   24ff0:	00231180 	call	23118 <SDHAL_GetResponse>
   24ff4:	e0bff615 	stw	r2,-40(fp)
    
    if (bSuccess){
   24ff8:	e0bff617 	ldw	r2,-40(fp)
   24ffc:	10002b26 	beq	r2,zero,250ac <SD_ACMD42+0x168>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   25000:	e0bff617 	ldw	r2,-40(fp)
   25004:	10000526 	beq	r2,zero,2501c <SD_ACMD42+0xd8>
   25008:	e0bffa43 	ldbu	r2,-23(fp)
   2500c:	10c03fcc 	andi	r3,r2,255
   25010:	e0bff703 	ldbu	r2,-36(fp)
   25014:	18800126 	beq	r3,r2,2501c <SD_ACMD42+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
   25018:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
   2501c:	e0bffa44 	addi	r2,fp,-23
   25020:	10800044 	addi	r2,r2,1
   25024:	1009883a 	mov	r4,r2
   25028:	00254940 	call	25494 <ArrayToU32>
   2502c:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
   25030:	e0bfff03 	ldbu	r2,-4(fp)
   25034:	108003cc 	andi	r2,r2,15
   25038:	1004927a 	slli	r2,r2,9
   2503c:	10804814 	ori	r2,r2,288
   25040:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   25044:	e0fff817 	ldw	r3,-32(fp)
   25048:	e0bff917 	ldw	r2,-28(fp)
   2504c:	18800126 	beq	r3,r2,25054 <SD_ACMD42+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   25050:	e03ff615 	stw	zero,-40(fp)
        }
                
        // check crc
        if (bSuccess){
   25054:	e0bff617 	ldw	r2,-40(fp)
   25058:	10000d26 	beq	r2,zero,25090 <SD_ACMD42+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   2505c:	e0bffa44 	addi	r2,fp,-23
   25060:	01800144 	movi	r6,5
   25064:	100b883a 	mov	r5,r2
   25068:	0009883a 	mov	r4,zero
   2506c:	0022f140 	call	22f14 <crc7>
   25070:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   25074:	e0bffb83 	ldbu	r2,-18(fp)
   25078:	10803fcc 	andi	r2,r2,255
   2507c:	1004d07a 	srli	r2,r2,1
   25080:	10c03fcc 	andi	r3,r2,255
   25084:	e0bffa03 	ldbu	r2,-24(fp)
   25088:	18800126 	beq	r3,r2,25090 <SD_ACMD42+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   2508c:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   25090:	e0bff617 	ldw	r2,-40(fp)
   25094:	10000526 	beq	r2,zero,250ac <SD_ACMD42+0x168>
   25098:	e0bffb83 	ldbu	r2,-18(fp)
   2509c:	10803fcc 	andi	r2,r2,255
   250a0:	1080004c 	andi	r2,r2,1
   250a4:	1000011e 	bne	r2,zero,250ac <SD_ACMD42+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   250a8:	e03ff615 	stw	zero,-40(fp)
        }
          
    }      
    

    return bSuccess;
   250ac:	e0bff617 	ldw	r2,-40(fp)
}
   250b0:	e037883a 	mov	sp,fp
   250b4:	dfc00117 	ldw	ra,4(sp)
   250b8:	df000017 	ldw	fp,0(sp)
   250bc:	dec00204 	addi	sp,sp,8
   250c0:	f800283a 	ret

000250c4 <SD_CMD17>:


// READ_SINGLE_BLOCK
// Response R1
bool SD_CMD17(alt_u32 Addr, alt_u8 ExpectedStatus){
   250c4:	defff404 	addi	sp,sp,-48
   250c8:	dfc00b15 	stw	ra,44(sp)
   250cc:	df000a15 	stw	fp,40(sp)
   250d0:	df000a04 	addi	fp,sp,40
   250d4:	e13ffe15 	stw	r4,-8(fp)
   250d8:	2805883a 	mov	r2,r5
   250dc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 17;
   250e0:	00800444 	movi	r2,17
   250e4:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   250e8:	00801004 	movi	r2,64
   250ec:	e0bffbc5 	stb	r2,-17(fp)
   250f0:	e03ffc05 	stb	zero,-16(fp)
   250f4:	e03ffc45 	stb	zero,-15(fp)
   250f8:	e03ffc85 	stb	zero,-14(fp)
   250fc:	e03ffcc5 	stb	zero,-13(fp)
   25100:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD17\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   25104:	e0fffbc3 	ldbu	r3,-17(fp)
   25108:	e0bff703 	ldbu	r2,-36(fp)
   2510c:	1884b03a 	or	r2,r3,r2
   25110:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
   25114:	e0bffc03 	ldbu	r2,-16(fp)
   25118:	e0fffe17 	ldw	r3,-8(fp)
   2511c:	1806d63a 	srli	r3,r3,24
   25120:	10c4b03a 	or	r2,r2,r3
   25124:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
   25128:	e0bffc43 	ldbu	r2,-15(fp)
   2512c:	e0fffe17 	ldw	r3,-8(fp)
   25130:	1806d43a 	srli	r3,r3,16
   25134:	10c4b03a 	or	r2,r2,r3
   25138:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
   2513c:	e0bffc83 	ldbu	r2,-14(fp)
   25140:	e0fffe17 	ldw	r3,-8(fp)
   25144:	1806d23a 	srli	r3,r3,8
   25148:	10c4b03a 	or	r2,r2,r3
   2514c:	e0bffc85 	stb	r2,-14(fp)
    szCmd[4] |= Addr & 0xFF;
   25150:	e0bffcc3 	ldbu	r2,-13(fp)
   25154:	e0fffe17 	ldw	r3,-8(fp)
   25158:	10c4b03a 	or	r2,r2,r3
   2515c:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   25160:	e0bffbc4 	addi	r2,fp,-17
   25164:	01800144 	movi	r6,5
   25168:	100b883a 	mov	r5,r2
   2516c:	0009883a 	mov	r4,zero
   25170:	0022f140 	call	22f14 <crc7>
   25174:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   25178:	e0bff743 	ldbu	r2,-35(fp)
   2517c:	1085883a 	add	r2,r2,r2
   25180:	10800054 	ori	r2,r2,1
   25184:	e0bffd05 	stb	r2,-12(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   25188:	e0bffbc4 	addi	r2,fp,-17
   2518c:	01400184 	movi	r5,6
   25190:	1009883a 	mov	r4,r2
   25194:	00230200 	call	23020 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   25198:	e0bffa44 	addi	r2,fp,-23
   2519c:	01400184 	movi	r5,6
   251a0:	1009883a 	mov	r4,r2
   251a4:	00231180 	call	23118 <SDHAL_GetResponse>
   251a8:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
   251ac:	e0bff617 	ldw	r2,-40(fp)
   251b0:	10002826 	beq	r2,zero,25254 <SD_CMD17+0x190>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   251b4:	e0bff617 	ldw	r2,-40(fp)
   251b8:	10000526 	beq	r2,zero,251d0 <SD_CMD17+0x10c>
   251bc:	e0bffa43 	ldbu	r2,-23(fp)
   251c0:	10c03fcc 	andi	r3,r2,255
   251c4:	e0bff703 	ldbu	r2,-36(fp)
   251c8:	18800126 	beq	r3,r2,251d0 <SD_CMD17+0x10c>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   251cc:	e03ff615 	stw	zero,-40(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   251d0:	e0bffa44 	addi	r2,fp,-23
   251d4:	10800044 	addi	r2,r2,1
   251d8:	1009883a 	mov	r4,r2
   251dc:	00254940 	call	25494 <ArrayToU32>
   251e0:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
   251e4:	00824004 	movi	r2,2304
   251e8:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   251ec:	e0fff817 	ldw	r3,-32(fp)
   251f0:	e0bff917 	ldw	r2,-28(fp)
   251f4:	18800126 	beq	r3,r2,251fc <SD_CMD17+0x138>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   251f8:	e03ff615 	stw	zero,-40(fp)
        }        
        
        // check crc
        if (bSuccess){
   251fc:	e0bff617 	ldw	r2,-40(fp)
   25200:	10000d26 	beq	r2,zero,25238 <SD_CMD17+0x174>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   25204:	e0bffa44 	addi	r2,fp,-23
   25208:	01800144 	movi	r6,5
   2520c:	100b883a 	mov	r5,r2
   25210:	0009883a 	mov	r4,zero
   25214:	0022f140 	call	22f14 <crc7>
   25218:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   2521c:	e0bffb83 	ldbu	r2,-18(fp)
   25220:	10803fcc 	andi	r2,r2,255
   25224:	1004d07a 	srli	r2,r2,1
   25228:	10c03fcc 	andi	r3,r2,255
   2522c:	e0bffa03 	ldbu	r2,-24(fp)
   25230:	18800126 	beq	r3,r2,25238 <SD_CMD17+0x174>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   25234:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   25238:	e0bff617 	ldw	r2,-40(fp)
   2523c:	10000526 	beq	r2,zero,25254 <SD_CMD17+0x190>
   25240:	e0bffb83 	ldbu	r2,-18(fp)
   25244:	10803fcc 	andi	r2,r2,255
   25248:	1080004c 	andi	r2,r2,1
   2524c:	1000011e 	bne	r2,zero,25254 <SD_CMD17+0x190>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   25250:	e03ff615 	stw	zero,-40(fp)
          
    }
    
     
    
    return bSuccess;
   25254:	e0bff617 	ldw	r2,-40(fp)
}
   25258:	e037883a 	mov	sp,fp
   2525c:	dfc00117 	ldw	ra,4(sp)
   25260:	df000017 	ldw	fp,0(sp)
   25264:	dec00204 	addi	sp,sp,8
   25268:	f800283a 	ret

0002526c <SD_CMD24>:

// WRITE_BLOCK (Single)
// Response R1
bool SD_CMD24(alt_u32 Addr, alt_u8 ExpectedStatus){
   2526c:	defff404 	addi	sp,sp,-48
   25270:	dfc00b15 	stw	ra,44(sp)
   25274:	df000a15 	stw	fp,40(sp)
   25278:	df000a04 	addi	fp,sp,40
   2527c:	e13ffe15 	stw	r4,-8(fp)
   25280:	2805883a 	mov	r2,r5
   25284:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 24;
   25288:	00800604 	movi	r2,24
   2528c:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   25290:	00801004 	movi	r2,64
   25294:	e0bffbc5 	stb	r2,-17(fp)
   25298:	e03ffc05 	stb	zero,-16(fp)
   2529c:	e03ffc45 	stb	zero,-15(fp)
   252a0:	e03ffc85 	stb	zero,-14(fp)
   252a4:	e03ffcc5 	stb	zero,-13(fp)
   252a8:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD24\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   252ac:	e0fffbc3 	ldbu	r3,-17(fp)
   252b0:	e0bff703 	ldbu	r2,-36(fp)
   252b4:	1884b03a 	or	r2,r3,r2
   252b8:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
   252bc:	e0bffc03 	ldbu	r2,-16(fp)
   252c0:	e0fffe17 	ldw	r3,-8(fp)
   252c4:	1806d63a 	srli	r3,r3,24
   252c8:	10c4b03a 	or	r2,r2,r3
   252cc:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
   252d0:	e0bffc43 	ldbu	r2,-15(fp)
   252d4:	e0fffe17 	ldw	r3,-8(fp)
   252d8:	1806d43a 	srli	r3,r3,16
   252dc:	10c4b03a 	or	r2,r2,r3
   252e0:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
   252e4:	e0bffc83 	ldbu	r2,-14(fp)
   252e8:	e0fffe17 	ldw	r3,-8(fp)
   252ec:	1806d23a 	srli	r3,r3,8
   252f0:	10c4b03a 	or	r2,r2,r3
   252f4:	e0bffc85 	stb	r2,-14(fp)
    szCmd[4] |= Addr & 0xFF;
   252f8:	e0bffcc3 	ldbu	r2,-13(fp)
   252fc:	e0fffe17 	ldw	r3,-8(fp)
   25300:	10c4b03a 	or	r2,r2,r3
   25304:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   25308:	e0bffbc4 	addi	r2,fp,-17
   2530c:	01800144 	movi	r6,5
   25310:	100b883a 	mov	r5,r2
   25314:	0009883a 	mov	r4,zero
   25318:	0022f140 	call	22f14 <crc7>
   2531c:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   25320:	e0bff743 	ldbu	r2,-35(fp)
   25324:	1085883a 	add	r2,r2,r2
   25328:	10800054 	ori	r2,r2,1
   2532c:	e0bffd05 	stb	r2,-12(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   25330:	e0bffbc4 	addi	r2,fp,-17
   25334:	01400184 	movi	r5,6
   25338:	1009883a 	mov	r4,r2
   2533c:	00230200 	call	23020 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   25340:	e0bffa44 	addi	r2,fp,-23
   25344:	01400184 	movi	r5,6
   25348:	1009883a 	mov	r4,r2
   2534c:	00231180 	call	23118 <SDHAL_GetResponse>
   25350:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
   25354:	e0bff617 	ldw	r2,-40(fp)
   25358:	10002826 	beq	r2,zero,253fc <SD_CMD24+0x190>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   2535c:	e0bff617 	ldw	r2,-40(fp)
   25360:	10000526 	beq	r2,zero,25378 <SD_CMD24+0x10c>
   25364:	e0bffa43 	ldbu	r2,-23(fp)
   25368:	10c03fcc 	andi	r3,r2,255
   2536c:	e0bff703 	ldbu	r2,-36(fp)
   25370:	18800126 	beq	r3,r2,25378 <SD_CMD24+0x10c>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   25374:	e03ff615 	stw	zero,-40(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   25378:	e0bffa44 	addi	r2,fp,-23
   2537c:	10800044 	addi	r2,r2,1
   25380:	1009883a 	mov	r4,r2
   25384:	00254940 	call	25494 <ArrayToU32>
   25388:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
   2538c:	00824004 	movi	r2,2304
   25390:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   25394:	e0fff817 	ldw	r3,-32(fp)
   25398:	e0bff917 	ldw	r2,-28(fp)
   2539c:	18800126 	beq	r3,r2,253a4 <SD_CMD24+0x138>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   253a0:	e03ff615 	stw	zero,-40(fp)
        }        
        
        // check crc
        if (bSuccess){
   253a4:	e0bff617 	ldw	r2,-40(fp)
   253a8:	10000d26 	beq	r2,zero,253e0 <SD_CMD24+0x174>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   253ac:	e0bffa44 	addi	r2,fp,-23
   253b0:	01800144 	movi	r6,5
   253b4:	100b883a 	mov	r5,r2
   253b8:	0009883a 	mov	r4,zero
   253bc:	0022f140 	call	22f14 <crc7>
   253c0:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   253c4:	e0bffb83 	ldbu	r2,-18(fp)
   253c8:	10803fcc 	andi	r2,r2,255
   253cc:	1004d07a 	srli	r2,r2,1
   253d0:	10c03fcc 	andi	r3,r2,255
   253d4:	e0bffa03 	ldbu	r2,-24(fp)
   253d8:	18800126 	beq	r3,r2,253e0 <SD_CMD24+0x174>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   253dc:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   253e0:	e0bff617 	ldw	r2,-40(fp)
   253e4:	10000526 	beq	r2,zero,253fc <SD_CMD24+0x190>
   253e8:	e0bffb83 	ldbu	r2,-18(fp)
   253ec:	10803fcc 	andi	r2,r2,255
   253f0:	1080004c 	andi	r2,r2,1
   253f4:	1000011e 	bne	r2,zero,253fc <SD_CMD24+0x190>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   253f8:	e03ff615 	stw	zero,-40(fp)
          
    }
    
     
    
    return bSuccess;
   253fc:	e0bff617 	ldw	r2,-40(fp)
}
   25400:	e037883a 	mov	sp,fp
   25404:	dfc00117 	ldw	ra,4(sp)
   25408:	df000017 	ldw	fp,0(sp)
   2540c:	dec00204 	addi	sp,sp,8
   25410:	f800283a 	ret

00025414 <SD_ReadData>:


bool SD_ReadData(alt_u8 szBuf[], int nBufLen){
   25414:	defffb04 	addi	sp,sp,-20
   25418:	dfc00415 	stw	ra,16(sp)
   2541c:	df000315 	stw	fp,12(sp)
   25420:	df000304 	addi	fp,sp,12
   25424:	e13ffe15 	stw	r4,-8(fp)
   25428:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_ReadData(szBuf, nBufLen);
   2542c:	e17fff17 	ldw	r5,-4(fp)
   25430:	e13ffe17 	ldw	r4,-8(fp)
   25434:	002332c0 	call	2332c <SDHAL_ReadData>
   25438:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
   2543c:	e0bffd17 	ldw	r2,-12(fp)
}
   25440:	e037883a 	mov	sp,fp
   25444:	dfc00117 	ldw	ra,4(sp)
   25448:	df000017 	ldw	fp,0(sp)
   2544c:	dec00204 	addi	sp,sp,8
   25450:	f800283a 	ret

00025454 <SD_WriteData>:

bool SD_WriteData(alt_u8 szDataWrite[], int nDataLen){
   25454:	defffb04 	addi	sp,sp,-20
   25458:	dfc00415 	stw	ra,16(sp)
   2545c:	df000315 	stw	fp,12(sp)
   25460:	df000304 	addi	fp,sp,12
   25464:	e13ffe15 	stw	r4,-8(fp)
   25468:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_WriteData(szDataWrite, nDataLen);
   2546c:	e17fff17 	ldw	r5,-4(fp)
   25470:	e13ffe17 	ldw	r4,-8(fp)
   25474:	00237fc0 	call	237fc <SDHAL_WriteData>
   25478:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
   2547c:	e0bffd17 	ldw	r2,-12(fp)
}
   25480:	e037883a 	mov	sp,fp
   25484:	dfc00117 	ldw	ra,4(sp)
   25488:	df000017 	ldw	fp,0(sp)
   2548c:	dec00204 	addi	sp,sp,8
   25490:	f800283a 	ret

00025494 <ArrayToU32>:


alt_u32 ArrayToU32(alt_u8 szData[]){
   25494:	defffc04 	addi	sp,sp,-16
   25498:	df000315 	stw	fp,12(sp)
   2549c:	df000304 	addi	fp,sp,12
   254a0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Value32 = 0;
   254a4:	e03ffd15 	stw	zero,-12(fp)
    int i;
    
    for(i=0;i<4;i++){
   254a8:	e03ffe15 	stw	zero,-8(fp)
   254ac:	00000e06 	br	254e8 <ArrayToU32+0x54>
        Value32 <<= 8;
   254b0:	e0bffd17 	ldw	r2,-12(fp)
   254b4:	1004923a 	slli	r2,r2,8
   254b8:	e0bffd15 	stw	r2,-12(fp)
        Value32 |= szData[i];
   254bc:	e0bffe17 	ldw	r2,-8(fp)
   254c0:	e0ffff17 	ldw	r3,-4(fp)
   254c4:	1885883a 	add	r2,r3,r2
   254c8:	10800003 	ldbu	r2,0(r2)
   254cc:	10803fcc 	andi	r2,r2,255
   254d0:	e0fffd17 	ldw	r3,-12(fp)
   254d4:	1884b03a 	or	r2,r3,r2
   254d8:	e0bffd15 	stw	r2,-12(fp)

alt_u32 ArrayToU32(alt_u8 szData[]){
    alt_u32 Value32 = 0;
    int i;
    
    for(i=0;i<4;i++){
   254dc:	e0bffe17 	ldw	r2,-8(fp)
   254e0:	10800044 	addi	r2,r2,1
   254e4:	e0bffe15 	stw	r2,-8(fp)
   254e8:	e0bffe17 	ldw	r2,-8(fp)
   254ec:	10800110 	cmplti	r2,r2,4
   254f0:	103fef1e 	bne	r2,zero,254b0 <_gp+0xfffea470>
        Value32 <<= 8;
        Value32 |= szData[i];
    }
    return Value32;
   254f4:	e0bffd17 	ldw	r2,-12(fp)
}
   254f8:	e037883a 	mov	sp,fp
   254fc:	df000017 	ldw	fp,0(sp)
   25500:	dec00104 	addi	sp,sp,4
   25504:	f800283a 	ret

00025508 <Fat_Test>:
#include <stdio.h>
#include ".\terasic_fat\FatFileSystem.h"
#include "..\terasic_lib\terasic_includes.h"


bool Fat_Test(FAT_HANDLE hFat, char *pDumpFile){
   25508:	deff6604 	addi	sp,sp,-616
   2550c:	dfc09915 	stw	ra,612(sp)
   25510:	df009815 	stw	fp,608(sp)
   25514:	df009804 	addi	fp,sp,608
   25518:	e13ffe15 	stw	r4,-8(fp)
   2551c:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    int nCount = 0;
   25520:	e03f6915 	stw	zero,-604(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;

    bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
   25524:	e0bf7204 	addi	r2,fp,-568
   25528:	100b883a 	mov	r5,r2
   2552c:	e13ffe17 	ldw	r4,-8(fp)
   25530:	0020a200 	call	20a20 <Fat_FileBrowseBegin>
   25534:	e0bf6815 	stw	r2,-608(fp)
	printf("LIST %d\r\n", bSuccess);
   25538:	e17f6817 	ldw	r5,-608(fp)
   2553c:	010000f4 	movhi	r4,3
   25540:	21073e04 	addi	r4,r4,7416
   25544:	002ea900 	call	2ea90 <printf>
    if (bSuccess){
   25548:	e0bf6817 	ldw	r2,-608(fp)
   2554c:	10004026 	beq	r2,zero,25650 <Fat_Test+0x148>
    	printf("AAAA\r\n");
   25550:	010000f4 	movhi	r4,3
   25554:	21074104 	addi	r4,r4,7428
   25558:	002eb800 	call	2eb80 <puts>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext)){
   2555c:	00003606 	br	25638 <Fat_Test+0x130>
            if (FileContext.bLongFilename){
   25560:	e0bfb417 	ldw	r2,-304(fp)
   25564:	10002b26 	beq	r2,zero,25614 <Fat_Test+0x10c>
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
   25568:	e0bf7404 	addi	r2,fp,-560
   2556c:	e0bf6a15 	stw	r2,-600(fp)
                pData8 = FileContext.szName;
   25570:	e0bf7404 	addi	r2,fp,-560
   25574:	e0bf6b15 	stw	r2,-596(fp)
                printf("[%d]", nCount);
   25578:	e17f6917 	ldw	r5,-604(fp)
   2557c:	010000f4 	movhi	r4,3
   25580:	21074304 	addi	r4,r4,7436
   25584:	002ea900 	call	2ea90 <printf>
                while(*pData16){
   25588:	00001b06 	br	255f8 <Fat_Test+0xf0>
                    if (*pData8)
   2558c:	e0bf6b17 	ldw	r2,-596(fp)
   25590:	10800003 	ldbu	r2,0(r2)
   25594:	10803fcc 	andi	r2,r2,255
   25598:	10000526 	beq	r2,zero,255b0 <Fat_Test+0xa8>
                        printf("%c", *pData8);
   2559c:	e0bf6b17 	ldw	r2,-596(fp)
   255a0:	10800003 	ldbu	r2,0(r2)
   255a4:	10803fcc 	andi	r2,r2,255
   255a8:	1009883a 	mov	r4,r2
   255ac:	002eae40 	call	2eae4 <putchar>
                    pData8++;
   255b0:	e0bf6b17 	ldw	r2,-596(fp)
   255b4:	10800044 	addi	r2,r2,1
   255b8:	e0bf6b15 	stw	r2,-596(fp)
                    if (*pData8)
   255bc:	e0bf6b17 	ldw	r2,-596(fp)
   255c0:	10800003 	ldbu	r2,0(r2)
   255c4:	10803fcc 	andi	r2,r2,255
   255c8:	10000526 	beq	r2,zero,255e0 <Fat_Test+0xd8>
                        printf("%c", *pData8);
   255cc:	e0bf6b17 	ldw	r2,-596(fp)
   255d0:	10800003 	ldbu	r2,0(r2)
   255d4:	10803fcc 	andi	r2,r2,255
   255d8:	1009883a 	mov	r4,r2
   255dc:	002eae40 	call	2eae4 <putchar>
                    pData8++;
   255e0:	e0bf6b17 	ldw	r2,-596(fp)
   255e4:	10800044 	addi	r2,r2,1
   255e8:	e0bf6b15 	stw	r2,-596(fp)
                    //
                    pData16++;
   255ec:	e0bf6a17 	ldw	r2,-600(fp)
   255f0:	10800084 	addi	r2,r2,2
   255f4:	e0bf6a15 	stw	r2,-600(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                printf("[%d]", nCount);
                while(*pData16){
   255f8:	e0bf6a17 	ldw	r2,-600(fp)
   255fc:	1080000b 	ldhu	r2,0(r2)
   25600:	10bfffcc 	andi	r2,r2,65535
   25604:	103fe11e 	bne	r2,zero,2558c <_gp+0xfffea54c>
                        printf("%c", *pData8);
                    pData8++;
                    //
                    pData16++;
                }
                printf("\n");
   25608:	01000284 	movi	r4,10
   2560c:	002eae40 	call	2eae4 <putchar>
   25610:	00000606 	br	2562c <Fat_Test+0x124>
            }else{
                printf("[%d]%s\n", nCount, FileContext.szName);
   25614:	e0bf7404 	addi	r2,fp,-560
   25618:	100d883a 	mov	r6,r2
   2561c:	e17f6917 	ldw	r5,-604(fp)
   25620:	010000f4 	movhi	r4,3
   25624:	21074504 	addi	r4,r4,7444
   25628:	002ea900 	call	2ea90 <printf>
            }
            nCount++;
   2562c:	e0bf6917 	ldw	r2,-604(fp)
   25630:	10800044 	addi	r2,r2,1
   25634:	e0bf6915 	stw	r2,-604(fp)

    bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
	printf("LIST %d\r\n", bSuccess);
    if (bSuccess){
    	printf("AAAA\r\n");
        while(Fat_FileBrowseNext(&hBrowse, &FileContext)){
   25638:	e0ff7404 	addi	r3,fp,-560
   2563c:	e0bf7204 	addi	r2,fp,-568
   25640:	180b883a 	mov	r5,r3
   25644:	1009883a 	mov	r4,r2
   25648:	0020a8c0 	call	20a8c <Fat_FileBrowseNext>
   2564c:	103fc41e 	bne	r2,zero,25560 <_gp+0xfffea520>
                printf("[%d]%s\n", nCount, FileContext.szName);
            }
            nCount++;
        }
    }
    if (bSuccess && pDumpFile && strlen(pDumpFile)){
   25650:	e0bf6817 	ldw	r2,-608(fp)
   25654:	10006326 	beq	r2,zero,257e4 <Fat_Test+0x2dc>
   25658:	e0bfff17 	ldw	r2,-4(fp)
   2565c:	10006126 	beq	r2,zero,257e4 <Fat_Test+0x2dc>
   25660:	e0bfff17 	ldw	r2,-4(fp)
   25664:	10800003 	ldbu	r2,0(r2)
   25668:	10803fcc 	andi	r2,r2,255
   2566c:	1080201c 	xori	r2,r2,128
   25670:	10bfe004 	addi	r2,r2,-128
   25674:	10005b26 	beq	r2,zero,257e4 <Fat_Test+0x2dc>
        FAT_FILE_HANDLE hFile;
        hFile =  Fat_FileOpen(hFat, pDumpFile);
   25678:	e17fff17 	ldw	r5,-4(fp)
   2567c:	e13ffe17 	ldw	r4,-8(fp)
   25680:	00212a00 	call	212a0 <Fat_FileOpen>
   25684:	e0bf7015 	stw	r2,-576(fp)
        if (hFile){
   25688:	e0bf7017 	ldw	r2,-576(fp)
   2568c:	10005026 	beq	r2,zero,257d0 <Fat_Test+0x2c8>
            alt_u8 szRead[256];
            int nReadSize, nFileSize, nTotalReadSize=0;
   25690:	e03f6d15 	stw	zero,-588(fp)
            nFileSize = Fat_FileSize(hFile);
   25694:	e13f7017 	ldw	r4,-576(fp)
   25698:	00213cc0 	call	213cc <Fat_FileSize>
   2569c:	e0bf7115 	stw	r2,-572(fp)
            if (nReadSize > sizeof(szRead))
   256a0:	e0bf6c17 	ldw	r2,-592(fp)
   256a4:	10804070 	cmpltui	r2,r2,257
   256a8:	1000021e 	bne	r2,zero,256b4 <Fat_Test+0x1ac>
                nReadSize = sizeof(szRead);
   256ac:	00804004 	movi	r2,256
   256b0:	e0bf6c15 	stw	r2,-592(fp)
            printf("%s dump:\n", pDumpFile);
   256b4:	e17fff17 	ldw	r5,-4(fp)
   256b8:	010000f4 	movhi	r4,3
   256bc:	21074704 	addi	r4,r4,7452
   256c0:	002ea900 	call	2ea90 <printf>
            while(bSuccess && nTotalReadSize < nFileSize){
   256c4:	00003606 	br	257a0 <Fat_Test+0x298>
                nReadSize = sizeof(szRead);
   256c8:	00804004 	movi	r2,256
   256cc:	e0bf6c15 	stw	r2,-592(fp)
                if (nReadSize > (nFileSize - nTotalReadSize))
   256d0:	e0ff7117 	ldw	r3,-572(fp)
   256d4:	e0bf6d17 	ldw	r2,-588(fp)
   256d8:	1887c83a 	sub	r3,r3,r2
   256dc:	e0bf6c17 	ldw	r2,-592(fp)
   256e0:	1880040e 	bge	r3,r2,256f4 <Fat_Test+0x1ec>
                    nReadSize = (nFileSize - nTotalReadSize);
   256e4:	e0ff7117 	ldw	r3,-572(fp)
   256e8:	e0bf6d17 	ldw	r2,-588(fp)
   256ec:	1885c83a 	sub	r2,r3,r2
   256f0:	e0bf6c15 	stw	r2,-592(fp)
                //
                if (Fat_FileRead(hFile, szRead, nReadSize)){
   256f4:	e0bfbe04 	addi	r2,fp,-264
   256f8:	e1bf6c17 	ldw	r6,-592(fp)
   256fc:	100b883a 	mov	r5,r2
   25700:	e13f7017 	ldw	r4,-576(fp)
   25704:	00214100 	call	21410 <Fat_FileRead>
   25708:	10002026 	beq	r2,zero,2578c <Fat_Test+0x284>
                    int i;
                    int l = 0;
   2570c:	e03f6f15 	stw	zero,-580(fp)
                    for(i=0;i<16;i++){
   25710:	e03f6e15 	stw	zero,-584(fp)
   25714:	00001506 	br	2576c <Fat_Test+0x264>
                        //printf("%c", szRead[i]);
                    	printf("0x%x ", szRead[i]);
   25718:	e0ffbe04 	addi	r3,fp,-264
   2571c:	e0bf6e17 	ldw	r2,-584(fp)
   25720:	1885883a 	add	r2,r3,r2
   25724:	10800003 	ldbu	r2,0(r2)
   25728:	10803fcc 	andi	r2,r2,255
   2572c:	100b883a 	mov	r5,r2
   25730:	010000f4 	movhi	r4,3
   25734:	21074a04 	addi	r4,r4,7464
   25738:	002ea900 	call	2ea90 <printf>
                    	if (l++ == 16) {
   2573c:	e0bf6f17 	ldw	r2,-580(fp)
   25740:	10c00044 	addi	r3,r2,1
   25744:	e0ff6f15 	stw	r3,-580(fp)
   25748:	10800418 	cmpnei	r2,r2,16
   2574c:	1000041e 	bne	r2,zero,25760 <Fat_Test+0x258>
                            printf("\r\n");
   25750:	010000f4 	movhi	r4,3
   25754:	21074c04 	addi	r4,r4,7472
   25758:	002eb800 	call	2eb80 <puts>
                            l = 0;
   2575c:	e03f6f15 	stw	zero,-580(fp)
                    nReadSize = (nFileSize - nTotalReadSize);
                //
                if (Fat_FileRead(hFile, szRead, nReadSize)){
                    int i;
                    int l = 0;
                    for(i=0;i<16;i++){
   25760:	e0bf6e17 	ldw	r2,-584(fp)
   25764:	10800044 	addi	r2,r2,1
   25768:	e0bf6e15 	stw	r2,-584(fp)
   2576c:	e0bf6e17 	ldw	r2,-584(fp)
   25770:	10800410 	cmplti	r2,r2,16
   25774:	103fe81e 	bne	r2,zero,25718 <_gp+0xfffea6d8>
                    	if (l++ == 16) {
                            printf("\r\n");
                            l = 0;
                        };
                    }
                    nTotalReadSize += nReadSize;
   25778:	e0ff6d17 	ldw	r3,-588(fp)
   2577c:	e0bf6c17 	ldw	r2,-592(fp)
   25780:	1885883a 	add	r2,r3,r2
   25784:	e0bf6d15 	stw	r2,-588(fp)
   25788:	00000506 	br	257a0 <Fat_Test+0x298>
                }else{
                    bSuccess = FALSE;
   2578c:	e03f6815 	stw	zero,-608(fp)
                    printf("\nFailed to read the file \"%s\"\n", pDumpFile);
   25790:	e17fff17 	ldw	r5,-4(fp)
   25794:	010000f4 	movhi	r4,3
   25798:	21074d04 	addi	r4,r4,7476
   2579c:	002ea900 	call	2ea90 <printf>
            int nReadSize, nFileSize, nTotalReadSize=0;
            nFileSize = Fat_FileSize(hFile);
            if (nReadSize > sizeof(szRead))
                nReadSize = sizeof(szRead);
            printf("%s dump:\n", pDumpFile);
            while(bSuccess && nTotalReadSize < nFileSize){
   257a0:	e0bf6817 	ldw	r2,-608(fp)
   257a4:	10000326 	beq	r2,zero,257b4 <Fat_Test+0x2ac>
   257a8:	e0ff6d17 	ldw	r3,-588(fp)
   257ac:	e0bf7117 	ldw	r2,-572(fp)
   257b0:	18bfc516 	blt	r3,r2,256c8 <_gp+0xfffea688>
                }else{
                    bSuccess = FALSE;
                    printf("\nFailed to read the file \"%s\"\n", pDumpFile);
                }
            } // while
            if (bSuccess)
   257b4:	e0bf6817 	ldw	r2,-608(fp)
   257b8:	10000226 	beq	r2,zero,257c4 <Fat_Test+0x2bc>
                printf("\n");
   257bc:	01000284 	movi	r4,10
   257c0:	002eae40 	call	2eae4 <putchar>
            Fat_FileClose(hFile);
   257c4:	e13f7017 	ldw	r4,-576(fp)
   257c8:	00219cc0 	call	219cc <Fat_FileClose>
   257cc:	00000506 	br	257e4 <Fat_Test+0x2dc>
        }else{
            bSuccess = FALSE;
   257d0:	e03f6815 	stw	zero,-608(fp)
            printf("Cannot find the file \"%s\"\n", pDumpFile);
   257d4:	e17fff17 	ldw	r5,-4(fp)
   257d8:	010000f4 	movhi	r4,3
   257dc:	21075504 	addi	r4,r4,7508
   257e0:	002ea900 	call	2ea90 <printf>
        }
    }

    return bSuccess;
   257e4:	e0bf6817 	ldw	r2,-608(fp)
}
   257e8:	e037883a 	mov	sp,fp
   257ec:	dfc00117 	ldw	ra,4(sp)
   257f0:	df000017 	ldw	fp,0(sp)
   257f4:	dec00204 	addi	sp,sp,8
   257f8:	f800283a 	ret

000257fc <SD_Test>:


int SD_Test(char* file) {
   257fc:	defffc04 	addi	sp,sp,-16
   25800:	dfc00315 	stw	ra,12(sp)
   25804:	df000215 	stw	fp,8(sp)
   25808:	df000204 	addi	fp,sp,8
   2580c:	e13fff15 	stw	r4,-4(fp)
    FAT_HANDLE hFat;

    printf("========== DE2-115 SDCARD Demo ==========\n");
   25810:	010000f4 	movhi	r4,3
   25814:	21075c04 	addi	r4,r4,7536
   25818:	002eb800 	call	2eb80 <puts>

    //while(1){
        printf("Processing...\r\n");
   2581c:	010000f4 	movhi	r4,3
   25820:	21076704 	addi	r4,r4,7580
   25824:	002eb800 	call	2eb80 <puts>
        hFat = Fat_Mount(FAT_SD_CARD, 0);
   25828:	000b883a 	mov	r5,zero
   2582c:	0009883a 	mov	r4,zero
   25830:	00209100 	call	20910 <Fat_Mount>
   25834:	e0bffe15 	stw	r2,-8(fp)
        if (hFat){
   25838:	e0bffe17 	ldw	r2,-8(fp)
   2583c:	10001226 	beq	r2,zero,25888 <SD_Test+0x8c>
            printf("sdcard mount success!\n");
   25840:	010000f4 	movhi	r4,3
   25844:	21076b04 	addi	r4,r4,7596
   25848:	002eb800 	call	2eb80 <puts>
            printf("Root Directory Item Count:%d\n", Fat_FileCount(hFat));
   2584c:	e13ffe17 	ldw	r4,-8(fp)
   25850:	0020eb80 	call	20eb8 <Fat_FileCount>
   25854:	100b883a 	mov	r5,r2
   25858:	010000f4 	movhi	r4,3
   2585c:	21077104 	addi	r4,r4,7620
   25860:	002ea900 	call	2ea90 <printf>
            //Fat_Test(hFat, "text.txt");
            Fat_Test(hFat, file);
   25864:	e17fff17 	ldw	r5,-4(fp)
   25868:	e13ffe17 	ldw	r4,-8(fp)
   2586c:	00255080 	call	25508 <Fat_Test>
            Fat_Unmount(hFat);
   25870:	e13ffe17 	ldw	r4,-8(fp)
   25874:	00209540 	call	20954 <Fat_Unmount>

            printf("===== Test Done =====\r\nPress KEY3 to test again.\r\n");
   25878:	010000f4 	movhi	r4,3
   2587c:	21077904 	addi	r4,r4,7652
   25880:	002eb800 	call	2eb80 <puts>
   25884:	00000306 	br	25894 <SD_Test+0x98>
        }else{
            //printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE2-115 board and press KEY3.\r\n");
        	printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE2-115 board and reset.\r\n");
   25888:	010000f4 	movhi	r4,3
   2588c:	21078604 	addi	r4,r4,7704
   25890:	002eb800 	call	2eb80 <puts>
        }
        // wait users to press BUTTON3
        //while ((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x08) == 0x08);
        usleep(400*1000); // debounce
   25894:	010001b4 	movhi	r4,6
   25898:	2106a004 	addi	r4,r4,6784
   2589c:	00303800 	call	30380 <usleep>
    //} // while


  return 0;
   258a0:	0005883a 	mov	r2,zero
}
   258a4:	e037883a 	mov	sp,fp
   258a8:	dfc00117 	ldw	ra,4(sp)
   258ac:	df000017 	ldw	fp,0(sp)
   258b0:	dec00204 	addi	sp,sp,8
   258b4:	f800283a 	ret

000258b8 <conv_data_8_16>:
#include "file_format_aux.h"
#include "asm_opcodes.h"
#include "mem_addrs.h"

alt_u16 conv_data_8_16(alt_u8* data, int offset) {
   258b8:	defffd04 	addi	sp,sp,-12
   258bc:	df000215 	stw	fp,8(sp)
   258c0:	df000204 	addi	fp,sp,8
   258c4:	e13ffe15 	stw	r4,-8(fp)
   258c8:	e17fff15 	stw	r5,-4(fp)
	return ((data[offset] << 8) & 0xFF00) | (data[offset+1]);
   258cc:	e0bfff17 	ldw	r2,-4(fp)
   258d0:	e0fffe17 	ldw	r3,-8(fp)
   258d4:	1885883a 	add	r2,r3,r2
   258d8:	10800003 	ldbu	r2,0(r2)
   258dc:	10803fcc 	andi	r2,r2,255
   258e0:	1004923a 	slli	r2,r2,8
   258e4:	1009883a 	mov	r4,r2
   258e8:	e0bfff17 	ldw	r2,-4(fp)
   258ec:	10800044 	addi	r2,r2,1
   258f0:	e0fffe17 	ldw	r3,-8(fp)
   258f4:	1885883a 	add	r2,r3,r2
   258f8:	10800003 	ldbu	r2,0(r2)
   258fc:	10803fcc 	andi	r2,r2,255
   25900:	2084b03a 	or	r2,r4,r2
}
   25904:	e037883a 	mov	sp,fp
   25908:	df000017 	ldw	fp,0(sp)
   2590c:	dec00104 	addi	sp,sp,4
   25910:	f800283a 	ret

00025914 <reverse_16>:

alt_u16 reverse_16(alt_u16 data) {
   25914:	defffe04 	addi	sp,sp,-8
   25918:	df000115 	stw	fp,4(sp)
   2591c:	df000104 	addi	fp,sp,4
   25920:	2005883a 	mov	r2,r4
   25924:	e0bfff0d 	sth	r2,-4(fp)
	return (data << 8) | (data >> 8);
   25928:	e0bfff0b 	ldhu	r2,-4(fp)
   2592c:	1004923a 	slli	r2,r2,8
   25930:	1007883a 	mov	r3,r2
   25934:	e0bfff0b 	ldhu	r2,-4(fp)
   25938:	1004d23a 	srli	r2,r2,8
   2593c:	1884b03a 	or	r2,r3,r2
}
   25940:	e037883a 	mov	sp,fp
   25944:	df000017 	ldw	fp,0(sp)
   25948:	dec00104 	addi	sp,sp,4
   2594c:	f800283a 	ret

00025950 <get_LOAD_routine_size>:

int get_LOAD_routine_size() {
   25950:	deffff04 	addi	sp,sp,-4
   25954:	df000015 	stw	fp,0(sp)
   25958:	d839883a 	mov	fp,sp
	return 52;
   2595c:	00800d04 	movi	r2,52
}
   25960:	e037883a 	mov	sp,fp
   25964:	df000017 	ldw	fp,0(sp)
   25968:	dec00104 	addi	sp,sp,4
   2596c:	f800283a 	ret

00025970 <get_SAVE_routine_size>:

int get_SAVE_routine_size() {
   25970:	deffff04 	addi	sp,sp,-4
   25974:	df000015 	stw	fp,0(sp)
   25978:	d839883a 	mov	fp,sp
	// TODO update
	return 60;
   2597c:	00800f04 	movi	r2,60
}
   25980:	e037883a 	mov	sp,fp
   25984:	df000017 	ldw	fp,0(sp)
   25988:	dec00104 	addi	sp,sp,4
   2598c:	f800283a 	ret

00025990 <generate_full_stack_addition>:
// IX -> ( IX  low)
//       ( IX high)
// INT
// PC (manual if !.SNA)

STACK_ADD generate_full_stack_addition(REGS regs, const enum file_type type) {
   25990:	deffef04 	addi	sp,sp,-68
   25994:	df000d15 	stw	fp,52(sp)
   25998:	df000d04 	addi	fp,sp,52
   2599c:	e13fff15 	stw	r4,-4(fp)
   259a0:	e1400115 	stw	r5,4(fp)
   259a4:	e1800215 	stw	r6,8(fp)
   259a8:	e1c00315 	stw	r7,12(fp)
	//alt_u16 sp = regs.SP;
	size_t size = 0;
   259ac:	e03ff315 	stw	zero,-52(fp)
	alt_u8 data[30];

	// Filling the stack data from the end to the start (top to bottom)
	data[size++] = regs.border;
   259b0:	e0bff317 	ldw	r2,-52(fp)
   259b4:	10c00044 	addi	r3,r2,1
   259b8:	e0fff315 	stw	r3,-52(fp)
   259bc:	e0c00843 	ldbu	r3,33(fp)
   259c0:	e13ff444 	addi	r4,fp,-47
   259c4:	2085883a 	add	r2,r4,r2
   259c8:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.border; // can only POP 16 bits at a time, so just filling this
   259cc:	e0bff317 	ldw	r2,-52(fp)
   259d0:	10c00044 	addi	r3,r2,1
   259d4:	e0fff315 	stw	r3,-52(fp)
   259d8:	e0c00843 	ldbu	r3,33(fp)
   259dc:	e13ff444 	addi	r4,fp,-47
   259e0:	2085883a 	add	r2,r4,r2
   259e4:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.R;
   259e8:	e0bff317 	ldw	r2,-52(fp)
   259ec:	10c00044 	addi	r3,r2,1
   259f0:	e0fff315 	stw	r3,-52(fp)
   259f4:	e0c00103 	ldbu	r3,4(fp)
   259f8:	e13ff444 	addi	r4,fp,-47
   259fc:	2085883a 	add	r2,r4,r2
   25a00:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.I;
   25a04:	e0bff317 	ldw	r2,-52(fp)
   25a08:	10c00044 	addi	r3,r2,1
   25a0c:	e0fff315 	stw	r3,-52(fp)
   25a10:	e0c00143 	ldbu	r3,5(fp)
   25a14:	e13ff444 	addi	r4,fp,-47
   25a18:	2085883a 	add	r2,r4,r2
   25a1c:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.Ll;
   25a20:	e0bff317 	ldw	r2,-52(fp)
   25a24:	10c00044 	addi	r3,r2,1
   25a28:	e0fff315 	stw	r3,-52(fp)
   25a2c:	e0c00243 	ldbu	r3,9(fp)
   25a30:	e13ff444 	addi	r4,fp,-47
   25a34:	2085883a 	add	r2,r4,r2
   25a38:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.Hl;
   25a3c:	e0bff317 	ldw	r2,-52(fp)
   25a40:	10c00044 	addi	r3,r2,1
   25a44:	e0fff315 	stw	r3,-52(fp)
   25a48:	e0c00203 	ldbu	r3,8(fp)
   25a4c:	e13ff444 	addi	r4,fp,-47
   25a50:	2085883a 	add	r2,r4,r2
   25a54:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.El;
   25a58:	e0bff317 	ldw	r2,-52(fp)
   25a5c:	10c00044 	addi	r3,r2,1
   25a60:	e0fff315 	stw	r3,-52(fp)
   25a64:	e0c002c3 	ldbu	r3,11(fp)
   25a68:	e13ff444 	addi	r4,fp,-47
   25a6c:	2085883a 	add	r2,r4,r2
   25a70:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.Dl;
   25a74:	e0bff317 	ldw	r2,-52(fp)
   25a78:	10c00044 	addi	r3,r2,1
   25a7c:	e0fff315 	stw	r3,-52(fp)
   25a80:	e0c00283 	ldbu	r3,10(fp)
   25a84:	e13ff444 	addi	r4,fp,-47
   25a88:	2085883a 	add	r2,r4,r2
   25a8c:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.Cl;
   25a90:	e0bff317 	ldw	r2,-52(fp)
   25a94:	10c00044 	addi	r3,r2,1
   25a98:	e0fff315 	stw	r3,-52(fp)
   25a9c:	e0c00343 	ldbu	r3,13(fp)
   25aa0:	e13ff444 	addi	r4,fp,-47
   25aa4:	2085883a 	add	r2,r4,r2
   25aa8:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.Bl;
   25aac:	e0bff317 	ldw	r2,-52(fp)
   25ab0:	10c00044 	addi	r3,r2,1
   25ab4:	e0fff315 	stw	r3,-52(fp)
   25ab8:	e0c00303 	ldbu	r3,12(fp)
   25abc:	e13ff444 	addi	r4,fp,-47
   25ac0:	2085883a 	add	r2,r4,r2
   25ac4:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.Fl;
   25ac8:	e0bff317 	ldw	r2,-52(fp)
   25acc:	10c00044 	addi	r3,r2,1
   25ad0:	e0fff315 	stw	r3,-52(fp)
   25ad4:	e0c001c3 	ldbu	r3,7(fp)
   25ad8:	e13ff444 	addi	r4,fp,-47
   25adc:	2085883a 	add	r2,r4,r2
   25ae0:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.Al;
   25ae4:	e0bff317 	ldw	r2,-52(fp)
   25ae8:	10c00044 	addi	r3,r2,1
   25aec:	e0fff315 	stw	r3,-52(fp)
   25af0:	e0c00183 	ldbu	r3,6(fp)
   25af4:	e13ff444 	addi	r4,fp,-47
   25af8:	2085883a 	add	r2,r4,r2
   25afc:	10c00005 	stb	r3,0(r2)

	data[size++] = regs.IY >> 8;	// Low byte
   25b00:	e0bff317 	ldw	r2,-52(fp)
   25b04:	10c00044 	addi	r3,r2,1
   25b08:	e0fff315 	stw	r3,-52(fp)
   25b0c:	e0c0058b 	ldhu	r3,22(fp)
   25b10:	18ffffcc 	andi	r3,r3,65535
   25b14:	1806d23a 	srli	r3,r3,8
   25b18:	1809883a 	mov	r4,r3
   25b1c:	e0fff444 	addi	r3,fp,-47
   25b20:	1885883a 	add	r2,r3,r2
   25b24:	11000005 	stb	r4,0(r2)
	data[size++] = regs.IY & 0xFF;	// High Byte
   25b28:	e0bff317 	ldw	r2,-52(fp)
   25b2c:	10c00044 	addi	r3,r2,1
   25b30:	e0fff315 	stw	r3,-52(fp)
   25b34:	e0c0058b 	ldhu	r3,22(fp)
   25b38:	1809883a 	mov	r4,r3
   25b3c:	e0fff444 	addi	r3,fp,-47
   25b40:	1885883a 	add	r2,r3,r2
   25b44:	11000005 	stb	r4,0(r2)

	data[size++] = regs.IX >> 8;	// Low byte
   25b48:	e0bff317 	ldw	r2,-52(fp)
   25b4c:	10c00044 	addi	r3,r2,1
   25b50:	e0fff315 	stw	r3,-52(fp)
   25b54:	e0c0060b 	ldhu	r3,24(fp)
   25b58:	18ffffcc 	andi	r3,r3,65535
   25b5c:	1806d23a 	srli	r3,r3,8
   25b60:	1809883a 	mov	r4,r3
   25b64:	e0fff444 	addi	r3,fp,-47
   25b68:	1885883a 	add	r2,r3,r2
   25b6c:	11000005 	stb	r4,0(r2)
	data[size++] = regs.IX & 0xFF;	// High Byte
   25b70:	e0bff317 	ldw	r2,-52(fp)
   25b74:	10c00044 	addi	r3,r2,1
   25b78:	e0fff315 	stw	r3,-52(fp)
   25b7c:	e0c0060b 	ldhu	r3,24(fp)
   25b80:	1809883a 	mov	r4,r3
   25b84:	e0fff444 	addi	r3,fp,-47
   25b88:	1885883a 	add	r2,r3,r2
   25b8c:	11000005 	stb	r4,0(r2)

	// Since Interrupt mode and EI/DI must be saved, this will come in this byte:
	//          7  6  5  4  3  2  1  0
	//         EI             IM IM IM
	alt_u8 interrupt_info = 0;
   25b90:	e03ff405 	stb	zero,-48(fp)
	if (regs.IFF1 != 0) {
   25b94:	e08007c3 	ldbu	r2,31(fp)
   25b98:	10803fcc 	andi	r2,r2,255
   25b9c:	10000226 	beq	r2,zero,25ba8 <generate_full_stack_addition+0x218>
		// EI
		interrupt_info = 0x80;
   25ba0:	00bfe004 	movi	r2,-128
   25ba4:	e0bff405 	stb	r2,-48(fp)
	}
	// IM
	interrupt_info |= (1 << regs.IM);
   25ba8:	e0800783 	ldbu	r2,30(fp)
   25bac:	10803fcc 	andi	r2,r2,255
   25bb0:	00c00044 	movi	r3,1
   25bb4:	1884983a 	sll	r2,r3,r2
   25bb8:	1007883a 	mov	r3,r2
   25bbc:	e0bff403 	ldbu	r2,-48(fp)
   25bc0:	1884b03a 	or	r2,r3,r2
   25bc4:	e0bff405 	stb	r2,-48(fp)

	data[size++] = interrupt_info;
   25bc8:	e0bff317 	ldw	r2,-52(fp)
   25bcc:	10c00044 	addi	r3,r2,1
   25bd0:	e0fff315 	stw	r3,-52(fp)
   25bd4:	e0fff444 	addi	r3,fp,-47
   25bd8:	1885883a 	add	r2,r3,r2
   25bdc:	e0fff403 	ldbu	r3,-48(fp)
   25be0:	10c00005 	stb	r3,0(r2)
	data[size++] = interrupt_info; // again, can only pop 16bit values, so repeating this one
   25be4:	e0bff317 	ldw	r2,-52(fp)
   25be8:	10c00044 	addi	r3,r2,1
   25bec:	e0fff315 	stw	r3,-52(fp)
   25bf0:	e0fff444 	addi	r3,fp,-47
   25bf4:	1885883a 	add	r2,r3,r2
   25bf8:	e0fff403 	ldbu	r3,-48(fp)
   25bfc:	10c00005 	stb	r3,0(r2)

	data[size++] = regs.L;
   25c00:	e0bff317 	ldw	r2,-52(fp)
   25c04:	10c00044 	addi	r3,r2,1
   25c08:	e0fff315 	stw	r3,-52(fp)
   25c0c:	e0c00443 	ldbu	r3,17(fp)
   25c10:	e13ff444 	addi	r4,fp,-47
   25c14:	2085883a 	add	r2,r4,r2
   25c18:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.H;
   25c1c:	e0bff317 	ldw	r2,-52(fp)
   25c20:	10c00044 	addi	r3,r2,1
   25c24:	e0fff315 	stw	r3,-52(fp)
   25c28:	e0c00403 	ldbu	r3,16(fp)
   25c2c:	e13ff444 	addi	r4,fp,-47
   25c30:	2085883a 	add	r2,r4,r2
   25c34:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.E;
   25c38:	e0bff317 	ldw	r2,-52(fp)
   25c3c:	10c00044 	addi	r3,r2,1
   25c40:	e0fff315 	stw	r3,-52(fp)
   25c44:	e0c004c3 	ldbu	r3,19(fp)
   25c48:	e13ff444 	addi	r4,fp,-47
   25c4c:	2085883a 	add	r2,r4,r2
   25c50:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.D;
   25c54:	e0bff317 	ldw	r2,-52(fp)
   25c58:	10c00044 	addi	r3,r2,1
   25c5c:	e0fff315 	stw	r3,-52(fp)
   25c60:	e0c00483 	ldbu	r3,18(fp)
   25c64:	e13ff444 	addi	r4,fp,-47
   25c68:	2085883a 	add	r2,r4,r2
   25c6c:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.C;
   25c70:	e0bff317 	ldw	r2,-52(fp)
   25c74:	10c00044 	addi	r3,r2,1
   25c78:	e0fff315 	stw	r3,-52(fp)
   25c7c:	e0c00543 	ldbu	r3,21(fp)
   25c80:	e13ff444 	addi	r4,fp,-47
   25c84:	2085883a 	add	r2,r4,r2
   25c88:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.B;
   25c8c:	e0bff317 	ldw	r2,-52(fp)
   25c90:	10c00044 	addi	r3,r2,1
   25c94:	e0fff315 	stw	r3,-52(fp)
   25c98:	e0c00503 	ldbu	r3,20(fp)
   25c9c:	e13ff444 	addi	r4,fp,-47
   25ca0:	2085883a 	add	r2,r4,r2
   25ca4:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.F;
   25ca8:	e0bff317 	ldw	r2,-52(fp)
   25cac:	10c00044 	addi	r3,r2,1
   25cb0:	e0fff315 	stw	r3,-52(fp)
   25cb4:	e0c003c3 	ldbu	r3,15(fp)
   25cb8:	e13ff444 	addi	r4,fp,-47
   25cbc:	2085883a 	add	r2,r4,r2
   25cc0:	10c00005 	stb	r3,0(r2)
	data[size++] = regs.A;
   25cc4:	e0bff317 	ldw	r2,-52(fp)
   25cc8:	10c00044 	addi	r3,r2,1
   25ccc:	e0fff315 	stw	r3,-52(fp)
   25cd0:	e0c00383 	ldbu	r3,14(fp)
   25cd4:	e13ff444 	addi	r4,fp,-47
   25cd8:	2085883a 	add	r2,r4,r2
   25cdc:	10c00005 	stb	r3,0(r2)

	if (type != SNA) {
   25ce0:	e0800917 	ldw	r2,36(fp)
   25ce4:	10800060 	cmpeqi	r2,r2,1
   25ce8:	1000121e 	bne	r2,zero,25d34 <generate_full_stack_addition+0x3a4>
		data[size++] = regs.PC >> 8; // Low byte
   25cec:	e0bff317 	ldw	r2,-52(fp)
   25cf0:	10c00044 	addi	r3,r2,1
   25cf4:	e0fff315 	stw	r3,-52(fp)
   25cf8:	e0c0070b 	ldhu	r3,28(fp)
   25cfc:	18ffffcc 	andi	r3,r3,65535
   25d00:	1806d23a 	srli	r3,r3,8
   25d04:	1809883a 	mov	r4,r3
   25d08:	e0fff444 	addi	r3,fp,-47
   25d0c:	1885883a 	add	r2,r3,r2
   25d10:	11000005 	stb	r4,0(r2)
		data[size++] = regs.PC & 0xFF; // High byte
   25d14:	e0bff317 	ldw	r2,-52(fp)
   25d18:	10c00044 	addi	r3,r2,1
   25d1c:	e0fff315 	stw	r3,-52(fp)
   25d20:	e0c0070b 	ldhu	r3,28(fp)
   25d24:	1809883a 	mov	r4,r3
   25d28:	e0fff444 	addi	r3,fp,-47
   25d2c:	1885883a 	add	r2,r3,r2
   25d30:	11000005 	stb	r4,0(r2)
	}

	STACK_ADD to_ret = {
		.SP = regs.SP - size,
   25d34:	e080068b 	ldhu	r2,26(fp)
	if (type != SNA) {
		data[size++] = regs.PC >> 8; // Low byte
		data[size++] = regs.PC & 0xFF; // High byte
	}

	STACK_ADD to_ret = {
   25d38:	e0fff317 	ldw	r3,-52(fp)
   25d3c:	10c5c83a 	sub	r2,r2,r3
   25d40:	e0bffc0d 	sth	r2,-16(fp)
   25d44:	e0bff317 	ldw	r2,-52(fp)
   25d48:	e0bffd15 	stw	r2,-12(fp)
   25d4c:	e0bff444 	addi	r2,fp,-47
   25d50:	e0bffe15 	stw	r2,-8(fp)
		.SP = regs.SP - size,
		.size = size,
		.data = data
	};
	return to_ret;
   25d54:	e0bfff17 	ldw	r2,-4(fp)
   25d58:	e0fffc17 	ldw	r3,-16(fp)
   25d5c:	10c00015 	stw	r3,0(r2)
   25d60:	e0fffd17 	ldw	r3,-12(fp)
   25d64:	10c00115 	stw	r3,4(r2)
   25d68:	e0fffe17 	ldw	r3,-8(fp)
   25d6c:	10c00215 	stw	r3,8(r2)
}
   25d70:	e0bfff17 	ldw	r2,-4(fp)
   25d74:	e037883a 	mov	sp,fp
   25d78:	df000017 	ldw	fp,0(sp)
   25d7c:	dec00404 	addi	sp,sp,16
   25d80:	f800283a 	ret

00025d84 <generate_AF_stack_addition>:

STACK_ADD generate_AF_stack_addition(REGS regs, const enum file_type type, bool add_pc) {
   25d84:	defff604 	addi	sp,sp,-40
   25d88:	dfc00615 	stw	ra,24(sp)
   25d8c:	df000515 	stw	fp,20(sp)
   25d90:	df000504 	addi	fp,sp,20
   25d94:	e13fff15 	stw	r4,-4(fp)
   25d98:	e1400215 	stw	r5,8(fp)
   25d9c:	e1800315 	stw	r6,12(fp)
   25da0:	e1c00415 	stw	r7,16(fp)
	size_t size = 0;
   25da4:	e03ffb15 	stw	zero,-20(fp)
	STACK_ADD to_ret = {0, 0, NULL};
   25da8:	e03ffc0d 	sth	zero,-16(fp)
   25dac:	e03ffd15 	stw	zero,-12(fp)
   25db0:	e03ffe15 	stw	zero,-8(fp)
	to_ret.data = (alt_u8*) malloc(10*sizeof(char*));
   25db4:	01000a04 	movi	r4,40
   25db8:	002e7a80 	call	2e7a8 <malloc>
   25dbc:	e0bffe15 	stw	r2,-8(fp)

	to_ret.data[size++] = regs.Fl;
   25dc0:	e0fffe17 	ldw	r3,-8(fp)
   25dc4:	e0bffb17 	ldw	r2,-20(fp)
   25dc8:	11000044 	addi	r4,r2,1
   25dcc:	e13ffb15 	stw	r4,-20(fp)
   25dd0:	1885883a 	add	r2,r3,r2
   25dd4:	e0c002c3 	ldbu	r3,11(fp)
   25dd8:	10c00005 	stb	r3,0(r2)
	to_ret.data[size++] = regs.Al;
   25ddc:	e0fffe17 	ldw	r3,-8(fp)
   25de0:	e0bffb17 	ldw	r2,-20(fp)
   25de4:	11000044 	addi	r4,r2,1
   25de8:	e13ffb15 	stw	r4,-20(fp)
   25dec:	1885883a 	add	r2,r3,r2
   25df0:	e0c00283 	ldbu	r3,10(fp)
   25df4:	10c00005 	stb	r3,0(r2)
	printf("AF': 0x%04x\r\n", (regs.Fl <<8) | regs.Al);
   25df8:	e08002c3 	ldbu	r2,11(fp)
   25dfc:	10803fcc 	andi	r2,r2,255
   25e00:	1006923a 	slli	r3,r2,8
   25e04:	e0800283 	ldbu	r2,10(fp)
   25e08:	10803fcc 	andi	r2,r2,255
   25e0c:	1884b03a 	or	r2,r3,r2
   25e10:	100b883a 	mov	r5,r2
   25e14:	010000f4 	movhi	r4,3
   25e18:	21079c04 	addi	r4,r4,7792
   25e1c:	002ea900 	call	2ea90 <printf>

	to_ret.data[size++] = regs.F;
   25e20:	e0fffe17 	ldw	r3,-8(fp)
   25e24:	e0bffb17 	ldw	r2,-20(fp)
   25e28:	11000044 	addi	r4,r2,1
   25e2c:	e13ffb15 	stw	r4,-20(fp)
   25e30:	1885883a 	add	r2,r3,r2
   25e34:	e0c004c3 	ldbu	r3,19(fp)
   25e38:	10c00005 	stb	r3,0(r2)
	to_ret.data[size++] = regs.A;
   25e3c:	e0fffe17 	ldw	r3,-8(fp)
   25e40:	e0bffb17 	ldw	r2,-20(fp)
   25e44:	11000044 	addi	r4,r2,1
   25e48:	e13ffb15 	stw	r4,-20(fp)
   25e4c:	1885883a 	add	r2,r3,r2
   25e50:	e0c00483 	ldbu	r3,18(fp)
   25e54:	10c00005 	stb	r3,0(r2)
	printf("AF: 0x%04x\r\n", (regs.F <<8) | regs.A);
   25e58:	e08004c3 	ldbu	r2,19(fp)
   25e5c:	10803fcc 	andi	r2,r2,255
   25e60:	1006923a 	slli	r3,r2,8
   25e64:	e0800483 	ldbu	r2,18(fp)
   25e68:	10803fcc 	andi	r2,r2,255
   25e6c:	1884b03a 	or	r2,r3,r2
   25e70:	100b883a 	mov	r5,r2
   25e74:	010000f4 	movhi	r4,3
   25e78:	2107a004 	addi	r4,r4,7808
   25e7c:	002ea900 	call	2ea90 <printf>

	if (add_pc) {
   25e80:	e0800b17 	ldw	r2,44(fp)
   25e84:	10001626 	beq	r2,zero,25ee0 <generate_AF_stack_addition+0x15c>
		to_ret.data[size++] = regs.PC >> 8;
   25e88:	e0fffe17 	ldw	r3,-8(fp)
   25e8c:	e0bffb17 	ldw	r2,-20(fp)
   25e90:	11000044 	addi	r4,r2,1
   25e94:	e13ffb15 	stw	r4,-20(fp)
   25e98:	1885883a 	add	r2,r3,r2
   25e9c:	e0c0080b 	ldhu	r3,32(fp)
   25ea0:	18ffffcc 	andi	r3,r3,65535
   25ea4:	1806d23a 	srli	r3,r3,8
   25ea8:	10c00005 	stb	r3,0(r2)
		to_ret.data[size++] = regs.PC & 0xFF;
   25eac:	e0fffe17 	ldw	r3,-8(fp)
   25eb0:	e0bffb17 	ldw	r2,-20(fp)
   25eb4:	11000044 	addi	r4,r2,1
   25eb8:	e13ffb15 	stw	r4,-20(fp)
   25ebc:	1885883a 	add	r2,r3,r2
   25ec0:	e0c0080b 	ldhu	r3,32(fp)
   25ec4:	10c00005 	stb	r3,0(r2)
		printf("PC: 0x%04x\r\n", regs.PC);
   25ec8:	e080080b 	ldhu	r2,32(fp)
   25ecc:	10bfffcc 	andi	r2,r2,65535
   25ed0:	100b883a 	mov	r5,r2
   25ed4:	010000f4 	movhi	r4,3
   25ed8:	2107a404 	addi	r4,r4,7824
   25edc:	002ea900 	call	2ea90 <printf>
	}

	to_ret.SP = regs.SP - (size << 8); // since this is in little endian, must subtract this value instead of just size
   25ee0:	e080078b 	ldhu	r2,30(fp)
   25ee4:	e0fffb17 	ldw	r3,-20(fp)
   25ee8:	1806923a 	slli	r3,r3,8
   25eec:	10c5c83a 	sub	r2,r2,r3
   25ef0:	e0bffc0d 	sth	r2,-16(fp)
	printf("STACK POINTER in STACK_ADD: 0x%04x\r\n", to_ret.SP);
   25ef4:	e0bffc0b 	ldhu	r2,-16(fp)
   25ef8:	10bfffcc 	andi	r2,r2,65535
   25efc:	100b883a 	mov	r5,r2
   25f00:	010000f4 	movhi	r4,3
   25f04:	2107a804 	addi	r4,r4,7840
   25f08:	002ea900 	call	2ea90 <printf>
	to_ret.size = size;
   25f0c:	e0bffb17 	ldw	r2,-20(fp)
   25f10:	e0bffd15 	stw	r2,-12(fp)
	return to_ret;
   25f14:	e0bfff17 	ldw	r2,-4(fp)
   25f18:	e0fffc17 	ldw	r3,-16(fp)
   25f1c:	10c00015 	stw	r3,0(r2)
   25f20:	e0fffd17 	ldw	r3,-12(fp)
   25f24:	10c00115 	stw	r3,4(r2)
   25f28:	e0fffe17 	ldw	r3,-8(fp)
   25f2c:	10c00215 	stw	r3,8(r2)
}
   25f30:	e0bfff17 	ldw	r2,-4(fp)
   25f34:	e037883a 	mov	sp,fp
   25f38:	dfc00117 	ldw	ra,4(sp)
   25f3c:	df000017 	ldw	fp,0(sp)
   25f40:	dec00504 	addi	sp,sp,20
   25f44:	f800283a 	ret

00025f48 <generate_LOAD_routine>:

alt_u8* generate_LOAD_routine(REGS regs, const enum file_type type, int routine_size) {
   25f48:	defff604 	addi	sp,sp,-40
   25f4c:	dfc00515 	stw	ra,20(sp)
   25f50:	df000415 	stw	fp,16(sp)
   25f54:	df000404 	addi	fp,sp,16
   25f58:	e1000215 	stw	r4,8(fp)
   25f5c:	e1400315 	stw	r5,12(fp)
   25f60:	e1800415 	stw	r6,16(fp)
   25f64:	e1c00515 	stw	r7,20(fp)
	alt_u8* routine = (alt_u8*) malloc(routine_size * sizeof(alt_u8));
   25f68:	e0800b17 	ldw	r2,44(fp)
   25f6c:	1009883a 	mov	r4,r2
   25f70:	002e7a80 	call	2e7a8 <malloc>
   25f74:	e0bffe15 	stw	r2,-8(fp)
	int i = 0;
   25f78:	e03ffc15 	stw	zero,-16(fp)
	// Load border color into A
	//routine[i++] = LD_A_N;
	//routine[i++] = regs.border;

	// Load border color, formatted correctly, into HL
	alt_u16 border = (regs.border & 0b111) << 3;
   25f7c:	e0800943 	ldbu	r2,37(fp)
   25f80:	10803fcc 	andi	r2,r2,255
   25f84:	108001cc 	andi	r2,r2,7
   25f88:	100490fa 	slli	r2,r2,3
   25f8c:	e0bfff0d 	sth	r2,-4(fp)
	routine[i++] = LD_HL_NN;
   25f90:	e0bffc17 	ldw	r2,-16(fp)
   25f94:	10c00044 	addi	r3,r2,1
   25f98:	e0fffc15 	stw	r3,-16(fp)
   25f9c:	1007883a 	mov	r3,r2
   25fa0:	e0bffe17 	ldw	r2,-8(fp)
   25fa4:	10c5883a 	add	r2,r2,r3
   25fa8:	00c00844 	movi	r3,33
   25fac:	10c00005 	stb	r3,0(r2)
	routine[i++] = border & 0xFF;
   25fb0:	e0bffc17 	ldw	r2,-16(fp)
   25fb4:	10c00044 	addi	r3,r2,1
   25fb8:	e0fffc15 	stw	r3,-16(fp)
   25fbc:	1007883a 	mov	r3,r2
   25fc0:	e0bffe17 	ldw	r2,-8(fp)
   25fc4:	10c5883a 	add	r2,r2,r3
   25fc8:	e0ffff0b 	ldhu	r3,-4(fp)
   25fcc:	10c00005 	stb	r3,0(r2)
	routine[i++] = border >> 8;
   25fd0:	e0bffc17 	ldw	r2,-16(fp)
   25fd4:	10c00044 	addi	r3,r2,1
   25fd8:	e0fffc15 	stw	r3,-16(fp)
   25fdc:	1007883a 	mov	r3,r2
   25fe0:	e0bffe17 	ldw	r2,-8(fp)
   25fe4:	10c5883a 	add	r2,r2,r3
   25fe8:	e0ffff0b 	ldhu	r3,-4(fp)
   25fec:	1806d23a 	srli	r3,r3,8
   25ff0:	10c00005 	stb	r3,0(r2)


	// Load contents of HL (border color) to border color addr
	routine[i++] = LD_NN_HL;
   25ff4:	e0bffc17 	ldw	r2,-16(fp)
   25ff8:	10c00044 	addi	r3,r2,1
   25ffc:	e0fffc15 	stw	r3,-16(fp)
   26000:	1007883a 	mov	r3,r2
   26004:	e0bffe17 	ldw	r2,-8(fp)
   26008:	10c5883a 	add	r2,r2,r3
   2600c:	00c00884 	movi	r3,34
   26010:	10c00005 	stb	r3,0(r2)
	routine[i++] = BORDER_COLOR_ADDR_L;
   26014:	e0bffc17 	ldw	r2,-16(fp)
   26018:	10c00044 	addi	r3,r2,1
   2601c:	e0fffc15 	stw	r3,-16(fp)
   26020:	1007883a 	mov	r3,r2
   26024:	e0bffe17 	ldw	r2,-8(fp)
   26028:	10c5883a 	add	r2,r2,r3
   2602c:	00c01204 	movi	r3,72
   26030:	10c00005 	stb	r3,0(r2)
	routine[i++] = BORDER_COLOR_ADDR_H;
   26034:	e0bffc17 	ldw	r2,-16(fp)
   26038:	10c00044 	addi	r3,r2,1
   2603c:	e0fffc15 	stw	r3,-16(fp)
   26040:	1007883a 	mov	r3,r2
   26044:	e0bffe17 	ldw	r2,-8(fp)
   26048:	10c5883a 	add	r2,r2,r3
   2604c:	00c01704 	movi	r3,92
   26050:	10c00005 	stb	r3,0(r2)
	// TECHNICALLY this border color writing could be made with DMA,


	// R Register is for RAM refresh, so it might be ok without this...
	// Load R data into A
	routine[i++] = LD_A_N;
   26054:	e0bffc17 	ldw	r2,-16(fp)
   26058:	10c00044 	addi	r3,r2,1
   2605c:	e0fffc15 	stw	r3,-16(fp)
   26060:	1007883a 	mov	r3,r2
   26064:	e0bffe17 	ldw	r2,-8(fp)
   26068:	10c5883a 	add	r2,r2,r3
   2606c:	00c00f84 	movi	r3,62
   26070:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.R;
   26074:	e0bffc17 	ldw	r2,-16(fp)
   26078:	10c00044 	addi	r3,r2,1
   2607c:	e0fffc15 	stw	r3,-16(fp)
   26080:	1007883a 	mov	r3,r2
   26084:	e0bffe17 	ldw	r2,-8(fp)
   26088:	10c5883a 	add	r2,r2,r3
   2608c:	e0c00203 	ldbu	r3,8(fp)
   26090:	10c00005 	stb	r3,0(r2)

	// Load contents of A (R data) into R
	routine[i++] = LD_x_A;
   26094:	e0bffc17 	ldw	r2,-16(fp)
   26098:	10c00044 	addi	r3,r2,1
   2609c:	e0fffc15 	stw	r3,-16(fp)
   260a0:	1007883a 	mov	r3,r2
   260a4:	e0bffe17 	ldw	r2,-8(fp)
   260a8:	10c5883a 	add	r2,r2,r3
   260ac:	00fffb44 	movi	r3,-19
   260b0:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_R_A;
   260b4:	e0bffc17 	ldw	r2,-16(fp)
   260b8:	10c00044 	addi	r3,r2,1
   260bc:	e0fffc15 	stw	r3,-16(fp)
   260c0:	1007883a 	mov	r3,r2
   260c4:	e0bffe17 	ldw	r2,-8(fp)
   260c8:	10c5883a 	add	r2,r2,r3
   260cc:	00c013c4 	movi	r3,79
   260d0:	10c00005 	stb	r3,0(r2)

	// Load I data into A
	routine[i++] = LD_A_N;
   260d4:	e0bffc17 	ldw	r2,-16(fp)
   260d8:	10c00044 	addi	r3,r2,1
   260dc:	e0fffc15 	stw	r3,-16(fp)
   260e0:	1007883a 	mov	r3,r2
   260e4:	e0bffe17 	ldw	r2,-8(fp)
   260e8:	10c5883a 	add	r2,r2,r3
   260ec:	00c00f84 	movi	r3,62
   260f0:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.I;
   260f4:	e0bffc17 	ldw	r2,-16(fp)
   260f8:	10c00044 	addi	r3,r2,1
   260fc:	e0fffc15 	stw	r3,-16(fp)
   26100:	1007883a 	mov	r3,r2
   26104:	e0bffe17 	ldw	r2,-8(fp)
   26108:	10c5883a 	add	r2,r2,r3
   2610c:	e0c00243 	ldbu	r3,9(fp)
   26110:	10c00005 	stb	r3,0(r2)

	// Load contents of A (I data) into I
	routine[i++] = LD_x_A;
   26114:	e0bffc17 	ldw	r2,-16(fp)
   26118:	10c00044 	addi	r3,r2,1
   2611c:	e0fffc15 	stw	r3,-16(fp)
   26120:	1007883a 	mov	r3,r2
   26124:	e0bffe17 	ldw	r2,-8(fp)
   26128:	10c5883a 	add	r2,r2,r3
   2612c:	00fffb44 	movi	r3,-19
   26130:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_I_A;
   26134:	e0bffc17 	ldw	r2,-16(fp)
   26138:	10c00044 	addi	r3,r2,1
   2613c:	e0fffc15 	stw	r3,-16(fp)
   26140:	1007883a 	mov	r3,r2
   26144:	e0bffe17 	ldw	r2,-8(fp)
   26148:	10c5883a 	add	r2,r2,r3
   2614c:	00c011c4 	movi	r3,71
   26150:	10c00005 	stb	r3,0(r2)

	// MISSING FLAGS, BECAUSE CAN'T FIND OPCODE FOR LOADING FLAGS REG (pretty sure there is none)
	// ALSO MISSING WAY OF SETTING IFF2 (not important?)

	// Load HL DE and BC with AUX version values
	routine[i++] = LD_HL_NN;
   26154:	e0bffc17 	ldw	r2,-16(fp)
   26158:	10c00044 	addi	r3,r2,1
   2615c:	e0fffc15 	stw	r3,-16(fp)
   26160:	1007883a 	mov	r3,r2
   26164:	e0bffe17 	ldw	r2,-8(fp)
   26168:	10c5883a 	add	r2,r2,r3
   2616c:	00c00844 	movi	r3,33
   26170:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.Ll;
   26174:	e0bffc17 	ldw	r2,-16(fp)
   26178:	10c00044 	addi	r3,r2,1
   2617c:	e0fffc15 	stw	r3,-16(fp)
   26180:	1007883a 	mov	r3,r2
   26184:	e0bffe17 	ldw	r2,-8(fp)
   26188:	10c5883a 	add	r2,r2,r3
   2618c:	e0c00343 	ldbu	r3,13(fp)
   26190:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.Hl;
   26194:	e0bffc17 	ldw	r2,-16(fp)
   26198:	10c00044 	addi	r3,r2,1
   2619c:	e0fffc15 	stw	r3,-16(fp)
   261a0:	1007883a 	mov	r3,r2
   261a4:	e0bffe17 	ldw	r2,-8(fp)
   261a8:	10c5883a 	add	r2,r2,r3
   261ac:	e0c00303 	ldbu	r3,12(fp)
   261b0:	10c00005 	stb	r3,0(r2)

	routine[i++] = LD_DE_NN;
   261b4:	e0bffc17 	ldw	r2,-16(fp)
   261b8:	10c00044 	addi	r3,r2,1
   261bc:	e0fffc15 	stw	r3,-16(fp)
   261c0:	1007883a 	mov	r3,r2
   261c4:	e0bffe17 	ldw	r2,-8(fp)
   261c8:	10c5883a 	add	r2,r2,r3
   261cc:	00c00444 	movi	r3,17
   261d0:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.El;
   261d4:	e0bffc17 	ldw	r2,-16(fp)
   261d8:	10c00044 	addi	r3,r2,1
   261dc:	e0fffc15 	stw	r3,-16(fp)
   261e0:	1007883a 	mov	r3,r2
   261e4:	e0bffe17 	ldw	r2,-8(fp)
   261e8:	10c5883a 	add	r2,r2,r3
   261ec:	e0c003c3 	ldbu	r3,15(fp)
   261f0:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.Dl;
   261f4:	e0bffc17 	ldw	r2,-16(fp)
   261f8:	10c00044 	addi	r3,r2,1
   261fc:	e0fffc15 	stw	r3,-16(fp)
   26200:	1007883a 	mov	r3,r2
   26204:	e0bffe17 	ldw	r2,-8(fp)
   26208:	10c5883a 	add	r2,r2,r3
   2620c:	e0c00383 	ldbu	r3,14(fp)
   26210:	10c00005 	stb	r3,0(r2)

	routine[i++] = LD_BC_NN;
   26214:	e0bffc17 	ldw	r2,-16(fp)
   26218:	10c00044 	addi	r3,r2,1
   2621c:	e0fffc15 	stw	r3,-16(fp)
   26220:	1007883a 	mov	r3,r2
   26224:	e0bffe17 	ldw	r2,-8(fp)
   26228:	10c5883a 	add	r2,r2,r3
   2622c:	00c00044 	movi	r3,1
   26230:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.Cl;
   26234:	e0bffc17 	ldw	r2,-16(fp)
   26238:	10c00044 	addi	r3,r2,1
   2623c:	e0fffc15 	stw	r3,-16(fp)
   26240:	1007883a 	mov	r3,r2
   26244:	e0bffe17 	ldw	r2,-8(fp)
   26248:	10c5883a 	add	r2,r2,r3
   2624c:	e0c00443 	ldbu	r3,17(fp)
   26250:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.Bl;
   26254:	e0bffc17 	ldw	r2,-16(fp)
   26258:	10c00044 	addi	r3,r2,1
   2625c:	e0fffc15 	stw	r3,-16(fp)
   26260:	1007883a 	mov	r3,r2
   26264:	e0bffe17 	ldw	r2,-8(fp)
   26268:	10c5883a 	add	r2,r2,r3
   2626c:	e0c00403 	ldbu	r3,16(fp)
   26270:	10c00005 	stb	r3,0(r2)

	// Exchange AUX value regs with normal
	routine[i++] = EXX;
   26274:	e0bffc17 	ldw	r2,-16(fp)
   26278:	10c00044 	addi	r3,r2,1
   2627c:	e0fffc15 	stw	r3,-16(fp)
   26280:	1007883a 	mov	r3,r2
   26284:	e0bffe17 	ldw	r2,-8(fp)
   26288:	10c5883a 	add	r2,r2,r3
   2628c:	00fff644 	movi	r3,-39
   26290:	10c00005 	stb	r3,0(r2)
	//routine[i++] = EX_AF;


	// Loads HL contents to HL
	routine[i++] = LD_HL_NN;
   26294:	e0bffc17 	ldw	r2,-16(fp)
   26298:	10c00044 	addi	r3,r2,1
   2629c:	e0fffc15 	stw	r3,-16(fp)
   262a0:	1007883a 	mov	r3,r2
   262a4:	e0bffe17 	ldw	r2,-8(fp)
   262a8:	10c5883a 	add	r2,r2,r3
   262ac:	00c00844 	movi	r3,33
   262b0:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.L;
   262b4:	e0bffc17 	ldw	r2,-16(fp)
   262b8:	10c00044 	addi	r3,r2,1
   262bc:	e0fffc15 	stw	r3,-16(fp)
   262c0:	1007883a 	mov	r3,r2
   262c4:	e0bffe17 	ldw	r2,-8(fp)
   262c8:	10c5883a 	add	r2,r2,r3
   262cc:	e0c00543 	ldbu	r3,21(fp)
   262d0:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.H;
   262d4:	e0bffc17 	ldw	r2,-16(fp)
   262d8:	10c00044 	addi	r3,r2,1
   262dc:	e0fffc15 	stw	r3,-16(fp)
   262e0:	1007883a 	mov	r3,r2
   262e4:	e0bffe17 	ldw	r2,-8(fp)
   262e8:	10c5883a 	add	r2,r2,r3
   262ec:	e0c00503 	ldbu	r3,20(fp)
   262f0:	10c00005 	stb	r3,0(r2)

	// Loads DE contents to DE
	routine[i++] = LD_DE_NN;
   262f4:	e0bffc17 	ldw	r2,-16(fp)
   262f8:	10c00044 	addi	r3,r2,1
   262fc:	e0fffc15 	stw	r3,-16(fp)
   26300:	1007883a 	mov	r3,r2
   26304:	e0bffe17 	ldw	r2,-8(fp)
   26308:	10c5883a 	add	r2,r2,r3
   2630c:	00c00444 	movi	r3,17
   26310:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.E;
   26314:	e0bffc17 	ldw	r2,-16(fp)
   26318:	10c00044 	addi	r3,r2,1
   2631c:	e0fffc15 	stw	r3,-16(fp)
   26320:	1007883a 	mov	r3,r2
   26324:	e0bffe17 	ldw	r2,-8(fp)
   26328:	10c5883a 	add	r2,r2,r3
   2632c:	e0c005c3 	ldbu	r3,23(fp)
   26330:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.D;
   26334:	e0bffc17 	ldw	r2,-16(fp)
   26338:	10c00044 	addi	r3,r2,1
   2633c:	e0fffc15 	stw	r3,-16(fp)
   26340:	1007883a 	mov	r3,r2
   26344:	e0bffe17 	ldw	r2,-8(fp)
   26348:	10c5883a 	add	r2,r2,r3
   2634c:	e0c00583 	ldbu	r3,22(fp)
   26350:	10c00005 	stb	r3,0(r2)

	// Loads BC contents to BC
	routine[i++] = LD_BC_NN;
   26354:	e0bffc17 	ldw	r2,-16(fp)
   26358:	10c00044 	addi	r3,r2,1
   2635c:	e0fffc15 	stw	r3,-16(fp)
   26360:	1007883a 	mov	r3,r2
   26364:	e0bffe17 	ldw	r2,-8(fp)
   26368:	10c5883a 	add	r2,r2,r3
   2636c:	00c00044 	movi	r3,1
   26370:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.C;
   26374:	e0bffc17 	ldw	r2,-16(fp)
   26378:	10c00044 	addi	r3,r2,1
   2637c:	e0fffc15 	stw	r3,-16(fp)
   26380:	1007883a 	mov	r3,r2
   26384:	e0bffe17 	ldw	r2,-8(fp)
   26388:	10c5883a 	add	r2,r2,r3
   2638c:	e0c00643 	ldbu	r3,25(fp)
   26390:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.B;
   26394:	e0bffc17 	ldw	r2,-16(fp)
   26398:	10c00044 	addi	r3,r2,1
   2639c:	e0fffc15 	stw	r3,-16(fp)
   263a0:	1007883a 	mov	r3,r2
   263a4:	e0bffe17 	ldw	r2,-8(fp)
   263a8:	10c5883a 	add	r2,r2,r3
   263ac:	e0c00603 	ldbu	r3,24(fp)
   263b0:	10c00005 	stb	r3,0(r2)
	// Load contents of A into A
	//routine[i++] = LD_A_N;
	//routine[i++] = regs.A;

	// Load contents of IY into IY
	routine[i++] = LD_IY1_NN;
   263b4:	e0bffc17 	ldw	r2,-16(fp)
   263b8:	10c00044 	addi	r3,r2,1
   263bc:	e0fffc15 	stw	r3,-16(fp)
   263c0:	1007883a 	mov	r3,r2
   263c4:	e0bffe17 	ldw	r2,-8(fp)
   263c8:	10c5883a 	add	r2,r2,r3
   263cc:	00ffff44 	movi	r3,-3
   263d0:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_IY2_NN;
   263d4:	e0bffc17 	ldw	r2,-16(fp)
   263d8:	10c00044 	addi	r3,r2,1
   263dc:	e0fffc15 	stw	r3,-16(fp)
   263e0:	1007883a 	mov	r3,r2
   263e4:	e0bffe17 	ldw	r2,-8(fp)
   263e8:	10c5883a 	add	r2,r2,r3
   263ec:	00c00844 	movi	r3,33
   263f0:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.IY >> 8;	// already in little endian
   263f4:	e0bffc17 	ldw	r2,-16(fp)
   263f8:	10c00044 	addi	r3,r2,1
   263fc:	e0fffc15 	stw	r3,-16(fp)
   26400:	1007883a 	mov	r3,r2
   26404:	e0bffe17 	ldw	r2,-8(fp)
   26408:	10c5883a 	add	r2,r2,r3
   2640c:	e0c0068b 	ldhu	r3,26(fp)
   26410:	18ffffcc 	andi	r3,r3,65535
   26414:	1806d23a 	srli	r3,r3,8
   26418:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.IY & 0xFF;
   2641c:	e0bffc17 	ldw	r2,-16(fp)
   26420:	10c00044 	addi	r3,r2,1
   26424:	e0fffc15 	stw	r3,-16(fp)
   26428:	1007883a 	mov	r3,r2
   2642c:	e0bffe17 	ldw	r2,-8(fp)
   26430:	10c5883a 	add	r2,r2,r3
   26434:	e0c0068b 	ldhu	r3,26(fp)
   26438:	10c00005 	stb	r3,0(r2)

	// Load contents of IX into IX
	routine[i++] = LD_IX1_NN;
   2643c:	e0bffc17 	ldw	r2,-16(fp)
   26440:	10c00044 	addi	r3,r2,1
   26444:	e0fffc15 	stw	r3,-16(fp)
   26448:	1007883a 	mov	r3,r2
   2644c:	e0bffe17 	ldw	r2,-8(fp)
   26450:	10c5883a 	add	r2,r2,r3
   26454:	00fff744 	movi	r3,-35
   26458:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_IX2_NN;
   2645c:	e0bffc17 	ldw	r2,-16(fp)
   26460:	10c00044 	addi	r3,r2,1
   26464:	e0fffc15 	stw	r3,-16(fp)
   26468:	1007883a 	mov	r3,r2
   2646c:	e0bffe17 	ldw	r2,-8(fp)
   26470:	10c5883a 	add	r2,r2,r3
   26474:	00c00844 	movi	r3,33
   26478:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.IX >> 8;
   2647c:	e0bffc17 	ldw	r2,-16(fp)
   26480:	10c00044 	addi	r3,r2,1
   26484:	e0fffc15 	stw	r3,-16(fp)
   26488:	1007883a 	mov	r3,r2
   2648c:	e0bffe17 	ldw	r2,-8(fp)
   26490:	10c5883a 	add	r2,r2,r3
   26494:	e0c0070b 	ldhu	r3,28(fp)
   26498:	18ffffcc 	andi	r3,r3,65535
   2649c:	1806d23a 	srli	r3,r3,8
   264a0:	10c00005 	stb	r3,0(r2)
	routine[i++] = regs.IX & 0xFF;
   264a4:	e0bffc17 	ldw	r2,-16(fp)
   264a8:	10c00044 	addi	r3,r2,1
   264ac:	e0fffc15 	stw	r3,-16(fp)
   264b0:	1007883a 	mov	r3,r2
   264b4:	e0bffe17 	ldw	r2,-8(fp)
   264b8:	10c5883a 	add	r2,r2,r3
   264bc:	e0c0070b 	ldhu	r3,28(fp)
   264c0:	10c00005 	stb	r3,0(r2)

	// Load contents of SP into SP
	routine[i++] = LD_SP_NN;
   264c4:	e0bffc17 	ldw	r2,-16(fp)
   264c8:	10c00044 	addi	r3,r2,1
   264cc:	e0fffc15 	stw	r3,-16(fp)
   264d0:	1007883a 	mov	r3,r2
   264d4:	e0bffe17 	ldw	r2,-8(fp)
   264d8:	10c5883a 	add	r2,r2,r3
   264dc:	00c00c44 	movi	r3,49
   264e0:	10c00005 	stb	r3,0(r2)
	alt_u16 sp = regs.SP;
   264e4:	e080078b 	ldhu	r2,30(fp)
   264e8:	e0bffd0d 	sth	r2,-12(fp)
	if (type != SNA) {
   264ec:	e0800a17 	ldw	r2,40(fp)
   264f0:	10800060 	cmpeqi	r2,r2,1
   264f4:	1000031e 	bne	r2,zero,26504 <generate_LOAD_routine+0x5bc>
		sp = sp - 0x200; // For the PC that I will add to the stack
   264f8:	e0bffd0b 	ldhu	r2,-12(fp)
   264fc:	10bf8004 	addi	r2,r2,-512
   26500:	e0bffd0d 	sth	r2,-12(fp)
	}
	printf("SP in routine: %04x\r\n", sp);
   26504:	e0bffd0b 	ldhu	r2,-12(fp)
   26508:	100b883a 	mov	r5,r2
   2650c:	010000f4 	movhi	r4,3
   26510:	2107b204 	addi	r4,r4,7880
   26514:	002ea900 	call	2ea90 <printf>
	sp -= 0x400;
   26518:	e0bffd0b 	ldhu	r2,-12(fp)
   2651c:	10bf0004 	addi	r2,r2,-1024
   26520:	e0bffd0d 	sth	r2,-12(fp)
	printf("SP in routine: %04x\r\n", sp);
   26524:	e0bffd0b 	ldhu	r2,-12(fp)
   26528:	100b883a 	mov	r5,r2
   2652c:	010000f4 	movhi	r4,3
   26530:	2107b204 	addi	r4,r4,7880
   26534:	002ea900 	call	2ea90 <printf>
	routine[i++] = sp >> 8;//(sp >> 8) - 4;//(regs.SP >> 8) - 4; // setting sp for AF' and AF in it
   26538:	e0bffc17 	ldw	r2,-16(fp)
   2653c:	10c00044 	addi	r3,r2,1
   26540:	e0fffc15 	stw	r3,-16(fp)
   26544:	1007883a 	mov	r3,r2
   26548:	e0bffe17 	ldw	r2,-8(fp)
   2654c:	10c5883a 	add	r2,r2,r3
   26550:	e0fffd0b 	ldhu	r3,-12(fp)
   26554:	1806d23a 	srli	r3,r3,8
   26558:	10c00005 	stb	r3,0(r2)
	routine[i++] = sp & 0xFF;
   2655c:	e0bffc17 	ldw	r2,-16(fp)
   26560:	10c00044 	addi	r3,r2,1
   26564:	e0fffc15 	stw	r3,-16(fp)
   26568:	1007883a 	mov	r3,r2
   2656c:	e0bffe17 	ldw	r2,-8(fp)
   26570:	10c5883a 	add	r2,r2,r3
   26574:	e0fffd0b 	ldhu	r3,-12(fp)
   26578:	10c00005 	stb	r3,0(r2)

	routine[i++] = POP_AF;  // AF = AF'
   2657c:	e0bffc17 	ldw	r2,-16(fp)
   26580:	10c00044 	addi	r3,r2,1
   26584:	e0fffc15 	stw	r3,-16(fp)
   26588:	1007883a 	mov	r3,r2
   2658c:	e0bffe17 	ldw	r2,-8(fp)
   26590:	10c5883a 	add	r2,r2,r3
   26594:	00fffc44 	movi	r3,-15
   26598:	10c00005 	stb	r3,0(r2)
	routine[i++] = EX_AF;   // AF <--> AF'
   2659c:	e0bffc17 	ldw	r2,-16(fp)
   265a0:	10c00044 	addi	r3,r2,1
   265a4:	e0fffc15 	stw	r3,-16(fp)
   265a8:	1007883a 	mov	r3,r2
   265ac:	e0bffe17 	ldw	r2,-8(fp)
   265b0:	10c5883a 	add	r2,r2,r3
   265b4:	00c00204 	movi	r3,8
   265b8:	10c00005 	stb	r3,0(r2)
	routine[i++] = POP_AF;  // AF = AF
   265bc:	e0bffc17 	ldw	r2,-16(fp)
   265c0:	10c00044 	addi	r3,r2,1
   265c4:	e0fffc15 	stw	r3,-16(fp)
   265c8:	1007883a 	mov	r3,r2
   265cc:	e0bffe17 	ldw	r2,-8(fp)
   265d0:	10c5883a 	add	r2,r2,r3
   265d4:	00fffc44 	movi	r3,-15
   265d8:	10c00005 	stb	r3,0(r2)

	// Set Interrupt mode
	routine[i++] = IM_x;
   265dc:	e0bffc17 	ldw	r2,-16(fp)
   265e0:	10c00044 	addi	r3,r2,1
   265e4:	e0fffc15 	stw	r3,-16(fp)
   265e8:	1007883a 	mov	r3,r2
   265ec:	e0bffe17 	ldw	r2,-8(fp)
   265f0:	10c5883a 	add	r2,r2,r3
   265f4:	00fffb44 	movi	r3,-19
   265f8:	10c00005 	stb	r3,0(r2)
	alt_u8 interrupt_mode = regs.IM;
   265fc:	e0800883 	ldbu	r2,34(fp)
   26600:	e0bfff85 	stb	r2,-2(fp)
	switch (interrupt_mode) {
   26604:	e0bfff83 	ldbu	r2,-2(fp)
   26608:	10c00060 	cmpeqi	r3,r2,1
   2660c:	18000c1e 	bne	r3,zero,26640 <generate_LOAD_routine+0x6f8>
   26610:	10c000a0 	cmpeqi	r3,r2,2
   26614:	1800131e 	bne	r3,zero,26664 <generate_LOAD_routine+0x71c>
   26618:	10001b1e 	bne	r2,zero,26688 <generate_LOAD_routine+0x740>
		case 0:
			routine[i++] = IM_0;
   2661c:	e0bffc17 	ldw	r2,-16(fp)
   26620:	10c00044 	addi	r3,r2,1
   26624:	e0fffc15 	stw	r3,-16(fp)
   26628:	1007883a 	mov	r3,r2
   2662c:	e0bffe17 	ldw	r2,-8(fp)
   26630:	10c5883a 	add	r2,r2,r3
   26634:	00c01184 	movi	r3,70
   26638:	10c00005 	stb	r3,0(r2)
			break;
   2663c:	00001d06 	br	266b4 <generate_LOAD_routine+0x76c>
		case 1:
			routine[i++] = IM_1;
   26640:	e0bffc17 	ldw	r2,-16(fp)
   26644:	10c00044 	addi	r3,r2,1
   26648:	e0fffc15 	stw	r3,-16(fp)
   2664c:	1007883a 	mov	r3,r2
   26650:	e0bffe17 	ldw	r2,-8(fp)
   26654:	10c5883a 	add	r2,r2,r3
   26658:	00c01584 	movi	r3,86
   2665c:	10c00005 	stb	r3,0(r2)
			break;
   26660:	00001406 	br	266b4 <generate_LOAD_routine+0x76c>
		case 2:
			routine[i++] = IM_2;
   26664:	e0bffc17 	ldw	r2,-16(fp)
   26668:	10c00044 	addi	r3,r2,1
   2666c:	e0fffc15 	stw	r3,-16(fp)
   26670:	1007883a 	mov	r3,r2
   26674:	e0bffe17 	ldw	r2,-8(fp)
   26678:	10c5883a 	add	r2,r2,r3
   2667c:	00c01784 	movi	r3,94
   26680:	10c00005 	stb	r3,0(r2)
			break;
   26684:	00000b06 	br	266b4 <generate_LOAD_routine+0x76c>
		default:
			printf("Wrong interrupt byte... defaulting to 1");
   26688:	010000f4 	movhi	r4,3
   2668c:	2107b804 	addi	r4,r4,7904
   26690:	002ea900 	call	2ea90 <printf>
			routine[i++] = IM_1;
   26694:	e0bffc17 	ldw	r2,-16(fp)
   26698:	10c00044 	addi	r3,r2,1
   2669c:	e0fffc15 	stw	r3,-16(fp)
   266a0:	1007883a 	mov	r3,r2
   266a4:	e0bffe17 	ldw	r2,-8(fp)
   266a8:	10c5883a 	add	r2,r2,r3
   266ac:	00c01584 	movi	r3,86
   266b0:	10c00005 	stb	r3,0(r2)
	}

	if (regs.IFF1) {
   266b4:	e08008c3 	ldbu	r2,35(fp)
   266b8:	10803fcc 	andi	r2,r2,255
   266bc:	10000926 	beq	r2,zero,266e4 <generate_LOAD_routine+0x79c>
		routine[i++] = EI;
   266c0:	e0bffc17 	ldw	r2,-16(fp)
   266c4:	10c00044 	addi	r3,r2,1
   266c8:	e0fffc15 	stw	r3,-16(fp)
   266cc:	1007883a 	mov	r3,r2
   266d0:	e0bffe17 	ldw	r2,-8(fp)
   266d4:	10c5883a 	add	r2,r2,r3
   266d8:	00fffec4 	movi	r3,-5
   266dc:	10c00005 	stb	r3,0(r2)
   266e0:	00000806 	br	26704 <generate_LOAD_routine+0x7bc>
	} else {
		routine[i++] = DI;
   266e4:	e0bffc17 	ldw	r2,-16(fp)
   266e8:	10c00044 	addi	r3,r2,1
   266ec:	e0fffc15 	stw	r3,-16(fp)
   266f0:	1007883a 	mov	r3,r2
   266f4:	e0bffe17 	ldw	r2,-8(fp)
   266f8:	10c5883a 	add	r2,r2,r3
   266fc:	00fffcc4 	movi	r3,-13
   26700:	10c00005 	stb	r3,0(r2)
	}

	//if (type == SNA) {
		// Supposedly, right before a .SNA is made, the PC is pushed to stack,
		// so it is set after the instruction RETN
		routine[i++] = RETN1;
   26704:	e0bffc17 	ldw	r2,-16(fp)
   26708:	10c00044 	addi	r3,r2,1
   2670c:	e0fffc15 	stw	r3,-16(fp)
   26710:	1007883a 	mov	r3,r2
   26714:	e0bffe17 	ldw	r2,-8(fp)
   26718:	10c5883a 	add	r2,r2,r3
   2671c:	00fffb44 	movi	r3,-19
   26720:	10c00005 	stb	r3,0(r2)
		routine[i++] = RETN2;
   26724:	e0bffc17 	ldw	r2,-16(fp)
   26728:	10c00044 	addi	r3,r2,1
   2672c:	e0fffc15 	stw	r3,-16(fp)
   26730:	1007883a 	mov	r3,r2
   26734:	e0bffe17 	ldw	r2,-8(fp)
   26738:	10c5883a 	add	r2,r2,r3
   2673c:	00c01144 	movi	r3,69
   26740:	10c00005 	stb	r3,0(r2)
	//	routine[i++] = JP_NN;
	//	routine[i++] = regs.PC >> 8;
	//	routine[i++] = regs.PC & 0xFF;
	//}

	return routine;
   26744:	e0bffe17 	ldw	r2,-8(fp)
}
   26748:	e037883a 	mov	sp,fp
   2674c:	dfc00117 	ldw	ra,4(sp)
   26750:	df000017 	ldw	fp,0(sp)
   26754:	dec00604 	addi	sp,sp,24
   26758:	f800283a 	ret

0002675c <generate_SAVE_routine>:

alt_u8* generate_SAVE_routine(const enum file_type type, int routine_size) {
   2675c:	defffa04 	addi	sp,sp,-24
   26760:	dfc00515 	stw	ra,20(sp)
   26764:	df000415 	stw	fp,16(sp)
   26768:	df000404 	addi	fp,sp,16
   2676c:	e13ffe15 	stw	r4,-8(fp)
   26770:	e17fff15 	stw	r5,-4(fp)
	alt_u8* routine = (alt_u8*) malloc(routine_size * sizeof(alt_u8));
   26774:	e0bfff17 	ldw	r2,-4(fp)
   26778:	1009883a 	mov	r4,r2
   2677c:	002e7a80 	call	2e7a8 <malloc>
   26780:	e0bffc15 	stw	r2,-16(fp)
	int i = 0;
   26784:	e03ffd15 	stw	zero,-12(fp)

	// Save SP somewhere known
	// SP can be stored after the NMI code, like in 0x4100. This is in range of the first block, which can be used to "fix" the screen later

	// store SP value to SP_ADDR (LD (ADDR), SP)
	routine[i++] = LD_NN_dd;
   26788:	e0bffd17 	ldw	r2,-12(fp)
   2678c:	10c00044 	addi	r3,r2,1
   26790:	e0fffd15 	stw	r3,-12(fp)
   26794:	1007883a 	mov	r3,r2
   26798:	e0bffc17 	ldw	r2,-16(fp)
   2679c:	10c5883a 	add	r2,r2,r3
   267a0:	00fffb44 	movi	r3,-19
   267a4:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_NN_SP2;
   267a8:	e0bffd17 	ldw	r2,-12(fp)
   267ac:	10c00044 	addi	r3,r2,1
   267b0:	e0fffd15 	stw	r3,-12(fp)
   267b4:	1007883a 	mov	r3,r2
   267b8:	e0bffc17 	ldw	r2,-16(fp)
   267bc:	10c5883a 	add	r2,r2,r3
   267c0:	00c01cc4 	movi	r3,115
   267c4:	10c00005 	stb	r3,0(r2)
	routine[i++] = SP_ADDR_L;
   267c8:	e0bffd17 	ldw	r2,-12(fp)
   267cc:	10c00044 	addi	r3,r2,1
   267d0:	e0fffd15 	stw	r3,-12(fp)
   267d4:	1007883a 	mov	r3,r2
   267d8:	e0bffc17 	ldw	r2,-16(fp)
   267dc:	10c5883a 	add	r2,r2,r3
   267e0:	10000005 	stb	zero,0(r2)
	routine[i++] = SP_ADDR_H;
   267e4:	e0bffd17 	ldw	r2,-12(fp)
   267e8:	10c00044 	addi	r3,r2,1
   267ec:	e0fffd15 	stw	r3,-12(fp)
   267f0:	1007883a 	mov	r3,r2
   267f4:	e0bffc17 	ldw	r2,-16(fp)
   267f8:	10c5883a 	add	r2,r2,r3
   267fc:	00c01044 	movi	r3,65
   26800:	10c00005 	stb	r3,0(r2)

	// IDEA: overwrite NMI code with the values themselves as the instructions execute
	// NEXT: the AF registers should be saved ASAP. Unfortunately, they don't have a LD instruction, only a PUSH.
	routine[i++] = PUSH_AF;
   26804:	e0bffd17 	ldw	r2,-12(fp)
   26808:	10c00044 	addi	r3,r2,1
   2680c:	e0fffd15 	stw	r3,-12(fp)
   26810:	1007883a 	mov	r3,r2
   26814:	e0bffc17 	ldw	r2,-16(fp)
   26818:	10c5883a 	add	r2,r2,r3
   2681c:	00fffd44 	movi	r3,-11
   26820:	10c00005 	stb	r3,0(r2)
	routine[i++] = EX_AF;
   26824:	e0bffd17 	ldw	r2,-12(fp)
   26828:	10c00044 	addi	r3,r2,1
   2682c:	e0fffd15 	stw	r3,-12(fp)
   26830:	1007883a 	mov	r3,r2
   26834:	e0bffc17 	ldw	r2,-16(fp)
   26838:	10c5883a 	add	r2,r2,r3
   2683c:	00c00204 	movi	r3,8
   26840:	10c00005 	stb	r3,0(r2)
	routine[i++] = PUSH_AF;
   26844:	e0bffd17 	ldw	r2,-12(fp)
   26848:	10c00044 	addi	r3,r2,1
   2684c:	e0fffd15 	stw	r3,-12(fp)
   26850:	1007883a 	mov	r3,r2
   26854:	e0bffc17 	ldw	r2,-16(fp)
   26858:	10c5883a 	add	r2,r2,r3
   2685c:	00fffd44 	movi	r3,-11
   26860:	10c00005 	stb	r3,0(r2)
	// STACK now: --> AF', AF, PC, ...

	// each register is now written to video memory:

	// HL saving
	routine[i++] = LD_NN_HL;
   26864:	e0bffd17 	ldw	r2,-12(fp)
   26868:	10c00044 	addi	r3,r2,1
   2686c:	e0fffd15 	stw	r3,-12(fp)
   26870:	1007883a 	mov	r3,r2
   26874:	e0bffc17 	ldw	r2,-16(fp)
   26878:	10c5883a 	add	r2,r2,r3
   2687c:	00c00884 	movi	r3,34
   26880:	10c00005 	stb	r3,0(r2)
	routine[i++] = HL_ADDR_L;
   26884:	e0bffd17 	ldw	r2,-12(fp)
   26888:	10c00044 	addi	r3,r2,1
   2688c:	e0fffd15 	stw	r3,-12(fp)
   26890:	1007883a 	mov	r3,r2
   26894:	e0bffc17 	ldw	r2,-16(fp)
   26898:	10c5883a 	add	r2,r2,r3
   2689c:	10000005 	stb	zero,0(r2)
	routine[i++] = HL_ADDR_H;
   268a0:	e0bffd17 	ldw	r2,-12(fp)
   268a4:	10c00044 	addi	r3,r2,1
   268a8:	e0fffd15 	stw	r3,-12(fp)
   268ac:	1007883a 	mov	r3,r2
   268b0:	e0bffc17 	ldw	r2,-16(fp)
   268b4:	10c5883a 	add	r2,r2,r3
   268b8:	00c01004 	movi	r3,64
   268bc:	10c00005 	stb	r3,0(r2)

	// BC saving
	routine[i++] = LD_NN_dd;
   268c0:	e0bffd17 	ldw	r2,-12(fp)
   268c4:	10c00044 	addi	r3,r2,1
   268c8:	e0fffd15 	stw	r3,-12(fp)
   268cc:	1007883a 	mov	r3,r2
   268d0:	e0bffc17 	ldw	r2,-16(fp)
   268d4:	10c5883a 	add	r2,r2,r3
   268d8:	00fffb44 	movi	r3,-19
   268dc:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_NN_BC2;
   268e0:	e0bffd17 	ldw	r2,-12(fp)
   268e4:	10c00044 	addi	r3,r2,1
   268e8:	e0fffd15 	stw	r3,-12(fp)
   268ec:	1007883a 	mov	r3,r2
   268f0:	e0bffc17 	ldw	r2,-16(fp)
   268f4:	10c5883a 	add	r2,r2,r3
   268f8:	00c010c4 	movi	r3,67
   268fc:	10c00005 	stb	r3,0(r2)
	routine[i++] = BC_ADDR_L;
   26900:	e0bffd17 	ldw	r2,-12(fp)
   26904:	10c00044 	addi	r3,r2,1
   26908:	e0fffd15 	stw	r3,-12(fp)
   2690c:	1007883a 	mov	r3,r2
   26910:	e0bffc17 	ldw	r2,-16(fp)
   26914:	10c5883a 	add	r2,r2,r3
   26918:	00c00084 	movi	r3,2
   2691c:	10c00005 	stb	r3,0(r2)
	routine[i++] = BC_ADDR_H;
   26920:	e0bffd17 	ldw	r2,-12(fp)
   26924:	10c00044 	addi	r3,r2,1
   26928:	e0fffd15 	stw	r3,-12(fp)
   2692c:	1007883a 	mov	r3,r2
   26930:	e0bffc17 	ldw	r2,-16(fp)
   26934:	10c5883a 	add	r2,r2,r3
   26938:	00c01004 	movi	r3,64
   2693c:	10c00005 	stb	r3,0(r2)

	// DE saving
	routine[i++] = LD_NN_dd;
   26940:	e0bffd17 	ldw	r2,-12(fp)
   26944:	10c00044 	addi	r3,r2,1
   26948:	e0fffd15 	stw	r3,-12(fp)
   2694c:	1007883a 	mov	r3,r2
   26950:	e0bffc17 	ldw	r2,-16(fp)
   26954:	10c5883a 	add	r2,r2,r3
   26958:	00fffb44 	movi	r3,-19
   2695c:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_NN_DE2;
   26960:	e0bffd17 	ldw	r2,-12(fp)
   26964:	10c00044 	addi	r3,r2,1
   26968:	e0fffd15 	stw	r3,-12(fp)
   2696c:	1007883a 	mov	r3,r2
   26970:	e0bffc17 	ldw	r2,-16(fp)
   26974:	10c5883a 	add	r2,r2,r3
   26978:	00c014c4 	movi	r3,83
   2697c:	10c00005 	stb	r3,0(r2)
	routine[i++] = DE_ADDR_L;
   26980:	e0bffd17 	ldw	r2,-12(fp)
   26984:	10c00044 	addi	r3,r2,1
   26988:	e0fffd15 	stw	r3,-12(fp)
   2698c:	1007883a 	mov	r3,r2
   26990:	e0bffc17 	ldw	r2,-16(fp)
   26994:	10c5883a 	add	r2,r2,r3
   26998:	00c00104 	movi	r3,4
   2699c:	10c00005 	stb	r3,0(r2)
	routine[i++] = DE_ADDR_H;
   269a0:	e0bffd17 	ldw	r2,-12(fp)
   269a4:	10c00044 	addi	r3,r2,1
   269a8:	e0fffd15 	stw	r3,-12(fp)
   269ac:	1007883a 	mov	r3,r2
   269b0:	e0bffc17 	ldw	r2,-16(fp)
   269b4:	10c5883a 	add	r2,r2,r3
   269b8:	00c01004 	movi	r3,64
   269bc:	10c00005 	stb	r3,0(r2)

	// switch between AUX registers
	routine[i++] = EXX;
   269c0:	e0bffd17 	ldw	r2,-12(fp)
   269c4:	10c00044 	addi	r3,r2,1
   269c8:	e0fffd15 	stw	r3,-12(fp)
   269cc:	1007883a 	mov	r3,r2
   269d0:	e0bffc17 	ldw	r2,-16(fp)
   269d4:	10c5883a 	add	r2,r2,r3
   269d8:	00fff644 	movi	r3,-39
   269dc:	10c00005 	stb	r3,0(r2)

	// HL' saving
	routine[i++] = LD_NN_HL;
   269e0:	e0bffd17 	ldw	r2,-12(fp)
   269e4:	10c00044 	addi	r3,r2,1
   269e8:	e0fffd15 	stw	r3,-12(fp)
   269ec:	1007883a 	mov	r3,r2
   269f0:	e0bffc17 	ldw	r2,-16(fp)
   269f4:	10c5883a 	add	r2,r2,r3
   269f8:	00c00884 	movi	r3,34
   269fc:	10c00005 	stb	r3,0(r2)
	routine[i++] = HL_AUX_ADDR_L;
   26a00:	e0bffd17 	ldw	r2,-12(fp)
   26a04:	10c00044 	addi	r3,r2,1
   26a08:	e0fffd15 	stw	r3,-12(fp)
   26a0c:	1007883a 	mov	r3,r2
   26a10:	e0bffc17 	ldw	r2,-16(fp)
   26a14:	10c5883a 	add	r2,r2,r3
   26a18:	00c00184 	movi	r3,6
   26a1c:	10c00005 	stb	r3,0(r2)
	routine[i++] = HL_AUX_ADDR_H;
   26a20:	e0bffd17 	ldw	r2,-12(fp)
   26a24:	10c00044 	addi	r3,r2,1
   26a28:	e0fffd15 	stw	r3,-12(fp)
   26a2c:	1007883a 	mov	r3,r2
   26a30:	e0bffc17 	ldw	r2,-16(fp)
   26a34:	10c5883a 	add	r2,r2,r3
   26a38:	00c01004 	movi	r3,64
   26a3c:	10c00005 	stb	r3,0(r2)

	// BC' saving
	routine[i++] = LD_NN_dd;
   26a40:	e0bffd17 	ldw	r2,-12(fp)
   26a44:	10c00044 	addi	r3,r2,1
   26a48:	e0fffd15 	stw	r3,-12(fp)
   26a4c:	1007883a 	mov	r3,r2
   26a50:	e0bffc17 	ldw	r2,-16(fp)
   26a54:	10c5883a 	add	r2,r2,r3
   26a58:	00fffb44 	movi	r3,-19
   26a5c:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_NN_BC2;
   26a60:	e0bffd17 	ldw	r2,-12(fp)
   26a64:	10c00044 	addi	r3,r2,1
   26a68:	e0fffd15 	stw	r3,-12(fp)
   26a6c:	1007883a 	mov	r3,r2
   26a70:	e0bffc17 	ldw	r2,-16(fp)
   26a74:	10c5883a 	add	r2,r2,r3
   26a78:	00c010c4 	movi	r3,67
   26a7c:	10c00005 	stb	r3,0(r2)
	routine[i++] = BC_AUX_ADDR_L;
   26a80:	e0bffd17 	ldw	r2,-12(fp)
   26a84:	10c00044 	addi	r3,r2,1
   26a88:	e0fffd15 	stw	r3,-12(fp)
   26a8c:	1007883a 	mov	r3,r2
   26a90:	e0bffc17 	ldw	r2,-16(fp)
   26a94:	10c5883a 	add	r2,r2,r3
   26a98:	00c00204 	movi	r3,8
   26a9c:	10c00005 	stb	r3,0(r2)
	routine[i++] = BC_AUX_ADDR_H;
   26aa0:	e0bffd17 	ldw	r2,-12(fp)
   26aa4:	10c00044 	addi	r3,r2,1
   26aa8:	e0fffd15 	stw	r3,-12(fp)
   26aac:	1007883a 	mov	r3,r2
   26ab0:	e0bffc17 	ldw	r2,-16(fp)
   26ab4:	10c5883a 	add	r2,r2,r3
   26ab8:	00c01004 	movi	r3,64
   26abc:	10c00005 	stb	r3,0(r2)

	// DE' saving
	routine[i++] = LD_NN_dd;
   26ac0:	e0bffd17 	ldw	r2,-12(fp)
   26ac4:	10c00044 	addi	r3,r2,1
   26ac8:	e0fffd15 	stw	r3,-12(fp)
   26acc:	1007883a 	mov	r3,r2
   26ad0:	e0bffc17 	ldw	r2,-16(fp)
   26ad4:	10c5883a 	add	r2,r2,r3
   26ad8:	00fffb44 	movi	r3,-19
   26adc:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_NN_DE2;
   26ae0:	e0bffd17 	ldw	r2,-12(fp)
   26ae4:	10c00044 	addi	r3,r2,1
   26ae8:	e0fffd15 	stw	r3,-12(fp)
   26aec:	1007883a 	mov	r3,r2
   26af0:	e0bffc17 	ldw	r2,-16(fp)
   26af4:	10c5883a 	add	r2,r2,r3
   26af8:	00c014c4 	movi	r3,83
   26afc:	10c00005 	stb	r3,0(r2)
	routine[i++] = DE_AUX_ADDR_L;
   26b00:	e0bffd17 	ldw	r2,-12(fp)
   26b04:	10c00044 	addi	r3,r2,1
   26b08:	e0fffd15 	stw	r3,-12(fp)
   26b0c:	1007883a 	mov	r3,r2
   26b10:	e0bffc17 	ldw	r2,-16(fp)
   26b14:	10c5883a 	add	r2,r2,r3
   26b18:	00c00284 	movi	r3,10
   26b1c:	10c00005 	stb	r3,0(r2)
	routine[i++] = DE_AUX_ADDR_H;
   26b20:	e0bffd17 	ldw	r2,-12(fp)
   26b24:	10c00044 	addi	r3,r2,1
   26b28:	e0fffd15 	stw	r3,-12(fp)
   26b2c:	1007883a 	mov	r3,r2
   26b30:	e0bffc17 	ldw	r2,-16(fp)
   26b34:	10c5883a 	add	r2,r2,r3
   26b38:	00c01004 	movi	r3,64
   26b3c:	10c00005 	stb	r3,0(r2)

	// IX saving
	routine[i++] = LD_NN_IX1;
   26b40:	e0bffd17 	ldw	r2,-12(fp)
   26b44:	10c00044 	addi	r3,r2,1
   26b48:	e0fffd15 	stw	r3,-12(fp)
   26b4c:	1007883a 	mov	r3,r2
   26b50:	e0bffc17 	ldw	r2,-16(fp)
   26b54:	10c5883a 	add	r2,r2,r3
   26b58:	00fff744 	movi	r3,-35
   26b5c:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_NN_IX2;
   26b60:	e0bffd17 	ldw	r2,-12(fp)
   26b64:	10c00044 	addi	r3,r2,1
   26b68:	e0fffd15 	stw	r3,-12(fp)
   26b6c:	1007883a 	mov	r3,r2
   26b70:	e0bffc17 	ldw	r2,-16(fp)
   26b74:	10c5883a 	add	r2,r2,r3
   26b78:	00c00884 	movi	r3,34
   26b7c:	10c00005 	stb	r3,0(r2)
	routine[i++] = IX_ADDR_L;
   26b80:	e0bffd17 	ldw	r2,-12(fp)
   26b84:	10c00044 	addi	r3,r2,1
   26b88:	e0fffd15 	stw	r3,-12(fp)
   26b8c:	1007883a 	mov	r3,r2
   26b90:	e0bffc17 	ldw	r2,-16(fp)
   26b94:	10c5883a 	add	r2,r2,r3
   26b98:	00c00304 	movi	r3,12
   26b9c:	10c00005 	stb	r3,0(r2)
	routine[i++] = IX_ADDR_H;
   26ba0:	e0bffd17 	ldw	r2,-12(fp)
   26ba4:	10c00044 	addi	r3,r2,1
   26ba8:	e0fffd15 	stw	r3,-12(fp)
   26bac:	1007883a 	mov	r3,r2
   26bb0:	e0bffc17 	ldw	r2,-16(fp)
   26bb4:	10c5883a 	add	r2,r2,r3
   26bb8:	00c01004 	movi	r3,64
   26bbc:	10c00005 	stb	r3,0(r2)

	// IY saving
	routine[i++] = LD_NN_IY1;
   26bc0:	e0bffd17 	ldw	r2,-12(fp)
   26bc4:	10c00044 	addi	r3,r2,1
   26bc8:	e0fffd15 	stw	r3,-12(fp)
   26bcc:	1007883a 	mov	r3,r2
   26bd0:	e0bffc17 	ldw	r2,-16(fp)
   26bd4:	10c5883a 	add	r2,r2,r3
   26bd8:	00ffff44 	movi	r3,-3
   26bdc:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_NN_IY2;
   26be0:	e0bffd17 	ldw	r2,-12(fp)
   26be4:	10c00044 	addi	r3,r2,1
   26be8:	e0fffd15 	stw	r3,-12(fp)
   26bec:	1007883a 	mov	r3,r2
   26bf0:	e0bffc17 	ldw	r2,-16(fp)
   26bf4:	10c5883a 	add	r2,r2,r3
   26bf8:	00c00884 	movi	r3,34
   26bfc:	10c00005 	stb	r3,0(r2)
	routine[i++] = IY_ADDR_L;
   26c00:	e0bffd17 	ldw	r2,-12(fp)
   26c04:	10c00044 	addi	r3,r2,1
   26c08:	e0fffd15 	stw	r3,-12(fp)
   26c0c:	1007883a 	mov	r3,r2
   26c10:	e0bffc17 	ldw	r2,-16(fp)
   26c14:	10c5883a 	add	r2,r2,r3
   26c18:	00c00384 	movi	r3,14
   26c1c:	10c00005 	stb	r3,0(r2)
	routine[i++] = IY_ADDR_H;
   26c20:	e0bffd17 	ldw	r2,-12(fp)
   26c24:	10c00044 	addi	r3,r2,1
   26c28:	e0fffd15 	stw	r3,-12(fp)
   26c2c:	1007883a 	mov	r3,r2
   26c30:	e0bffc17 	ldw	r2,-16(fp)
   26c34:	10c5883a 	add	r2,r2,r3
   26c38:	00c01004 	movi	r3,64
   26c3c:	10c00005 	stb	r3,0(r2)

	// I saving
	routine[i++] = LD_A_I1;
   26c40:	e0bffd17 	ldw	r2,-12(fp)
   26c44:	10c00044 	addi	r3,r2,1
   26c48:	e0fffd15 	stw	r3,-12(fp)
   26c4c:	1007883a 	mov	r3,r2
   26c50:	e0bffc17 	ldw	r2,-16(fp)
   26c54:	10c5883a 	add	r2,r2,r3
   26c58:	00fffb44 	movi	r3,-19
   26c5c:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_A_I2;
   26c60:	e0bffd17 	ldw	r2,-12(fp)
   26c64:	10c00044 	addi	r3,r2,1
   26c68:	e0fffd15 	stw	r3,-12(fp)
   26c6c:	1007883a 	mov	r3,r2
   26c70:	e0bffc17 	ldw	r2,-16(fp)
   26c74:	10c5883a 	add	r2,r2,r3
   26c78:	00c015c4 	movi	r3,87
   26c7c:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_NN_A;
   26c80:	e0bffd17 	ldw	r2,-12(fp)
   26c84:	10c00044 	addi	r3,r2,1
   26c88:	e0fffd15 	stw	r3,-12(fp)
   26c8c:	1007883a 	mov	r3,r2
   26c90:	e0bffc17 	ldw	r2,-16(fp)
   26c94:	10c5883a 	add	r2,r2,r3
   26c98:	00c00c84 	movi	r3,50
   26c9c:	10c00005 	stb	r3,0(r2)
	routine[i++] = I_ADDR_L;
   26ca0:	e0bffd17 	ldw	r2,-12(fp)
   26ca4:	10c00044 	addi	r3,r2,1
   26ca8:	e0fffd15 	stw	r3,-12(fp)
   26cac:	1007883a 	mov	r3,r2
   26cb0:	e0bffc17 	ldw	r2,-16(fp)
   26cb4:	10c5883a 	add	r2,r2,r3
   26cb8:	00c00404 	movi	r3,16
   26cbc:	10c00005 	stb	r3,0(r2)
	routine[i++] = I_ADDR_H;
   26cc0:	e0bffd17 	ldw	r2,-12(fp)
   26cc4:	10c00044 	addi	r3,r2,1
   26cc8:	e0fffd15 	stw	r3,-12(fp)
   26ccc:	1007883a 	mov	r3,r2
   26cd0:	e0bffc17 	ldw	r2,-16(fp)
   26cd4:	10c5883a 	add	r2,r2,r3
   26cd8:	00c01004 	movi	r3,64
   26cdc:	10c00005 	stb	r3,0(r2)

	// R saving
	routine[i++] = LD_A_R1;
   26ce0:	e0bffd17 	ldw	r2,-12(fp)
   26ce4:	10c00044 	addi	r3,r2,1
   26ce8:	e0fffd15 	stw	r3,-12(fp)
   26cec:	1007883a 	mov	r3,r2
   26cf0:	e0bffc17 	ldw	r2,-16(fp)
   26cf4:	10c5883a 	add	r2,r2,r3
   26cf8:	00fffb44 	movi	r3,-19
   26cfc:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_A_R2;
   26d00:	e0bffd17 	ldw	r2,-12(fp)
   26d04:	10c00044 	addi	r3,r2,1
   26d08:	e0fffd15 	stw	r3,-12(fp)
   26d0c:	1007883a 	mov	r3,r2
   26d10:	e0bffc17 	ldw	r2,-16(fp)
   26d14:	10c5883a 	add	r2,r2,r3
   26d18:	00c017c4 	movi	r3,95
   26d1c:	10c00005 	stb	r3,0(r2)
	routine[i++] = LD_NN_A;
   26d20:	e0bffd17 	ldw	r2,-12(fp)
   26d24:	10c00044 	addi	r3,r2,1
   26d28:	e0fffd15 	stw	r3,-12(fp)
   26d2c:	1007883a 	mov	r3,r2
   26d30:	e0bffc17 	ldw	r2,-16(fp)
   26d34:	10c5883a 	add	r2,r2,r3
   26d38:	00c00c84 	movi	r3,50
   26d3c:	10c00005 	stb	r3,0(r2)
	routine[i++] = R_ADDR_L;
   26d40:	e0bffd17 	ldw	r2,-12(fp)
   26d44:	10c00044 	addi	r3,r2,1
   26d48:	e0fffd15 	stw	r3,-12(fp)
   26d4c:	1007883a 	mov	r3,r2
   26d50:	e0bffc17 	ldw	r2,-16(fp)
   26d54:	10c5883a 	add	r2,r2,r3
   26d58:	00c00444 	movi	r3,17
   26d5c:	10c00005 	stb	r3,0(r2)
	routine[i++] = R_ADDR_H;
   26d60:	e0bffd17 	ldw	r2,-12(fp)
   26d64:	10c00044 	addi	r3,r2,1
   26d68:	e0fffd15 	stw	r3,-12(fp)
   26d6c:	1007883a 	mov	r3,r2
   26d70:	e0bffc17 	ldw	r2,-16(fp)
   26d74:	10c5883a 	add	r2,r2,r3
   26d78:	00c01004 	movi	r3,64
   26d7c:	10c00005 	stb	r3,0(r2)
	//		No way of obtaining current interrupt info, so using default values based on how ZX Spectrum works:
	//		Interrupt Mode: 1; IFF1: 0

	// NOW ISSUE COMMAND TO NIOS TO NOTIFY THAT THE REGISTER VALUES ARE NOW AVAILABLE
	
	routine[i++] = HALT;
   26d80:	e0bffd17 	ldw	r2,-12(fp)
   26d84:	10c00044 	addi	r3,r2,1
   26d88:	e0fffd15 	stw	r3,-12(fp)
   26d8c:	1007883a 	mov	r3,r2
   26d90:	e0bffc17 	ldw	r2,-16(fp)
   26d94:	10c5883a 	add	r2,r2,r3
   26d98:	00c01d84 	movi	r3,118
   26d9c:	10c00005 	stb	r3,0(r2)

	//		LENGTH OF CODE UNTIL NOW: 49
	return routine;
   26da0:	e0bffc17 	ldw	r2,-16(fp)
}
   26da4:	e037883a 	mov	sp,fp
   26da8:	dfc00117 	ldw	ra,4(sp)
   26dac:	df000017 	ldw	fp,0(sp)
   26db0:	dec00204 	addi	sp,sp,8
   26db4:	f800283a 	ret

00026db8 <load_file>:
#include "asm_opcodes.h"
#include "mem_addrs.h"

#include "..\spectrum_comm\Peripheral_Interfaces\per_hal.h"

int load_file(FAT_HANDLE hFat, char* filename, int name_len) {
   26db8:	defff804 	addi	sp,sp,-32
   26dbc:	dfc00715 	stw	ra,28(sp)
   26dc0:	df000615 	stw	fp,24(sp)
   26dc4:	dc000515 	stw	r16,20(sp)
   26dc8:	df000604 	addi	fp,sp,24
   26dcc:	e13ffc15 	stw	r4,-16(fp)
   26dd0:	e17ffd15 	stw	r5,-12(fp)
   26dd4:	e1bffe15 	stw	r6,-8(fp)
	char* extension = filename + (name_len-4);
   26dd8:	e0bffe17 	ldw	r2,-8(fp)
   26ddc:	10bfff04 	addi	r2,r2,-4
   26de0:	e0fffd17 	ldw	r3,-12(fp)
   26de4:	1885883a 	add	r2,r3,r2
   26de8:	e0bffb15 	stw	r2,-20(fp)
	printf("EXTENSION %s\r\n", extension);
   26dec:	e17ffb17 	ldw	r5,-20(fp)
   26df0:	010000f4 	movhi	r4,3
   26df4:	2107c204 	addi	r4,r4,7944
   26df8:	002ea900 	call	2ea90 <printf>
	for (int i = 0; i < 4; i++) {
   26dfc:	e03ffa15 	stw	zero,-24(fp)
   26e00:	00001006 	br	26e44 <load_file+0x8c>
		extension[i] = tolower(extension[i]);
   26e04:	e0bffa17 	ldw	r2,-24(fp)
   26e08:	e0fffb17 	ldw	r3,-20(fp)
   26e0c:	18a1883a 	add	r16,r3,r2
   26e10:	e0bffa17 	ldw	r2,-24(fp)
   26e14:	e0fffb17 	ldw	r3,-20(fp)
   26e18:	1885883a 	add	r2,r3,r2
   26e1c:	10800003 	ldbu	r2,0(r2)
   26e20:	10803fcc 	andi	r2,r2,255
   26e24:	1080201c 	xori	r2,r2,128
   26e28:	10bfe004 	addi	r2,r2,-128
   26e2c:	1009883a 	mov	r4,r2
   26e30:	002f57c0 	call	2f57c <tolower>
   26e34:	80800005 	stb	r2,0(r16)
#include "..\spectrum_comm\Peripheral_Interfaces\per_hal.h"

int load_file(FAT_HANDLE hFat, char* filename, int name_len) {
	char* extension = filename + (name_len-4);
	printf("EXTENSION %s\r\n", extension);
	for (int i = 0; i < 4; i++) {
   26e38:	e0bffa17 	ldw	r2,-24(fp)
   26e3c:	10800044 	addi	r2,r2,1
   26e40:	e0bffa15 	stw	r2,-24(fp)
   26e44:	e0bffa17 	ldw	r2,-24(fp)
   26e48:	10800110 	cmplti	r2,r2,4
   26e4c:	103fed1e 	bne	r2,zero,26e04 <_gp+0xfffebdc4>
		extension[i] = tolower(extension[i]);
	}
	printf("EXTENSION %s\r\n", extension);
   26e50:	e17ffb17 	ldw	r5,-20(fp)
   26e54:	010000f4 	movhi	r4,3
   26e58:	2107c204 	addi	r4,r4,7944
   26e5c:	002ea900 	call	2ea90 <printf>
	if (strncmp(extension, ".z80", 4) == 0) {
   26e60:	01800104 	movi	r6,4
   26e64:	014000f4 	movhi	r5,3
   26e68:	2947c604 	addi	r5,r5,7960
   26e6c:	e13ffb17 	ldw	r4,-20(fp)
   26e70:	002ef140 	call	2ef14 <strncmp>
   26e74:	1000041e 	bne	r2,zero,26e88 <load_file+0xd0>
		return load_z80(hFat, filename);
   26e78:	e17ffd17 	ldw	r5,-12(fp)
   26e7c:	e13ffc17 	ldw	r4,-16(fp)
   26e80:	0027e5c0 	call	27e5c <load_z80>
   26e84:	00000b06 	br	26eb4 <load_file+0xfc>
	}
	if (strncmp(extension, ".sna", 4) == 0) {
   26e88:	01800104 	movi	r6,4
   26e8c:	014000f4 	movhi	r5,3
   26e90:	2947c804 	addi	r5,r5,7968
   26e94:	e13ffb17 	ldw	r4,-20(fp)
   26e98:	002ef140 	call	2ef14 <strncmp>
   26e9c:	1000041e 	bne	r2,zero,26eb0 <load_file+0xf8>
		return load_SNA(hFat, filename);
   26ea0:	e17ffd17 	ldw	r5,-12(fp)
   26ea4:	e13ffc17 	ldw	r4,-16(fp)
   26ea8:	002706c0 	call	2706c <load_SNA>
   26eac:	00000106 	br	26eb4 <load_file+0xfc>
	}
	return -1;
   26eb0:	00bfffc4 	movi	r2,-1
}
   26eb4:	e6ffff04 	addi	sp,fp,-4
   26eb8:	dfc00217 	ldw	ra,8(sp)
   26ebc:	df000117 	ldw	fp,4(sp)
   26ec0:	dc000017 	ldw	r16,0(sp)
   26ec4:	dec00304 	addi	sp,sp,12
   26ec8:	f800283a 	ret

00026ecc <generate_regs_SNA>:


/* *******************
 * .SNA format
 * *******************/
REGS generate_regs_SNA(alt_u8* data) {
   26ecc:	defff404 	addi	sp,sp,-48
   26ed0:	dfc00b15 	stw	ra,44(sp)
   26ed4:	df000a15 	stw	fp,40(sp)
   26ed8:	df000a04 	addi	fp,sp,40
   26edc:	e13ffe15 	stw	r4,-8(fp)
   26ee0:	e17fff15 	stw	r5,-4(fp)
	alt_u16 sp = conv_data_8_16(data, SNA_OFFSET_SP);
   26ee4:	014005c4 	movi	r5,23
   26ee8:	e13fff17 	ldw	r4,-4(fp)
   26eec:	00258b80 	call	258b8 <conv_data_8_16>
   26ef0:	e0bff60d 	sth	r2,-40(fp)

	REGS regs = {
   26ef4:	e0bfff17 	ldw	r2,-4(fp)
   26ef8:	10800503 	ldbu	r2,20(r2)
   26efc:	e0bff685 	stb	r2,-38(fp)
		.R = data[SNA_OFFSET_R],
		.I = data[SNA_OFFSET_I],
   26f00:	e0bfff17 	ldw	r2,-4(fp)
   26f04:	10800003 	ldbu	r2,0(r2)
 * .SNA format
 * *******************/
REGS generate_regs_SNA(alt_u8* data) {
	alt_u16 sp = conv_data_8_16(data, SNA_OFFSET_SP);

	REGS regs = {
   26f08:	e0bff6c5 	stb	r2,-37(fp)
   26f0c:	e0bfff17 	ldw	r2,-4(fp)
   26f10:	10800203 	ldbu	r2,8(r2)
   26f14:	e0bff705 	stb	r2,-36(fp)
   26f18:	e0bfff17 	ldw	r2,-4(fp)
   26f1c:	108001c3 	ldbu	r2,7(r2)
   26f20:	e0bff745 	stb	r2,-35(fp)
   26f24:	e0bfff17 	ldw	r2,-4(fp)
   26f28:	10800083 	ldbu	r2,2(r2)
   26f2c:	e0bff785 	stb	r2,-34(fp)
   26f30:	e0bfff17 	ldw	r2,-4(fp)
   26f34:	10800043 	ldbu	r2,1(r2)
   26f38:	e0bff7c5 	stb	r2,-33(fp)
   26f3c:	e0bfff17 	ldw	r2,-4(fp)
   26f40:	10800103 	ldbu	r2,4(r2)
   26f44:	e0bff805 	stb	r2,-32(fp)
   26f48:	e0bfff17 	ldw	r2,-4(fp)
   26f4c:	108000c3 	ldbu	r2,3(r2)
   26f50:	e0bff845 	stb	r2,-31(fp)
   26f54:	e0bfff17 	ldw	r2,-4(fp)
   26f58:	10800183 	ldbu	r2,6(r2)
   26f5c:	e0bff885 	stb	r2,-30(fp)
   26f60:	e0bfff17 	ldw	r2,-4(fp)
   26f64:	10800143 	ldbu	r2,5(r2)
   26f68:	e0bff8c5 	stb	r2,-29(fp)
   26f6c:	e0bfff17 	ldw	r2,-4(fp)
   26f70:	10800583 	ldbu	r2,22(r2)
   26f74:	e0bff905 	stb	r2,-28(fp)
   26f78:	e0bfff17 	ldw	r2,-4(fp)
   26f7c:	10800543 	ldbu	r2,21(r2)
   26f80:	e0bff945 	stb	r2,-27(fp)
   26f84:	e0bfff17 	ldw	r2,-4(fp)
   26f88:	10800283 	ldbu	r2,10(r2)
   26f8c:	e0bff985 	stb	r2,-26(fp)
   26f90:	e0bfff17 	ldw	r2,-4(fp)
   26f94:	10800243 	ldbu	r2,9(r2)
   26f98:	e0bff9c5 	stb	r2,-25(fp)
   26f9c:	e0bfff17 	ldw	r2,-4(fp)
   26fa0:	10800303 	ldbu	r2,12(r2)
   26fa4:	e0bffa05 	stb	r2,-24(fp)
   26fa8:	e0bfff17 	ldw	r2,-4(fp)
   26fac:	108002c3 	ldbu	r2,11(r2)
   26fb0:	e0bffa45 	stb	r2,-23(fp)
   26fb4:	e0bfff17 	ldw	r2,-4(fp)
   26fb8:	10800383 	ldbu	r2,14(r2)
   26fbc:	e0bffa85 	stb	r2,-22(fp)
   26fc0:	e0bfff17 	ldw	r2,-4(fp)
   26fc4:	10800343 	ldbu	r2,13(r2)
   26fc8:	e0bffac5 	stb	r2,-21(fp)
		.E = data[SNA_OFFSET_DE],
		.B = data[SNA_OFFSET_BC+1],
		.C = data[SNA_OFFSET_BC],

		//.IY = ((data[SNA_OFFSET_IY] << 8) & 0xFF00) | data[SNA_OFFSET_IY+1],
		.IY = conv_data_8_16(data, SNA_OFFSET_IY),
   26fcc:	014003c4 	movi	r5,15
   26fd0:	e13fff17 	ldw	r4,-4(fp)
   26fd4:	00258b80 	call	258b8 <conv_data_8_16>
 * .SNA format
 * *******************/
REGS generate_regs_SNA(alt_u8* data) {
	alt_u16 sp = conv_data_8_16(data, SNA_OFFSET_SP);

	REGS regs = {
   26fd8:	e0bffb0d 	sth	r2,-20(fp)
		.B = data[SNA_OFFSET_BC+1],
		.C = data[SNA_OFFSET_BC],

		//.IY = ((data[SNA_OFFSET_IY] << 8) & 0xFF00) | data[SNA_OFFSET_IY+1],
		.IY = conv_data_8_16(data, SNA_OFFSET_IY),
		.IX = conv_data_8_16(data, SNA_OFFSET_IX),
   26fdc:	01400444 	movi	r5,17
   26fe0:	e13fff17 	ldw	r4,-4(fp)
   26fe4:	00258b80 	call	258b8 <conv_data_8_16>
 * .SNA format
 * *******************/
REGS generate_regs_SNA(alt_u8* data) {
	alt_u16 sp = conv_data_8_16(data, SNA_OFFSET_SP);

	REGS regs = {
   26fe8:	e0bffb8d 	sth	r2,-18(fp)
   26fec:	e0bff60b 	ldhu	r2,-40(fp)
   26ff0:	e0bffc0d 	sth	r2,-16(fp)
   26ff4:	e03ffc8d 	sth	zero,-14(fp)
   26ff8:	e0bfff17 	ldw	r2,-4(fp)
   26ffc:	10800643 	ldbu	r2,25(r2)
   27000:	e0bffd05 	stb	r2,-12(fp)

		.SP = sp,
		.PC = 0, // PC is in the stack

		.IM = data[SNA_OFFSET_INT_MODE],
		.IFF1 = data[SNA_OFFSET_IFF2] & 4,
   27004:	e0bfff17 	ldw	r2,-4(fp)
   27008:	108004c4 	addi	r2,r2,19
   2700c:	10800003 	ldbu	r2,0(r2)
 * .SNA format
 * *******************/
REGS generate_regs_SNA(alt_u8* data) {
	alt_u16 sp = conv_data_8_16(data, SNA_OFFSET_SP);

	REGS regs = {
   27010:	1080010c 	andi	r2,r2,4
   27014:	e0bffd45 	stb	r2,-11(fp)
		.SP = sp,
		.PC = 0, // PC is in the stack

		.IM = data[SNA_OFFSET_INT_MODE],
		.IFF1 = data[SNA_OFFSET_IFF2] & 4,
		.IFF2 = data[SNA_OFFSET_IFF2] & 4,
   27018:	e0bfff17 	ldw	r2,-4(fp)
   2701c:	108004c4 	addi	r2,r2,19
   27020:	10800003 	ldbu	r2,0(r2)
 * .SNA format
 * *******************/
REGS generate_regs_SNA(alt_u8* data) {
	alt_u16 sp = conv_data_8_16(data, SNA_OFFSET_SP);

	REGS regs = {
   27024:	1080010c 	andi	r2,r2,4
   27028:	e0bffd85 	stb	r2,-10(fp)
   2702c:	e0bfff17 	ldw	r2,-4(fp)
   27030:	10800683 	ldbu	r2,26(r2)
   27034:	e0bffdc5 	stb	r2,-9(fp)
		.IFF2 = data[SNA_OFFSET_IFF2] & 4,
		.border = data[SNA_OFFSET_BORDER]

	};

	return regs;
   27038:	e0bffe17 	ldw	r2,-8(fp)
   2703c:	1009883a 	mov	r4,r2
   27040:	e0bff684 	addi	r2,fp,-38
   27044:	00c00784 	movi	r3,30
   27048:	180d883a 	mov	r6,r3
   2704c:	100b883a 	mov	r5,r2
   27050:	002e7d00 	call	2e7d0 <memcpy>
}
   27054:	e0bffe17 	ldw	r2,-8(fp)
   27058:	e037883a 	mov	sp,fp
   2705c:	dfc00117 	ldw	ra,4(sp)
   27060:	df000017 	ldw	fp,0(sp)
   27064:	dec00204 	addi	sp,sp,8
   27068:	f800283a 	ret

0002706c <load_SNA>:

int load_SNA(FAT_HANDLE hFat, char* filename) {
   2706c:	deff5704 	addi	sp,sp,-676
   27070:	dfc0a815 	stw	ra,672(sp)
   27074:	df00a715 	stw	fp,668(sp)
   27078:	df00a704 	addi	fp,sp,668
   2707c:	e13ffe15 	stw	r4,-8(fp)
   27080:	e17fff15 	stw	r5,-4(fp)
	FAT_FILE_HANDLE hFile = init_file(hFat, filename);
   27084:	e17fff17 	ldw	r5,-4(fp)
   27088:	e13ffe17 	ldw	r4,-8(fp)
   2708c:	00208a40 	call	208a4 <init_file>
   27090:	e0bf6615 	stw	r2,-616(fp)

	if (!hFile) return -1;
   27094:	e0bf6617 	ldw	r2,-616(fp)
   27098:	1000021e 	bne	r2,zero,270a4 <load_SNA+0x38>
   2709c:	00bfffc4 	movi	r2,-1
   270a0:	00011b06 	br	27510 <load_SNA+0x4a4>

	int ret = DMA_request(10);
   270a4:	01000284 	movi	r4,10
   270a8:	002982c0 	call	2982c <DMA_request>
   270ac:	e0bf6715 	stw	r2,-612(fp)

	if (ret != 0) {
   270b0:	e0bf6717 	ldw	r2,-612(fp)
   270b4:	10000626 	beq	r2,zero,270d0 <load_SNA+0x64>
		DMA_print_err(ret);
   270b8:	e13f6717 	ldw	r4,-612(fp)
   270bc:	0029fb40 	call	29fb4 <DMA_print_err>
		close_file(hFile);
   270c0:	e13f6617 	ldw	r4,-616(fp)
   270c4:	00208dc0 	call	208dc <close_file>
		return -1;
   270c8:	00bfffc4 	movi	r2,-1
   270cc:	00011006 	br	27510 <load_SNA+0x4a4>
	}

	int data_offset = SNA_OFFSET_DATA;
   270d0:	008006c4 	movi	r2,27
   270d4:	e0bf6815 	stw	r2,-608(fp)

	int routine_size = get_LOAD_routine_size();
   270d8:	00259500 	call	25950 <get_LOAD_routine_size>
   270dc:	e0bf6915 	stw	r2,-604(fp)



	// Next code based on DE2-115 SD Card reading test code:
	alt_u8 szRead[512];
	int nReadSize=0, nFileSize, nTotalReadSize=0;
   270e0:	e03f6015 	stw	zero,-640(fp)
   270e4:	e03f6115 	stw	zero,-636(fp)
	nFileSize = Fat_FileSize(hFile);
   270e8:	e13f6617 	ldw	r4,-616(fp)
   270ec:	00213cc0 	call	213cc <Fat_FileSize>
   270f0:	e0bf6a15 	stw	r2,-600(fp)

	alt_u16 addr = 0x4000;
   270f4:	00900004 	movi	r2,16384
   270f8:	e0bf620d 	sth	r2,-632(fp)
	REGS regs;
	//alt_u16 ula_addr = 0xFEFE;
	//alt_u8 border_color = 0b00000110;

	bool bSuccess = TRUE;
   270fc:	00800044 	movi	r2,1
   27100:	e0bf6b15 	stw	r2,-596(fp)
	bool first_block = TRUE;
   27104:	00800044 	movi	r2,1
   27108:	e0bf6315 	stw	r2,-628(fp)

	if (nReadSize > sizeof(szRead))
   2710c:	e0bf6017 	ldw	r2,-640(fp)
   27110:	10808070 	cmpltui	r2,r2,513
   27114:	1000581e 	bne	r2,zero,27278 <load_SNA+0x20c>
		nReadSize = sizeof(szRead);
   27118:	00808004 	movi	r2,512
   2711c:	e0bf6015 	stw	r2,-640(fp)
	while(bSuccess && nTotalReadSize < nFileSize){
   27120:	00005506 	br	27278 <load_SNA+0x20c>
		nReadSize = sizeof(szRead);
   27124:	00808004 	movi	r2,512
   27128:	e0bf6015 	stw	r2,-640(fp)
		if (nReadSize > (nFileSize - nTotalReadSize))
   2712c:	e0ff6a17 	ldw	r3,-600(fp)
   27130:	e0bf6117 	ldw	r2,-636(fp)
   27134:	1887c83a 	sub	r3,r3,r2
   27138:	e0bf6017 	ldw	r2,-640(fp)
   2713c:	1880040e 	bge	r3,r2,27150 <load_SNA+0xe4>
			nReadSize = (nFileSize - nTotalReadSize);
   27140:	e0ff6a17 	ldw	r3,-600(fp)
   27144:	e0bf6117 	ldw	r2,-636(fp)
   27148:	1885c83a 	sub	r2,r3,r2
   2714c:	e0bf6015 	stw	r2,-640(fp)
		//
		if (Fat_FileRead(hFile, szRead, nReadSize)){
   27150:	e0bf7304 	addi	r2,fp,-564
   27154:	e1bf6017 	ldw	r6,-640(fp)
   27158:	100b883a 	mov	r5,r2
   2715c:	e13f6617 	ldw	r4,-616(fp)
   27160:	00214100 	call	21410 <Fat_FileRead>
   27164:	10002b26 	beq	r2,zero,27214 <load_SNA+0x1a8>
			if (first_block) {
   27168:	e0bf6317 	ldw	r2,-628(fp)
   2716c:	10001826 	beq	r2,zero,271d0 <load_SNA+0x164>
				// Save REG values
				regs = generate_regs_SNA(szRead);
   27170:	e0bff304 	addi	r2,fp,-52
   27174:	e0ff7304 	addi	r3,fp,-564
   27178:	180b883a 	mov	r5,r3
   2717c:	1009883a 	mov	r4,r2
   27180:	0026ecc0 	call	26ecc <generate_regs_SNA>

				write_buf_mem(addr, szRead, data_offset, nReadSize - data_offset);
   27184:	e13f620b 	ldhu	r4,-632(fp)
   27188:	e0ff6017 	ldw	r3,-640(fp)
   2718c:	e0bf6817 	ldw	r2,-608(fp)
   27190:	1887c83a 	sub	r3,r3,r2
   27194:	e0bf7304 	addi	r2,fp,-564
   27198:	180f883a 	mov	r7,r3
   2719c:	e1bf6817 	ldw	r6,-608(fp)
   271a0:	100b883a 	mov	r5,r2
   271a4:	0029b480 	call	29b48 <write_buf_mem>
				addr += (nReadSize - data_offset);
   271a8:	e0bf6017 	ldw	r2,-640(fp)
   271ac:	1007883a 	mov	r3,r2
   271b0:	e0bf6817 	ldw	r2,-608(fp)
   271b4:	1885c83a 	sub	r2,r3,r2
   271b8:	1007883a 	mov	r3,r2
   271bc:	e0bf620b 	ldhu	r2,-632(fp)
   271c0:	1885883a 	add	r2,r3,r2
   271c4:	e0bf620d 	sth	r2,-632(fp)
				first_block = FALSE;
   271c8:	e03f6315 	stw	zero,-628(fp)
   271cc:	00000c06 	br	27200 <load_SNA+0x194>
			} else {
				write_buf_mem(addr, szRead, 0, nReadSize);
   271d0:	e0bf620b 	ldhu	r2,-632(fp)
   271d4:	e0ff7304 	addi	r3,fp,-564
   271d8:	e1ff6017 	ldw	r7,-640(fp)
   271dc:	000d883a 	mov	r6,zero
   271e0:	180b883a 	mov	r5,r3
   271e4:	1009883a 	mov	r4,r2
   271e8:	0029b480 	call	29b48 <write_buf_mem>
				addr += nReadSize;
   271ec:	e0bf6017 	ldw	r2,-640(fp)
   271f0:	1007883a 	mov	r3,r2
   271f4:	e0bf620b 	ldhu	r2,-632(fp)
   271f8:	1885883a 	add	r2,r3,r2
   271fc:	e0bf620d 	sth	r2,-632(fp)

				/*write_io(ula_addr, border_color);
				border_color = (~border_color) & 0b111;*/
			}
			nTotalReadSize += nReadSize;
   27200:	e0ff6117 	ldw	r3,-636(fp)
   27204:	e0bf6017 	ldw	r2,-640(fp)
   27208:	1885883a 	add	r2,r3,r2
   2720c:	e0bf6115 	stw	r2,-636(fp)
   27210:	00001906 	br	27278 <load_SNA+0x20c>
		}else{
			bSuccess = FALSE;
   27214:	e03f6b15 	stw	zero,-596(fp)
			close_file(hFile);
   27218:	e13f6617 	ldw	r4,-616(fp)
   2721c:	00208dc0 	call	208dc <close_file>

			// writing NMI code (just a return)
			addr = NMI_ROUTINE_ADDR;
   27220:	00900004 	movi	r2,16384
   27224:	e0bf620d 	sth	r2,-632(fp)
			write_mem(addr++, RETN1);
   27228:	e0bf620b 	ldhu	r2,-632(fp)
   2722c:	10c00044 	addi	r3,r2,1
   27230:	e0ff620d 	sth	r3,-632(fp)
   27234:	10bfffcc 	andi	r2,r2,65535
   27238:	01403b44 	movi	r5,237
   2723c:	1009883a 	mov	r4,r2
   27240:	0029a380 	call	29a38 <write_mem>
			write_mem(addr++, RETN2);
   27244:	e0bf620b 	ldhu	r2,-632(fp)
   27248:	10c00044 	addi	r3,r2,1
   2724c:	e0ff620d 	sth	r3,-632(fp)
   27250:	10bfffcc 	andi	r2,r2,65535
   27254:	01401144 	movi	r5,69
   27258:	1009883a 	mov	r4,r2
   2725c:	0029a380 	call	29a38 <write_mem>

			// stop DMA with NMI on
			DMA_stop_w_interrupt();
   27260:	0029f240 	call	29f24 <DMA_stop_w_interrupt>
			printf("\nFailed to read the file\n");
   27264:	010000f4 	movhi	r4,3
   27268:	2107ca04 	addi	r4,r4,7976
   2726c:	002eb800 	call	2eb80 <puts>
			return -1;
   27270:	00bfffc4 	movi	r2,-1
   27274:	0000a606 	br	27510 <load_SNA+0x4a4>
	bool bSuccess = TRUE;
	bool first_block = TRUE;

	if (nReadSize > sizeof(szRead))
		nReadSize = sizeof(szRead);
	while(bSuccess && nTotalReadSize < nFileSize){
   27278:	e0bf6b17 	ldw	r2,-596(fp)
   2727c:	10000326 	beq	r2,zero,2728c <load_SNA+0x220>
   27280:	e0ff6117 	ldw	r3,-636(fp)
   27284:	e0bf6a17 	ldw	r2,-600(fp)
   27288:	18bfa616 	blt	r3,r2,27124 <_gp+0xfffec0e4>
		}
	} // while


	// Save data that routine will overwrite
	int data_bk_len = get_LOAD_routine_size();
   2728c:	00259500 	call	25950 <get_LOAD_routine_size>
   27290:	e0bf6c15 	stw	r2,-592(fp)
	alt_u8* data_bk = (alt_u8*) malloc(data_bk_len * sizeof(alt_u8*));
   27294:	e0bf6c17 	ldw	r2,-592(fp)
   27298:	1085883a 	add	r2,r2,r2
   2729c:	1085883a 	add	r2,r2,r2
   272a0:	1009883a 	mov	r4,r2
   272a4:	002e7a80 	call	2e7a8 <malloc>
   272a8:	e0bf6d15 	stw	r2,-588(fp)
	read_buf_mem(NMI_ROUTINE_ADDR, 0, data_bk_len, data_bk);
   272ac:	e1ff6d17 	ldw	r7,-588(fp)
   272b0:	e1bf6c17 	ldw	r6,-592(fp)
   272b4:	000b883a 	mov	r5,zero
   272b8:	01100004 	movi	r4,16384
   272bc:	00299a00 	call	299a0 <read_buf_mem>

	// Save data that the stack additions overwrite
	alt_u8* bottom_data_bk = (alt_u8*) malloc(OLD_STACK_SIZE * sizeof(alt_u8*));
   272c0:	01000404 	movi	r4,16
   272c4:	002e7a80 	call	2e7a8 <malloc>
   272c8:	e0bf6e15 	stw	r2,-584(fp)
	read_buf_mem(OLD_STACK_START_ADDR, 0, OLD_STACK_SIZE, bottom_data_bk);
   272cc:	e1ff6e17 	ldw	r7,-584(fp)
   272d0:	01800104 	movi	r6,4
   272d4:	000b883a 	mov	r5,zero
   272d8:	0115ff04 	movi	r4,22524
   272dc:	00299a00 	call	299a0 <read_buf_mem>
	printf("regs PC: 0x%04x\r\n", regs.PC);
	free(pc_buf)
	*/

	// Now all the data is loaded, and the routine must be formed with REGS
	enum file_type type = SNA;
   272e0:	00800044 	movi	r2,1
   272e4:	e0bf6f15 	stw	r2,-580(fp)

	alt_u8* routine = generate_LOAD_routine(regs, type, routine_size);
   272e8:	e0bf6917 	ldw	r2,-604(fp)
   272ec:	d8800515 	stw	r2,20(sp)
   272f0:	e0bf6f17 	ldw	r2,-580(fp)
   272f4:	d8800415 	stw	r2,16(sp)
   272f8:	e0bff717 	ldw	r2,-36(fp)
   272fc:	d8800015 	stw	r2,0(sp)
   27300:	e0bff817 	ldw	r2,-32(fp)
   27304:	d8800115 	stw	r2,4(sp)
   27308:	e0bff917 	ldw	r2,-28(fp)
   2730c:	d8800215 	stw	r2,8(sp)
   27310:	e0bffa0b 	ldhu	r2,-24(fp)
   27314:	d880030d 	sth	r2,12(sp)
   27318:	e13ff317 	ldw	r4,-52(fp)
   2731c:	e17ff417 	ldw	r5,-48(fp)
   27320:	e1bff517 	ldw	r6,-44(fp)
   27324:	e1fff617 	ldw	r7,-40(fp)
   27328:	0025f480 	call	25f48 <generate_LOAD_routine>
   2732c:	e0bf7015 	stw	r2,-576(fp)

	write_buf_mem(NMI_ROUTINE_ADDR, routine, 0, routine_size);
   27330:	e1ff6917 	ldw	r7,-604(fp)
   27334:	000d883a 	mov	r6,zero
   27338:	e17f7017 	ldw	r5,-576(fp)
   2733c:	01100004 	movi	r4,16384
   27340:	0029b480 	call	29b48 <write_buf_mem>

	for(int i = 0; i < routine_size; i++) {
   27344:	e03f6415 	stw	zero,-624(fp)
   27348:	00000c06 	br	2737c <load_SNA+0x310>
		printf("0x%02x ", routine[i]);
   2734c:	e0bf6417 	ldw	r2,-624(fp)
   27350:	e0ff7017 	ldw	r3,-576(fp)
   27354:	1885883a 	add	r2,r3,r2
   27358:	10800003 	ldbu	r2,0(r2)
   2735c:	10803fcc 	andi	r2,r2,255
   27360:	100b883a 	mov	r5,r2
   27364:	010000f4 	movhi	r4,3
   27368:	2107d104 	addi	r4,r4,8004
   2736c:	002ea900 	call	2ea90 <printf>

	alt_u8* routine = generate_LOAD_routine(regs, type, routine_size);

	write_buf_mem(NMI_ROUTINE_ADDR, routine, 0, routine_size);

	for(int i = 0; i < routine_size; i++) {
   27370:	e0bf6417 	ldw	r2,-624(fp)
   27374:	10800044 	addi	r2,r2,1
   27378:	e0bf6415 	stw	r2,-624(fp)
   2737c:	e0ff6417 	ldw	r3,-624(fp)
   27380:	e0bf6917 	ldw	r2,-604(fp)
   27384:	18bff116 	blt	r3,r2,2734c <_gp+0xfffec30c>
		printf("0x%02x ", routine[i]);
	}

	// Add data of regs with flags to stack
	STACK_ADD stack_addition = generate_AF_stack_addition(regs, type, FALSE);
   27388:	e0fffb04 	addi	r3,fp,-20
   2738c:	d8000615 	stw	zero,24(sp)
   27390:	e0bf6f17 	ldw	r2,-580(fp)
   27394:	d8800515 	stw	r2,20(sp)
   27398:	e0bff617 	ldw	r2,-40(fp)
   2739c:	d8800015 	stw	r2,0(sp)
   273a0:	e0bff717 	ldw	r2,-36(fp)
   273a4:	d8800115 	stw	r2,4(sp)
   273a8:	e0bff817 	ldw	r2,-32(fp)
   273ac:	d8800215 	stw	r2,8(sp)
   273b0:	e0bff917 	ldw	r2,-28(fp)
   273b4:	d8800315 	stw	r2,12(sp)
   273b8:	e0bffa0b 	ldhu	r2,-24(fp)
   273bc:	d880040d 	sth	r2,16(sp)
   273c0:	e17ff317 	ldw	r5,-52(fp)
   273c4:	e1bff417 	ldw	r6,-48(fp)
   273c8:	e1fff517 	ldw	r7,-44(fp)
   273cc:	1809883a 	mov	r4,r3
   273d0:	0025d840 	call	25d84 <generate_AF_stack_addition>
	alt_u16 sp_value = reverse_16(stack_addition.SP); // making it big endian
   273d4:	e0bffb0b 	ldhu	r2,-20(fp)
   273d8:	10bfffcc 	andi	r2,r2,65535
   273dc:	1009883a 	mov	r4,r2
   273e0:	00259140 	call	25914 <reverse_16>
   273e4:	e0bf710d 	sth	r2,-572(fp)
	write_buf_mem(sp_value, stack_addition.data, 0, stack_addition.size);
   273e8:	e0bf710b 	ldhu	r2,-572(fp)
   273ec:	e0fffd17 	ldw	r3,-12(fp)
   273f0:	e13ffc17 	ldw	r4,-16(fp)
   273f4:	200f883a 	mov	r7,r4
   273f8:	000d883a 	mov	r6,zero
   273fc:	180b883a 	mov	r5,r3
   27400:	1009883a 	mov	r4,r2
   27404:	0029b480 	call	29b48 <write_buf_mem>
	for(int i = 0; i < stack_addition.size; i++) {
   27408:	e03f6515 	stw	zero,-620(fp)
   2740c:	00000c06 	br	27440 <load_SNA+0x3d4>
		printf("0x%02x ", stack_addition.data[i]);
   27410:	e0fffd17 	ldw	r3,-12(fp)
   27414:	e0bf6517 	ldw	r2,-620(fp)
   27418:	1885883a 	add	r2,r3,r2
   2741c:	10800003 	ldbu	r2,0(r2)
   27420:	10803fcc 	andi	r2,r2,255
   27424:	100b883a 	mov	r5,r2
   27428:	010000f4 	movhi	r4,3
   2742c:	2107d104 	addi	r4,r4,8004
   27430:	002ea900 	call	2ea90 <printf>

	// Add data of regs with flags to stack
	STACK_ADD stack_addition = generate_AF_stack_addition(regs, type, FALSE);
	alt_u16 sp_value = reverse_16(stack_addition.SP); // making it big endian
	write_buf_mem(sp_value, stack_addition.data, 0, stack_addition.size);
	for(int i = 0; i < stack_addition.size; i++) {
   27434:	e0bf6517 	ldw	r2,-620(fp)
   27438:	10800044 	addi	r2,r2,1
   2743c:	e0bf6515 	stw	r2,-620(fp)
   27440:	e0bffc17 	ldw	r2,-16(fp)
   27444:	e0ff6517 	ldw	r3,-620(fp)
   27448:	18bff136 	bltu	r3,r2,27410 <_gp+0xfffec3d0>
	write_io(addr, 0b001);
	usleep(100000);*/

	// Sets actual border color
	//write_mem(addr, regs.border & 0b111);
	printf("\r\nBORDER: %x\r\n", regs.border);
   2744c:	e0bffa43 	ldbu	r2,-23(fp)
   27450:	10803fcc 	andi	r2,r2,255
   27454:	100b883a 	mov	r5,r2
   27458:	010000f4 	movhi	r4,3
   2745c:	2107d304 	addi	r4,r4,8012
   27460:	002ea900 	call	2ea90 <printf>
	write_io(0xFFFE, regs.border & 0b111);
   27464:	e0bffa43 	ldbu	r2,-23(fp)
   27468:	10803fcc 	andi	r2,r2,255
   2746c:	108001cc 	andi	r2,r2,7
   27470:	100b883a 	mov	r5,r2
   27474:	013fff94 	movui	r4,65534
   27478:	0029cac0 	call	29cac <write_io>

	free(stack_addition.data);
   2747c:	e0bffd17 	ldw	r2,-12(fp)
   27480:	1009883a 	mov	r4,r2
   27484:	002e7bc0 	call	2e7bc <free>
	free(routine);
   27488:	e13f7017 	ldw	r4,-576(fp)
   2748c:	002e7bc0 	call	2e7bc <free>
	close_file(hFile);
   27490:	e13f6617 	ldw	r4,-616(fp)
   27494:	00208dc0 	call	208dc <close_file>

	//write_buf_mem(0x4000, data, data_offset, sizeof data);

	// stop DMA with NMI on
	DMA_stop_w_interrupt();
   27498:	0029f240 	call	29f24 <DMA_stop_w_interrupt>


	// Restore data overwritten by routine as soon as the snapshot's PC is detected in z80 address bus
	// This means the z80 is about to start executing the loaded code
	//int wait_res = wait_for_pc(regs.PC, 10000);
	int wait_res = wait_until_routine_ends(10000);
   2749c:	0109c404 	movi	r4,10000
   274a0:	0029e280 	call	29e28 <wait_until_routine_ends>
   274a4:	e0bf7215 	stw	r2,-568(fp)
	printf("wait res: %d\r\n", wait_res);
   274a8:	e17f7217 	ldw	r5,-568(fp)
   274ac:	010000f4 	movhi	r4,3
   274b0:	2107d704 	addi	r4,r4,8028
   274b4:	002ea900 	call	2ea90 <printf>
	if (!wait_res) {
   274b8:	e0bf7217 	ldw	r2,-568(fp)
   274bc:	10000e1e 	bne	r2,zero,274f8 <load_SNA+0x48c>
		DMA_request(10);
   274c0:	01000284 	movi	r4,10
   274c4:	002982c0 	call	2982c <DMA_request>

		write_buf_mem(NMI_ROUTINE_ADDR, data_bk, 0, data_bk_len);
   274c8:	e1ff6c17 	ldw	r7,-592(fp)
   274cc:	000d883a 	mov	r6,zero
   274d0:	e17f6d17 	ldw	r5,-588(fp)
   274d4:	01100004 	movi	r4,16384
   274d8:	0029b480 	call	29b48 <write_buf_mem>
		write_buf_mem(OLD_STACK_START_ADDR, bottom_data_bk, 0, OLD_STACK_SIZE);
   274dc:	01c00104 	movi	r7,4
   274e0:	000d883a 	mov	r6,zero
   274e4:	e17f6e17 	ldw	r5,-584(fp)
   274e8:	0115ff04 	movi	r4,22524
   274ec:	0029b480 	call	29b48 <write_buf_mem>

		DMA_stop(10);
   274f0:	01000284 	movi	r4,10
   274f4:	0029e880 	call	29e88 <DMA_stop>
	}
	free(data_bk);
   274f8:	e13f6d17 	ldw	r4,-588(fp)
   274fc:	002e7bc0 	call	2e7bc <free>

	printf("\r\nLOADED");
   27500:	010000f4 	movhi	r4,3
   27504:	2107db04 	addi	r4,r4,8044
   27508:	002ea900 	call	2ea90 <printf>

	return 0;
   2750c:	0005883a 	mov	r2,zero
}
   27510:	e037883a 	mov	sp,fp
   27514:	dfc00117 	ldw	ra,4(sp)
   27518:	df000017 	ldw	fp,0(sp)
   2751c:	dec00204 	addi	sp,sp,8
   27520:	f800283a 	ret

00027524 <save_SNA>:

int save_SNA(FAT_HANDLE hFat, char* filename) {
   27524:	deffe704 	addi	sp,sp,-100
   27528:	dfc01815 	stw	ra,96(sp)
   2752c:	df001715 	stw	fp,92(sp)
   27530:	ddc01615 	stw	r23,88(sp)
   27534:	dd801515 	stw	r22,84(sp)
   27538:	dd401415 	stw	r21,80(sp)
   2753c:	dd001315 	stw	r20,76(sp)
   27540:	dcc01215 	stw	r19,72(sp)
   27544:	dc801115 	stw	r18,68(sp)
   27548:	dc401015 	stw	r17,64(sp)
   2754c:	dc000f15 	stw	r16,60(sp)
   27550:	df001704 	addi	fp,sp,92
   27554:	e13ff515 	stw	r4,-44(fp)
   27558:	e17ff615 	stw	r5,-40(fp)
   2755c:	d805883a 	mov	r2,sp
   27560:	e0bff715 	stw	r2,-36(fp)
	printf("save dma req...\r\n");
   27564:	010000f4 	movhi	r4,3
   27568:	2107de04 	addi	r4,r4,8056
   2756c:	002eb800 	call	2eb80 <puts>
	int ret = DMA_request(10);
   27570:	01000284 	movi	r4,10
   27574:	002982c0 	call	2982c <DMA_request>
   27578:	e0bfed15 	stw	r2,-76(fp)

	if (ret != 0) {
   2757c:	e0bfed17 	ldw	r2,-76(fp)
   27580:	10000426 	beq	r2,zero,27594 <save_SNA+0x70>
		DMA_print_err(ret);
   27584:	e13fed17 	ldw	r4,-76(fp)
   27588:	0029fb40 	call	29fb4 <DMA_print_err>
		return -1;
   2758c:	00bfffc4 	movi	r2,-1
   27590:	00007206 	br	2775c <save_SNA+0x238>

	// do something with hFat, like create the file/add metadata
	// .SNA files are always the same size: 49,179 bytes

	// file write begin, 512 bytes at a time
	int remaining_bytes = 512;
   27594:	00808004 	movi	r2,512
   27598:	e0bfe915 	stw	r2,-92(fp)
	alt_u8 write_buf[remaining_bytes];
   2759c:	e0bfe917 	ldw	r2,-92(fp)
   275a0:	10ffffc4 	addi	r3,r2,-1
   275a4:	e0ffee15 	stw	r3,-72(fp)
   275a8:	1007883a 	mov	r3,r2
   275ac:	182d883a 	mov	r22,r3
   275b0:	002f883a 	mov	r23,zero
   275b4:	b006d77a 	srli	r3,r22,29
   275b8:	b82690fa 	slli	r19,r23,3
   275bc:	1ce6b03a 	or	r19,r3,r19
   275c0:	b02490fa 	slli	r18,r22,3
   275c4:	1007883a 	mov	r3,r2
   275c8:	1829883a 	mov	r20,r3
   275cc:	002b883a 	mov	r21,zero
   275d0:	a006d77a 	srli	r3,r20,29
   275d4:	a82290fa 	slli	r17,r21,3
   275d8:	1c62b03a 	or	r17,r3,r17
   275dc:	a02090fa 	slli	r16,r20,3
   275e0:	108000c4 	addi	r2,r2,3
   275e4:	1004d0ba 	srli	r2,r2,2
   275e8:	1085883a 	add	r2,r2,r2
   275ec:	1085883a 	add	r2,r2,r2
   275f0:	d8b7c83a 	sub	sp,sp,r2
   275f4:	d805883a 	mov	r2,sp
   275f8:	1005883a 	mov	r2,r2
   275fc:	e0bfef15 	stw	r2,-68(fp)
	alt_u16 addr = 0x4000;
   27600:	00900004 	movi	r2,16384
   27604:	e0bfea0d 	sth	r2,-88(fp)
	bool first_block = TRUE;
   27608:	00800044 	movi	r2,1
   2760c:	e0bfeb15 	stw	r2,-84(fp)

	int block_num = 2; // just to keep track of the block
   27610:	00800084 	movi	r2,2
   27614:	e0bfec15 	stw	r2,-80(fp)
	while (TRUE) {
		if (0xFFFF - addr < remaining_bytes) {
   27618:	e0bfea0b 	ldhu	r2,-88(fp)
   2761c:	00ffffd4 	movui	r3,65535
   27620:	1887c83a 	sub	r3,r3,r2
   27624:	e0bfe917 	ldw	r2,-92(fp)
   27628:	1880060e 	bge	r3,r2,27644 <save_SNA+0x120>
			remaining_bytes = 0xFFFF - addr;
   2762c:	e0bfea0b 	ldhu	r2,-88(fp)
   27630:	00ffffd4 	movui	r3,65535
   27634:	1885c83a 	sub	r2,r3,r2
   27638:	e0bfe915 	stw	r2,-92(fp)
			if (remaining_bytes == 0) break;
   2763c:	e0bfe917 	ldw	r2,-92(fp)
   27640:	10002a26 	beq	r2,zero,276ec <save_SNA+0x1c8>
		}

		if (first_block) {
   27644:	e0bfeb17 	ldw	r2,-84(fp)
   27648:	10001426 	beq	r2,zero,2769c <save_SNA+0x178>
			int data_len = remaining_bytes - SNA_OFFSET_DATA;
   2764c:	e0bfe917 	ldw	r2,-92(fp)
   27650:	10bff944 	addi	r2,r2,-27
   27654:	e0bff015 	stw	r2,-64(fp)
			read_buf_mem(addr, SNA_OFFSET_DATA, data_len, write_buf);
   27658:	e0bfea0b 	ldhu	r2,-88(fp)
   2765c:	e0ffef17 	ldw	r3,-68(fp)
   27660:	180f883a 	mov	r7,r3
   27664:	e1bff017 	ldw	r6,-64(fp)
   27668:	014006c4 	movi	r5,27
   2766c:	1009883a 	mov	r4,r2
   27670:	00299a00 	call	299a0 <read_buf_mem>
			addr += data_len;
   27674:	e0bff017 	ldw	r2,-64(fp)
   27678:	1007883a 	mov	r3,r2
   2767c:	e0bfea0b 	ldhu	r2,-88(fp)
   27680:	1885883a 	add	r2,r3,r2
   27684:	e0bfea0d 	sth	r2,-88(fp)
				if (i % 16 == 0) printf("\r\n");
				printf("0x%02x ", write_buf[i]);
			}
			printf("\r\n");
			*/
			printf("first block read...\r\n");
   27688:	010000f4 	movhi	r4,3
   2768c:	2107e304 	addi	r4,r4,8076
   27690:	002eb800 	call	2eb80 <puts>
			// write first block to file start
			// should also keep a backup here to recover from the assembly routine injected later

			first_block = FALSE;
   27694:	e03feb15 	stw	zero,-84(fp)
			continue;
   27698:	00001306 	br	276e8 <save_SNA+0x1c4>
		}

		read_buf_mem(addr, 0, remaining_bytes, write_buf);
   2769c:	e0bfea0b 	ldhu	r2,-88(fp)
   276a0:	e0ffef17 	ldw	r3,-68(fp)
   276a4:	180f883a 	mov	r7,r3
   276a8:	e1bfe917 	ldw	r6,-92(fp)
   276ac:	000b883a 	mov	r5,zero
   276b0:	1009883a 	mov	r4,r2
   276b4:	00299a00 	call	299a0 <read_buf_mem>
		addr += remaining_bytes;
   276b8:	e0bfe917 	ldw	r2,-92(fp)
   276bc:	1007883a 	mov	r3,r2
   276c0:	e0bfea0b 	ldhu	r2,-88(fp)
   276c4:	1885883a 	add	r2,r3,r2
   276c8:	e0bfea0d 	sth	r2,-88(fp)
				if (i % 16 == 0) printf("\r\n");
				printf("0x%02x ", write_buf[i]);
			}
			printf("\r\n");
		}*/
		printf("block %d read...\r\n", block_num++);
   276cc:	e0bfec17 	ldw	r2,-80(fp)
   276d0:	10c00044 	addi	r3,r2,1
   276d4:	e0ffec15 	stw	r3,-80(fp)
   276d8:	100b883a 	mov	r5,r2
   276dc:	010000f4 	movhi	r4,3
   276e0:	2107e904 	addi	r4,r4,8100
   276e4:	002ea900 	call	2ea90 <printf>
		// append this block to file
	}
   276e8:	003fcb06 	br	27618 <_gp+0xfffec5d8>

	int block_num = 2; // just to keep track of the block
	while (TRUE) {
		if (0xFFFF - addr < remaining_bytes) {
			remaining_bytes = 0xFFFF - addr;
			if (remaining_bytes == 0) break;
   276ec:	0001883a 	nop
		// append this block to file
	}


	// write routine to extract reg values
	enum file_type type = SNA;
   276f0:	00800044 	movi	r2,1
   276f4:	e0bff115 	stw	r2,-60(fp)
	int routine_size = get_SAVE_routine_size();
   276f8:	00259700 	call	25970 <get_SAVE_routine_size>
   276fc:	e0bff215 	stw	r2,-56(fp)
	alt_u8* routine = generate_SAVE_routine(type, routine_size);
   27700:	e17ff217 	ldw	r5,-56(fp)
   27704:	e13ff117 	ldw	r4,-60(fp)
   27708:	002675c0 	call	2675c <generate_SAVE_routine>
   2770c:	e0bff315 	stw	r2,-52(fp)

	write_buf_mem(0x4000, routine, 0, routine_size);
   27710:	e1fff217 	ldw	r7,-56(fp)
   27714:	000d883a 	mov	r6,zero
   27718:	e17ff317 	ldw	r5,-52(fp)
   2771c:	01100004 	movi	r4,16384
   27720:	0029b480 	call	29b48 <write_buf_mem>

	DMA_stop_w_interrupt();
   27724:	0029f240 	call	29f24 <DMA_stop_w_interrupt>

	// NOW WAIT FOR A COMMAND...
	enum per_if_type cmd_type = get_if_type();
   27728:	002a0b40 	call	2a0b4 <get_if_type>
   2772c:	e0bff415 	stw	r2,-48(fp)
	if (type != STATE || is_write()) {
   27730:	e0bff117 	ldw	r2,-60(fp)
   27734:	10800118 	cmpnei	r2,r2,4
   27738:	1000021e 	bne	r2,zero,27744 <save_SNA+0x220>
   2773c:	002a2800 	call	2a280 <is_write>
   27740:	10000526 	beq	r2,zero,27758 <save_SNA+0x234>
		// delete file?
		printf("Wrong command received...\r\n");
   27744:	010000f4 	movhi	r4,3
   27748:	2107ee04 	addi	r4,r4,8120
   2774c:	002eb800 	call	2eb80 <puts>
		return -1;
   27750:	00bfffc4 	movi	r2,-1
   27754:	00000106 	br	2775c <save_SNA+0x238>
	DMA_stop_w_interrupt();

	//// FIX VISUALS AFTER PC > 0x5800...
	*/

	return 0;
   27758:	0005883a 	mov	r2,zero
   2775c:	e6fff717 	ldw	sp,-36(fp)
}
   27760:	e6fff804 	addi	sp,fp,-32
   27764:	dfc00917 	ldw	ra,36(sp)
   27768:	df000817 	ldw	fp,32(sp)
   2776c:	ddc00717 	ldw	r23,28(sp)
   27770:	dd800617 	ldw	r22,24(sp)
   27774:	dd400517 	ldw	r21,20(sp)
   27778:	dd000417 	ldw	r20,16(sp)
   2777c:	dcc00317 	ldw	r19,12(sp)
   27780:	dc800217 	ldw	r18,8(sp)
   27784:	dc400117 	ldw	r17,4(sp)
   27788:	dc000017 	ldw	r16,0(sp)
   2778c:	dec00a04 	addi	sp,sp,40
   27790:	f800283a 	ret

00027794 <get_version_z80>:

/* *******************
 * .z80 format
 * *******************/
int get_version_z80(alt_u8* data) {
   27794:	defffe04 	addi	sp,sp,-8
   27798:	df000115 	stw	fp,4(sp)
   2779c:	df000104 	addi	fp,sp,4
   277a0:	e13fff15 	stw	r4,-4(fp)
	if (data[Z80_OFFSET_PC] != 0 || data[Z80_OFFSET_PC+1] != 0) return 1;
   277a4:	e0bfff17 	ldw	r2,-4(fp)
   277a8:	10800184 	addi	r2,r2,6
   277ac:	10800003 	ldbu	r2,0(r2)
   277b0:	10803fcc 	andi	r2,r2,255
   277b4:	1000051e 	bne	r2,zero,277cc <get_version_z80+0x38>
   277b8:	e0bfff17 	ldw	r2,-4(fp)
   277bc:	108001c4 	addi	r2,r2,7
   277c0:	10800003 	ldbu	r2,0(r2)
   277c4:	10803fcc 	andi	r2,r2,255
   277c8:	10000226 	beq	r2,zero,277d4 <get_version_z80+0x40>
   277cc:	00800044 	movi	r2,1
   277d0:	00001106 	br	27818 <get_version_z80+0x84>
	if (data[Z80_OFFSET_FLAGS1] == 255) return 1; // because of compatibility, 255 -> v1
   277d4:	e0bfff17 	ldw	r2,-4(fp)
   277d8:	10800304 	addi	r2,r2,12
   277dc:	10800003 	ldbu	r2,0(r2)
   277e0:	10803fcc 	andi	r2,r2,255
   277e4:	10803fd8 	cmpnei	r2,r2,255
   277e8:	1000021e 	bne	r2,zero,277f4 <get_version_z80+0x60>
   277ec:	00800044 	movi	r2,1
   277f0:	00000906 	br	27818 <get_version_z80+0x84>
	if (data[Z80_OFFSET_H2_LEN] == 23) return 2;
   277f4:	e0bfff17 	ldw	r2,-4(fp)
   277f8:	10800784 	addi	r2,r2,30
   277fc:	10800003 	ldbu	r2,0(r2)
   27800:	10803fcc 	andi	r2,r2,255
   27804:	108005d8 	cmpnei	r2,r2,23
   27808:	1000021e 	bne	r2,zero,27814 <get_version_z80+0x80>
   2780c:	00800084 	movi	r2,2
   27810:	00000106 	br	27818 <get_version_z80+0x84>
	return 3;
   27814:	008000c4 	movi	r2,3
}
   27818:	e037883a 	mov	sp,fp
   2781c:	df000017 	ldw	fp,0(sp)
   27820:	dec00104 	addi	sp,sp,4
   27824:	f800283a 	ret

00027828 <is_48k>:

bool is_48k(alt_u8* data, int version) {
   27828:	defffc04 	addi	sp,sp,-16
   2782c:	df000315 	stw	fp,12(sp)
   27830:	df000304 	addi	fp,sp,12
   27834:	e13ffe15 	stw	r4,-8(fp)
   27838:	e17fff15 	stw	r5,-4(fp)
	if (version == 1) return TRUE;
   2783c:	e0bfff17 	ldw	r2,-4(fp)
   27840:	10800058 	cmpnei	r2,r2,1
   27844:	1000021e 	bne	r2,zero,27850 <is_48k+0x28>
   27848:	00800044 	movi	r2,1
   2784c:	00000b06 	br	2787c <is_48k+0x54>

	alt_u8 hw_mode = data[Z80_OFFSET_HW];
   27850:	e0bffe17 	ldw	r2,-8(fp)
   27854:	10800883 	ldbu	r2,34(r2)
   27858:	e0bffd05 	stb	r2,-12(fp)
	if (hw_mode == HW_48K || hw_mode == HW_48K_IF1) return TRUE;
   2785c:	e0bffd03 	ldbu	r2,-12(fp)
   27860:	10000326 	beq	r2,zero,27870 <is_48k+0x48>
   27864:	e0bffd03 	ldbu	r2,-12(fp)
   27868:	10800058 	cmpnei	r2,r2,1
   2786c:	1000021e 	bne	r2,zero,27878 <is_48k+0x50>
   27870:	00800044 	movi	r2,1
   27874:	00000106 	br	2787c <is_48k+0x54>

	return FALSE;
   27878:	0005883a 	mov	r2,zero
}
   2787c:	e037883a 	mov	sp,fp
   27880:	df000017 	ldw	fp,0(sp)
   27884:	dec00104 	addi	sp,sp,4
   27888:	f800283a 	ret

0002788c <is_compressed>:

bool is_compressed(alt_u8* data) {
   2788c:	defffd04 	addi	sp,sp,-12
   27890:	df000215 	stw	fp,8(sp)
   27894:	df000204 	addi	fp,sp,8
   27898:	e13fff15 	stw	r4,-4(fp)
	alt_u8 flags1 = data[Z80_OFFSET_FLAGS1];
   2789c:	e0bfff17 	ldw	r2,-4(fp)
   278a0:	10800303 	ldbu	r2,12(r2)
   278a4:	e0bffe05 	stb	r2,-8(fp)
	if (MASK_FLAGS1_COMPRESSED(flags1)) {
   278a8:	e0bffe03 	ldbu	r2,-8(fp)
   278ac:	1080080c 	andi	r2,r2,32
   278b0:	10000226 	beq	r2,zero,278bc <is_compressed+0x30>
		return TRUE;
   278b4:	00800044 	movi	r2,1
   278b8:	00000106 	br	278c0 <is_compressed+0x34>
	}
	return FALSE;
   278bc:	0005883a 	mov	r2,zero
}
   278c0:	e037883a 	mov	sp,fp
   278c4:	df000017 	ldw	fp,0(sp)
   278c8:	dec00104 	addi	sp,sp,4
   278cc:	f800283a 	ret

000278d0 <get_addr_from_page>:

alt_u16 get_addr_from_page(alt_u8 page) {
   278d0:	defffe04 	addi	sp,sp,-8
   278d4:	df000115 	stw	fp,4(sp)
   278d8:	df000104 	addi	fp,sp,4
   278dc:	2005883a 	mov	r2,r4
   278e0:	e0bfff05 	stb	r2,-4(fp)
	switch(page) {
   278e4:	e0bfff03 	ldbu	r2,-4(fp)
   278e8:	10c00160 	cmpeqi	r3,r2,5
   278ec:	1800091e 	bne	r3,zero,27914 <get_addr_from_page+0x44>
   278f0:	10c00220 	cmpeqi	r3,r2,8
   278f4:	1800031e 	bne	r3,zero,27904 <get_addr_from_page+0x34>
   278f8:	10800120 	cmpeqi	r2,r2,4
   278fc:	1000031e 	bne	r2,zero,2790c <get_addr_from_page+0x3c>
   27900:	00000606 	br	2791c <get_addr_from_page+0x4c>
		case 8:
			return 0x4000;
   27904:	00900004 	movi	r2,16384
   27908:	00000506 	br	27920 <get_addr_from_page+0x50>
		case 4:
			return 0x8000;
   2790c:	00a00004 	movi	r2,-32768
   27910:	00000306 	br	27920 <get_addr_from_page+0x50>
		case 5:
			return 0xC000;
   27914:	00b00004 	movi	r2,-16384
   27918:	00000106 	br	27920 <get_addr_from_page+0x50>
		default:
			return -1;
   2791c:	00bfffc4 	movi	r2,-1
	}
}
   27920:	e037883a 	mov	sp,fp
   27924:	df000017 	ldw	fp,0(sp)
   27928:	dec00104 	addi	sp,sp,4
   2792c:	f800283a 	ret

00027930 <get_data_offset>:


alt_u8 get_data_offset(alt_u8* data, int version) {
   27930:	defffc04 	addi	sp,sp,-16
   27934:	df000315 	stw	fp,12(sp)
   27938:	df000304 	addi	fp,sp,12
   2793c:	e13ffe15 	stw	r4,-8(fp)
   27940:	e17fff15 	stw	r5,-4(fp)
	if (version == 1) return Z80_OFFSET_DATA_H1;
   27944:	e0bfff17 	ldw	r2,-4(fp)
   27948:	10800058 	cmpnei	r2,r2,1
   2794c:	1000021e 	bne	r2,zero,27958 <get_data_offset+0x28>
   27950:	00800784 	movi	r2,30
   27954:	00001806 	br	279b8 <get_data_offset+0x88>
	if (version == 2) return Z80_OFFSET_DATA_H2_v2;
   27958:	e0bfff17 	ldw	r2,-4(fp)
   2795c:	10800098 	cmpnei	r2,r2,2
   27960:	1000021e 	bne	r2,zero,2796c <get_data_offset+0x3c>
   27964:	00800dc4 	movi	r2,55
   27968:	00001306 	br	279b8 <get_data_offset+0x88>
	if (version == 3) {
   2796c:	e0bfff17 	ldw	r2,-4(fp)
   27970:	108000d8 	cmpnei	r2,r2,3
   27974:	10000f1e 	bne	r2,zero,279b4 <get_data_offset+0x84>
		int h2_len = data[Z80_OFFSET_H2_LEN];
   27978:	e0bffe17 	ldw	r2,-8(fp)
   2797c:	10800784 	addi	r2,r2,30
   27980:	10800003 	ldbu	r2,0(r2)
   27984:	10803fcc 	andi	r2,r2,255
   27988:	e0bffd15 	stw	r2,-12(fp)
		if (h2_len == 54) {
   2798c:	e0bffd17 	ldw	r2,-12(fp)
   27990:	10800d98 	cmpnei	r2,r2,54
   27994:	1000021e 	bne	r2,zero,279a0 <get_data_offset+0x70>
			return Z80_OFFSET_DATA_H2_v3;
   27998:	00801584 	movi	r2,86
   2799c:	00000606 	br	279b8 <get_data_offset+0x88>
		}
		if (h2_len == 55) {
   279a0:	e0bffd17 	ldw	r2,-12(fp)
   279a4:	10800dd8 	cmpnei	r2,r2,55
   279a8:	1000021e 	bne	r2,zero,279b4 <get_data_offset+0x84>
			return Z80_OFFSET_DATA_H2_v3 + 1;
   279ac:	008015c4 	movi	r2,87
   279b0:	00000106 	br	279b8 <get_data_offset+0x88>
		}
	}
	return -1;
   279b4:	00bfffc4 	movi	r2,-1
}
   279b8:	e037883a 	mov	sp,fp
   279bc:	df000017 	ldw	fp,0(sp)
   279c0:	dec00104 	addi	sp,sp,4
   279c4:	f800283a 	ret

000279c8 <generate_regs_z80>:

REGS generate_regs_z80(alt_u8* data, int version) {
   279c8:	defff204 	addi	sp,sp,-56
   279cc:	dfc00d15 	stw	ra,52(sp)
   279d0:	df000c15 	stw	fp,48(sp)
   279d4:	df000c04 	addi	fp,sp,48
   279d8:	e13ffd15 	stw	r4,-12(fp)
   279dc:	e17ffe15 	stw	r5,-8(fp)
   279e0:	e1bfff15 	stw	r6,-4(fp)
	alt_u16 pc;
	if (version == 1) {
   279e4:	e0bfff17 	ldw	r2,-4(fp)
   279e8:	10800058 	cmpnei	r2,r2,1
   279ec:	1000051e 	bne	r2,zero,27a04 <generate_regs_z80+0x3c>
		pc = conv_data_8_16(data, Z80_OFFSET_PC);
   279f0:	01400184 	movi	r5,6
   279f4:	e13ffe17 	ldw	r4,-8(fp)
   279f8:	00258b80 	call	258b8 <conv_data_8_16>
   279fc:	e0bff40d 	sth	r2,-48(fp)
   27a00:	00000406 	br	27a14 <generate_regs_z80+0x4c>
	} else {
		pc = conv_data_8_16(data, Z80_OFFSET_PC_H2);
   27a04:	01400804 	movi	r5,32
   27a08:	e13ffe17 	ldw	r4,-8(fp)
   27a0c:	00258b80 	call	258b8 <conv_data_8_16>
   27a10:	e0bff40d 	sth	r2,-48(fp)
	}

	alt_u8 flags1 = data[Z80_OFFSET_FLAGS1];
   27a14:	e0bffe17 	ldw	r2,-8(fp)
   27a18:	10800303 	ldbu	r2,12(r2)
   27a1c:	e0bff485 	stb	r2,-46(fp)
	alt_u8 flags2 = data[Z80_OFFSET_FLAGS2];
   27a20:	e0bffe17 	ldw	r2,-8(fp)
   27a24:	10800743 	ldbu	r2,29(r2)
   27a28:	e0bff4c5 	stb	r2,-45(fp)

	REGS regs = {
		.R = (data[Z80_OFFSET_R] & 0x7F) | ((alt_u8)(MASK_FLAGS1_R7(flags1)) << 7),
   27a2c:	e0bffe17 	ldw	r2,-8(fp)
   27a30:	108002c4 	addi	r2,r2,11
   27a34:	10800003 	ldbu	r2,0(r2)
	}

	alt_u8 flags1 = data[Z80_OFFSET_FLAGS1];
	alt_u8 flags2 = data[Z80_OFFSET_FLAGS2];

	REGS regs = {
   27a38:	10801fcc 	andi	r2,r2,127
   27a3c:	1007883a 	mov	r3,r2
		.R = (data[Z80_OFFSET_R] & 0x7F) | ((alt_u8)(MASK_FLAGS1_R7(flags1)) << 7),
   27a40:	e0bff483 	ldbu	r2,-46(fp)
   27a44:	100491fa 	slli	r2,r2,7
	}

	alt_u8 flags1 = data[Z80_OFFSET_FLAGS1];
	alt_u8 flags2 = data[Z80_OFFSET_FLAGS2];

	REGS regs = {
   27a48:	1884b03a 	or	r2,r3,r2
   27a4c:	e0bff505 	stb	r2,-44(fp)
   27a50:	e0bffe17 	ldw	r2,-8(fp)
   27a54:	10800283 	ldbu	r2,10(r2)
   27a58:	e0bff545 	stb	r2,-43(fp)
   27a5c:	e0bffe17 	ldw	r2,-8(fp)
   27a60:	10800543 	ldbu	r2,21(r2)
   27a64:	e0bff585 	stb	r2,-42(fp)
   27a68:	e0bffe17 	ldw	r2,-8(fp)
   27a6c:	10800583 	ldbu	r2,22(r2)
   27a70:	e0bff5c5 	stb	r2,-41(fp)
   27a74:	e0bffe17 	ldw	r2,-8(fp)
   27a78:	10800503 	ldbu	r2,20(r2)
   27a7c:	e0bff605 	stb	r2,-40(fp)
   27a80:	e0bffe17 	ldw	r2,-8(fp)
   27a84:	108004c3 	ldbu	r2,19(r2)
   27a88:	e0bff645 	stb	r2,-39(fp)
   27a8c:	e0bffe17 	ldw	r2,-8(fp)
   27a90:	10800483 	ldbu	r2,18(r2)
   27a94:	e0bff685 	stb	r2,-38(fp)
   27a98:	e0bffe17 	ldw	r2,-8(fp)
   27a9c:	10800443 	ldbu	r2,17(r2)
   27aa0:	e0bff6c5 	stb	r2,-37(fp)
   27aa4:	e0bffe17 	ldw	r2,-8(fp)
   27aa8:	10800403 	ldbu	r2,16(r2)
   27aac:	e0bff705 	stb	r2,-36(fp)
   27ab0:	e0bffe17 	ldw	r2,-8(fp)
   27ab4:	108003c3 	ldbu	r2,15(r2)
   27ab8:	e0bff745 	stb	r2,-35(fp)
		.Dl = data[Z80_OFFSET_D_AUX],
		.El = data[Z80_OFFSET_E_AUX],
		.Bl = data[Z80_OFFSET_B_AUX],
		.Cl = data[Z80_OFFSET_C_AUX],

		.A = data[Z80_OFFSET_A],
   27abc:	e0bffe17 	ldw	r2,-8(fp)
   27ac0:	10800003 	ldbu	r2,0(r2)
	}

	alt_u8 flags1 = data[Z80_OFFSET_FLAGS1];
	alt_u8 flags2 = data[Z80_OFFSET_FLAGS2];

	REGS regs = {
   27ac4:	e0bff785 	stb	r2,-34(fp)
   27ac8:	e0bffe17 	ldw	r2,-8(fp)
   27acc:	10800043 	ldbu	r2,1(r2)
   27ad0:	e0bff7c5 	stb	r2,-33(fp)
   27ad4:	e0bffe17 	ldw	r2,-8(fp)
   27ad8:	10800143 	ldbu	r2,5(r2)
   27adc:	e0bff805 	stb	r2,-32(fp)
   27ae0:	e0bffe17 	ldw	r2,-8(fp)
   27ae4:	10800103 	ldbu	r2,4(r2)
   27ae8:	e0bff845 	stb	r2,-31(fp)
   27aec:	e0bffe17 	ldw	r2,-8(fp)
   27af0:	10800383 	ldbu	r2,14(r2)
   27af4:	e0bff885 	stb	r2,-30(fp)
   27af8:	e0bffe17 	ldw	r2,-8(fp)
   27afc:	10800343 	ldbu	r2,13(r2)
   27b00:	e0bff8c5 	stb	r2,-29(fp)
   27b04:	e0bffe17 	ldw	r2,-8(fp)
   27b08:	108000c3 	ldbu	r2,3(r2)
   27b0c:	e0bff905 	stb	r2,-28(fp)
   27b10:	e0bffe17 	ldw	r2,-8(fp)
   27b14:	10800083 	ldbu	r2,2(r2)
   27b18:	e0bff945 	stb	r2,-27(fp)
		.E = data[Z80_OFFSET_E],
		.B = data[Z80_OFFSET_B],
		.C = data[Z80_OFFSET_C],

		//.IY = ((data[SNA_OFFSET_IY] << 8) & 0xFF00) | data[SNA_OFFSET_IY+1],
		.IY = conv_data_8_16(data, Z80_OFFSET_IY),
   27b1c:	014005c4 	movi	r5,23
   27b20:	e13ffe17 	ldw	r4,-8(fp)
   27b24:	00258b80 	call	258b8 <conv_data_8_16>
	}

	alt_u8 flags1 = data[Z80_OFFSET_FLAGS1];
	alt_u8 flags2 = data[Z80_OFFSET_FLAGS2];

	REGS regs = {
   27b28:	e0bff98d 	sth	r2,-26(fp)
		.B = data[Z80_OFFSET_B],
		.C = data[Z80_OFFSET_C],

		//.IY = ((data[SNA_OFFSET_IY] << 8) & 0xFF00) | data[SNA_OFFSET_IY+1],
		.IY = conv_data_8_16(data, Z80_OFFSET_IY),
		.IX = conv_data_8_16(data, Z80_OFFSET_IX),
   27b2c:	01400644 	movi	r5,25
   27b30:	e13ffe17 	ldw	r4,-8(fp)
   27b34:	00258b80 	call	258b8 <conv_data_8_16>
	}

	alt_u8 flags1 = data[Z80_OFFSET_FLAGS1];
	alt_u8 flags2 = data[Z80_OFFSET_FLAGS2];

	REGS regs = {
   27b38:	e0bffa0d 	sth	r2,-24(fp)

		//.IY = ((data[SNA_OFFSET_IY] << 8) & 0xFF00) | data[SNA_OFFSET_IY+1],
		.IY = conv_data_8_16(data, Z80_OFFSET_IY),
		.IX = conv_data_8_16(data, Z80_OFFSET_IX),

		.SP = conv_data_8_16(data, Z80_OFFSET_SP),
   27b3c:	01400204 	movi	r5,8
   27b40:	e13ffe17 	ldw	r4,-8(fp)
   27b44:	00258b80 	call	258b8 <conv_data_8_16>
	}

	alt_u8 flags1 = data[Z80_OFFSET_FLAGS1];
	alt_u8 flags2 = data[Z80_OFFSET_FLAGS2];

	REGS regs = {
   27b48:	e0bffa8d 	sth	r2,-22(fp)
   27b4c:	e0bff40b 	ldhu	r2,-48(fp)
   27b50:	e0bffb0d 	sth	r2,-20(fp)
   27b54:	e0bff4c3 	ldbu	r2,-45(fp)
   27b58:	108000cc 	andi	r2,r2,3
   27b5c:	e0bffb85 	stb	r2,-18(fp)
   27b60:	e0bffe17 	ldw	r2,-8(fp)
   27b64:	108006c3 	ldbu	r2,27(r2)
   27b68:	e0bffbc5 	stb	r2,-17(fp)
   27b6c:	e0bffe17 	ldw	r2,-8(fp)
   27b70:	10800703 	ldbu	r2,28(r2)
   27b74:	e0bffc05 	stb	r2,-16(fp)
		.PC = pc,

		.IM = MASK_FLAGS2_IM(flags2),
		.IFF1 = data[Z80_OFFSET_INT_FF],
		.IFF2 = data[Z80_OFFSET_IFF2],
		.border = MASK_FLAGS1_BORDER(flags1) >> 1
   27b78:	e0bff483 	ldbu	r2,-46(fp)
   27b7c:	1080038c 	andi	r2,r2,14
   27b80:	1005d0ba 	srai	r2,r2,2
	}

	alt_u8 flags1 = data[Z80_OFFSET_FLAGS1];
	alt_u8 flags2 = data[Z80_OFFSET_FLAGS2];

	REGS regs = {
   27b84:	e0bffc45 	stb	r2,-15(fp)
		.IFF2 = data[Z80_OFFSET_IFF2],
		.border = MASK_FLAGS1_BORDER(flags1) >> 1

	};

	return regs;
   27b88:	e0bffd17 	ldw	r2,-12(fp)
   27b8c:	1009883a 	mov	r4,r2
   27b90:	e0bff504 	addi	r2,fp,-44
   27b94:	00c00784 	movi	r3,30
   27b98:	180d883a 	mov	r6,r3
   27b9c:	100b883a 	mov	r5,r2
   27ba0:	002e7d00 	call	2e7d0 <memcpy>
}
   27ba4:	e0bffd17 	ldw	r2,-12(fp)
   27ba8:	e037883a 	mov	sp,fp
   27bac:	dfc00117 	ldw	ra,4(sp)
   27bb0:	df000017 	ldw	fp,0(sp)
   27bb4:	dec00204 	addi	sp,sp,8
   27bb8:	f800283a 	ret

00027bbc <load_compressed_data_block_z80>:
// For keeping track of run-length compression between blocks
enum comp_state state = NONE;
alt_u8 xx; // in case of state = XX, the state of this value needs to be saved
bool zero_detected = FALSE; // for 0 before ED ED, in case it isn't the end tag

alt_u16 load_compressed_data_block_z80(alt_u16 addr, alt_u8* buffer, int data_offset, int nReadSize) {
   27bbc:	defff604 	addi	sp,sp,-40
   27bc0:	dfc00915 	stw	ra,36(sp)
   27bc4:	df000815 	stw	fp,32(sp)
   27bc8:	df000804 	addi	fp,sp,32
   27bcc:	2005883a 	mov	r2,r4
   27bd0:	e17ffd15 	stw	r5,-12(fp)
   27bd4:	e1bffe15 	stw	r6,-8(fp)
   27bd8:	e1ffff15 	stw	r7,-4(fp)
   27bdc:	e0bffc0d 	sth	r2,-16(fp)
	//printf("LOADING COMPRESSED DATA BLOCK\r\n");
	alt_u16 addr_return = addr;
   27be0:	e0bffc0b 	ldhu	r2,-16(fp)
   27be4:	e0bff80d 	sth	r2,-32(fp)

	//printf("READ SIZE: %d\r\n", nReadSize);

	// Four-byte code: ED ED xx yy: (byte yy repeats xx times)
	for (int i = data_offset; i < data_offset + nReadSize; i++) {
   27be8:	e0bffe17 	ldw	r2,-8(fp)
   27bec:	e0bff915 	stw	r2,-28(fp)
   27bf0:	00008f06 	br	27e30 <load_compressed_data_block_z80+0x274>
		//printf("\r\n\t|| current i = %d ||", i);
		alt_u8 data_byte = buffer[i];
   27bf4:	e0bff917 	ldw	r2,-28(fp)
   27bf8:	e0fffd17 	ldw	r3,-12(fp)
   27bfc:	1885883a 	add	r2,r3,r2
   27c00:	10800003 	ldbu	r2,0(r2)
   27c04:	e0bffb05 	stb	r2,-20(fp)
		switch (state) {
   27c08:	d0a0cd17 	ldw	r2,-31948(gp)
   27c0c:	10c00168 	cmpgeui	r3,r2,5
   27c10:	1800841e 	bne	r3,zero,27e24 <load_compressed_data_block_z80+0x268>
   27c14:	100690ba 	slli	r3,r2,2
   27c18:	008000b4 	movhi	r2,2
   27c1c:	109f0b04 	addi	r2,r2,31788
   27c20:	1885883a 	add	r2,r3,r2
   27c24:	10800017 	ldw	r2,0(r2)
   27c28:	1000683a 	jmp	r2
   27c2c:	00027c40 	call	27c4 <__alt_mem_onchip_memory-0x1d83c>
   27c30:	00027c98 	cmpnei	zero,zero,2546
   27c34:	00027cf8 	rdprs	zero,zero,2547
   27c38:	00027d7c 	xorhi	zero,zero,2549
   27c3c:	00027dd8 	cmpnei	zero,zero,2551
			case NONE:
				//printf("state 0:");

				// "ED" ED xx yy
				if (data_byte == 0xED) {
   27c40:	e0bffb03 	ldbu	r2,-20(fp)
   27c44:	10803b58 	cmpnei	r2,r2,237
   27c48:	1000031e 	bne	r2,zero,27c58 <load_compressed_data_block_z80+0x9c>
					state = ED1;
   27c4c:	00800084 	movi	r2,2
   27c50:	d0a0cd15 	stw	r2,-31948(gp)
				// Normal data
				} else {
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, data_byte);
					write_mem(addr_return++, data_byte);
				}
				break;
   27c54:	00007306 	br	27e24 <load_compressed_data_block_z80+0x268>
					state = ED1;

				// For end marker detection ("00" ED ED 00)
				// If this ends up not being part of the end marker
				// the 0 must be written
				} else if (data_byte == 0) {
   27c58:	e0bffb03 	ldbu	r2,-20(fp)
   27c5c:	1000051e 	bne	r2,zero,27c74 <load_compressed_data_block_z80+0xb8>
					zero_detected = TRUE;
   27c60:	00800044 	movi	r2,1
   27c64:	d0a0ce15 	stw	r2,-31944(gp)
					state = ZERO;
   27c68:	00800044 	movi	r2,1
   27c6c:	d0a0cd15 	stw	r2,-31948(gp)
				// Normal data
				} else {
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, data_byte);
					write_mem(addr_return++, data_byte);
				}
				break;
   27c70:	00006c06 	br	27e24 <load_compressed_data_block_z80+0x268>
					state = ZERO;

				// Normal data
				} else {
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, data_byte);
					write_mem(addr_return++, data_byte);
   27c74:	e0bff80b 	ldhu	r2,-32(fp)
   27c78:	10c00044 	addi	r3,r2,1
   27c7c:	e0fff80d 	sth	r3,-32(fp)
   27c80:	10bfffcc 	andi	r2,r2,65535
   27c84:	e0fffb03 	ldbu	r3,-20(fp)
   27c88:	180b883a 	mov	r5,r3
   27c8c:	1009883a 	mov	r4,r2
   27c90:	0029a380 	call	29a38 <write_mem>
				}
				break;
   27c94:	00006306 	br	27e24 <load_compressed_data_block_z80+0x268>

			case ZERO:
				// Might be end tag
				if (data_byte == 0xED) {
   27c98:	e0bffb03 	ldbu	r2,-20(fp)
   27c9c:	10803b58 	cmpnei	r2,r2,237
   27ca0:	1000031e 	bne	r2,zero,27cb0 <load_compressed_data_block_z80+0xf4>
					state = ED1;
   27ca4:	00800084 	movi	r2,2
   27ca8:	d0a0cd15 	stw	r2,-31948(gp)
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, data_byte);
					write_mem(addr_return++, data_byte);
					zero_detected = FALSE;
					state = NONE;
				}
				break;
   27cac:	00005d06 	br	27e24 <load_compressed_data_block_z80+0x268>
				if (data_byte == 0xED) {
					state = ED1;
				} else {
					// false alarm, that 0 was data
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, 0);
					write_mem(addr_return++, 0);
   27cb0:	e0bff80b 	ldhu	r2,-32(fp)
   27cb4:	10c00044 	addi	r3,r2,1
   27cb8:	e0fff80d 	sth	r3,-32(fp)
   27cbc:	10bfffcc 	andi	r2,r2,65535
   27cc0:	000b883a 	mov	r5,zero
   27cc4:	1009883a 	mov	r4,r2
   27cc8:	0029a380 	call	29a38 <write_mem>
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, data_byte);
					write_mem(addr_return++, data_byte);
   27ccc:	e0bff80b 	ldhu	r2,-32(fp)
   27cd0:	10c00044 	addi	r3,r2,1
   27cd4:	e0fff80d 	sth	r3,-32(fp)
   27cd8:	10bfffcc 	andi	r2,r2,65535
   27cdc:	e0fffb03 	ldbu	r3,-20(fp)
   27ce0:	180b883a 	mov	r5,r3
   27ce4:	1009883a 	mov	r4,r2
   27ce8:	0029a380 	call	29a38 <write_mem>
					zero_detected = FALSE;
   27cec:	d020ce15 	stw	zero,-31944(gp)
					state = NONE;
   27cf0:	d020cd15 	stw	zero,-31948(gp)
				}
				break;
   27cf4:	00004b06 	br	27e24 <load_compressed_data_block_z80+0x268>
			case ED1:
				//printf("\r\nstate ED1\r\n");

				// ED "ED" xx yy
				if (data_byte == 0xED) {
   27cf8:	e0bffb03 	ldbu	r2,-20(fp)
   27cfc:	10803b58 	cmpnei	r2,r2,237
   27d00:	1000031e 	bne	r2,zero,27d10 <load_compressed_data_block_z80+0x154>
					state = ED2;
   27d04:	008000c4 	movi	r2,3
   27d08:	d0a0cd15 	stw	r2,-31948(gp)
					write_mem(addr_return++, 0xED);
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, data_byte);
					write_mem(addr_return++, data_byte);
					state = NONE;
				}
				break;
   27d0c:	00004506 	br	27e24 <load_compressed_data_block_z80+0x268>

				// Turns out it was just 1 0xED
				} else {

					// If a 0 was before the ED, it was just data
					if (zero_detected) {
   27d10:	d0a0ce17 	ldw	r2,-31944(gp)
   27d14:	10000826 	beq	r2,zero,27d38 <load_compressed_data_block_z80+0x17c>
						//printf("(%x): 0x%x; ", addr_return - 0x5B00, 0);
						write_mem(addr_return++, 0);
   27d18:	e0bff80b 	ldhu	r2,-32(fp)
   27d1c:	10c00044 	addi	r3,r2,1
   27d20:	e0fff80d 	sth	r3,-32(fp)
   27d24:	10bfffcc 	andi	r2,r2,65535
   27d28:	000b883a 	mov	r5,zero
   27d2c:	1009883a 	mov	r4,r2
   27d30:	0029a380 	call	29a38 <write_mem>
						zero_detected = FALSE;
   27d34:	d020ce15 	stw	zero,-31944(gp)
					}
					// If only one ED happened after all, then write that ED and the current byte
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, 0xED);
					write_mem(addr_return++, 0xED);
   27d38:	e0bff80b 	ldhu	r2,-32(fp)
   27d3c:	10c00044 	addi	r3,r2,1
   27d40:	e0fff80d 	sth	r3,-32(fp)
   27d44:	10bfffcc 	andi	r2,r2,65535
   27d48:	01403b44 	movi	r5,237
   27d4c:	1009883a 	mov	r4,r2
   27d50:	0029a380 	call	29a38 <write_mem>
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, data_byte);
					write_mem(addr_return++, data_byte);
   27d54:	e0bff80b 	ldhu	r2,-32(fp)
   27d58:	10c00044 	addi	r3,r2,1
   27d5c:	e0fff80d 	sth	r3,-32(fp)
   27d60:	10bfffcc 	andi	r2,r2,65535
   27d64:	e0fffb03 	ldbu	r3,-20(fp)
   27d68:	180b883a 	mov	r5,r3
   27d6c:	1009883a 	mov	r4,r2
   27d70:	0029a380 	call	29a38 <write_mem>
					state = NONE;
   27d74:	d020cd15 	stw	zero,-31948(gp)
				}
				break;
   27d78:	00002a06 	br	27e24 <load_compressed_data_block_z80+0x268>
			case ED2:
				//printf("\r\nstate ED2\r\n");

				// ED ED "xx" yy
				xx = data_byte;
   27d7c:	e0bffb03 	ldbu	r2,-20(fp)
   27d80:	d0a0cf05 	stb	r2,-31940(gp)

				// if xx = 0, then ED ED 00 => 00 ED ED 00
				if (xx == 0) {
   27d84:	d0a0cf03 	ldbu	r2,-31940(gp)
   27d88:	10803fcc 	andi	r2,r2,255
   27d8c:	1000051e 	bne	r2,zero,27da4 <load_compressed_data_block_z80+0x1e8>
					printf("\r\nEOF tag\r\n");
   27d90:	010000f4 	movhi	r4,3
   27d94:	2107f504 	addi	r4,r4,8148
   27d98:	002eb800 	call	2eb80 <puts>
					state = NONE; // Should it be this?
   27d9c:	d020cd15 	stw	zero,-31948(gp)
					break;
   27da0:	00002006 	br	27e24 <load_compressed_data_block_z80+0x268>
				}

				// if 00 ED ED xx yy, then 00 should have been written
				if (zero_detected) {
   27da4:	d0a0ce17 	ldw	r2,-31944(gp)
   27da8:	10000826 	beq	r2,zero,27dcc <load_compressed_data_block_z80+0x210>
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, 0);
					write_mem(addr_return++, 0);
   27dac:	e0bff80b 	ldhu	r2,-32(fp)
   27db0:	10c00044 	addi	r3,r2,1
   27db4:	e0fff80d 	sth	r3,-32(fp)
   27db8:	10bfffcc 	andi	r2,r2,65535
   27dbc:	000b883a 	mov	r5,zero
   27dc0:	1009883a 	mov	r4,r2
   27dc4:	0029a380 	call	29a38 <write_mem>
					zero_detected = FALSE;
   27dc8:	d020ce15 	stw	zero,-31944(gp)
				}

				state = XX;
   27dcc:	00800104 	movi	r2,4
   27dd0:	d0a0cd15 	stw	r2,-31948(gp)
				break;
   27dd4:	00001306 	br	27e24 <load_compressed_data_block_z80+0x268>
			case XX:

				// ED ED xx "yy"
				// yy = data_byte
				// so write data_byte xx amount of times
				for (int j = 0; j < xx; j++) {
   27dd8:	e03ffa15 	stw	zero,-24(fp)
   27ddc:	00000b06 	br	27e0c <load_compressed_data_block_z80+0x250>
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, data_byte);
					write_mem(addr_return++, data_byte);
   27de0:	e0bff80b 	ldhu	r2,-32(fp)
   27de4:	10c00044 	addi	r3,r2,1
   27de8:	e0fff80d 	sth	r3,-32(fp)
   27dec:	10bfffcc 	andi	r2,r2,65535
   27df0:	e0fffb03 	ldbu	r3,-20(fp)
   27df4:	180b883a 	mov	r5,r3
   27df8:	1009883a 	mov	r4,r2
   27dfc:	0029a380 	call	29a38 <write_mem>
			case XX:

				// ED ED xx "yy"
				// yy = data_byte
				// so write data_byte xx amount of times
				for (int j = 0; j < xx; j++) {
   27e00:	e0bffa17 	ldw	r2,-24(fp)
   27e04:	10800044 	addi	r2,r2,1
   27e08:	e0bffa15 	stw	r2,-24(fp)
   27e0c:	d0a0cf03 	ldbu	r2,-31940(gp)
   27e10:	10803fcc 	andi	r2,r2,255
   27e14:	e0fffa17 	ldw	r3,-24(fp)
   27e18:	18bff116 	blt	r3,r2,27de0 <_gp+0xfffecda0>
					//printf("(%x): 0x%x; ", addr_return - 0x5B00, data_byte);
					write_mem(addr_return++, data_byte);

				}
				state = NONE;
   27e1c:	d020cd15 	stw	zero,-31948(gp)
				break;
   27e20:	0001883a 	nop
	alt_u16 addr_return = addr;

	//printf("READ SIZE: %d\r\n", nReadSize);

	// Four-byte code: ED ED xx yy: (byte yy repeats xx times)
	for (int i = data_offset; i < data_offset + nReadSize; i++) {
   27e24:	e0bff917 	ldw	r2,-28(fp)
   27e28:	10800044 	addi	r2,r2,1
   27e2c:	e0bff915 	stw	r2,-28(fp)
   27e30:	e0fffe17 	ldw	r3,-8(fp)
   27e34:	e0bfff17 	ldw	r2,-4(fp)
   27e38:	1885883a 	add	r2,r3,r2
   27e3c:	e0fff917 	ldw	r3,-28(fp)
   27e40:	18bf6c16 	blt	r3,r2,27bf4 <_gp+0xfffecbb4>
				state = NONE;
				break;
		}
	}

	return addr_return;
   27e44:	e0bff80b 	ldhu	r2,-32(fp)
}
   27e48:	e037883a 	mov	sp,fp
   27e4c:	dfc00117 	ldw	ra,4(sp)
   27e50:	df000017 	ldw	fp,0(sp)
   27e54:	dec00204 	addi	sp,sp,8
   27e58:	f800283a 	ret

00027e5c <load_z80>:

int load_z80(FAT_HANDLE hFat, char* filename) {
   27e5c:	deff8c04 	addi	sp,sp,-464
   27e60:	dfc07315 	stw	ra,460(sp)
   27e64:	df007215 	stw	fp,456(sp)
   27e68:	df007204 	addi	fp,sp,456
   27e6c:	e13ffe15 	stw	r4,-8(fp)
   27e70:	e17fff15 	stw	r5,-4(fp)
	FAT_FILE_HANDLE hFile = init_file(hFat, filename);
   27e74:	e17fff17 	ldw	r5,-4(fp)
   27e78:	e13ffe17 	ldw	r4,-8(fp)
   27e7c:	00208a40 	call	208a4 <init_file>
   27e80:	e0bfa515 	stw	r2,-364(fp)

	if (!hFile) {
   27e84:	e0bfa517 	ldw	r2,-364(fp)
   27e88:	1000051e 	bne	r2,zero,27ea0 <load_z80+0x44>
		printf("FILE NOT FOUND\r\n");
   27e8c:	010000f4 	movhi	r4,3
   27e90:	2107f804 	addi	r4,r4,8160
   27e94:	002eb800 	call	2eb80 <puts>
		return -1;
   27e98:	00bfffc4 	movi	r2,-1
   27e9c:	00026b06 	br	2884c <load_z80+0x9f0>
	}

	int ret = DMA_request(10);
   27ea0:	01000284 	movi	r4,10
   27ea4:	002982c0 	call	2982c <DMA_request>
   27ea8:	e0bfa615 	stw	r2,-360(fp)

	if (ret != 0) {
   27eac:	e0bfa617 	ldw	r2,-360(fp)
   27eb0:	10000626 	beq	r2,zero,27ecc <load_z80+0x70>
		DMA_print_err(ret);
   27eb4:	e13fa617 	ldw	r4,-360(fp)
   27eb8:	0029fb40 	call	29fb4 <DMA_print_err>
		close_file(hFile);
   27ebc:	e13fa517 	ldw	r4,-364(fp)
   27ec0:	00208dc0 	call	208dc <close_file>
		return -1;
   27ec4:	00bfffc4 	movi	r2,-1
   27ec8:	00026006 	br	2884c <load_z80+0x9f0>
	}

	int routine_size = get_LOAD_routine_size();
   27ecc:	00259500 	call	25950 <get_LOAD_routine_size>
   27ed0:	e0bfa715 	stw	r2,-356(fp)

	// Next code based on DE2-115 SD Card reading test code:
	alt_u8 szRead[256];
	int nReadSize=0, nFileSize, nTotalReadSize=0;
   27ed4:	e03f9515 	stw	zero,-428(fp)
   27ed8:	e03f9615 	stw	zero,-424(fp)
	nFileSize = Fat_FileSize(hFile);
   27edc:	e13fa517 	ldw	r4,-364(fp)
   27ee0:	00213cc0 	call	213cc <Fat_FileSize>
   27ee4:	e0bfa815 	stw	r2,-352(fp)

	alt_u16 addr = 0x4000;
   27ee8:	00900004 	movi	r2,16384
   27eec:	e0bf970d 	sth	r2,-420(fp)
	REGS regs;

	//////////// for files with v2 or v3 ////////////
	bool is_v1_data_format = TRUE;
   27ef0:	00800044 	movi	r2,1
   27ef4:	e0bf9815 	stw	r2,-416(fp)


	// Array to keep block header, in case it spans more than one data block
	// the data that was obtained from the previous block stays in this array
	alt_u8 block_header[DATA_BLOCK_HEADER_SIZE] = {0};
   27ef8:	e03ff98d 	sth	zero,-26(fp)
   27efc:	e03ffa05 	stb	zero,-24(fp)

	// size of the array, to keep track of how much data has already been added to it
	int block_header_obtained_size = 0;
   27f00:	e03f9915 	stw	zero,-412(fp)

	// keeps track of data block size that is left to process
	alt_u16 data_block_size = 0;
   27f04:	e03f9a0d 	sth	zero,-408(fp)

	////////////////////
	bool bSuccess = TRUE;
   27f08:	00800044 	movi	r2,1
   27f0c:	e0bf9b15 	stw	r2,-404(fp)
	bool first_block = TRUE;
   27f10:	00800044 	movi	r2,1
   27f14:	e0bf9c15 	stw	r2,-400(fp)

	// For data
	int data_offset;
	bool compressed;

	if (nReadSize > sizeof(szRead))
   27f18:	e0bf9517 	ldw	r2,-428(fp)
   27f1c:	10804070 	cmpltui	r2,r2,257
   27f20:	1001491e 	bne	r2,zero,28448 <load_z80+0x5ec>
		nReadSize = sizeof(szRead);
   27f24:	00804004 	movi	r2,256
   27f28:	e0bf9515 	stw	r2,-428(fp)
	while(bSuccess && nTotalReadSize < nFileSize){
   27f2c:	00014606 	br	28448 <load_z80+0x5ec>
		nReadSize = sizeof(szRead);
   27f30:	00804004 	movi	r2,256
   27f34:	e0bf9515 	stw	r2,-428(fp)
		if (nReadSize > (nFileSize - nTotalReadSize))
   27f38:	e0ffa817 	ldw	r3,-352(fp)
   27f3c:	e0bf9617 	ldw	r2,-424(fp)
   27f40:	1887c83a 	sub	r3,r3,r2
   27f44:	e0bf9517 	ldw	r2,-428(fp)
   27f48:	1880040e 	bge	r3,r2,27f5c <load_z80+0x100>
			nReadSize = (nFileSize - nTotalReadSize);
   27f4c:	e0ffa817 	ldw	r3,-352(fp)
   27f50:	e0bf9617 	ldw	r2,-424(fp)
   27f54:	1885c83a 	sub	r2,r3,r2
   27f58:	e0bf9515 	stw	r2,-428(fp)
		//
		if (Fat_FileRead(hFile, szRead, nReadSize)){
   27f5c:	e0bfb204 	addi	r2,fp,-312
   27f60:	e1bf9517 	ldw	r6,-428(fp)
   27f64:	100b883a 	mov	r5,r2
   27f68:	e13fa517 	ldw	r4,-364(fp)
   27f6c:	00214100 	call	21410 <Fat_FileRead>
   27f70:	10013126 	beq	r2,zero,28438 <load_z80+0x5dc>
			data_offset = 0;
   27f74:	e03f9d15 	stw	zero,-396(fp)
			if (first_block) {
   27f78:	e0bf9c17 	ldw	r2,-400(fp)
   27f7c:	10006e26 	beq	r2,zero,28138 <load_z80+0x2dc>

				// Getting version of the file
				int version = get_version_z80(szRead);
   27f80:	e0bfb204 	addi	r2,fp,-312
   27f84:	1009883a 	mov	r4,r2
   27f88:	00277940 	call	27794 <get_version_z80>
   27f8c:	e0bfaa15 	stw	r2,-344(fp)
				is_v1_data_format = version == 1;
   27f90:	e0bfaa17 	ldw	r2,-344(fp)
   27f94:	10800060 	cmpeqi	r2,r2,1
   27f98:	10803fcc 	andi	r2,r2,255
   27f9c:	e0bf9815 	stw	r2,-416(fp)

				// Making sure it is for the 48k
				if (!is_48k(szRead, version)) {
   27fa0:	e0bfb204 	addi	r2,fp,-312
   27fa4:	e17faa17 	ldw	r5,-344(fp)
   27fa8:	1009883a 	mov	r4,r2
   27fac:	00278280 	call	27828 <is_48k>
   27fb0:	10000a1e 	bne	r2,zero,27fdc <load_z80+0x180>
					printf("%s is not for 48k\r\n", filename);
   27fb4:	e17fff17 	ldw	r5,-4(fp)
   27fb8:	010000f4 	movhi	r4,3
   27fbc:	2107fc04 	addi	r4,r4,8176
   27fc0:	002ea900 	call	2ea90 <printf>
					DMA_stop(10);
   27fc4:	01000284 	movi	r4,10
   27fc8:	0029e880 	call	29e88 <DMA_stop>
					close_file(hFile);
   27fcc:	e13fa517 	ldw	r4,-364(fp)
   27fd0:	00208dc0 	call	208dc <close_file>
					return -1;
   27fd4:	00bfffc4 	movi	r2,-1
   27fd8:	00021c06 	br	2884c <load_z80+0x9f0>
				}

				// Get start of data dependent on version
				data_offset = get_data_offset(szRead, version);
   27fdc:	e0bfb204 	addi	r2,fp,-312
   27fe0:	e17faa17 	ldw	r5,-344(fp)
   27fe4:	1009883a 	mov	r4,r2
   27fe8:	00279300 	call	27930 <get_data_offset>
   27fec:	10803fcc 	andi	r2,r2,255
   27ff0:	e0bf9d15 	stw	r2,-396(fp)
				if (data_offset == -1) {
   27ff4:	e0bf9d17 	ldw	r2,-396(fp)
   27ff8:	10bfffd8 	cmpnei	r2,r2,-1
   27ffc:	1000091e 	bne	r2,zero,28024 <load_z80+0x1c8>
					printf("Problem getting data offset (new version of .z80 file?)\r\n");
   28000:	010000f4 	movhi	r4,3
   28004:	21080104 	addi	r4,r4,8196
   28008:	002eb800 	call	2eb80 <puts>
					DMA_stop(10);
   2800c:	01000284 	movi	r4,10
   28010:	0029e880 	call	29e88 <DMA_stop>
					close_file(hFile);
   28014:	e13fa517 	ldw	r4,-364(fp)
   28018:	00208dc0 	call	208dc <close_file>
					return -1;
   2801c:	00bfffc4 	movi	r2,-1
   28020:	00020a06 	br	2884c <load_z80+0x9f0>
				}

				// Save REG values
				regs = generate_regs_z80(szRead, version);
   28024:	e0bff204 	addi	r2,fp,-56
   28028:	e0ffb204 	addi	r3,fp,-312
   2802c:	e1bfaa17 	ldw	r6,-344(fp)
   28030:	180b883a 	mov	r5,r3
   28034:	1009883a 	mov	r4,r2
   28038:	00279c80 	call	279c8 <generate_regs_z80>

				// Check if data is compressed or not
				compressed = is_compressed(szRead);
   2803c:	e0bfb204 	addi	r2,fp,-312
   28040:	1009883a 	mov	r4,r2
   28044:	002788c0 	call	2788c <is_compressed>
   28048:	e0bf9e15 	stw	r2,-392(fp)

				// saving header of data block for files with version 2 or 3
				// Since this is the first SD card data block, it is guaranteed to have one of these (if v2 or v3)
				if (!is_v1_data_format) {
   2804c:	e0bf9817 	ldw	r2,-416(fp)
   28050:	1000381e 	bne	r2,zero,28134 <load_z80+0x2d8>
					printf("block header: ");
   28054:	010000f4 	movhi	r4,3
   28058:	21081004 	addi	r4,r4,8256
   2805c:	002ea900 	call	2ea90 <printf>
					for (int i = 0; i < DATA_BLOCK_HEADER_SIZE; i++) {
   28060:	e03f9f15 	stw	zero,-388(fp)
   28064:	00001606 	br	280c0 <load_z80+0x264>
						block_header[i] = szRead[data_offset+i];
   28068:	e0ff9d17 	ldw	r3,-396(fp)
   2806c:	e0bf9f17 	ldw	r2,-388(fp)
   28070:	1885883a 	add	r2,r3,r2
   28074:	e0ffb204 	addi	r3,fp,-312
   28078:	1885883a 	add	r2,r3,r2
   2807c:	10c00003 	ldbu	r3,0(r2)
   28080:	e13ff984 	addi	r4,fp,-26
   28084:	e0bf9f17 	ldw	r2,-388(fp)
   28088:	2085883a 	add	r2,r4,r2
   2808c:	10c00005 	stb	r3,0(r2)
						printf("%02x ", block_header[i]);
   28090:	e0fff984 	addi	r3,fp,-26
   28094:	e0bf9f17 	ldw	r2,-388(fp)
   28098:	1885883a 	add	r2,r3,r2
   2809c:	10800003 	ldbu	r2,0(r2)
   280a0:	10803fcc 	andi	r2,r2,255
   280a4:	100b883a 	mov	r5,r2
   280a8:	010000f4 	movhi	r4,3
   280ac:	21081404 	addi	r4,r4,8272
   280b0:	002ea900 	call	2ea90 <printf>

				// saving header of data block for files with version 2 or 3
				// Since this is the first SD card data block, it is guaranteed to have one of these (if v2 or v3)
				if (!is_v1_data_format) {
					printf("block header: ");
					for (int i = 0; i < DATA_BLOCK_HEADER_SIZE; i++) {
   280b4:	e0bf9f17 	ldw	r2,-388(fp)
   280b8:	10800044 	addi	r2,r2,1
   280bc:	e0bf9f15 	stw	r2,-388(fp)
   280c0:	e0bf9f17 	ldw	r2,-388(fp)
   280c4:	108000d0 	cmplti	r2,r2,3
   280c8:	103fe71e 	bne	r2,zero,28068 <_gp+0xfffed028>
						block_header[i] = szRead[data_offset+i];
						printf("%02x ", block_header[i]);
					}
					printf("\r\n");
   280cc:	010000f4 	movhi	r4,3
   280d0:	21081604 	addi	r4,r4,8280
   280d4:	002eb800 	call	2eb80 <puts>
					data_offset += DATA_BLOCK_HEADER_SIZE; // adjust data offset based on header size
   280d8:	e0bf9d17 	ldw	r2,-396(fp)
   280dc:	108000c4 	addi	r2,r2,3
   280e0:	e0bf9d15 	stw	r2,-396(fp)
					data_block_size = reverse_16(conv_data_8_16(block_header, 0));
   280e4:	e0bff984 	addi	r2,fp,-26
   280e8:	000b883a 	mov	r5,zero
   280ec:	1009883a 	mov	r4,r2
   280f0:	00258b80 	call	258b8 <conv_data_8_16>
   280f4:	10bfffcc 	andi	r2,r2,65535
   280f8:	1009883a 	mov	r4,r2
   280fc:	00259140 	call	25914 <reverse_16>
   28100:	e0bf9a0d 	sth	r2,-408(fp)
					block_header_obtained_size = DATA_BLOCK_HEADER_SIZE;
   28104:	008000c4 	movi	r2,3
   28108:	e0bf9915 	stw	r2,-412(fp)

					// setting address based on page
					addr = get_addr_from_page(block_header[2]);
   2810c:	e0bffa03 	ldbu	r2,-24(fp)
   28110:	10803fcc 	andi	r2,r2,255
   28114:	1009883a 	mov	r4,r2
   28118:	00278d00 	call	278d0 <get_addr_from_page>
   2811c:	e0bf970d 	sth	r2,-420(fp)
					printf("ADDR (first): %04x\r\n", addr);
   28120:	e0bf970b 	ldhu	r2,-420(fp)
   28124:	100b883a 	mov	r5,r2
   28128:	010000f4 	movhi	r4,3
   2812c:	21081704 	addi	r4,r4,8284
   28130:	002ea900 	call	2ea90 <printf>
						bSuccess = FALSE;
						break;
					}
				}

				first_block = FALSE;
   28134:	e03f9c15 	stw	zero,-400(fp)
			}

			if (!is_v1_data_format) {
   28138:	e0bf9817 	ldw	r2,-416(fp)
   2813c:	10002b1e 	bne	r2,zero,281ec <load_z80+0x390>

				// if the full block header wasn't obtained
				if (block_header_obtained_size < DATA_BLOCK_HEADER_SIZE) {
   28140:	e0bf9917 	ldw	r2,-412(fp)
   28144:	108000c8 	cmpgei	r2,r2,3
   28148:	1000281e 	bne	r2,zero,281ec <load_z80+0x390>
					for(int i = block_header_obtained_size; i < DATA_BLOCK_HEADER_SIZE; i++) {
   2814c:	e0bf9917 	ldw	r2,-412(fp)
   28150:	e0bfa015 	stw	r2,-384(fp)
   28154:	00000e06 	br	28190 <load_z80+0x334>
						block_header[i] = szRead[data_offset];
   28158:	e0ffb204 	addi	r3,fp,-312
   2815c:	e0bf9d17 	ldw	r2,-396(fp)
   28160:	1885883a 	add	r2,r3,r2
   28164:	10c00003 	ldbu	r3,0(r2)
   28168:	e13ff984 	addi	r4,fp,-26
   2816c:	e0bfa017 	ldw	r2,-384(fp)
   28170:	2085883a 	add	r2,r4,r2
   28174:	10c00005 	stb	r3,0(r2)
						data_offset++;
   28178:	e0bf9d17 	ldw	r2,-396(fp)
   2817c:	10800044 	addi	r2,r2,1
   28180:	e0bf9d15 	stw	r2,-396(fp)

			if (!is_v1_data_format) {

				// if the full block header wasn't obtained
				if (block_header_obtained_size < DATA_BLOCK_HEADER_SIZE) {
					for(int i = block_header_obtained_size; i < DATA_BLOCK_HEADER_SIZE; i++) {
   28184:	e0bfa017 	ldw	r2,-384(fp)
   28188:	10800044 	addi	r2,r2,1
   2818c:	e0bfa015 	stw	r2,-384(fp)
   28190:	e0bfa017 	ldw	r2,-384(fp)
   28194:	108000d0 	cmplti	r2,r2,3
   28198:	103fef1e 	bne	r2,zero,28158 <_gp+0xfffed118>
						block_header[i] = szRead[data_offset];
						data_offset++;
					}
					block_header_obtained_size = DATA_BLOCK_HEADER_SIZE;
   2819c:	008000c4 	movi	r2,3
   281a0:	e0bf9915 	stw	r2,-412(fp)
					// Save the new data block's size
					data_block_size = reverse_16(conv_data_8_16(block_header, 0));
   281a4:	e0bff984 	addi	r2,fp,-26
   281a8:	000b883a 	mov	r5,zero
   281ac:	1009883a 	mov	r4,r2
   281b0:	00258b80 	call	258b8 <conv_data_8_16>
   281b4:	10bfffcc 	andi	r2,r2,65535
   281b8:	1009883a 	mov	r4,r2
   281bc:	00259140 	call	25914 <reverse_16>
   281c0:	e0bf9a0d 	sth	r2,-408(fp)

					// setting address based on page
					addr = get_addr_from_page(block_header[2]);
   281c4:	e0bffa03 	ldbu	r2,-24(fp)
   281c8:	10803fcc 	andi	r2,r2,255
   281cc:	1009883a 	mov	r4,r2
   281d0:	00278d00 	call	278d0 <get_addr_from_page>
   281d4:	e0bf970d 	sth	r2,-420(fp)
					printf("ADDR: %04x\r\n", addr);
   281d8:	e0bf970b 	ldhu	r2,-420(fp)
   281dc:	100b883a 	mov	r5,r2
   281e0:	010000f4 	movhi	r4,3
   281e4:	21081d04 	addi	r4,r4,8308
   281e8:	002ea900 	call	2ea90 <printf>
				}

			}

			// amount of data to read in this SD card data block
			int read_size = nReadSize - data_offset;
   281ec:	e0ff9517 	ldw	r3,-428(fp)
   281f0:	e0bf9d17 	ldw	r2,-396(fp)
   281f4:	1885c83a 	sub	r2,r3,r2
   281f8:	e0bfa115 	stw	r2,-380(fp)
			int remaining_block_size = read_size;
   281fc:	e0bfa117 	ldw	r2,-380(fp)
   28200:	e0bfa915 	stw	r2,-348(fp)

			// If v2 or v3 file, check if data block occupies the whole SD card data block or not
			// and updates read_size to only read up to the .z80 data block
			if (!is_v1_data_format) {
   28204:	e0bf9817 	ldw	r2,-416(fp)
   28208:	1000051e 	bne	r2,zero,28220 <load_z80+0x3c4>
				if (data_block_size < read_size)
   2820c:	e0ff9a0b 	ldhu	r3,-408(fp)
   28210:	e0bfa117 	ldw	r2,-380(fp)
   28214:	1880020e 	bge	r3,r2,28220 <load_z80+0x3c4>
					read_size = data_block_size;
   28218:	e0bf9a0b 	ldhu	r2,-408(fp)
   2821c:	e0bfa115 	stw	r2,-380(fp)
			}

			// ONLY write to RAM if the block describes page 8, or if the file is v1 (no pages)
			if (!compressed && is_v1_data_format) { // only v1 uses the "is compressed" bit
   28220:	e0bf9e17 	ldw	r2,-392(fp)
   28224:	10000f1e 	bne	r2,zero,28264 <load_z80+0x408>
   28228:	e0bf9817 	ldw	r2,-416(fp)
   2822c:	10000d26 	beq	r2,zero,28264 <load_z80+0x408>
				write_buf_mem(addr, szRead, data_offset, read_size);
   28230:	e0bf970b 	ldhu	r2,-420(fp)
   28234:	e0ffb204 	addi	r3,fp,-312
   28238:	e1ffa117 	ldw	r7,-380(fp)
   2823c:	e1bf9d17 	ldw	r6,-396(fp)
   28240:	180b883a 	mov	r5,r3
   28244:	1009883a 	mov	r4,r2
   28248:	0029b480 	call	29b48 <write_buf_mem>
				addr += read_size;
   2824c:	e0bfa117 	ldw	r2,-380(fp)
   28250:	1007883a 	mov	r3,r2
   28254:	e0bf970b 	ldhu	r2,-420(fp)
   28258:	1885883a 	add	r2,r3,r2
   2825c:	e0bf970d 	sth	r2,-420(fp)
   28260:	00000806 	br	28284 <load_z80+0x428>
			} else {
				addr = load_compressed_data_block_z80(addr, szRead, data_offset, read_size);
   28264:	e0bf970b 	ldhu	r2,-420(fp)
   28268:	e0ffb204 	addi	r3,fp,-312
   2826c:	e1ffa117 	ldw	r7,-380(fp)
   28270:	e1bf9d17 	ldw	r6,-396(fp)
   28274:	180b883a 	mov	r5,r3
   28278:	1009883a 	mov	r4,r2
   2827c:	0027bbc0 	call	27bbc <load_compressed_data_block_z80>
   28280:	e0bf970d 	sth	r2,-420(fp)
			}

			// Updating data offset in SD card data block
			data_offset += read_size;
   28284:	e0ff9d17 	ldw	r3,-396(fp)
   28288:	e0bfa117 	ldw	r2,-380(fp)
   2828c:	1885883a 	add	r2,r3,r2
   28290:	e0bf9d15 	stw	r2,-396(fp)

			if (!is_v1_data_format) {
   28294:	e0bf9817 	ldw	r2,-416(fp)
   28298:	1000621e 	bne	r2,zero,28424 <load_z80+0x5c8>
				// Updating amount left to read for this current .z80 data block
				data_block_size -= read_size;
   2829c:	e0bfa117 	ldw	r2,-380(fp)
   282a0:	1007883a 	mov	r3,r2
   282a4:	e0bf9a0b 	ldhu	r2,-408(fp)
   282a8:	10c5c83a 	sub	r2,r2,r3
   282ac:	e0bf9a0d 	sth	r2,-408(fp)

				// In case this .z80 data block has ended before the SD card data block
				if (data_block_size == 0) {
   282b0:	e0bf9a0b 	ldhu	r2,-408(fp)
   282b4:	10005b1e 	bne	r2,zero,28424 <load_z80+0x5c8>
					block_header_obtained_size = 0; // New block header being obtained
   282b8:	e03f9915 	stw	zero,-412(fp)
					remaining_block_size -= read_size; // obtaining remaining block size
   282bc:	e0ffa917 	ldw	r3,-348(fp)
   282c0:	e0bfa117 	ldw	r2,-380(fp)
   282c4:	1885c83a 	sub	r2,r3,r2
   282c8:	e0bfa915 	stw	r2,-348(fp)

					// Calculating how much of the header I can obtain now
					int header_to_obtain = DATA_BLOCK_HEADER_SIZE;
   282cc:	008000c4 	movi	r2,3
   282d0:	e0bfa215 	stw	r2,-376(fp)
					if (header_to_obtain > remaining_block_size) {
   282d4:	e0bfa217 	ldw	r2,-376(fp)
   282d8:	e0ffa917 	ldw	r3,-348(fp)
   282dc:	1880020e 	bge	r3,r2,282e8 <load_z80+0x48c>
						header_to_obtain = remaining_block_size;
   282e0:	e0bfa917 	ldw	r2,-348(fp)
   282e4:	e0bfa215 	stw	r2,-376(fp)
					}

					// Adding new block header data
					printf("new block header: ");
   282e8:	010000f4 	movhi	r4,3
   282ec:	21082104 	addi	r4,r4,8324
   282f0:	002ea900 	call	2ea90 <printf>
					for(int i = 0; i < header_to_obtain; i++) {
   282f4:	e03fa315 	stw	zero,-372(fp)
   282f8:	00001606 	br	28354 <load_z80+0x4f8>
						block_header[i] = szRead[data_offset+i];
   282fc:	e0ff9d17 	ldw	r3,-396(fp)
   28300:	e0bfa317 	ldw	r2,-372(fp)
   28304:	1885883a 	add	r2,r3,r2
   28308:	e0ffb204 	addi	r3,fp,-312
   2830c:	1885883a 	add	r2,r3,r2
   28310:	10c00003 	ldbu	r3,0(r2)
   28314:	e13ff984 	addi	r4,fp,-26
   28318:	e0bfa317 	ldw	r2,-372(fp)
   2831c:	2085883a 	add	r2,r4,r2
   28320:	10c00005 	stb	r3,0(r2)
						printf("%02x ", block_header[i]);
   28324:	e0fff984 	addi	r3,fp,-26
   28328:	e0bfa317 	ldw	r2,-372(fp)
   2832c:	1885883a 	add	r2,r3,r2
   28330:	10800003 	ldbu	r2,0(r2)
   28334:	10803fcc 	andi	r2,r2,255
   28338:	100b883a 	mov	r5,r2
   2833c:	010000f4 	movhi	r4,3
   28340:	21081404 	addi	r4,r4,8272
   28344:	002ea900 	call	2ea90 <printf>
						header_to_obtain = remaining_block_size;
					}

					// Adding new block header data
					printf("new block header: ");
					for(int i = 0; i < header_to_obtain; i++) {
   28348:	e0bfa317 	ldw	r2,-372(fp)
   2834c:	10800044 	addi	r2,r2,1
   28350:	e0bfa315 	stw	r2,-372(fp)
   28354:	e0ffa317 	ldw	r3,-372(fp)
   28358:	e0bfa217 	ldw	r2,-376(fp)
   2835c:	18bfe716 	blt	r3,r2,282fc <_gp+0xfffed2bc>
						block_header[i] = szRead[data_offset+i];
						printf("%02x ", block_header[i]);
					}
					printf("\r\n");
   28360:	010000f4 	movhi	r4,3
   28364:	21081604 	addi	r4,r4,8280
   28368:	002eb800 	call	2eb80 <puts>
					block_header_obtained_size = header_to_obtain; // updating how much of the header has been obtained
   2836c:	e0bfa217 	ldw	r2,-376(fp)
   28370:	e0bf9915 	stw	r2,-412(fp)

					// setting address based on page
					addr = get_addr_from_page(block_header[2]);
   28374:	e0bffa03 	ldbu	r2,-24(fp)
   28378:	10803fcc 	andi	r2,r2,255
   2837c:	1009883a 	mov	r4,r2
   28380:	00278d00 	call	278d0 <get_addr_from_page>
   28384:	e0bf970d 	sth	r2,-420(fp)
					printf("ADDR: %04x\r\n", addr);
   28388:	e0bf970b 	ldhu	r2,-420(fp)
   2838c:	100b883a 	mov	r5,r2
   28390:	010000f4 	movhi	r4,3
   28394:	21081d04 	addi	r4,r4,8308
   28398:	002ea900 	call	2ea90 <printf>
						printf("There is an invalid page in the file...\r\n");
						bSuccess = FALSE;
						break;
					}

					data_offset += header_to_obtain; // move data offset in case there is still more
   2839c:	e0ff9d17 	ldw	r3,-396(fp)
   283a0:	e0bfa217 	ldw	r2,-376(fp)
   283a4:	1885883a 	add	r2,r3,r2
   283a8:	e0bf9d15 	stw	r2,-396(fp)
					read_size = nReadSize - data_offset; // updating read size in case there is more data
   283ac:	e0ff9517 	ldw	r3,-428(fp)
   283b0:	e0bf9d17 	ldw	r2,-396(fp)
   283b4:	1885c83a 	sub	r2,r3,r2
   283b8:	e0bfa115 	stw	r2,-380(fp)

					// If the whole new data block header was obtained
					if (block_header_obtained_size == DATA_BLOCK_HEADER_SIZE) {
   283bc:	e0bf9917 	ldw	r2,-412(fp)
   283c0:	108000d8 	cmpnei	r2,r2,3
   283c4:	1000171e 	bne	r2,zero,28424 <load_z80+0x5c8>
						// Save the new data block's size
						data_block_size = reverse_16(conv_data_8_16(block_header, 0));
   283c8:	e0bff984 	addi	r2,fp,-26
   283cc:	000b883a 	mov	r5,zero
   283d0:	1009883a 	mov	r4,r2
   283d4:	00258b80 	call	258b8 <conv_data_8_16>
   283d8:	10bfffcc 	andi	r2,r2,65535
   283dc:	1009883a 	mov	r4,r2
   283e0:	00259140 	call	25914 <reverse_16>
   283e4:	e0bf9a0d 	sth	r2,-408(fp)

						// If there is still more data
						if (read_size > 0) {
   283e8:	e0bfa117 	ldw	r2,-380(fp)
   283ec:	00800d0e 	bge	zero,r2,28424 <load_z80+0x5c8>
							/*if (!compressed) {
								write_buf_mem(addr, szRead, data_offset, read_size);
								addr += read_size;
							} else {*/
							addr = load_compressed_data_block_z80(addr, szRead, data_offset, read_size);
   283f0:	e0bf970b 	ldhu	r2,-420(fp)
   283f4:	e0ffb204 	addi	r3,fp,-312
   283f8:	e1ffa117 	ldw	r7,-380(fp)
   283fc:	e1bf9d17 	ldw	r6,-396(fp)
   28400:	180b883a 	mov	r5,r3
   28404:	1009883a 	mov	r4,r2
   28408:	0027bbc0 	call	27bbc <load_compressed_data_block_z80>
   2840c:	e0bf970d 	sth	r2,-420(fp)
							//}
							data_block_size -= read_size; // updating data block size (what is left)
   28410:	e0bfa117 	ldw	r2,-380(fp)
   28414:	1007883a 	mov	r3,r2
   28418:	e0bf9a0b 	ldhu	r2,-408(fp)
   2841c:	10c5c83a 	sub	r2,r2,r3
   28420:	e0bf9a0d 	sth	r2,-408(fp)
						}
					}
				}
			}
			nTotalReadSize += nReadSize;
   28424:	e0ff9617 	ldw	r3,-424(fp)
   28428:	e0bf9517 	ldw	r2,-428(fp)
   2842c:	1885883a 	add	r2,r3,r2
   28430:	e0bf9615 	stw	r2,-424(fp)
   28434:	00000406 	br	28448 <load_z80+0x5ec>
		} else {
			bSuccess = FALSE;
   28438:	e03f9b15 	stw	zero,-404(fp)
			printf("\nFailed to read the file\n");
   2843c:	010000f4 	movhi	r4,3
   28440:	2107ca04 	addi	r4,r4,7976
   28444:	002eb800 	call	2eb80 <puts>
	int data_offset;
	bool compressed;

	if (nReadSize > sizeof(szRead))
		nReadSize = sizeof(szRead);
	while(bSuccess && nTotalReadSize < nFileSize){
   28448:	e0bf9b17 	ldw	r2,-404(fp)
   2844c:	10000326 	beq	r2,zero,2845c <load_z80+0x600>
   28450:	e0ff9617 	ldw	r3,-424(fp)
   28454:	e0bfa817 	ldw	r2,-352(fp)
   28458:	18beb516 	blt	r3,r2,27f30 <_gp+0xfffecef0>
			bSuccess = FALSE;
			printf("\nFailed to read the file\n");
		}
	} // while

	printf("\r\nLeft the loop\r\n");
   2845c:	010000f4 	movhi	r4,3
   28460:	21082604 	addi	r4,r4,8344
   28464:	002eb800 	call	2eb80 <puts>
	printf("ADDRESS: %x\r\n", addr);
   28468:	e0bf970b 	ldhu	r2,-420(fp)
   2846c:	100b883a 	mov	r5,r2
   28470:	010000f4 	movhi	r4,3
   28474:	21082b04 	addi	r4,r4,8364
   28478:	002ea900 	call	2ea90 <printf>

	// Now all the data is loaded, and the routine must be formed with REGS
	enum file_type type = Z80;
   2847c:	e03fab15 	stw	zero,-340(fp)

	printf("REGS:\r\n");
   28480:	010000f4 	movhi	r4,3
   28484:	21082f04 	addi	r4,r4,8380
   28488:	002eb800 	call	2eb80 <puts>
	printf("|PC: %04x\t\tSP: %04x\r\n", regs.PC, regs.SP);
   2848c:	e0bff80b 	ldhu	r2,-32(fp)
   28490:	10bfffcc 	andi	r2,r2,65535
   28494:	e0fff78b 	ldhu	r3,-34(fp)
   28498:	18ffffcc 	andi	r3,r3,65535
   2849c:	180d883a 	mov	r6,r3
   284a0:	100b883a 	mov	r5,r2
   284a4:	010000f4 	movhi	r4,3
   284a8:	21083104 	addi	r4,r4,8388
   284ac:	002ea900 	call	2ea90 <printf>
	printf("|AF: %04x\t\tAF': %04x\r\n", ((regs.F << 8) & 0xFF00) | regs.A, ((regs.Fl << 8) & 0xFF00) | regs.Al);
   284b0:	e0bff4c3 	ldbu	r2,-45(fp)
   284b4:	10803fcc 	andi	r2,r2,255
   284b8:	1004923a 	slli	r2,r2,8
   284bc:	10ffffcc 	andi	r3,r2,65535
   284c0:	e0bff483 	ldbu	r2,-46(fp)
   284c4:	10803fcc 	andi	r2,r2,255
   284c8:	1888b03a 	or	r4,r3,r2
   284cc:	e0bff2c3 	ldbu	r2,-53(fp)
   284d0:	10803fcc 	andi	r2,r2,255
   284d4:	1004923a 	slli	r2,r2,8
   284d8:	10ffffcc 	andi	r3,r2,65535
   284dc:	e0bff283 	ldbu	r2,-54(fp)
   284e0:	10803fcc 	andi	r2,r2,255
   284e4:	1884b03a 	or	r2,r3,r2
   284e8:	100d883a 	mov	r6,r2
   284ec:	200b883a 	mov	r5,r4
   284f0:	010000f4 	movhi	r4,3
   284f4:	21083704 	addi	r4,r4,8412
   284f8:	002ea900 	call	2ea90 <printf>
	printf("|BC: %04x\t\tBC': %04x\r\n", ((regs.C << 8) & 0xFF00) | regs.B, ((regs.Cl << 8) & 0xFF00) | regs.Bl);
   284fc:	e0bff643 	ldbu	r2,-39(fp)
   28500:	10803fcc 	andi	r2,r2,255
   28504:	1004923a 	slli	r2,r2,8
   28508:	10ffffcc 	andi	r3,r2,65535
   2850c:	e0bff603 	ldbu	r2,-40(fp)
   28510:	10803fcc 	andi	r2,r2,255
   28514:	1888b03a 	or	r4,r3,r2
   28518:	e0bff443 	ldbu	r2,-47(fp)
   2851c:	10803fcc 	andi	r2,r2,255
   28520:	1004923a 	slli	r2,r2,8
   28524:	10ffffcc 	andi	r3,r2,65535
   28528:	e0bff403 	ldbu	r2,-48(fp)
   2852c:	10803fcc 	andi	r2,r2,255
   28530:	1884b03a 	or	r2,r3,r2
   28534:	100d883a 	mov	r6,r2
   28538:	200b883a 	mov	r5,r4
   2853c:	010000f4 	movhi	r4,3
   28540:	21083d04 	addi	r4,r4,8436
   28544:	002ea900 	call	2ea90 <printf>
	printf("|DE: %04x\t\tDE': %04x\r\n", ((regs.E << 8) & 0xFF00) | regs.D, ((regs.El << 8) & 0xFF00) | regs.Dl);
   28548:	e0bff5c3 	ldbu	r2,-41(fp)
   2854c:	10803fcc 	andi	r2,r2,255
   28550:	1004923a 	slli	r2,r2,8
   28554:	10ffffcc 	andi	r3,r2,65535
   28558:	e0bff583 	ldbu	r2,-42(fp)
   2855c:	10803fcc 	andi	r2,r2,255
   28560:	1888b03a 	or	r4,r3,r2
   28564:	e0bff3c3 	ldbu	r2,-49(fp)
   28568:	10803fcc 	andi	r2,r2,255
   2856c:	1004923a 	slli	r2,r2,8
   28570:	10ffffcc 	andi	r3,r2,65535
   28574:	e0bff383 	ldbu	r2,-50(fp)
   28578:	10803fcc 	andi	r2,r2,255
   2857c:	1884b03a 	or	r2,r3,r2
   28580:	100d883a 	mov	r6,r2
   28584:	200b883a 	mov	r5,r4
   28588:	010000f4 	movhi	r4,3
   2858c:	21084304 	addi	r4,r4,8460
   28590:	002ea900 	call	2ea90 <printf>
	printf("|HL: %04x\t\tHL': %04x\r\n", ((regs.L << 8) & 0xFF00) | regs.H, ((regs.Ll << 8) & 0xFF00) | regs.Hl);
   28594:	e0bff543 	ldbu	r2,-43(fp)
   28598:	10803fcc 	andi	r2,r2,255
   2859c:	1004923a 	slli	r2,r2,8
   285a0:	10ffffcc 	andi	r3,r2,65535
   285a4:	e0bff503 	ldbu	r2,-44(fp)
   285a8:	10803fcc 	andi	r2,r2,255
   285ac:	1888b03a 	or	r4,r3,r2
   285b0:	e0bff343 	ldbu	r2,-51(fp)
   285b4:	10803fcc 	andi	r2,r2,255
   285b8:	1004923a 	slli	r2,r2,8
   285bc:	10ffffcc 	andi	r3,r2,65535
   285c0:	e0bff303 	ldbu	r2,-52(fp)
   285c4:	10803fcc 	andi	r2,r2,255
   285c8:	1884b03a 	or	r2,r3,r2
   285cc:	100d883a 	mov	r6,r2
   285d0:	200b883a 	mov	r5,r4
   285d4:	010000f4 	movhi	r4,3
   285d8:	21084904 	addi	r4,r4,8484
   285dc:	002ea900 	call	2ea90 <printf>
	printf("|IX: %04x\t\tIY: %04x\r\n", regs.IX, regs.IY);
   285e0:	e0bff70b 	ldhu	r2,-36(fp)
   285e4:	10bfffcc 	andi	r2,r2,65535
   285e8:	e0fff68b 	ldhu	r3,-38(fp)
   285ec:	18ffffcc 	andi	r3,r3,65535
   285f0:	180d883a 	mov	r6,r3
   285f4:	100b883a 	mov	r5,r2
   285f8:	010000f4 	movhi	r4,3
   285fc:	21084f04 	addi	r4,r4,8508
   28600:	002ea900 	call	2ea90 <printf>
	printf("|I: %02x\t\tR: %02x\r\n", regs.I, regs.R);
   28604:	e0bff243 	ldbu	r2,-55(fp)
   28608:	10803fcc 	andi	r2,r2,255
   2860c:	e0fff203 	ldbu	r3,-56(fp)
   28610:	18c03fcc 	andi	r3,r3,255
   28614:	180d883a 	mov	r6,r3
   28618:	100b883a 	mov	r5,r2
   2861c:	010000f4 	movhi	r4,3
   28620:	21085504 	addi	r4,r4,8532
   28624:	002ea900 	call	2ea90 <printf>

	// Save data that routine will overwrite
	int data_bk_len = get_LOAD_routine_size();
   28628:	00259500 	call	25950 <get_LOAD_routine_size>
   2862c:	e0bfac15 	stw	r2,-336(fp)
	alt_u8* data_bk = (alt_u8*) malloc(data_bk_len * sizeof(alt_u8*));
   28630:	e0bfac17 	ldw	r2,-336(fp)
   28634:	1085883a 	add	r2,r2,r2
   28638:	1085883a 	add	r2,r2,r2
   2863c:	1009883a 	mov	r4,r2
   28640:	002e7a80 	call	2e7a8 <malloc>
   28644:	e0bfad15 	stw	r2,-332(fp)
	read_buf_mem(NMI_ROUTINE_ADDR, 0, data_bk_len, data_bk);
   28648:	e1ffad17 	ldw	r7,-332(fp)
   2864c:	e1bfac17 	ldw	r6,-336(fp)
   28650:	000b883a 	mov	r5,zero
   28654:	01100004 	movi	r4,16384
   28658:	00299a00 	call	299a0 <read_buf_mem>

	// Save data that the stack additions overwrite
	alt_u8* bottom_data_bk = (alt_u8*) malloc(OLD_STACK_SIZE * sizeof(alt_u8*));
   2865c:	01000404 	movi	r4,16
   28660:	002e7a80 	call	2e7a8 <malloc>
   28664:	e0bfae15 	stw	r2,-328(fp)
	read_buf_mem(OLD_STACK_START_ADDR, 0, OLD_STACK_SIZE, bottom_data_bk);
   28668:	e1ffae17 	ldw	r7,-328(fp)
   2866c:	01800104 	movi	r6,4
   28670:	000b883a 	mov	r5,zero
   28674:	0115ff04 	movi	r4,22524
   28678:	00299a00 	call	299a0 <read_buf_mem>

	alt_u8* routine = generate_LOAD_routine(regs, type, routine_size);
   2867c:	e0bfa717 	ldw	r2,-356(fp)
   28680:	d8800515 	stw	r2,20(sp)
   28684:	e0bfab17 	ldw	r2,-340(fp)
   28688:	d8800415 	stw	r2,16(sp)
   2868c:	e0bff617 	ldw	r2,-40(fp)
   28690:	d8800015 	stw	r2,0(sp)
   28694:	e0bff717 	ldw	r2,-36(fp)
   28698:	d8800115 	stw	r2,4(sp)
   2869c:	e0bff817 	ldw	r2,-32(fp)
   286a0:	d8800215 	stw	r2,8(sp)
   286a4:	e0bff90b 	ldhu	r2,-28(fp)
   286a8:	d880030d 	sth	r2,12(sp)
   286ac:	e13ff217 	ldw	r4,-56(fp)
   286b0:	e17ff317 	ldw	r5,-52(fp)
   286b4:	e1bff417 	ldw	r6,-48(fp)
   286b8:	e1fff517 	ldw	r7,-44(fp)
   286bc:	0025f480 	call	25f48 <generate_LOAD_routine>
   286c0:	e0bfaf15 	stw	r2,-324(fp)

	write_buf_mem(NMI_ROUTINE_ADDR, routine, 0, routine_size);
   286c4:	e1ffa717 	ldw	r7,-356(fp)
   286c8:	000d883a 	mov	r6,zero
   286cc:	e17faf17 	ldw	r5,-324(fp)
   286d0:	01100004 	movi	r4,16384
   286d4:	0029b480 	call	29b48 <write_buf_mem>

	printf("\r\n------------\r\n");
   286d8:	010000f4 	movhi	r4,3
   286dc:	21085a04 	addi	r4,r4,8552
   286e0:	002eb800 	call	2eb80 <puts>

	//STACK_ADD stack_addition = generate_AF_stack_addition(regs, type, TRUE);
	STACK_ADD stack_addition = generate_AF_stack_addition(regs, type, TRUE);
   286e4:	e0fffb04 	addi	r3,fp,-20
   286e8:	00800044 	movi	r2,1
   286ec:	d8800615 	stw	r2,24(sp)
   286f0:	e0bfab17 	ldw	r2,-340(fp)
   286f4:	d8800515 	stw	r2,20(sp)
   286f8:	e0bff517 	ldw	r2,-44(fp)
   286fc:	d8800015 	stw	r2,0(sp)
   28700:	e0bff617 	ldw	r2,-40(fp)
   28704:	d8800115 	stw	r2,4(sp)
   28708:	e0bff717 	ldw	r2,-36(fp)
   2870c:	d8800215 	stw	r2,8(sp)
   28710:	e0bff817 	ldw	r2,-32(fp)
   28714:	d8800315 	stw	r2,12(sp)
   28718:	e0bff90b 	ldhu	r2,-28(fp)
   2871c:	d880040d 	sth	r2,16(sp)
   28720:	e17ff217 	ldw	r5,-56(fp)
   28724:	e1bff317 	ldw	r6,-52(fp)
   28728:	e1fff417 	ldw	r7,-48(fp)
   2872c:	1809883a 	mov	r4,r3
   28730:	0025d840 	call	25d84 <generate_AF_stack_addition>
	alt_u16 sp_value = reverse_16(stack_addition.SP); // making it big endian
   28734:	e0bffb0b 	ldhu	r2,-20(fp)
   28738:	10bfffcc 	andi	r2,r2,65535
   2873c:	1009883a 	mov	r4,r2
   28740:	00259140 	call	25914 <reverse_16>
   28744:	e0bfb00d 	sth	r2,-320(fp)
	write_buf_mem(sp_value, stack_addition.data, 0, stack_addition.size);
   28748:	e0bfb00b 	ldhu	r2,-320(fp)
   2874c:	e0fffd17 	ldw	r3,-12(fp)
   28750:	e13ffc17 	ldw	r4,-16(fp)
   28754:	200f883a 	mov	r7,r4
   28758:	000d883a 	mov	r6,zero
   2875c:	180b883a 	mov	r5,r3
   28760:	1009883a 	mov	r4,r2
   28764:	0029b480 	call	29b48 <write_buf_mem>
	for(int i = 0; i < stack_addition.size; i++) {
   28768:	e03fa415 	stw	zero,-368(fp)
   2876c:	00000c06 	br	287a0 <load_z80+0x944>
		printf("0x%02x ", stack_addition.data[i]);
   28770:	e0fffd17 	ldw	r3,-12(fp)
   28774:	e0bfa417 	ldw	r2,-368(fp)
   28778:	1885883a 	add	r2,r3,r2
   2877c:	10800003 	ldbu	r2,0(r2)
   28780:	10803fcc 	andi	r2,r2,255
   28784:	100b883a 	mov	r5,r2
   28788:	010000f4 	movhi	r4,3
   2878c:	2107d104 	addi	r4,r4,8004
   28790:	002ea900 	call	2ea90 <printf>

	//STACK_ADD stack_addition = generate_AF_stack_addition(regs, type, TRUE);
	STACK_ADD stack_addition = generate_AF_stack_addition(regs, type, TRUE);
	alt_u16 sp_value = reverse_16(stack_addition.SP); // making it big endian
	write_buf_mem(sp_value, stack_addition.data, 0, stack_addition.size);
	for(int i = 0; i < stack_addition.size; i++) {
   28794:	e0bfa417 	ldw	r2,-368(fp)
   28798:	10800044 	addi	r2,r2,1
   2879c:	e0bfa415 	stw	r2,-368(fp)
   287a0:	e0bffc17 	ldw	r2,-16(fp)
   287a4:	e0ffa417 	ldw	r3,-368(fp)
   287a8:	18bff136 	bltu	r3,r2,28770 <_gp+0xfffed730>
	write_io(addr, 0b001);
	usleep(100000);*/

	// Sets actual border color
	//write_mem(addr, regs.border & 0b111);
	write_io(0xFFFE, regs.border & 0b111);
   287ac:	e0bff943 	ldbu	r2,-27(fp)
   287b0:	10803fcc 	andi	r2,r2,255
   287b4:	108001cc 	andi	r2,r2,7
   287b8:	100b883a 	mov	r5,r2
   287bc:	013fff94 	movui	r4,65534
   287c0:	0029cac0 	call	29cac <write_io>

	state = NONE; // redundant?
   287c4:	d020cd15 	stw	zero,-31948(gp)
	free(stack_addition.data);
   287c8:	e0bffd17 	ldw	r2,-12(fp)
   287cc:	1009883a 	mov	r4,r2
   287d0:	002e7bc0 	call	2e7bc <free>
	free(routine);
   287d4:	e13faf17 	ldw	r4,-324(fp)
   287d8:	002e7bc0 	call	2e7bc <free>
	close_file(hFile);
   287dc:	e13fa517 	ldw	r4,-364(fp)
   287e0:	00208dc0 	call	208dc <close_file>

	// stop DMA with NMI on
	DMA_stop_w_interrupt();
   287e4:	0029f240 	call	29f24 <DMA_stop_w_interrupt>

	// Restore data overwritten by routine as soon as the snapshot's PC is detected in z80 address bus
	// This means the z80 is about to start executing the loaded code
	//int wait_res = wait_for_pc(regs.PC, 10000);
	int wait_res = wait_until_routine_ends(10000);
   287e8:	0109c404 	movi	r4,10000
   287ec:	0029e280 	call	29e28 <wait_until_routine_ends>
   287f0:	e0bfb115 	stw	r2,-316(fp)
	if (!wait_res) {
   287f4:	e0bfb117 	ldw	r2,-316(fp)
   287f8:	10000e1e 	bne	r2,zero,28834 <load_z80+0x9d8>
		// PATCH OVER CORRECT DATA
		DMA_request(10);
   287fc:	01000284 	movi	r4,10
   28800:	002982c0 	call	2982c <DMA_request>

		write_buf_mem(NMI_ROUTINE_ADDR, data_bk, 0, data_bk_len);
   28804:	e1ffac17 	ldw	r7,-336(fp)
   28808:	000d883a 	mov	r6,zero
   2880c:	e17fad17 	ldw	r5,-332(fp)
   28810:	01100004 	movi	r4,16384
   28814:	0029b480 	call	29b48 <write_buf_mem>
		write_buf_mem(OLD_STACK_START_ADDR, bottom_data_bk, 0, OLD_STACK_SIZE);
   28818:	01c00104 	movi	r7,4
   2881c:	000d883a 	mov	r6,zero
   28820:	e17fae17 	ldw	r5,-328(fp)
   28824:	0115ff04 	movi	r4,22524
   28828:	0029b480 	call	29b48 <write_buf_mem>

		DMA_stop(10);
   2882c:	01000284 	movi	r4,10
   28830:	0029e880 	call	29e88 <DMA_stop>
	}
	free(data_bk);
   28834:	e13fad17 	ldw	r4,-332(fp)
   28838:	002e7bc0 	call	2e7bc <free>

	printf("\r\nLOADED\r\n");
   2883c:	010000f4 	movhi	r4,3
   28840:	21085e04 	addi	r4,r4,8568
   28844:	002eb800 	call	2eb80 <puts>

	return 0;
   28848:	0005883a 	mov	r2,zero

}
   2884c:	e037883a 	mov	sp,fp
   28850:	dfc00117 	ldw	ra,4(sp)
   28854:	df000017 	ldw	fp,0(sp)
   28858:	dec00204 	addi	sp,sp,8
   2885c:	f800283a 	ret

00028860 <string_to_num>:

char* curr_game_filename;
int curr_game_filename_len;
int curr_game_idx;

int string_to_num(char* string, int str_len, int num_len) {
   28860:	defff904 	addi	sp,sp,-28
   28864:	dfc00615 	stw	ra,24(sp)
   28868:	df000515 	stw	fp,20(sp)
   2886c:	df000504 	addi	fp,sp,20
   28870:	e13ffd15 	stw	r4,-12(fp)
   28874:	e17ffe15 	stw	r5,-8(fp)
   28878:	e1bfff15 	stw	r6,-4(fp)
	int result = 0;
   2887c:	e03ffb15 	stw	zero,-20(fp)
	for (int i = str_len-num_len; i<str_len; i++) {
   28880:	e0fffe17 	ldw	r3,-8(fp)
   28884:	e0bfff17 	ldw	r2,-4(fp)
   28888:	1885c83a 	sub	r2,r3,r2
   2888c:	e0bffc15 	stw	r2,-16(fp)
   28890:	00001106 	br	288d8 <string_to_num+0x78>
		result = result * 10 + (string[i] - '0');
   28894:	01400284 	movi	r5,10
   28898:	e13ffb17 	ldw	r4,-20(fp)
   2889c:	002b35c0 	call	2b35c <__mulsi3>
   288a0:	1009883a 	mov	r4,r2
   288a4:	e0bffc17 	ldw	r2,-16(fp)
   288a8:	e0fffd17 	ldw	r3,-12(fp)
   288ac:	1885883a 	add	r2,r3,r2
   288b0:	10800003 	ldbu	r2,0(r2)
   288b4:	10803fcc 	andi	r2,r2,255
   288b8:	1080201c 	xori	r2,r2,128
   288bc:	10bfe004 	addi	r2,r2,-128
   288c0:	10bff404 	addi	r2,r2,-48
   288c4:	2085883a 	add	r2,r4,r2
   288c8:	e0bffb15 	stw	r2,-20(fp)
int curr_game_filename_len;
int curr_game_idx;

int string_to_num(char* string, int str_len, int num_len) {
	int result = 0;
	for (int i = str_len-num_len; i<str_len; i++) {
   288cc:	e0bffc17 	ldw	r2,-16(fp)
   288d0:	10800044 	addi	r2,r2,1
   288d4:	e0bffc15 	stw	r2,-16(fp)
   288d8:	e0fffc17 	ldw	r3,-16(fp)
   288dc:	e0bffe17 	ldw	r2,-8(fp)
   288e0:	18bfec16 	blt	r3,r2,28894 <_gp+0xfffed854>
		result = result * 10 + (string[i] - '0');
	}
	return result;
   288e4:	e0bffb17 	ldw	r2,-20(fp)
}
   288e8:	e037883a 	mov	sp,fp
   288ec:	dfc00117 	ldw	ra,4(sp)
   288f0:	df000017 	ldw	fp,0(sp)
   288f4:	dec00204 	addi	sp,sp,8
   288f8:	f800283a 	ret

000288fc <inject_menu>:

int inject_menu() {
   288fc:	defffb04 	addi	sp,sp,-20
   28900:	dfc00415 	stw	ra,16(sp)
   28904:	df000315 	stw	fp,12(sp)
   28908:	df000304 	addi	fp,sp,12

	printf("\r\nListening...\r\n");
   2890c:	010000f4 	movhi	r4,3
   28910:	21098604 	addi	r4,r4,9752
   28914:	002eb800 	call	2eb80 <puts>
	listen_for_en();
   28918:	002a0200 	call	2a020 <listen_for_en>
	printf("enable happened\r\n");
   2891c:	010000f4 	movhi	r4,3
   28920:	21098a04 	addi	r4,r4,9768
   28924:	002eb800 	call	2eb80 <puts>

	enum per_if_type type = get_if_type();
   28928:	002a0b40 	call	2a0b4 <get_if_type>
   2892c:	e0bffd15 	stw	r2,-12(fp)

	if (type == INIT) {
   28930:	e0bffd17 	ldw	r2,-12(fp)
   28934:	10800058 	cmpnei	r2,r2,1
   28938:	1000241e 	bne	r2,zero,289cc <inject_menu+0xd0>
		int res = DMA_request(100);
   2893c:	01001904 	movi	r4,100
   28940:	002982c0 	call	2982c <DMA_request>
   28944:	e0bffe15 	stw	r2,-8(fp)
		printf("%d\r\n", res);
   28948:	e17ffe17 	ldw	r5,-8(fp)
   2894c:	010000f4 	movhi	r4,3
   28950:	21098f04 	addi	r4,r4,9788
   28954:	002ea900 	call	2ea90 <printf>
		if (res == -1) {
   28958:	e0bffe17 	ldw	r2,-8(fp)
   2895c:	10bfffd8 	cmpnei	r2,r2,-1
   28960:	1000021e 	bne	r2,zero,2896c <inject_menu+0x70>
			return res;
   28964:	e0bffe17 	ldw	r2,-8(fp)
   28968:	00001a06 	br	289d4 <inject_menu+0xd8>
		}

		write_buf_mem(MENU_CODE_ADDR, menu_code, 0, MENU_CODE_LEN);
   2896c:	01c12484 	movi	r7,1170
   28970:	000d883a 	mov	r6,zero
   28974:	014000f4 	movhi	r5,3
   28978:	29486104 	addi	r5,r5,8580
   2897c:	012c0014 	movui	r4,45056
   28980:	0029b480 	call	29b48 <write_buf_mem>

		alt_u16 addr = NMI_ROUTINE_ADDR;
   28984:	00900004 	movi	r2,16384
   28988:	e0bfff0d 	sth	r2,-4(fp)
		write_mem(addr++, RETN1);
   2898c:	e0bfff0b 	ldhu	r2,-4(fp)
   28990:	10c00044 	addi	r3,r2,1
   28994:	e0ffff0d 	sth	r3,-4(fp)
   28998:	10bfffcc 	andi	r2,r2,65535
   2899c:	01403b44 	movi	r5,237
   289a0:	1009883a 	mov	r4,r2
   289a4:	0029a380 	call	29a38 <write_mem>
		write_mem(addr++, RETN2);
   289a8:	e0bfff0b 	ldhu	r2,-4(fp)
   289ac:	10c00044 	addi	r3,r2,1
   289b0:	e0ffff0d 	sth	r3,-4(fp)
   289b4:	10bfffcc 	andi	r2,r2,65535
   289b8:	01401144 	movi	r5,69
   289bc:	1009883a 	mov	r4,r2
   289c0:	0029a380 	call	29a38 <write_mem>

		DMA_stop_w_interrupt(10);
   289c4:	01000284 	movi	r4,10
   289c8:	0029f240 	call	29f24 <DMA_stop_w_interrupt>
	}
	per_cmd_ack();
   289cc:	002a2b00 	call	2a2b0 <per_cmd_ack>
	return 0;
   289d0:	0005883a 	mov	r2,zero
}
   289d4:	e037883a 	mov	sp,fp
   289d8:	dfc00117 	ldw	ra,4(sp)
   289dc:	df000017 	ldw	fp,0(sp)
   289e0:	dec00204 	addi	sp,sp,8
   289e4:	f800283a 	ret

000289e8 <my_list_test>:

int my_list_test() {
   289e8:	defffb04 	addi	sp,sp,-20
   289ec:	dfc00415 	stw	ra,16(sp)
   289f0:	df000315 	stw	fp,12(sp)
   289f4:	df000304 	addi	fp,sp,12
	printf("Processing...\r\n");
   289f8:	010000f4 	movhi	r4,3
   289fc:	21099104 	addi	r4,r4,9796
   28a00:	002eb800 	call	2eb80 <puts>

	FAT_HANDLE hFat = 0;
   28a04:	e03ffd15 	stw	zero,-12(fp)

	do {
		hFat = init_SD();
   28a08:	002026c0 	call	2026c <init_SD>
   28a0c:	e0bffd15 	stw	r2,-12(fp)
	} while (!hFat);
   28a10:	e0bffd17 	ldw	r2,-12(fp)
   28a14:	103ffc26 	beq	r2,zero,28a08 <_gp+0xfffed9c8>

	if (hFat){
   28a18:	e0bffd17 	ldw	r2,-12(fp)
   28a1c:	10001226 	beq	r2,zero,28a68 <my_list_test+0x80>
		printf("sdcard mount success!\n");
   28a20:	010000f4 	movhi	r4,3
   28a24:	21099504 	addi	r4,r4,9812
   28a28:	002eb800 	call	2eb80 <puts>
		printf("Root Directory Item Count:%d\n", Fat_FileCount(hFat));
   28a2c:	e13ffd17 	ldw	r4,-12(fp)
   28a30:	0020eb80 	call	20eb8 <Fat_FileCount>
   28a34:	100b883a 	mov	r5,r2
   28a38:	010000f4 	movhi	r4,3
   28a3c:	21099b04 	addi	r4,r4,9836
   28a40:	002ea900 	call	2ea90 <printf>
		printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE2-115 board and reset.\r\n");
		return -1;
	}


	FILENAMES list = list_files(hFat);
   28a44:	e13ffd17 	ldw	r4,-12(fp)
   28a48:	00203bc0 	call	203bc <list_files>
   28a4c:	1009883a 	mov	r4,r2
   28a50:	180b883a 	mov	r5,r3
   28a54:	e13ffe15 	stw	r4,-8(fp)
   28a58:	e17fff15 	stw	r5,-4(fp)
	if (list.size == 0 && list.filenames == NULL) {
   28a5c:	e0bffe17 	ldw	r2,-8(fp)
   28a60:	10000f1e 	bne	r2,zero,28aa0 <my_list_test+0xb8>
   28a64:	00000506 	br	28a7c <my_list_test+0x94>
		printf("sdcard mount success!\n");
		printf("Root Directory Item Count:%d\n", Fat_FileCount(hFat));
		//Fat_Test(hFat, "text.txt");
	}else{
		//printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE2-115 board and press KEY3.\r\n");
		printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE2-115 board and reset.\r\n");
   28a68:	010000f4 	movhi	r4,3
   28a6c:	2109a304 	addi	r4,r4,9868
   28a70:	002eb800 	call	2eb80 <puts>
		return -1;
   28a74:	00bfffc4 	movi	r2,-1
   28a78:	00001006 	br	28abc <my_list_test+0xd4>
	}


	FILENAMES list = list_files(hFat);
	if (list.size == 0 && list.filenames == NULL) {
   28a7c:	e0bfff17 	ldw	r2,-4(fp)
   28a80:	1000071e 	bne	r2,zero,28aa0 <my_list_test+0xb8>
		printf("bad listing\r\n");
   28a84:	010000f4 	movhi	r4,3
   28a88:	2109b904 	addi	r4,r4,9956
   28a8c:	002eb800 	call	2eb80 <puts>
		close_SD(hFat);
   28a90:	e13ffd17 	ldw	r4,-12(fp)
   28a94:	00207300 	call	20730 <close_SD>
		return -1;
   28a98:	00bfffc4 	movi	r2,-1
   28a9c:	00000706 	br	28abc <my_list_test+0xd4>
	}
	print_filenames(list, 1);
   28aa0:	01800044 	movi	r6,1
   28aa4:	e13ffe17 	ldw	r4,-8(fp)
   28aa8:	e17fff17 	ldw	r5,-4(fp)
   28aac:	00207640 	call	20764 <print_filenames>

	close_SD(hFat);
   28ab0:	e13ffd17 	ldw	r4,-12(fp)
   28ab4:	00207300 	call	20730 <close_SD>

	return 0;
   28ab8:	0005883a 	mov	r2,zero
}
   28abc:	e037883a 	mov	sp,fp
   28ac0:	dfc00117 	ldw	ra,4(sp)
   28ac4:	df000017 	ldw	fp,0(sp)
   28ac8:	dec00204 	addi	sp,sp,8
   28acc:	f800283a 	ret

00028ad0 <save_state>:

void save_state(FAT_HANDLE hFat, FILENAMES list) {
   28ad0:	deffeb04 	addi	sp,sp,-84
   28ad4:	dfc01415 	stw	ra,80(sp)
   28ad8:	df001315 	stw	fp,76(sp)
   28adc:	ddc01215 	stw	r23,72(sp)
   28ae0:	dd801115 	stw	r22,68(sp)
   28ae4:	dd401015 	stw	r21,64(sp)
   28ae8:	dd000f15 	stw	r20,60(sp)
   28aec:	dcc00e15 	stw	r19,56(sp)
   28af0:	dc800d15 	stw	r18,52(sp)
   28af4:	dc400c15 	stw	r17,48(sp)
   28af8:	dc000b15 	stw	r16,44(sp)
   28afc:	df001304 	addi	fp,sp,76
   28b00:	e13ff415 	stw	r4,-48(fp)
   28b04:	e17ff515 	stw	r5,-44(fp)
   28b08:	e1bff615 	stw	r6,-40(fp)
	printf("SAVE STATE WAS REQUESTED\r\n");
   28b0c:	010000f4 	movhi	r4,3
   28b10:	2109bd04 	addi	r4,r4,9972
   28b14:	002eb800 	call	2eb80 <puts>

	// false if no game was selected (length = 0)
	if (curr_game_filename_len) {
   28b18:	d0a0d217 	ldw	r2,-31928(gp)
   28b1c:	10000b26 	beq	r2,zero,28b4c <save_state+0x7c>
		printf("NAME: %s\r\n", curr_game_filename);
   28b20:	d0a0d117 	ldw	r2,-31932(gp)
   28b24:	100b883a 	mov	r5,r2
   28b28:	010000f4 	movhi	r4,3
   28b2c:	2109c404 	addi	r4,r4,10000
   28b30:	002ea900 	call	2ea90 <printf>
		printf("NAME LEN: %d\r\n", curr_game_filename_len);
   28b34:	d0a0d217 	ldw	r2,-31928(gp)
   28b38:	100b883a 	mov	r5,r2
   28b3c:	010000f4 	movhi	r4,3
   28b40:	2109c704 	addi	r4,r4,10012
   28b44:	002ea900 	call	2ea90 <printf>
   28b48:	00000506 	br	28b60 <save_state+0x90>
	} else {
		curr_game_filename = "save";
   28b4c:	008000f4 	movhi	r2,3
   28b50:	1089cb04 	addi	r2,r2,10028
   28b54:	d0a0d115 	stw	r2,-31932(gp)
		curr_game_filename_len = 4;
   28b58:	00800104 	movi	r2,4
   28b5c:	d0a0d215 	stw	r2,-31928(gp)
	}

	int curr_save_num = -1;
   28b60:	00bfffc4 	movi	r2,-1
   28b64:	e0bfed15 	stw	r2,-76(fp)
	// checking for save state tag
	if (curr_game_filename_len > 3 && curr_game_filename[curr_game_filename_len-3] == '_') {
   28b68:	d0a0d217 	ldw	r2,-31928(gp)
   28b6c:	10800110 	cmplti	r2,r2,4
   28b70:	1000181e 	bne	r2,zero,28bd4 <save_state+0x104>
   28b74:	d0e0d117 	ldw	r3,-31932(gp)
   28b78:	d0a0d217 	ldw	r2,-31928(gp)
   28b7c:	10bfff44 	addi	r2,r2,-3
   28b80:	1885883a 	add	r2,r3,r2
   28b84:	10800003 	ldbu	r2,0(r2)
   28b88:	10803fcc 	andi	r2,r2,255
   28b8c:	1080201c 	xori	r2,r2,128
   28b90:	10bfe004 	addi	r2,r2,-128
   28b94:	108017d8 	cmpnei	r2,r2,95
   28b98:	10000e1e 	bne	r2,zero,28bd4 <save_state+0x104>
		curr_save_num = string_to_num(curr_game_filename, curr_game_filename_len, 2);
   28b9c:	d0a0d117 	ldw	r2,-31932(gp)
   28ba0:	d0e0d217 	ldw	r3,-31928(gp)
   28ba4:	01800084 	movi	r6,2
   28ba8:	180b883a 	mov	r5,r3
   28bac:	1009883a 	mov	r4,r2
   28bb0:	00288600 	call	28860 <string_to_num>
   28bb4:	e0bfed15 	stw	r2,-76(fp)
		curr_game_filename_len -= 3; // updating length for the save state tag not to appear
   28bb8:	d0a0d217 	ldw	r2,-31928(gp)
   28bbc:	10bfff44 	addi	r2,r2,-3
   28bc0:	d0a0d215 	stw	r2,-31928(gp)
		printf("CURR_SAVE_NUM: %02d\r\n", curr_save_num);
   28bc4:	e17fed17 	ldw	r5,-76(fp)
   28bc8:	010000f4 	movhi	r4,3
   28bcc:	2109cd04 	addi	r4,r4,10036
   28bd0:	002ea900 	call	2ea90 <printf>

	}

	// obtaining the last save number
	for (int i = curr_game_idx+1; i < list.size; i++) { // maybe use 0 at beginning?
   28bd4:	d0a0d017 	ldw	r2,-31936(gp)
   28bd8:	10800044 	addi	r2,r2,1
   28bdc:	e0bfee15 	stw	r2,-72(fp)
   28be0:	00003d06 	br	28cd8 <save_state+0x208>
		if (strncmp(curr_game_filename, list.filenames[i], curr_game_filename_len) == 0 && list.filenames[i][curr_game_filename_len] == '_') {
   28be4:	d120d117 	ldw	r4,-31932(gp)
   28be8:	e0fff617 	ldw	r3,-40(fp)
   28bec:	e0bfee17 	ldw	r2,-72(fp)
   28bf0:	1085883a 	add	r2,r2,r2
   28bf4:	1085883a 	add	r2,r2,r2
   28bf8:	1885883a 	add	r2,r3,r2
   28bfc:	10800017 	ldw	r2,0(r2)
   28c00:	d0e0d217 	ldw	r3,-31928(gp)
   28c04:	180d883a 	mov	r6,r3
   28c08:	100b883a 	mov	r5,r2
   28c0c:	002ef140 	call	2ef14 <strncmp>
   28c10:	10002e1e 	bne	r2,zero,28ccc <save_state+0x1fc>
   28c14:	e0fff617 	ldw	r3,-40(fp)
   28c18:	e0bfee17 	ldw	r2,-72(fp)
   28c1c:	1085883a 	add	r2,r2,r2
   28c20:	1085883a 	add	r2,r2,r2
   28c24:	1885883a 	add	r2,r3,r2
   28c28:	10800017 	ldw	r2,0(r2)
   28c2c:	d0e0d217 	ldw	r3,-31928(gp)
   28c30:	10c5883a 	add	r2,r2,r3
   28c34:	10800003 	ldbu	r2,0(r2)
   28c38:	10803fcc 	andi	r2,r2,255
   28c3c:	1080201c 	xori	r2,r2,128
   28c40:	10bfe004 	addi	r2,r2,-128
   28c44:	108017d8 	cmpnei	r2,r2,95
   28c48:	1000201e 	bne	r2,zero,28ccc <save_state+0x1fc>
			printf("STRING: %s\r\n", list.filenames[i]);
   28c4c:	e0fff617 	ldw	r3,-40(fp)
   28c50:	e0bfee17 	ldw	r2,-72(fp)
   28c54:	1085883a 	add	r2,r2,r2
   28c58:	1085883a 	add	r2,r2,r2
   28c5c:	1885883a 	add	r2,r3,r2
   28c60:	10800017 	ldw	r2,0(r2)
   28c64:	100b883a 	mov	r5,r2
   28c68:	010000f4 	movhi	r4,3
   28c6c:	2109d304 	addi	r4,r4,10060
   28c70:	002ea900 	call	2ea90 <printf>

			int next_num = string_to_num(list.filenames[i], curr_game_filename_len+3, 2);
   28c74:	e0fff617 	ldw	r3,-40(fp)
   28c78:	e0bfee17 	ldw	r2,-72(fp)
   28c7c:	1085883a 	add	r2,r2,r2
   28c80:	1085883a 	add	r2,r2,r2
   28c84:	1885883a 	add	r2,r3,r2
   28c88:	10c00017 	ldw	r3,0(r2)
   28c8c:	d0a0d217 	ldw	r2,-31928(gp)
   28c90:	108000c4 	addi	r2,r2,3
   28c94:	01800084 	movi	r6,2
   28c98:	100b883a 	mov	r5,r2
   28c9c:	1809883a 	mov	r4,r3
   28ca0:	00288600 	call	28860 <string_to_num>
   28ca4:	e0bfef15 	stw	r2,-68(fp)
			printf("FOUND ANOTHER: %d\r\n", next_num);
   28ca8:	e17fef17 	ldw	r5,-68(fp)
   28cac:	010000f4 	movhi	r4,3
   28cb0:	2109d704 	addi	r4,r4,10076
   28cb4:	002ea900 	call	2ea90 <printf>
			if (next_num > curr_save_num) curr_save_num = next_num;
   28cb8:	e0bfef17 	ldw	r2,-68(fp)
   28cbc:	e0ffed17 	ldw	r3,-76(fp)
   28cc0:	1880020e 	bge	r3,r2,28ccc <save_state+0x1fc>
   28cc4:	e0bfef17 	ldw	r2,-68(fp)
   28cc8:	e0bfed15 	stw	r2,-76(fp)
		printf("CURR_SAVE_NUM: %02d\r\n", curr_save_num);

	}

	// obtaining the last save number
	for (int i = curr_game_idx+1; i < list.size; i++) { // maybe use 0 at beginning?
   28ccc:	e0bfee17 	ldw	r2,-72(fp)
   28cd0:	10800044 	addi	r2,r2,1
   28cd4:	e0bfee15 	stw	r2,-72(fp)
   28cd8:	e0bff517 	ldw	r2,-44(fp)
   28cdc:	e0ffee17 	ldw	r3,-72(fp)
   28ce0:	18bfc036 	bltu	r3,r2,28be4 <_gp+0xfffedba4>
			int next_num = string_to_num(list.filenames[i], curr_game_filename_len+3, 2);
			printf("FOUND ANOTHER: %d\r\n", next_num);
			if (next_num > curr_save_num) curr_save_num = next_num;
		}
	}
	curr_save_num ++;
   28ce4:	e0bfed17 	ldw	r2,-76(fp)
   28ce8:	10800044 	addi	r2,r2,1
   28cec:	e0bfed15 	stw	r2,-76(fp)
	char save_num[3];
	snprintf(save_num, 3, "%02d", curr_save_num);
   28cf0:	e0bff304 	addi	r2,fp,-52
   28cf4:	e1ffed17 	ldw	r7,-76(fp)
   28cf8:	018000f4 	movhi	r6,3
   28cfc:	3189dc04 	addi	r6,r6,10096
   28d00:	014000c4 	movi	r5,3
   28d04:	1009883a 	mov	r4,r2
   28d08:	002ecac0 	call	2ecac <snprintf>

	printf("BASE NAME LEN: %d\r\n", curr_game_filename_len);
   28d0c:	d0a0d217 	ldw	r2,-31928(gp)
   28d10:	100b883a 	mov	r5,r2
   28d14:	010000f4 	movhi	r4,3
   28d18:	2109de04 	addi	r4,r4,10104
   28d1c:	002ea900 	call	2ea90 <printf>
	char filename[curr_game_filename_len+3+4]; // +3 for save state tag, +4 for extension
   28d20:	d0a0d217 	ldw	r2,-31928(gp)
   28d24:	108001c4 	addi	r2,r2,7
   28d28:	d807883a 	mov	r3,sp
   28d2c:	e0fff715 	stw	r3,-36(fp)
   28d30:	10ffffc4 	addi	r3,r2,-1
   28d34:	e0fff015 	stw	r3,-64(fp)
   28d38:	1007883a 	mov	r3,r2
   28d3c:	182d883a 	mov	r22,r3
   28d40:	002f883a 	mov	r23,zero
   28d44:	b006d77a 	srli	r3,r22,29
   28d48:	b82690fa 	slli	r19,r23,3
   28d4c:	1ce6b03a 	or	r19,r3,r19
   28d50:	b02490fa 	slli	r18,r22,3
   28d54:	1007883a 	mov	r3,r2
   28d58:	1829883a 	mov	r20,r3
   28d5c:	002b883a 	mov	r21,zero
   28d60:	a006d77a 	srli	r3,r20,29
   28d64:	a82290fa 	slli	r17,r21,3
   28d68:	1c62b03a 	or	r17,r3,r17
   28d6c:	a02090fa 	slli	r16,r20,3
   28d70:	108000c4 	addi	r2,r2,3
   28d74:	1004d0ba 	srli	r2,r2,2
   28d78:	1085883a 	add	r2,r2,r2
   28d7c:	1085883a 	add	r2,r2,r2
   28d80:	d8b7c83a 	sub	sp,sp,r2
   28d84:	d805883a 	mov	r2,sp
   28d88:	1005883a 	mov	r2,r2
   28d8c:	e0bff115 	stw	r2,-60(fp)
	strncpy(filename, curr_game_filename, curr_game_filename_len);
   28d90:	e0bff117 	ldw	r2,-60(fp)
   28d94:	d0e0d117 	ldw	r3,-31932(gp)
   28d98:	d120d217 	ldw	r4,-31928(gp)
   28d9c:	200d883a 	mov	r6,r4
   28da0:	180b883a 	mov	r5,r3
   28da4:	1009883a 	mov	r4,r2
   28da8:	002ef740 	call	2ef74 <strncpy>
	strncat(filename, "_", 1);
   28dac:	e43ff117 	ldw	r16,-60(fp)
   28db0:	8009883a 	mov	r4,r16
   28db4:	002ee980 	call	2ee98 <strlen>
   28db8:	8085883a 	add	r2,r16,r2
   28dbc:	00c017c4 	movi	r3,95
   28dc0:	10c00005 	stb	r3,0(r2)
   28dc4:	10000045 	stb	zero,1(r2)
	strncat(filename, save_num, 2);
   28dc8:	e0bff117 	ldw	r2,-60(fp)
   28dcc:	e0fff304 	addi	r3,fp,-52
   28dd0:	01800084 	movi	r6,2
   28dd4:	180b883a 	mov	r5,r3
   28dd8:	1009883a 	mov	r4,r2
   28ddc:	002eeb40 	call	2eeb4 <strncat>
	strncat(filename, ".sna", 4);
   28de0:	e43ff117 	ldw	r16,-60(fp)
   28de4:	8009883a 	mov	r4,r16
   28de8:	002ee980 	call	2ee98 <strlen>
   28dec:	8085883a 	add	r2,r16,r2
   28df0:	00c00b84 	movi	r3,46
   28df4:	10c00005 	stb	r3,0(r2)
   28df8:	00c01cc4 	movi	r3,115
   28dfc:	10c00045 	stb	r3,1(r2)
   28e00:	00c01b84 	movi	r3,110
   28e04:	10c00085 	stb	r3,2(r2)
   28e08:	00c01844 	movi	r3,97
   28e0c:	10c000c5 	stb	r3,3(r2)
   28e10:	10000105 	stb	zero,4(r2)
	printf("FINAL FILENAME:%s\r\n", filename);
   28e14:	e0bff117 	ldw	r2,-60(fp)
   28e18:	100b883a 	mov	r5,r2
   28e1c:	010000f4 	movhi	r4,3
   28e20:	2109e304 	addi	r4,r4,10124
   28e24:	002ea900 	call	2ea90 <printf>
	printf("FILENAME OOF: %02x", filename[4]); // there is a random 1 value in names with 4 letters
   28e28:	e0bff117 	ldw	r2,-60(fp)
   28e2c:	10800103 	ldbu	r2,4(r2)
   28e30:	10803fcc 	andi	r2,r2,255
   28e34:	1080201c 	xori	r2,r2,128
   28e38:	10bfe004 	addi	r2,r2,-128
   28e3c:	100b883a 	mov	r5,r2
   28e40:	010000f4 	movhi	r4,3
   28e44:	2109e804 	addi	r4,r4,10144
   28e48:	002ea900 	call	2ea90 <printf>

	int ret = save_SNA(hFat, filename);
   28e4c:	e0bff117 	ldw	r2,-60(fp)
   28e50:	100b883a 	mov	r5,r2
   28e54:	e13ff417 	ldw	r4,-48(fp)
   28e58:	00275240 	call	27524 <save_SNA>
   28e5c:	e0bff215 	stw	r2,-56(fp)
	if (ret) {
   28e60:	e0bff217 	ldw	r2,-56(fp)
   28e64:	10000326 	beq	r2,zero,28e74 <save_state+0x3a4>
		printf("Save file went wrong\r\n");
   28e68:	010000f4 	movhi	r4,3
   28e6c:	2109ed04 	addi	r4,r4,10164
   28e70:	002eb800 	call	2eb80 <puts>
   28e74:	e6fff717 	ldw	sp,-36(fp)
	}
	//char filename[curr_game_filename_len+6];
	//strncpy(filename, curr_game_filename, curr_game_filename_len);
}
   28e78:	0001883a 	nop
   28e7c:	e6fff804 	addi	sp,fp,-32
   28e80:	dfc00917 	ldw	ra,36(sp)
   28e84:	df000817 	ldw	fp,32(sp)
   28e88:	ddc00717 	ldw	r23,28(sp)
   28e8c:	dd800617 	ldw	r22,24(sp)
   28e90:	dd400517 	ldw	r21,20(sp)
   28e94:	dd000417 	ldw	r20,16(sp)
   28e98:	dcc00317 	ldw	r19,12(sp)
   28e9c:	dc800217 	ldw	r18,8(sp)
   28ea0:	dc400117 	ldw	r17,4(sp)
   28ea4:	dc000017 	ldw	r16,0(sp)
   28ea8:	dec00a04 	addi	sp,sp,40
   28eac:	f800283a 	ret

00028eb0 <load_page>:

void load_page(FILENAMES list) {
   28eb0:	deffe504 	addi	sp,sp,-108
   28eb4:	dfc01a15 	stw	ra,104(sp)
   28eb8:	df001915 	stw	fp,100(sp)
   28ebc:	ddc01815 	stw	r23,96(sp)
   28ec0:	dd801715 	stw	r22,92(sp)
   28ec4:	dd401615 	stw	r21,88(sp)
   28ec8:	dd001515 	stw	r20,84(sp)
   28ecc:	dcc01415 	stw	r19,80(sp)
   28ed0:	dc801315 	stw	r18,76(sp)
   28ed4:	dc401215 	stw	r17,72(sp)
   28ed8:	dc001115 	stw	r16,68(sp)
   28edc:	df001904 	addi	fp,sp,100
   28ee0:	e13ff315 	stw	r4,-52(fp)
   28ee4:	e17ff415 	stw	r5,-48(fp)
	int page_num = get_page_num();
   28ee8:	002a1a40 	call	2a1a4 <get_page_num>
   28eec:	e0bfea15 	stw	r2,-88(fp)
	printf("PAGE: %d\r\n", page_num);
   28ef0:	e17fea17 	ldw	r5,-88(fp)
   28ef4:	010000f4 	movhi	r4,3
   28ef8:	2109f304 	addi	r4,r4,10188
   28efc:	002ea900 	call	2ea90 <printf>
	int n_entries = 16;
   28f00:	00800404 	movi	r2,16
   28f04:	e0bfe715 	stw	r2,-100(fp)
	int start_idx = page_num*16;
   28f08:	e0bfea17 	ldw	r2,-88(fp)
   28f0c:	1004913a 	slli	r2,r2,4
   28f10:	e0bfeb15 	stw	r2,-84(fp)

	if (list.size < (start_idx + n_entries))
   28f14:	e0bff317 	ldw	r2,-52(fp)
   28f18:	e13feb17 	ldw	r4,-84(fp)
   28f1c:	e0ffe717 	ldw	r3,-100(fp)
   28f20:	20c7883a 	add	r3,r4,r3
   28f24:	10c0052e 	bgeu	r2,r3,28f3c <load_page+0x8c>
		n_entries = list.size - page_num*16;
   28f28:	e0bff317 	ldw	r2,-52(fp)
   28f2c:	e0ffea17 	ldw	r3,-88(fp)
   28f30:	1806913a 	slli	r3,r3,4
   28f34:	10c5c83a 	sub	r2,r2,r3
   28f38:	e0bfe715 	stw	r2,-100(fp)

	DMA_request(10);
   28f3c:	01000284 	movi	r4,10
   28f40:	002982c0 	call	2982c <DMA_request>
	n_entries++; // to account for the title
   28f44:	e0bfe717 	ldw	r2,-100(fp)
   28f48:	10800044 	addi	r2,r2,1
   28f4c:	e0bfe715 	stw	r2,-100(fp)

	// Writing the menu text table for file list menu
	alt_u16 addr = PAGE_DATA_ADDR;
   28f50:	00b00004 	movi	r2,-16384
   28f54:	e0bfe80d 	sth	r2,-96(fp)
	write_mem(addr++, n_entries); // DEFB $n_entries
   28f58:	e0bfe80b 	ldhu	r2,-96(fp)
   28f5c:	10c00044 	addi	r3,r2,1
   28f60:	e0ffe80d 	sth	r3,-96(fp)
   28f64:	10ffffcc 	andi	r3,r2,65535
   28f68:	e0bfe717 	ldw	r2,-100(fp)
   28f6c:	10803fcc 	andi	r2,r2,255
   28f70:	100b883a 	mov	r5,r2
   28f74:	1809883a 	mov	r4,r3
   28f78:	0029a380 	call	29a38 <write_mem>
	char* title = "SD LOADER";
   28f7c:	008000f4 	movhi	r2,3
   28f80:	1089f604 	addi	r2,r2,10200
   28f84:	e0bfec15 	stw	r2,-80(fp)
	write_buf_mem(addr, title, 0, strlen(title));
   28f88:	e0bfe80b 	ldhu	r2,-96(fp)
   28f8c:	e0bff515 	stw	r2,-44(fp)
   28f90:	e13fec17 	ldw	r4,-80(fp)
   28f94:	002ee980 	call	2ee98 <strlen>
   28f98:	100f883a 	mov	r7,r2
   28f9c:	000d883a 	mov	r6,zero
   28fa0:	e17fec17 	ldw	r5,-80(fp)
   28fa4:	e13ff517 	ldw	r4,-44(fp)
   28fa8:	0029b480 	call	29b48 <write_buf_mem>
	addr += strlen(title);
   28fac:	e13fec17 	ldw	r4,-80(fp)
   28fb0:	002ee980 	call	2ee98 <strlen>
   28fb4:	1007883a 	mov	r3,r2
   28fb8:	e0bfe80b 	ldhu	r2,-96(fp)
   28fbc:	1885883a 	add	r2,r3,r2
   28fc0:	e0bfe80d 	sth	r2,-96(fp)
	write_mem(addr++, 0xFF); // terminate char
   28fc4:	e0bfe80b 	ldhu	r2,-96(fp)
   28fc8:	10c00044 	addi	r3,r2,1
   28fcc:	e0ffe80d 	sth	r3,-96(fp)
   28fd0:	10bfffcc 	andi	r2,r2,65535
   28fd4:	01403fc4 	movi	r5,255
   28fd8:	1009883a 	mov	r4,r2
   28fdc:	0029a380 	call	29a38 <write_mem>

	for (int i = start_idx; i < start_idx + (n_entries-1); i++) {
   28fe0:	e0bfeb17 	ldw	r2,-84(fp)
   28fe4:	e0bfe915 	stw	r2,-92(fp)
   28fe8:	00001c06 	br	2905c <load_page+0x1ac>
		int name_len = strlen(list.filenames[i]);
   28fec:	e0fff417 	ldw	r3,-48(fp)
   28ff0:	e0bfe917 	ldw	r2,-92(fp)
   28ff4:	1085883a 	add	r2,r2,r2
   28ff8:	1085883a 	add	r2,r2,r2
   28ffc:	1885883a 	add	r2,r3,r2
   29000:	10800017 	ldw	r2,0(r2)
   29004:	1009883a 	mov	r4,r2
   29008:	002ee980 	call	2ee98 <strlen>
   2900c:	e0bfed15 	stw	r2,-76(fp)
		write_buf_mem(addr, list.filenames[i], 0, name_len);
   29010:	e13fe80b 	ldhu	r4,-96(fp)
   29014:	e0fff417 	ldw	r3,-48(fp)
   29018:	e0bfe917 	ldw	r2,-92(fp)
   2901c:	1085883a 	add	r2,r2,r2
   29020:	1085883a 	add	r2,r2,r2
   29024:	1885883a 	add	r2,r3,r2
   29028:	10800017 	ldw	r2,0(r2)
   2902c:	e1ffed17 	ldw	r7,-76(fp)
   29030:	000d883a 	mov	r6,zero
   29034:	100b883a 	mov	r5,r2
   29038:	0029b480 	call	29b48 <write_buf_mem>
		addr += name_len;
   2903c:	e0bfed17 	ldw	r2,-76(fp)
   29040:	1007883a 	mov	r3,r2
   29044:	e0bfe80b 	ldhu	r2,-96(fp)
   29048:	1885883a 	add	r2,r3,r2
   2904c:	e0bfe80d 	sth	r2,-96(fp)
	char* title = "SD LOADER";
	write_buf_mem(addr, title, 0, strlen(title));
	addr += strlen(title);
	write_mem(addr++, 0xFF); // terminate char

	for (int i = start_idx; i < start_idx + (n_entries-1); i++) {
   29050:	e0bfe917 	ldw	r2,-92(fp)
   29054:	10800044 	addi	r2,r2,1
   29058:	e0bfe915 	stw	r2,-92(fp)
   2905c:	e0bfe717 	ldw	r2,-100(fp)
   29060:	10ffffc4 	addi	r3,r2,-1
   29064:	e0bfeb17 	ldw	r2,-84(fp)
   29068:	1885883a 	add	r2,r3,r2
   2906c:	e0ffe917 	ldw	r3,-92(fp)
   29070:	18bfde16 	blt	r3,r2,28fec <_gp+0xfffedfac>
		write_buf_mem(addr, list.filenames[i], 0, name_len);
		addr += name_len;
	}

	// Forming page number string
	int all_pages = ((list.size-1) / 16) + 1; // calculates number of existing pages
   29074:	e0bff317 	ldw	r2,-52(fp)
   29078:	10bfffc4 	addi	r2,r2,-1
   2907c:	1004d13a 	srli	r2,r2,4
   29080:	10800044 	addi	r2,r2,1
   29084:	e0bfee15 	stw	r2,-72(fp)
	page_num++; // to start the page at number 1
   29088:	e0bfea17 	ldw	r2,-88(fp)
   2908c:	10800044 	addi	r2,r2,1
   29090:	e0bfea15 	stw	r2,-88(fp)
	int str_len = (int)((ceil(log10(page_num))+1)*sizeof(char)) // number of digits page_num has (WRONG)
   29094:	e13fea17 	ldw	r4,-88(fp)
   29098:	002e3a00 	call	2e3a0 <__floatsidf>
   2909c:	100b883a 	mov	r5,r2
   290a0:	180d883a 	mov	r6,r3
   290a4:	2809883a 	mov	r4,r5
   290a8:	300b883a 	mov	r5,r6
   290ac:	002a6980 	call	2a698 <log10>
   290b0:	100b883a 	mov	r5,r2
   290b4:	180d883a 	mov	r6,r3
   290b8:	2809883a 	mov	r4,r5
   290bc:	300b883a 	mov	r5,r6
   290c0:	002a4b80 	call	2a4b8 <ceil>
   290c4:	1011883a 	mov	r8,r2
   290c8:	1813883a 	mov	r9,r3
   290cc:	000d883a 	mov	r6,zero
   290d0:	01cffc34 	movhi	r7,16368
   290d4:	4009883a 	mov	r4,r8
   290d8:	480b883a 	mov	r5,r9
   290dc:	002bce40 	call	2bce4 <__adddf3>
   290e0:	1009883a 	mov	r4,r2
   290e4:	180b883a 	mov	r5,r3
   290e8:	2005883a 	mov	r2,r4
   290ec:	2807883a 	mov	r3,r5
   290f0:	1009883a 	mov	r4,r2
   290f4:	180b883a 	mov	r5,r3
   290f8:	002e3200 	call	2e320 <__fixdfsi>
			+ sizeof(char)									// the '/' char's size
			+ (int)((ceil(log10(all_pages))+1)*sizeof(char));  // number of digits all_pages has (WRONG)
   290fc:	e0bff615 	stw	r2,-40(fp)
   29100:	e13fee17 	ldw	r4,-72(fp)
   29104:	002e3a00 	call	2e3a0 <__floatsidf>
   29108:	100b883a 	mov	r5,r2
   2910c:	180d883a 	mov	r6,r3
   29110:	2809883a 	mov	r4,r5
   29114:	300b883a 	mov	r5,r6
   29118:	002a6980 	call	2a698 <log10>
   2911c:	100b883a 	mov	r5,r2
   29120:	180d883a 	mov	r6,r3
   29124:	2809883a 	mov	r4,r5
   29128:	300b883a 	mov	r5,r6
   2912c:	002a4b80 	call	2a4b8 <ceil>
   29130:	1011883a 	mov	r8,r2
   29134:	1813883a 	mov	r9,r3
   29138:	000d883a 	mov	r6,zero
   2913c:	01cffc34 	movhi	r7,16368
   29140:	4009883a 	mov	r4,r8
   29144:	480b883a 	mov	r5,r9
   29148:	002bce40 	call	2bce4 <__adddf3>
   2914c:	1009883a 	mov	r4,r2
   29150:	180b883a 	mov	r5,r3
   29154:	2005883a 	mov	r2,r4
   29158:	2807883a 	mov	r3,r5
   2915c:	1009883a 	mov	r4,r2
   29160:	180b883a 	mov	r5,r3
   29164:	002e3200 	call	2e320 <__fixdfsi>
   29168:	e0fff617 	ldw	r3,-40(fp)
   2916c:	1885883a 	add	r2,r3,r2
   29170:	10800044 	addi	r2,r2,1
	}

	// Forming page number string
	int all_pages = ((list.size-1) / 16) + 1; // calculates number of existing pages
	page_num++; // to start the page at number 1
	int str_len = (int)((ceil(log10(page_num))+1)*sizeof(char)) // number of digits page_num has (WRONG)
   29174:	e0bfef15 	stw	r2,-68(fp)
			+ sizeof(char)									// the '/' char's size
			+ (int)((ceil(log10(all_pages))+1)*sizeof(char));  // number of digits all_pages has (WRONG)

	char pages_str[str_len];
   29178:	e0bfef17 	ldw	r2,-68(fp)
   2917c:	d807883a 	mov	r3,sp
   29180:	e0fff715 	stw	r3,-36(fp)
   29184:	10ffffc4 	addi	r3,r2,-1
   29188:	e0fff015 	stw	r3,-64(fp)
   2918c:	1007883a 	mov	r3,r2
   29190:	182d883a 	mov	r22,r3
   29194:	002f883a 	mov	r23,zero
   29198:	b006d77a 	srli	r3,r22,29
   2919c:	b82690fa 	slli	r19,r23,3
   291a0:	1ce6b03a 	or	r19,r3,r19
   291a4:	b02490fa 	slli	r18,r22,3
   291a8:	1007883a 	mov	r3,r2
   291ac:	1829883a 	mov	r20,r3
   291b0:	002b883a 	mov	r21,zero
   291b4:	a006d77a 	srli	r3,r20,29
   291b8:	a82290fa 	slli	r17,r21,3
   291bc:	1c62b03a 	or	r17,r3,r17
   291c0:	a02090fa 	slli	r16,r20,3
   291c4:	108000c4 	addi	r2,r2,3
   291c8:	1004d0ba 	srli	r2,r2,2
   291cc:	1085883a 	add	r2,r2,r2
   291d0:	1085883a 	add	r2,r2,r2
   291d4:	d8b7c83a 	sub	sp,sp,r2
   291d8:	d805883a 	mov	r2,sp
   291dc:	1005883a 	mov	r2,r2
   291e0:	e0bff115 	stw	r2,-60(fp)
    sprintf(pages_str, "%d/%d", page_num, all_pages);
   291e4:	e0bff117 	ldw	r2,-60(fp)
   291e8:	e1ffee17 	ldw	r7,-72(fp)
   291ec:	e1bfea17 	ldw	r6,-88(fp)
   291f0:	014000f4 	movhi	r5,3
   291f4:	2949f904 	addi	r5,r5,10212
   291f8:	1009883a 	mov	r4,r2
   291fc:	002edc80 	call	2edc8 <sprintf>
    str_len = strlen(pages_str);
   29200:	e0bff117 	ldw	r2,-60(fp)
   29204:	1009883a 	mov	r4,r2
   29208:	002ee980 	call	2ee98 <strlen>
   2920c:	e0bfef15 	stw	r2,-68(fp)
    write_buf_mem(addr, pages_str, 0, str_len); // writes the page string to memory
   29210:	e0bfe80b 	ldhu	r2,-96(fp)
   29214:	e0fff117 	ldw	r3,-60(fp)
   29218:	e1ffef17 	ldw	r7,-68(fp)
   2921c:	000d883a 	mov	r6,zero
   29220:	180b883a 	mov	r5,r3
   29224:	1009883a 	mov	r4,r2
   29228:	0029b480 	call	29b48 <write_buf_mem>
    addr += str_len;		// advances address
   2922c:	e0bfef17 	ldw	r2,-68(fp)
   29230:	1007883a 	mov	r3,r2
   29234:	e0bfe80b 	ldhu	r2,-96(fp)
   29238:	1885883a 	add	r2,r3,r2
   2923c:	e0bfe80d 	sth	r2,-96(fp)
    write_mem(addr++, 0xFF); // terminate char
   29240:	e0bfe80b 	ldhu	r2,-96(fp)
   29244:	10c00044 	addi	r3,r2,1
   29248:	e0ffe80d 	sth	r3,-96(fp)
   2924c:	10bfffcc 	andi	r2,r2,65535
   29250:	01403fc4 	movi	r5,255
   29254:	1009883a 	mov	r4,r2
   29258:	0029a380 	call	29a38 <write_mem>

    // writes the number of pages left
    alt_u8 remaining = all_pages-page_num;
   2925c:	e0bfee17 	ldw	r2,-72(fp)
   29260:	1007883a 	mov	r3,r2
   29264:	e0bfea17 	ldw	r2,-88(fp)
   29268:	1885c83a 	sub	r2,r3,r2
   2926c:	e0bff205 	stb	r2,-56(fp)
    addr = PAGES_LEFT_ADDR;
   29270:	00bb0244 	movi	r2,-5111
   29274:	e0bfe80d 	sth	r2,-96(fp)
    write_mem(addr, remaining);
   29278:	e0bfe80b 	ldhu	r2,-96(fp)
   2927c:	e0fff203 	ldbu	r3,-56(fp)
   29280:	180b883a 	mov	r5,r3
   29284:	1009883a 	mov	r4,r2
   29288:	0029a380 	call	29a38 <write_mem>
    printf("REMAINING: %d\r\n",remaining);
   2928c:	e0bff203 	ldbu	r2,-56(fp)
   29290:	100b883a 	mov	r5,r2
   29294:	010000f4 	movhi	r4,3
   29298:	2109fb04 	addi	r4,r4,10220
   2929c:	002ea900 	call	2ea90 <printf>

	// writing NMI code (just a return)
	addr = NMI_ROUTINE_ADDR;
   292a0:	00900004 	movi	r2,16384
   292a4:	e0bfe80d 	sth	r2,-96(fp)
	write_mem(addr++, RETN1);
   292a8:	e0bfe80b 	ldhu	r2,-96(fp)
   292ac:	10c00044 	addi	r3,r2,1
   292b0:	e0ffe80d 	sth	r3,-96(fp)
   292b4:	10bfffcc 	andi	r2,r2,65535
   292b8:	01403b44 	movi	r5,237
   292bc:	1009883a 	mov	r4,r2
   292c0:	0029a380 	call	29a38 <write_mem>
	write_mem(addr++, RETN2);
   292c4:	e0bfe80b 	ldhu	r2,-96(fp)
   292c8:	10c00044 	addi	r3,r2,1
   292cc:	e0ffe80d 	sth	r3,-96(fp)
   292d0:	10bfffcc 	andi	r2,r2,65535
   292d4:	01401144 	movi	r5,69
   292d8:	1009883a 	mov	r4,r2
   292dc:	0029a380 	call	29a38 <write_mem>

	DMA_stop_w_interrupt();
   292e0:	0029f240 	call	29f24 <DMA_stop_w_interrupt>
   292e4:	e6fff717 	ldw	sp,-36(fp)
}
   292e8:	0001883a 	nop
   292ec:	e6fff804 	addi	sp,fp,-32
   292f0:	dfc00917 	ldw	ra,36(sp)
   292f4:	df000817 	ldw	fp,32(sp)
   292f8:	ddc00717 	ldw	r23,28(sp)
   292fc:	dd800617 	ldw	r22,24(sp)
   29300:	dd400517 	ldw	r21,20(sp)
   29304:	dd000417 	ldw	r20,16(sp)
   29308:	dcc00317 	ldw	r19,12(sp)
   2930c:	dc800217 	ldw	r18,8(sp)
   29310:	dc400117 	ldw	r17,4(sp)
   29314:	dc000017 	ldw	r16,0(sp)
   29318:	dec00a04 	addi	sp,sp,40
   2931c:	f800283a 	ret

00029320 <load_game>:

void load_game(FAT_HANDLE hFat, FILENAMES list) {
   29320:	deffeb04 	addi	sp,sp,-84
   29324:	dfc01415 	stw	ra,80(sp)
   29328:	df001315 	stw	fp,76(sp)
   2932c:	ddc01215 	stw	r23,72(sp)
   29330:	dd801115 	stw	r22,68(sp)
   29334:	dd401015 	stw	r21,64(sp)
   29338:	dd000f15 	stw	r20,60(sp)
   2933c:	dcc00e15 	stw	r19,56(sp)
   29340:	dc800d15 	stw	r18,52(sp)
   29344:	dc400c15 	stw	r17,48(sp)
   29348:	dc000b15 	stw	r16,44(sp)
   2934c:	df001304 	addi	fp,sp,76
   29350:	e13ff415 	stw	r4,-48(fp)
   29354:	e17ff515 	stw	r5,-44(fp)
   29358:	e1bff615 	stw	r6,-40(fp)
   2935c:	d805883a 	mov	r2,sp
   29360:	e0bff715 	stw	r2,-36(fp)
	int page_num = get_page_num();
   29364:	002a1a40 	call	2a1a4 <get_page_num>
   29368:	e0bfed15 	stw	r2,-76(fp)
	int game_num = get_game_num();
   2936c:	002a20c0 	call	2a20c <get_game_num>
   29370:	e0bfee15 	stw	r2,-72(fp)
	printf("PAGE: %d\r\n", page_num);
   29374:	e17fed17 	ldw	r5,-76(fp)
   29378:	010000f4 	movhi	r4,3
   2937c:	2109f304 	addi	r4,r4,10188
   29380:	002ea900 	call	2ea90 <printf>
	printf("GAME: %d\r\n", game_num);
   29384:	e17fee17 	ldw	r5,-72(fp)
   29388:	010000f4 	movhi	r4,3
   2938c:	2109ff04 	addi	r4,r4,10236
   29390:	002ea900 	call	2ea90 <printf>

	int curr_game_idx = (page_num*16 + game_num);
   29394:	e0bfed17 	ldw	r2,-76(fp)
   29398:	1006913a 	slli	r3,r2,4
   2939c:	e0bfee17 	ldw	r2,-72(fp)
   293a0:	1885883a 	add	r2,r3,r2
   293a4:	e0bfef15 	stw	r2,-68(fp)
	printf("idx: %d\r\n", curr_game_idx);
   293a8:	e17fef17 	ldw	r5,-68(fp)
   293ac:	010000f4 	movhi	r4,3
   293b0:	210a0204 	addi	r4,r4,10248
   293b4:	002ea900 	call	2ea90 <printf>
	if (list.size < curr_game_idx) {
   293b8:	e0fff517 	ldw	r3,-44(fp)
   293bc:	e0bfef17 	ldw	r2,-68(fp)
   293c0:	1880042e 	bgeu	r3,r2,293d4 <load_game+0xb4>
		printf("something went wrong :(\r\n");
   293c4:	010000f4 	movhi	r4,3
   293c8:	210a0504 	addi	r4,r4,10260
   293cc:	002eb800 	call	2eb80 <puts>
		return;
   293d0:	00006c06 	br	29584 <load_game+0x264>
	}

	// restoring the name
	int name_len = strlen(list.filenames[curr_game_idx]);
   293d4:	e0fff617 	ldw	r3,-40(fp)
   293d8:	e0bfef17 	ldw	r2,-68(fp)
   293dc:	1085883a 	add	r2,r2,r2
   293e0:	1085883a 	add	r2,r2,r2
   293e4:	1885883a 	add	r2,r3,r2
   293e8:	10800017 	ldw	r2,0(r2)
   293ec:	1009883a 	mov	r4,r2
   293f0:	002ee980 	call	2ee98 <strlen>
   293f4:	e0bff015 	stw	r2,-64(fp)
	char filename[name_len];
   293f8:	e0bff017 	ldw	r2,-64(fp)
   293fc:	10ffffc4 	addi	r3,r2,-1
   29400:	e0fff115 	stw	r3,-60(fp)
   29404:	1007883a 	mov	r3,r2
   29408:	182d883a 	mov	r22,r3
   2940c:	002f883a 	mov	r23,zero
   29410:	b006d77a 	srli	r3,r22,29
   29414:	b82690fa 	slli	r19,r23,3
   29418:	1ce6b03a 	or	r19,r3,r19
   2941c:	b02490fa 	slli	r18,r22,3
   29420:	1007883a 	mov	r3,r2
   29424:	1829883a 	mov	r20,r3
   29428:	002b883a 	mov	r21,zero
   2942c:	a006d77a 	srli	r3,r20,29
   29430:	a82290fa 	slli	r17,r21,3
   29434:	1c62b03a 	or	r17,r3,r17
   29438:	a02090fa 	slli	r16,r20,3
   2943c:	108000c4 	addi	r2,r2,3
   29440:	1004d0ba 	srli	r2,r2,2
   29444:	1085883a 	add	r2,r2,r2
   29448:	1085883a 	add	r2,r2,r2
   2944c:	d8b7c83a 	sub	sp,sp,r2
   29450:	d805883a 	mov	r2,sp
   29454:	1005883a 	mov	r2,r2
   29458:	e0bff215 	stw	r2,-56(fp)
	strncpy(filename, list.filenames[curr_game_idx], name_len);
   2945c:	e13ff217 	ldw	r4,-56(fp)
   29460:	e0fff617 	ldw	r3,-40(fp)
   29464:	e0bfef17 	ldw	r2,-68(fp)
   29468:	1085883a 	add	r2,r2,r2
   2946c:	1085883a 	add	r2,r2,r2
   29470:	1885883a 	add	r2,r3,r2
   29474:	10800017 	ldw	r2,0(r2)
   29478:	e0fff017 	ldw	r3,-64(fp)
   2947c:	180d883a 	mov	r6,r3
   29480:	100b883a 	mov	r5,r2
   29484:	002ef740 	call	2ef74 <strncpy>
	filename[name_len] = '\0'; // have to stress this, cause sometimes it would have an extra unreadable characters
   29488:	e0fff217 	ldw	r3,-56(fp)
   2948c:	e0bff017 	ldw	r2,-64(fp)
   29490:	1885883a 	add	r2,r3,r2
   29494:	10000005 	stb	zero,0(r2)

	// saving filename globally, without extension
	curr_game_filename_len = name_len - 4;
   29498:	e0bff017 	ldw	r2,-64(fp)
   2949c:	10bfff04 	addi	r2,r2,-4
   294a0:	d0a0d215 	stw	r2,-31928(gp)
	strncpy(curr_game_filename, list.filenames[curr_game_idx], curr_game_filename_len);
   294a4:	d120d117 	ldw	r4,-31932(gp)
   294a8:	e0fff617 	ldw	r3,-40(fp)
   294ac:	e0bfef17 	ldw	r2,-68(fp)
   294b0:	1085883a 	add	r2,r2,r2
   294b4:	1085883a 	add	r2,r2,r2
   294b8:	1885883a 	add	r2,r3,r2
   294bc:	10800017 	ldw	r2,0(r2)
   294c0:	d0e0d217 	ldw	r3,-31928(gp)
   294c4:	180d883a 	mov	r6,r3
   294c8:	100b883a 	mov	r5,r2
   294cc:	002ef740 	call	2ef74 <strncpy>
	curr_game_filename[curr_game_filename_len] = '\0';
   294d0:	d0a0d117 	ldw	r2,-31932(gp)
   294d4:	d0e0d217 	ldw	r3,-31928(gp)
   294d8:	10c5883a 	add	r2,r2,r3
   294dc:	10000005 	stb	zero,0(r2)


	printf("GAME SELECTED before: %s\r\n", filename);
   294e0:	e0bff217 	ldw	r2,-56(fp)
   294e4:	100b883a 	mov	r5,r2
   294e8:	010000f4 	movhi	r4,3
   294ec:	210a0c04 	addi	r4,r4,10288
   294f0:	002ea900 	call	2ea90 <printf>
	filename[name_len-1] = filename[name_len-1] - 0x80;
   294f4:	e0bff017 	ldw	r2,-64(fp)
   294f8:	10bfffc4 	addi	r2,r2,-1
   294fc:	e0fff017 	ldw	r3,-64(fp)
   29500:	18ffffc4 	addi	r3,r3,-1
   29504:	e13ff217 	ldw	r4,-56(fp)
   29508:	20c7883a 	add	r3,r4,r3
   2950c:	18c00003 	ldbu	r3,0(r3)
   29510:	18ffe004 	addi	r3,r3,-128
   29514:	1809883a 	mov	r4,r3
   29518:	e0fff217 	ldw	r3,-56(fp)
   2951c:	1885883a 	add	r2,r3,r2
   29520:	11000005 	stb	r4,0(r2)

	printf("GAME SELECTED: %s\r\n", filename);
   29524:	e0bff217 	ldw	r2,-56(fp)
   29528:	100b883a 	mov	r5,r2
   2952c:	010000f4 	movhi	r4,3
   29530:	210a1304 	addi	r4,r4,10316
   29534:	002ea900 	call	2ea90 <printf>
	printf("FILENAME_LEN: %d (%d)\r\n", strlen(filename), name_len);
   29538:	e0bff217 	ldw	r2,-56(fp)
   2953c:	1009883a 	mov	r4,r2
   29540:	002ee980 	call	2ee98 <strlen>
   29544:	e1bff017 	ldw	r6,-64(fp)
   29548:	100b883a 	mov	r5,r2
   2954c:	010000f4 	movhi	r4,3
   29550:	210a1804 	addi	r4,r4,10336
   29554:	002ea900 	call	2ea90 <printf>

	int ret = load_file(hFat, filename, name_len);
   29558:	e0bff217 	ldw	r2,-56(fp)
   2955c:	e1bff017 	ldw	r6,-64(fp)
   29560:	100b883a 	mov	r5,r2
   29564:	e13ff417 	ldw	r4,-48(fp)
   29568:	0026db80 	call	26db8 <load_file>
   2956c:	e0bff315 	stw	r2,-52(fp)
	if (ret) {
   29570:	e0bff317 	ldw	r2,-52(fp)
   29574:	10000326 	beq	r2,zero,29584 <load_game+0x264>
		printf("Load file went wrong\r\n");
   29578:	010000f4 	movhi	r4,3
   2957c:	210a1e04 	addi	r4,r4,10360
   29580:	002eb800 	call	2eb80 <puts>
   29584:	e6fff717 	ldw	sp,-36(fp)
	}
}
   29588:	e6fff804 	addi	sp,fp,-32
   2958c:	dfc00917 	ldw	ra,36(sp)
   29590:	df000817 	ldw	fp,32(sp)
   29594:	ddc00717 	ldw	r23,28(sp)
   29598:	dd800617 	ldw	r22,24(sp)
   2959c:	dd400517 	ldw	r21,20(sp)
   295a0:	dd000417 	ldw	r20,16(sp)
   295a4:	dcc00317 	ldw	r19,12(sp)
   295a8:	dc800217 	ldw	r18,8(sp)
   295ac:	dc400117 	ldw	r17,4(sp)
   295b0:	dc000017 	ldw	r16,0(sp)
   295b4:	dec00a04 	addi	sp,sp,40
   295b8:	f800283a 	ret

000295bc <main>:

int main() {
   295bc:	defff804 	addi	sp,sp,-32
   295c0:	dfc00715 	stw	ra,28(sp)
   295c4:	df000615 	stw	fp,24(sp)
   295c8:	df000604 	addi	fp,sp,24
	curr_game_idx = 0;
   295cc:	d020d015 	stw	zero,-31936(gp)
	curr_game_filename_len = 0;
   295d0:	d020d215 	stw	zero,-31928(gp)
	curr_game_filename = malloc(50 * sizeof(char));
   295d4:	01000c84 	movi	r4,50
   295d8:	002e7a80 	call	2e7a8 <malloc>
   295dc:	d0a0d115 	stw	r2,-31932(gp)
	//return load_SNA("SENBAL.SNA");
	//return load_SNA("DAAW.SNA");
	//return load_SNA("DIABLO1.SNA");
	//return load_SNA("CLOUD99.SNA");

	DMA_init();
   295e0:	00297cc0 	call	297cc <DMA_init>

	printf("Injecting menu...\r\n");
   295e4:	010000f4 	movhi	r4,3
   295e8:	210a2404 	addi	r4,r4,10384
   295ec:	002eb800 	call	2eb80 <puts>
	int res = inject_menu();
   295f0:	00288fc0 	call	288fc <inject_menu>
   295f4:	e0bffc15 	stw	r2,-16(fp)
	if (res == -1) {
   295f8:	e0bffc17 	ldw	r2,-16(fp)
   295fc:	10bfffd8 	cmpnei	r2,r2,-1
   29600:	1000051e 	bne	r2,zero,29618 <main+0x5c>
		printf("inject menu went wrong\r\n");
   29604:	010000f4 	movhi	r4,3
   29608:	210a2904 	addi	r4,r4,10404
   2960c:	002eb800 	call	2eb80 <puts>
		return res;
   29610:	e0bffc17 	ldw	r2,-16(fp)
   29614:	00006806 	br	297b8 <main+0x1fc>
	}

	printf("Initializing SD...\r\n");
   29618:	010000f4 	movhi	r4,3
   2961c:	210a2f04 	addi	r4,r4,10428
   29620:	002eb800 	call	2eb80 <puts>
	FAT_HANDLE hFat = 0;
   29624:	e03ffa15 	stw	zero,-24(fp)
	int tries = 10;
   29628:	00800284 	movi	r2,10
   2962c:	e0bffb15 	stw	r2,-20(fp)
	while (tries-- > 0) {
   29630:	00000706 	br	29650 <main+0x94>
		hFat = init_SD();
   29634:	002026c0 	call	2026c <init_SD>
   29638:	e0bffa15 	stw	r2,-24(fp)
		if (hFat) break;
   2963c:	e0bffa17 	ldw	r2,-24(fp)
   29640:	1000081e 	bne	r2,zero,29664 <main+0xa8>
		printf("retrying...");
   29644:	010000f4 	movhi	r4,3
   29648:	210a3404 	addi	r4,r4,10448
   2964c:	002ea900 	call	2ea90 <printf>
	}

	printf("Initializing SD...\r\n");
	FAT_HANDLE hFat = 0;
	int tries = 10;
	while (tries-- > 0) {
   29650:	e0bffb17 	ldw	r2,-20(fp)
   29654:	10ffffc4 	addi	r3,r2,-1
   29658:	e0fffb15 	stw	r3,-20(fp)
   2965c:	00bff516 	blt	zero,r2,29634 <_gp+0xfffee5f4>
   29660:	00000106 	br	29668 <main+0xac>
		hFat = init_SD();
		if (hFat) break;
   29664:	0001883a 	nop
		printf("retrying...");
	}
	printf("LOAD\r\n");
   29668:	010000f4 	movhi	r4,3
   2966c:	210a3704 	addi	r4,r4,10460
   29670:	002eb800 	call	2eb80 <puts>
	//return load_z80(hFat, "BUBBUS.z80");

	//return load_z80(hFat, "MANICM.z80"); // NORMAL
	//return load_z80("MISSILGZ.z80"); // CONTROLLER REQUIRED?

	printf("\r\nRetrieving files");
   29674:	010000f4 	movhi	r4,3
   29678:	210a3904 	addi	r4,r4,10468
   2967c:	002ea900 	call	2ea90 <printf>
	FILENAMES list = list_files(hFat);
   29680:	e13ffa17 	ldw	r4,-24(fp)
   29684:	00203bc0 	call	203bc <list_files>
   29688:	1009883a 	mov	r4,r2
   2968c:	180b883a 	mov	r5,r3
   29690:	e13ffe15 	stw	r4,-8(fp)
   29694:	e17fff15 	stw	r5,-4(fp)
	if (list.size == 0 && list.filenames == NULL) {
   29698:	e0bffe17 	ldw	r2,-8(fp)
   2969c:	1000091e 	bne	r2,zero,296c4 <main+0x108>
   296a0:	e0bfff17 	ldw	r2,-4(fp)
   296a4:	1000071e 	bne	r2,zero,296c4 <main+0x108>
		printf("bad listing\r\n");
   296a8:	010000f4 	movhi	r4,3
   296ac:	2109b904 	addi	r4,r4,9956
   296b0:	002eb800 	call	2eb80 <puts>
		close_SD(hFat);
   296b4:	e13ffa17 	ldw	r4,-24(fp)
   296b8:	00207300 	call	20730 <close_SD>
		return -1;
   296bc:	00bfffc4 	movi	r2,-1
   296c0:	00003d06 	br	297b8 <main+0x1fc>
	}

	//////////////////////////

	print_filenames(list, 0);
   296c4:	000d883a 	mov	r6,zero
   296c8:	e13ffe17 	ldw	r4,-8(fp)
   296cc:	e17fff17 	ldw	r5,-4(fp)
   296d0:	00207640 	call	20764 <print_filenames>

	/////////////////////////


	while (1) {
		printf("\r\nListening...\r\n");
   296d4:	010000f4 	movhi	r4,3
   296d8:	21098604 	addi	r4,r4,9752
   296dc:	002eb800 	call	2eb80 <puts>
		listen_for_en();
   296e0:	002a0200 	call	2a020 <listen_for_en>
		printf("enable happened\r\n");
   296e4:	010000f4 	movhi	r4,3
   296e8:	21098a04 	addi	r4,r4,9768
   296ec:	002eb800 	call	2eb80 <puts>

		enum per_if_type type = get_if_type();
   296f0:	002a0b40 	call	2a0b4 <get_if_type>
   296f4:	e0bffd15 	stw	r2,-12(fp)

		switch(type) {
   296f8:	e0bffd17 	ldw	r2,-12(fp)
   296fc:	10c00060 	cmpeqi	r3,r2,1
   29700:	1800221e 	bne	r3,zero,2978c <main+0x1d0>
   29704:	0080052e 	bgeu	zero,r2,2971c <main+0x160>
   29708:	10c000a0 	cmpeqi	r3,r2,2
   2970c:	1800121e 	bne	r3,zero,29758 <main+0x19c>
   29710:	10800120 	cmpeqi	r2,r2,4
   29714:	1000051e 	bne	r2,zero,2972c <main+0x170>
   29718:	00002006 	br	2979c <main+0x1e0>
			case NA:
				printf("NONE\r\n");
   2971c:	010000f4 	movhi	r4,3
   29720:	210a3e04 	addi	r4,r4,10488
   29724:	002eb800 	call	2eb80 <puts>
				break;
   29728:	00002106 	br	297b0 <main+0x1f4>
			case STATE:
				if (is_write()) {
   2972c:	002a2800 	call	2a280 <is_write>
   29730:	10000526 	beq	r2,zero,29748 <main+0x18c>
					save_state(hFat, list);
   29734:	e17ffe17 	ldw	r5,-8(fp)
   29738:	e1bfff17 	ldw	r6,-4(fp)
   2973c:	e13ffa17 	ldw	r4,-24(fp)
   29740:	0028ad00 	call	28ad0 <save_state>
				} else {
					printf("THERE IS NO READ FOR SAVE STATE CMD!\r\n");
				}
				break;
   29744:	00001a06 	br	297b0 <main+0x1f4>
				break;
			case STATE:
				if (is_write()) {
					save_state(hFat, list);
				} else {
					printf("THERE IS NO READ FOR SAVE STATE CMD!\r\n");
   29748:	010000f4 	movhi	r4,3
   2974c:	210a4004 	addi	r4,r4,10496
   29750:	002eb800 	call	2eb80 <puts>
				}
				break;
   29754:	00001606 	br	297b0 <main+0x1f4>
			case SD:
				if (is_read()) {
   29758:	002a2500 	call	2a250 <is_read>
   2975c:	10000426 	beq	r2,zero,29770 <main+0x1b4>
					load_page(list);
   29760:	e13ffe17 	ldw	r4,-8(fp)
   29764:	e17fff17 	ldw	r5,-4(fp)
   29768:	0028eb00 	call	28eb0 <load_page>
				} else if (is_write()) {
					load_game(hFat, list);
				}
				break;
   2976c:	00000f06 	br	297ac <main+0x1f0>
				}
				break;
			case SD:
				if (is_read()) {
					load_page(list);
				} else if (is_write()) {
   29770:	002a2800 	call	2a280 <is_write>
   29774:	10000d26 	beq	r2,zero,297ac <main+0x1f0>
					load_game(hFat, list);
   29778:	e17ffe17 	ldw	r5,-8(fp)
   2977c:	e1bfff17 	ldw	r6,-4(fp)
   29780:	e13ffa17 	ldw	r4,-24(fp)
   29784:	00293200 	call	29320 <load_game>
				}
				break;
   29788:	00000806 	br	297ac <main+0x1f0>
			case INIT:
				printf("shouldnt be happening\r\n");
   2978c:	010000f4 	movhi	r4,3
   29790:	210a4a04 	addi	r4,r4,10536
   29794:	002eb800 	call	2eb80 <puts>
				break;
   29798:	00000506 	br	297b0 <main+0x1f4>
			default:
				printf("default\r\n");
   2979c:	010000f4 	movhi	r4,3
   297a0:	210a5004 	addi	r4,r4,10560
   297a4:	002eb800 	call	2eb80 <puts>
   297a8:	00000106 	br	297b0 <main+0x1f4>
				if (is_read()) {
					load_page(list);
				} else if (is_write()) {
					load_game(hFat, list);
				}
				break;
   297ac:	0001883a 	nop
				printf("shouldnt be happening\r\n");
				break;
			default:
				printf("default\r\n");
		}
		per_cmd_ack();
   297b0:	002a2b00 	call	2a2b0 <per_cmd_ack>
	}
   297b4:	003fc706 	br	296d4 <_gp+0xfffee694>

	close_SD(hFat);
	free(curr_game_filename);
	return 0;

}
   297b8:	e037883a 	mov	sp,fp
   297bc:	dfc00117 	ldw	ra,4(sp)
   297c0:	df000017 	ldw	fp,0(sp)
   297c4:	dec00204 	addi	sp,sp,8
   297c8:	f800283a 	ret

000297cc <DMA_init>:
#include "dma_hw.h"

int DMA_state;
alt_u8 ctrl_bus_state;

void DMA_init() {
   297cc:	deffff04 	addi	sp,sp,-4
   297d0:	df000015 	stw	fp,0(sp)
   297d4:	d839883a 	mov	fp,sp
	DATA_IN;
   297d8:	0007883a 	mov	r3,zero
   297dc:	00800134 	movhi	r2,4
   297e0:	10842104 	addi	r2,r2,4228
   297e4:	10c00035 	stwio	r3,0(r2)

	DMA_state = 0;
   297e8:	d020d415 	stw	zero,-31920(gp)
	ctrl_bus_state = 0b00001111;
   297ec:	008003c4 	movi	r2,15
   297f0:	d0a0d305 	stb	r2,-31924(gp)
	CTRL_BUS_SET(ctrl_bus_state);
   297f4:	d0a0d303 	ldbu	r2,-31924(gp)
   297f8:	10c03fcc 	andi	r3,r2,255
   297fc:	00800134 	movhi	r2,4
   29800:	10842804 	addi	r2,r2,4256
   29804:	10c00035 	stwio	r3,0(r2)
	BUS_REQ_CLR;
   29808:	00c00044 	movi	r3,1
   2980c:	00800134 	movhi	r2,4
   29810:	10841c04 	addi	r2,r2,4208
   29814:	10c00035 	stwio	r3,0(r2)
}
   29818:	0001883a 	nop
   2981c:	e037883a 	mov	sp,fp
   29820:	df000017 	ldw	fp,0(sp)
   29824:	dec00104 	addi	sp,sp,4
   29828:	f800283a 	ret

0002982c <DMA_request>:

/**
 * Requests DMA from the Z80, attempting "tries" number of times
 */
int DMA_request(int tries) {
   2982c:	defffd04 	addi	sp,sp,-12
   29830:	df000215 	stw	fp,8(sp)
   29834:	df000204 	addi	fp,sp,8
   29838:	e13fff15 	stw	r4,-4(fp)
	int i;

	if (DMA_state == 1 && BUS_ACK_GET == 1)
   2983c:	d0a0d417 	ldw	r2,-31920(gp)
   29840:	10800058 	cmpnei	r2,r2,1
   29844:	1000061e 	bne	r2,zero,29860 <DMA_request+0x34>
   29848:	00800134 	movhi	r2,4
   2984c:	10841804 	addi	r2,r2,4192
   29850:	10800037 	ldwio	r2,0(r2)
   29854:	1000021e 	bne	r2,zero,29860 <DMA_request+0x34>
		return ALREADY_DONE;
   29858:	00bfff84 	movi	r2,-2
   2985c:	00001806 	br	298c0 <DMA_request+0x94>


	BUS_REQ_SET;
   29860:	0007883a 	mov	r3,zero
   29864:	00800134 	movhi	r2,4
   29868:	10841c04 	addi	r2,r2,4208
   2986c:	10c00035 	stwio	r3,0(r2)

	i=0;
   29870:	e03ffe15 	stw	zero,-8(fp)
	do {
		if (i >= tries) {
   29874:	e0fffe17 	ldw	r3,-8(fp)
   29878:	e0bfff17 	ldw	r2,-4(fp)
   2987c:	18800616 	blt	r3,r2,29898 <DMA_request+0x6c>
			BUS_REQ_CLR;
   29880:	00c00044 	movi	r3,1
   29884:	00800134 	movhi	r2,4
   29888:	10841c04 	addi	r2,r2,4208
   2988c:	10c00035 	stwio	r3,0(r2)
			return TIMEOUT;
   29890:	00bfffc4 	movi	r2,-1
   29894:	00000a06 	br	298c0 <DMA_request+0x94>
		}
		i++;
   29898:	e0bffe17 	ldw	r2,-8(fp)
   2989c:	10800044 	addi	r2,r2,1
   298a0:	e0bffe15 	stw	r2,-8(fp)
	} while (BUS_ACK_GET != 1);
   298a4:	00800134 	movhi	r2,4
   298a8:	10841804 	addi	r2,r2,4192
   298ac:	10800037 	ldwio	r2,0(r2)
   298b0:	103ff01e 	bne	r2,zero,29874 <_gp+0xfffee834>

	DMA_state = 1;
   298b4:	00800044 	movi	r2,1
   298b8:	d0a0d415 	stw	r2,-31920(gp)
	return 0;
   298bc:	0005883a 	mov	r2,zero
}
   298c0:	e037883a 	mov	sp,fp
   298c4:	df000017 	ldw	fp,0(sp)
   298c8:	dec00104 	addi	sp,sp,4
   298cc:	f800283a 	ret

000298d0 <read_mem>:

alt_u8 read_mem(alt_u16 addr) {
   298d0:	defffc04 	addi	sp,sp,-16
   298d4:	dfc00315 	stw	ra,12(sp)
   298d8:	df000215 	stw	fp,8(sp)
   298dc:	df000204 	addi	fp,sp,8
   298e0:	2005883a 	mov	r2,r4
   298e4:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 data;

	DATA_IN;
   298e8:	0007883a 	mov	r3,zero
   298ec:	00800134 	movhi	r2,4
   298f0:	10842104 	addi	r2,r2,4228
   298f4:	10c00035 	stwio	r3,0(r2)

	ctrl_bus_state &= READ_SET;
   298f8:	d0a0d303 	ldbu	r2,-31924(gp)
   298fc:	108001cc 	andi	r2,r2,7
   29900:	d0a0d305 	stb	r2,-31924(gp)
	ctrl_bus_state &= MEM_REQ_SET;
   29904:	d0a0d303 	ldbu	r2,-31924(gp)
   29908:	1080034c 	andi	r2,r2,13
   2990c:	d0a0d305 	stb	r2,-31924(gp)
	CTRL_BUS_SET(ctrl_bus_state);
   29910:	d0a0d303 	ldbu	r2,-31924(gp)
   29914:	10c03fcc 	andi	r3,r2,255
   29918:	00800134 	movhi	r2,4
   2991c:	10842804 	addi	r2,r2,4256
   29920:	10c00035 	stwio	r3,0(r2)

	ADDR_SET(addr);
   29924:	e0ffff0b 	ldhu	r3,-4(fp)
   29928:	00800134 	movhi	r2,4
   2992c:	10842404 	addi	r2,r2,4240
   29930:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   29934:	01001904 	movi	r4,100
   29938:	00303800 	call	30380 <usleep>
	data = DATA_GET;
   2993c:	00800134 	movhi	r2,4
   29940:	10842004 	addi	r2,r2,4224
   29944:	10800037 	ldwio	r2,0(r2)
   29948:	e0bffe05 	stb	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_PIO_BASE, data);
   2994c:	e0fffe03 	ldbu	r3,-8(fp)
   29950:	00800134 	movhi	r2,4
   29954:	10844c04 	addi	r2,r2,4400
   29958:	10c00035 	stwio	r3,0(r2)

	ctrl_bus_state |= MEM_REQ_CLR;
   2995c:	d0a0d303 	ldbu	r2,-31924(gp)
   29960:	10800094 	ori	r2,r2,2
   29964:	d0a0d305 	stb	r2,-31924(gp)
	ctrl_bus_state |= READ_CLR;
   29968:	d0a0d303 	ldbu	r2,-31924(gp)
   2996c:	10800214 	ori	r2,r2,8
   29970:	d0a0d305 	stb	r2,-31924(gp)
	CTRL_BUS_SET(ctrl_bus_state);
   29974:	d0a0d303 	ldbu	r2,-31924(gp)
   29978:	10c03fcc 	andi	r3,r2,255
   2997c:	00800134 	movhi	r2,4
   29980:	10842804 	addi	r2,r2,4256
   29984:	10c00035 	stwio	r3,0(r2)

	return data;
   29988:	e0bffe03 	ldbu	r2,-8(fp)
}
   2998c:	e037883a 	mov	sp,fp
   29990:	dfc00117 	ldw	ra,4(sp)
   29994:	df000017 	ldw	fp,0(sp)
   29998:	dec00204 	addi	sp,sp,8
   2999c:	f800283a 	ret

000299a0 <read_buf_mem>:

void read_buf_mem(alt_u16 addr, int start, int len, alt_u8* ret) {
   299a0:	defff804 	addi	sp,sp,-32
   299a4:	dfc00715 	stw	ra,28(sp)
   299a8:	df000615 	stw	fp,24(sp)
   299ac:	dc000515 	stw	r16,20(sp)
   299b0:	df000604 	addi	fp,sp,24
   299b4:	2005883a 	mov	r2,r4
   299b8:	e17ffc15 	stw	r5,-16(fp)
   299bc:	e1bffd15 	stw	r6,-12(fp)
   299c0:	e1fffe15 	stw	r7,-8(fp)
   299c4:	e0bffb0d 	sth	r2,-20(fp)
	for(int i = start; i < start+len; i++) {
   299c8:	e0bffc17 	ldw	r2,-16(fp)
   299cc:	e0bffa15 	stw	r2,-24(fp)
   299d0:	00000d06 	br	29a08 <read_buf_mem+0x68>
		ret[i] = read_mem(addr++);
   299d4:	e0bffa17 	ldw	r2,-24(fp)
   299d8:	e0fffe17 	ldw	r3,-8(fp)
   299dc:	18a1883a 	add	r16,r3,r2
   299e0:	e0bffb0b 	ldhu	r2,-20(fp)
   299e4:	10c00044 	addi	r3,r2,1
   299e8:	e0fffb0d 	sth	r3,-20(fp)
   299ec:	10bfffcc 	andi	r2,r2,65535
   299f0:	1009883a 	mov	r4,r2
   299f4:	00298d00 	call	298d0 <read_mem>
   299f8:	80800005 	stb	r2,0(r16)

	return data;
}

void read_buf_mem(alt_u16 addr, int start, int len, alt_u8* ret) {
	for(int i = start; i < start+len; i++) {
   299fc:	e0bffa17 	ldw	r2,-24(fp)
   29a00:	10800044 	addi	r2,r2,1
   29a04:	e0bffa15 	stw	r2,-24(fp)
   29a08:	e0fffc17 	ldw	r3,-16(fp)
   29a0c:	e0bffd17 	ldw	r2,-12(fp)
   29a10:	1885883a 	add	r2,r3,r2
   29a14:	e0fffa17 	ldw	r3,-24(fp)
   29a18:	18bfee16 	blt	r3,r2,299d4 <_gp+0xfffee994>
		ret[i] = read_mem(addr++);
	}
}
   29a1c:	0001883a 	nop
   29a20:	e6ffff04 	addi	sp,fp,-4
   29a24:	dfc00217 	ldw	ra,8(sp)
   29a28:	df000117 	ldw	fp,4(sp)
   29a2c:	dc000017 	ldw	r16,0(sp)
   29a30:	dec00304 	addi	sp,sp,12
   29a34:	f800283a 	ret

00029a38 <write_mem>:

void write_mem(alt_u16 addr, const alt_u8 data) {
   29a38:	defffc04 	addi	sp,sp,-16
   29a3c:	dfc00315 	stw	ra,12(sp)
   29a40:	df000215 	stw	fp,8(sp)
   29a44:	df000204 	addi	fp,sp,8
   29a48:	2007883a 	mov	r3,r4
   29a4c:	2805883a 	mov	r2,r5
   29a50:	e0fffe0d 	sth	r3,-8(fp)
   29a54:	e0bfff05 	stb	r2,-4(fp)
	//if (addr >= 0x4000 && addr < 0x4100) {
	if (addr == 0x5800) {
   29a58:	e0bffe0b 	ldhu	r2,-8(fp)
   29a5c:	10960018 	cmpnei	r2,r2,22528
   29a60:	1000071e 	bne	r2,zero,29a80 <write_mem+0x48>
		printf("0x%02x (%c), ", data, data);
   29a64:	e0bfff03 	ldbu	r2,-4(fp)
   29a68:	e0ffff03 	ldbu	r3,-4(fp)
   29a6c:	180d883a 	mov	r6,r3
   29a70:	100b883a 	mov	r5,r2
   29a74:	010000f4 	movhi	r4,3
   29a78:	210a5304 	addi	r4,r4,10572
   29a7c:	002ea900 	call	2ea90 <printf>
	}
	DATA_OUT;
   29a80:	00c03fc4 	movi	r3,255
   29a84:	00800134 	movhi	r2,4
   29a88:	10842104 	addi	r2,r2,4228
   29a8c:	10c00035 	stwio	r3,0(r2)

	ctrl_bus_state &= WRITE_SET;
   29a90:	d0a0d303 	ldbu	r2,-31924(gp)
   29a94:	108002cc 	andi	r2,r2,11
   29a98:	d0a0d305 	stb	r2,-31924(gp)
	ctrl_bus_state &= MEM_REQ_SET;
   29a9c:	d0a0d303 	ldbu	r2,-31924(gp)
   29aa0:	1080034c 	andi	r2,r2,13
   29aa4:	d0a0d305 	stb	r2,-31924(gp)
	CTRL_BUS_SET(ctrl_bus_state);
   29aa8:	d0a0d303 	ldbu	r2,-31924(gp)
   29aac:	10c03fcc 	andi	r3,r2,255
   29ab0:	00800134 	movhi	r2,4
   29ab4:	10842804 	addi	r2,r2,4256
   29ab8:	10c00035 	stwio	r3,0(r2)


	ADDR_SET(addr);
   29abc:	e0fffe0b 	ldhu	r3,-8(fp)
   29ac0:	00800134 	movhi	r2,4
   29ac4:	10842404 	addi	r2,r2,4240
   29ac8:	10c00035 	stwio	r3,0(r2)
	DATA_SET(data);
   29acc:	e0ffff03 	ldbu	r3,-4(fp)
   29ad0:	00800134 	movhi	r2,4
   29ad4:	10842004 	addi	r2,r2,4224
   29ad8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_PIO_BASE, data);
   29adc:	e0ffff03 	ldbu	r3,-4(fp)
   29ae0:	00800134 	movhi	r2,4
   29ae4:	10844c04 	addi	r2,r2,4400
   29ae8:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   29aec:	01001904 	movi	r4,100
   29af0:	00303800 	call	30380 <usleep>

	ctrl_bus_state |= MEM_REQ_CLR;
   29af4:	d0a0d303 	ldbu	r2,-31924(gp)
   29af8:	10800094 	ori	r2,r2,2
   29afc:	d0a0d305 	stb	r2,-31924(gp)
	ctrl_bus_state |= WRITE_CLR;
   29b00:	d0a0d303 	ldbu	r2,-31924(gp)
   29b04:	10800114 	ori	r2,r2,4
   29b08:	d0a0d305 	stb	r2,-31924(gp)
	CTRL_BUS_SET(ctrl_bus_state);
   29b0c:	d0a0d303 	ldbu	r2,-31924(gp)
   29b10:	10c03fcc 	andi	r3,r2,255
   29b14:	00800134 	movhi	r2,4
   29b18:	10842804 	addi	r2,r2,4256
   29b1c:	10c00035 	stwio	r3,0(r2)

	DATA_IN;
   29b20:	0007883a 	mov	r3,zero
   29b24:	00800134 	movhi	r2,4
   29b28:	10842104 	addi	r2,r2,4228
   29b2c:	10c00035 	stwio	r3,0(r2)
}
   29b30:	0001883a 	nop
   29b34:	e037883a 	mov	sp,fp
   29b38:	dfc00117 	ldw	ra,4(sp)
   29b3c:	df000017 	ldw	fp,0(sp)
   29b40:	dec00204 	addi	sp,sp,8
   29b44:	f800283a 	ret

00029b48 <write_buf_mem>:

void write_buf_mem(alt_u16 addr, const alt_u8* data, int start, int len) {
   29b48:	defff904 	addi	sp,sp,-28
   29b4c:	dfc00615 	stw	ra,24(sp)
   29b50:	df000515 	stw	fp,20(sp)
   29b54:	df000504 	addi	fp,sp,20
   29b58:	2005883a 	mov	r2,r4
   29b5c:	e17ffd15 	stw	r5,-12(fp)
   29b60:	e1bffe15 	stw	r6,-8(fp)
   29b64:	e1ffff15 	stw	r7,-4(fp)
   29b68:	e0bffc0d 	sth	r2,-16(fp)
	for (int i = start; i < start+len; i++) {
   29b6c:	e0bffe17 	ldw	r2,-8(fp)
   29b70:	e0bffb15 	stw	r2,-20(fp)
   29b74:	00000e06 	br	29bb0 <write_buf_mem+0x68>
		write_mem(addr++, data[i]);
   29b78:	e0bffc0b 	ldhu	r2,-16(fp)
   29b7c:	10c00044 	addi	r3,r2,1
   29b80:	e0fffc0d 	sth	r3,-16(fp)
   29b84:	113fffcc 	andi	r4,r2,65535
   29b88:	e0bffb17 	ldw	r2,-20(fp)
   29b8c:	e0fffd17 	ldw	r3,-12(fp)
   29b90:	1885883a 	add	r2,r3,r2
   29b94:	10800003 	ldbu	r2,0(r2)
   29b98:	10803fcc 	andi	r2,r2,255
   29b9c:	100b883a 	mov	r5,r2
   29ba0:	0029a380 	call	29a38 <write_mem>

	DATA_IN;
}

void write_buf_mem(alt_u16 addr, const alt_u8* data, int start, int len) {
	for (int i = start; i < start+len; i++) {
   29ba4:	e0bffb17 	ldw	r2,-20(fp)
   29ba8:	10800044 	addi	r2,r2,1
   29bac:	e0bffb15 	stw	r2,-20(fp)
   29bb0:	e0fffe17 	ldw	r3,-8(fp)
   29bb4:	e0bfff17 	ldw	r2,-4(fp)
   29bb8:	1885883a 	add	r2,r3,r2
   29bbc:	e0fffb17 	ldw	r3,-20(fp)
   29bc0:	18bfed16 	blt	r3,r2,29b78 <_gp+0xfffeeb38>
		write_mem(addr++, data[i]);
	}
}
   29bc4:	0001883a 	nop
   29bc8:	e037883a 	mov	sp,fp
   29bcc:	dfc00117 	ldw	ra,4(sp)
   29bd0:	df000017 	ldw	fp,0(sp)
   29bd4:	dec00204 	addi	sp,sp,8
   29bd8:	f800283a 	ret

00029bdc <read_io>:

alt_u8 read_io(alt_u16 addr) {
   29bdc:	defffc04 	addi	sp,sp,-16
   29be0:	dfc00315 	stw	ra,12(sp)
   29be4:	df000215 	stw	fp,8(sp)
   29be8:	df000204 	addi	fp,sp,8
   29bec:	2005883a 	mov	r2,r4
   29bf0:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 data;

	DATA_IN;
   29bf4:	0007883a 	mov	r3,zero
   29bf8:	00800134 	movhi	r2,4
   29bfc:	10842104 	addi	r2,r2,4228
   29c00:	10c00035 	stwio	r3,0(r2)

	ctrl_bus_state &= READ_SET;
   29c04:	d0a0d303 	ldbu	r2,-31924(gp)
   29c08:	108001cc 	andi	r2,r2,7
   29c0c:	d0a0d305 	stb	r2,-31924(gp)
	ctrl_bus_state &= IO_REQ_SET;
   29c10:	d0a0d303 	ldbu	r2,-31924(gp)
   29c14:	1080038c 	andi	r2,r2,14
   29c18:	d0a0d305 	stb	r2,-31924(gp)
	CTRL_BUS_SET(ctrl_bus_state);
   29c1c:	d0a0d303 	ldbu	r2,-31924(gp)
   29c20:	10c03fcc 	andi	r3,r2,255
   29c24:	00800134 	movhi	r2,4
   29c28:	10842804 	addi	r2,r2,4256
   29c2c:	10c00035 	stwio	r3,0(r2)

	ADDR_SET(addr);
   29c30:	e0ffff0b 	ldhu	r3,-4(fp)
   29c34:	00800134 	movhi	r2,4
   29c38:	10842404 	addi	r2,r2,4240
   29c3c:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   29c40:	01001904 	movi	r4,100
   29c44:	00303800 	call	30380 <usleep>
	data = DATA_GET;
   29c48:	00800134 	movhi	r2,4
   29c4c:	10842004 	addi	r2,r2,4224
   29c50:	10800037 	ldwio	r2,0(r2)
   29c54:	e0bffe05 	stb	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_PIO_BASE, data);
   29c58:	e0fffe03 	ldbu	r3,-8(fp)
   29c5c:	00800134 	movhi	r2,4
   29c60:	10844c04 	addi	r2,r2,4400
   29c64:	10c00035 	stwio	r3,0(r2)

	ctrl_bus_state |= IO_REQ_CLR;
   29c68:	d0a0d303 	ldbu	r2,-31924(gp)
   29c6c:	10800054 	ori	r2,r2,1
   29c70:	d0a0d305 	stb	r2,-31924(gp)
	ctrl_bus_state |= READ_CLR;
   29c74:	d0a0d303 	ldbu	r2,-31924(gp)
   29c78:	10800214 	ori	r2,r2,8
   29c7c:	d0a0d305 	stb	r2,-31924(gp)
	CTRL_BUS_SET(ctrl_bus_state);
   29c80:	d0a0d303 	ldbu	r2,-31924(gp)
   29c84:	10c03fcc 	andi	r3,r2,255
   29c88:	00800134 	movhi	r2,4
   29c8c:	10842804 	addi	r2,r2,4256
   29c90:	10c00035 	stwio	r3,0(r2)

	return data;
   29c94:	e0bffe03 	ldbu	r2,-8(fp)
}
   29c98:	e037883a 	mov	sp,fp
   29c9c:	dfc00117 	ldw	ra,4(sp)
   29ca0:	df000017 	ldw	fp,0(sp)
   29ca4:	dec00204 	addi	sp,sp,8
   29ca8:	f800283a 	ret

00029cac <write_io>:
void write_io(alt_u16 addr, alt_u8 data) {
   29cac:	defffc04 	addi	sp,sp,-16
   29cb0:	dfc00315 	stw	ra,12(sp)
   29cb4:	df000215 	stw	fp,8(sp)
   29cb8:	df000204 	addi	fp,sp,8
   29cbc:	2007883a 	mov	r3,r4
   29cc0:	2805883a 	mov	r2,r5
   29cc4:	e0fffe0d 	sth	r3,-8(fp)
   29cc8:	e0bfff05 	stb	r2,-4(fp)
	DATA_OUT;
   29ccc:	00c03fc4 	movi	r3,255
   29cd0:	00800134 	movhi	r2,4
   29cd4:	10842104 	addi	r2,r2,4228
   29cd8:	10c00035 	stwio	r3,0(r2)

	ctrl_bus_state &= WRITE_SET;
   29cdc:	d0a0d303 	ldbu	r2,-31924(gp)
   29ce0:	108002cc 	andi	r2,r2,11
   29ce4:	d0a0d305 	stb	r2,-31924(gp)
	ctrl_bus_state &= IO_REQ_SET;
   29ce8:	d0a0d303 	ldbu	r2,-31924(gp)
   29cec:	1080038c 	andi	r2,r2,14
   29cf0:	d0a0d305 	stb	r2,-31924(gp)
	CTRL_BUS_SET(ctrl_bus_state);
   29cf4:	d0a0d303 	ldbu	r2,-31924(gp)
   29cf8:	10c03fcc 	andi	r3,r2,255
   29cfc:	00800134 	movhi	r2,4
   29d00:	10842804 	addi	r2,r2,4256
   29d04:	10c00035 	stwio	r3,0(r2)


	ADDR_SET(addr);
   29d08:	e0fffe0b 	ldhu	r3,-8(fp)
   29d0c:	00800134 	movhi	r2,4
   29d10:	10842404 	addi	r2,r2,4240
   29d14:	10c00035 	stwio	r3,0(r2)
	DATA_SET(data);
   29d18:	e0ffff03 	ldbu	r3,-4(fp)
   29d1c:	00800134 	movhi	r2,4
   29d20:	10842004 	addi	r2,r2,4224
   29d24:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDG_PIO_BASE, data);
   29d28:	e0ffff03 	ldbu	r3,-4(fp)
   29d2c:	00800134 	movhi	r2,4
   29d30:	10844c04 	addi	r2,r2,4400
   29d34:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   29d38:	01001904 	movi	r4,100
   29d3c:	00303800 	call	30380 <usleep>

	ctrl_bus_state |= IO_REQ_CLR;
   29d40:	d0a0d303 	ldbu	r2,-31924(gp)
   29d44:	10800054 	ori	r2,r2,1
   29d48:	d0a0d305 	stb	r2,-31924(gp)
	ctrl_bus_state |= WRITE_CLR;
   29d4c:	d0a0d303 	ldbu	r2,-31924(gp)
   29d50:	10800114 	ori	r2,r2,4
   29d54:	d0a0d305 	stb	r2,-31924(gp)
	CTRL_BUS_SET(ctrl_bus_state);
   29d58:	d0a0d303 	ldbu	r2,-31924(gp)
   29d5c:	10c03fcc 	andi	r3,r2,255
   29d60:	00800134 	movhi	r2,4
   29d64:	10842804 	addi	r2,r2,4256
   29d68:	10c00035 	stwio	r3,0(r2)

	DATA_IN;
   29d6c:	0007883a 	mov	r3,zero
   29d70:	00800134 	movhi	r2,4
   29d74:	10842104 	addi	r2,r2,4228
   29d78:	10c00035 	stwio	r3,0(r2)
}
   29d7c:	0001883a 	nop
   29d80:	e037883a 	mov	sp,fp
   29d84:	dfc00117 	ldw	ra,4(sp)
   29d88:	df000017 	ldw	fp,0(sp)
   29d8c:	dec00204 	addi	sp,sp,8
   29d90:	f800283a 	ret

00029d94 <wait_for_pc>:

/**
 * Loops until PC value is observed in the address bus or number of tries exceeded
 */
int wait_for_pc(alt_u16 pc, int tries) {
   29d94:	defffc04 	addi	sp,sp,-16
   29d98:	df000315 	stw	fp,12(sp)
   29d9c:	df000304 	addi	fp,sp,12
   29da0:	2005883a 	mov	r2,r4
   29da4:	e17fff15 	stw	r5,-4(fp)
   29da8:	e0bffe0d 	sth	r2,-8(fp)
	alt_u16 addr;
	alt_u16 pc_big = ((pc & 0xFF) << 8) | (pc >> 8);//(pc >> 8); //||
   29dac:	e0bffe0b 	ldhu	r2,-8(fp)
   29db0:	1004923a 	slli	r2,r2,8
   29db4:	1007883a 	mov	r3,r2
   29db8:	e0bffe0b 	ldhu	r2,-8(fp)
   29dbc:	1004d23a 	srli	r2,r2,8
   29dc0:	1884b03a 	or	r2,r3,r2
   29dc4:	e0bffd8d 	sth	r2,-10(fp)
	addr = CPU_ADDR_GET;
   29dc8:	00800134 	movhi	r2,4
   29dcc:	10840804 	addi	r2,r2,4128
   29dd0:	10800037 	ldwio	r2,0(r2)
   29dd4:	e0bffd0d 	sth	r2,-12(fp)

	while(1) {
		if (tries-- < 0) return TIMEOUT;
   29dd8:	e0bfff17 	ldw	r2,-4(fp)
   29ddc:	10ffffc4 	addi	r3,r2,-1
   29de0:	e0ffff15 	stw	r3,-4(fp)
   29de4:	1000020e 	bge	r2,zero,29df0 <wait_for_pc+0x5c>
   29de8:	00bfffc4 	movi	r2,-1
   29dec:	00000a06 	br	29e18 <wait_for_pc+0x84>
		if (addr == pc_big) break;
   29df0:	e0fffd0b 	ldhu	r3,-12(fp)
   29df4:	e0bffd8b 	ldhu	r2,-10(fp)
   29df8:	18800526 	beq	r3,r2,29e10 <wait_for_pc+0x7c>
		addr = CPU_ADDR_GET;
   29dfc:	00800134 	movhi	r2,4
   29e00:	10840804 	addi	r2,r2,4128
   29e04:	10800037 	ldwio	r2,0(r2)
   29e08:	e0bffd0d 	sth	r2,-12(fp)
	}
   29e0c:	003ff206 	br	29dd8 <_gp+0xfffeed98>
	alt_u16 pc_big = ((pc & 0xFF) << 8) | (pc >> 8);//(pc >> 8); //||
	addr = CPU_ADDR_GET;

	while(1) {
		if (tries-- < 0) return TIMEOUT;
		if (addr == pc_big) break;
   29e10:	0001883a 	nop
		addr = CPU_ADDR_GET;
	}
	return 0;
   29e14:	0005883a 	mov	r2,zero
}
   29e18:	e037883a 	mov	sp,fp
   29e1c:	df000017 	ldw	fp,0(sp)
   29e20:	dec00104 	addi	sp,sp,4
   29e24:	f800283a 	ret

00029e28 <wait_until_routine_ends>:

int wait_until_routine_ends(int tries) {
   29e28:	defffd04 	addi	sp,sp,-12
   29e2c:	df000215 	stw	fp,8(sp)
   29e30:	df000204 	addi	fp,sp,8
   29e34:	e13fff15 	stw	r4,-4(fp)
	alt_u16 addr;

	while(1) {
		if (tries-- < 0) return TIMEOUT;
   29e38:	e0bfff17 	ldw	r2,-4(fp)
   29e3c:	10ffffc4 	addi	r3,r2,-1
   29e40:	e0ffff15 	stw	r3,-4(fp)
   29e44:	1000020e 	bge	r2,zero,29e50 <wait_until_routine_ends+0x28>
   29e48:	00bfffc4 	movi	r2,-1
   29e4c:	00000a06 	br	29e78 <wait_until_routine_ends+0x50>
		// TODO make sure endianness is good for this comparison
		if (addr > END_OF_SCREEN) break;
   29e50:	e0bffe0b 	ldhu	r2,-8(fp)
   29e54:	10960030 	cmpltui	r2,r2,22528
   29e58:	10000526 	beq	r2,zero,29e70 <wait_until_routine_ends+0x48>
		addr = CPU_ADDR_GET;
   29e5c:	00800134 	movhi	r2,4
   29e60:	10840804 	addi	r2,r2,4128
   29e64:	10800037 	ldwio	r2,0(r2)
   29e68:	e0bffe0d 	sth	r2,-8(fp)
	}
   29e6c:	003ff206 	br	29e38 <_gp+0xfffeedf8>
	alt_u16 addr;

	while(1) {
		if (tries-- < 0) return TIMEOUT;
		// TODO make sure endianness is good for this comparison
		if (addr > END_OF_SCREEN) break;
   29e70:	0001883a 	nop
		addr = CPU_ADDR_GET;
	}
	return 0;
   29e74:	0005883a 	mov	r2,zero
}
   29e78:	e037883a 	mov	sp,fp
   29e7c:	df000017 	ldw	fp,0(sp)
   29e80:	dec00104 	addi	sp,sp,4
   29e84:	f800283a 	ret

00029e88 <DMA_stop>:

/**
 * Stop DMA, attempting "tries" number of times
 * TODO: Is having multiple tries necessary? just in case?
 */
int DMA_stop(int tries) {
   29e88:	defffd04 	addi	sp,sp,-12
   29e8c:	df000215 	stw	fp,8(sp)
   29e90:	df000204 	addi	fp,sp,8
   29e94:	e13fff15 	stw	r4,-4(fp)
	int i;

	if (DMA_state == 0 && BUS_ACK_GET == 0)
   29e98:	d0a0d417 	ldw	r2,-31920(gp)
   29e9c:	1000061e 	bne	r2,zero,29eb8 <DMA_stop+0x30>
   29ea0:	00800134 	movhi	r2,4
   29ea4:	10841804 	addi	r2,r2,4192
   29ea8:	10800037 	ldwio	r2,0(r2)
   29eac:	10000226 	beq	r2,zero,29eb8 <DMA_stop+0x30>
		return ALREADY_DONE;
   29eb0:	00bfff84 	movi	r2,-2
   29eb4:	00001706 	br	29f14 <DMA_stop+0x8c>


	BUS_REQ_CLR;
   29eb8:	00c00044 	movi	r3,1
   29ebc:	00800134 	movhi	r2,4
   29ec0:	10841c04 	addi	r2,r2,4208
   29ec4:	10c00035 	stwio	r3,0(r2)

	i=0;
   29ec8:	e03ffe15 	stw	zero,-8(fp)
	do {
		if (i >= tries) {
   29ecc:	e0fffe17 	ldw	r3,-8(fp)
   29ed0:	e0bfff17 	ldw	r2,-4(fp)
   29ed4:	18800616 	blt	r3,r2,29ef0 <DMA_stop+0x68>
			BUS_REQ_SET;
   29ed8:	0007883a 	mov	r3,zero
   29edc:	00800134 	movhi	r2,4
   29ee0:	10841c04 	addi	r2,r2,4208
   29ee4:	10c00035 	stwio	r3,0(r2)
			return TIMEOUT;
   29ee8:	00bfffc4 	movi	r2,-1
   29eec:	00000906 	br	29f14 <DMA_stop+0x8c>
		}
		i++;
   29ef0:	e0bffe17 	ldw	r2,-8(fp)
   29ef4:	10800044 	addi	r2,r2,1
   29ef8:	e0bffe15 	stw	r2,-8(fp)
	} while (BUS_ACK_GET != 0);
   29efc:	00800134 	movhi	r2,4
   29f00:	10841804 	addi	r2,r2,4192
   29f04:	10800037 	ldwio	r2,0(r2)
   29f08:	103ff026 	beq	r2,zero,29ecc <_gp+0xfffeee8c>

	DMA_state = 0;
   29f0c:	d020d415 	stw	zero,-31920(gp)
	return 0;
   29f10:	0005883a 	mov	r2,zero
}
   29f14:	e037883a 	mov	sp,fp
   29f18:	df000017 	ldw	fp,0(sp)
   29f1c:	dec00104 	addi	sp,sp,4
   29f20:	f800283a 	ret

00029f24 <DMA_stop_w_interrupt>:

void DMA_stop_w_interrupt() {
   29f24:	defffe04 	addi	sp,sp,-8
   29f28:	dfc00115 	stw	ra,4(sp)
   29f2c:	df000015 	stw	fp,0(sp)
   29f30:	d839883a 	mov	fp,sp
	NMI_SET;
   29f34:	0007883a 	mov	r3,zero
   29f38:	00800134 	movhi	r2,4
   29f3c:	10841404 	addi	r2,r2,4176
   29f40:	10c00035 	stwio	r3,0(r2)
	BUS_REQ_CLR;
   29f44:	00c00044 	movi	r3,1
   29f48:	00800134 	movhi	r2,4
   29f4c:	10841c04 	addi	r2,r2,4208
   29f50:	10c00035 	stwio	r3,0(r2)
	usleep(1); // NMI must be on for 80 ns minimum
   29f54:	01000044 	movi	r4,1
   29f58:	00303800 	call	30380 <usleep>

	if (BUS_ACK_GET != 0) {
   29f5c:	00800134 	movhi	r2,4
   29f60:	10841804 	addi	r2,r2,4192
   29f64:	10800037 	ldwio	r2,0(r2)
   29f68:	1000071e 	bne	r2,zero,29f88 <DMA_stop_w_interrupt+0x64>
		while (BUS_ACK_GET != 0);
   29f6c:	0001883a 	nop
   29f70:	00800134 	movhi	r2,4
   29f74:	10841804 	addi	r2,r2,4192
   29f78:	10800037 	ldwio	r2,0(r2)
   29f7c:	103ffc26 	beq	r2,zero,29f70 <_gp+0xfffeef30>
		usleep(1);
   29f80:	01000044 	movi	r4,1
   29f84:	00303800 	call	30380 <usleep>
	}

	NMI_CLR;
   29f88:	00c00044 	movi	r3,1
   29f8c:	00800134 	movhi	r2,4
   29f90:	10841404 	addi	r2,r2,4176
   29f94:	10c00035 	stwio	r3,0(r2)
	DMA_state = 0;
   29f98:	d020d415 	stw	zero,-31920(gp)
}
   29f9c:	0001883a 	nop
   29fa0:	e037883a 	mov	sp,fp
   29fa4:	dfc00117 	ldw	ra,4(sp)
   29fa8:	df000017 	ldw	fp,0(sp)
   29fac:	dec00204 	addi	sp,sp,8
   29fb0:	f800283a 	ret

00029fb4 <DMA_print_err>:

void DMA_print_err(int ret) {
   29fb4:	defffd04 	addi	sp,sp,-12
   29fb8:	dfc00215 	stw	ra,8(sp)
   29fbc:	df000115 	stw	fp,4(sp)
   29fc0:	df000104 	addi	fp,sp,4
   29fc4:	e13fff15 	stw	r4,-4(fp)
	switch (ret) {
   29fc8:	e0bfff17 	ldw	r2,-4(fp)
   29fcc:	10ffffa0 	cmpeqi	r3,r2,-2
   29fd0:	1800061e 	bne	r3,zero,29fec <DMA_print_err+0x38>
   29fd4:	10bfffe0 	cmpeqi	r2,r2,-1
   29fd8:	10000826 	beq	r2,zero,29ffc <DMA_print_err+0x48>
		case TIMEOUT:
			printf("DMA request timeout");
   29fdc:	010000f4 	movhi	r4,3
   29fe0:	210a5704 	addi	r4,r4,10588
   29fe4:	002ea900 	call	2ea90 <printf>
			break;
   29fe8:	00000706 	br	2a008 <DMA_print_err+0x54>
		case ALREADY_DONE:
			printf("DMA request already done");
   29fec:	010000f4 	movhi	r4,3
   29ff0:	210a5c04 	addi	r4,r4,10608
   29ff4:	002ea900 	call	2ea90 <printf>
			break;
   29ff8:	00000306 	br	2a008 <DMA_print_err+0x54>
		default: printf("Unknown err");
   29ffc:	010000f4 	movhi	r4,3
   2a000:	210a6304 	addi	r4,r4,10636
   2a004:	002ea900 	call	2ea90 <printf>
	}
}
   2a008:	0001883a 	nop
   2a00c:	e037883a 	mov	sp,fp
   2a010:	dfc00117 	ldw	ra,4(sp)
   2a014:	df000017 	ldw	fp,0(sp)
   2a018:	dec00204 	addi	sp,sp,8
   2a01c:	f800283a 	ret

0002a020 <listen_for_en>:
#include "../Peripheral_Interfaces/per_hal.h"

void listen_for_en() {
   2a020:	defffb04 	addi	sp,sp,-20
   2a024:	dfc00415 	stw	ra,16(sp)
   2a028:	df000315 	stw	fp,12(sp)
   2a02c:	df000304 	addi	fp,sp,12
	int read, write, en;
	while(1) {
		en = EN_GET;
   2a030:	00800134 	movhi	r2,4
   2a034:	10843804 	addi	r2,r2,4320
   2a038:	10800037 	ldwio	r2,0(r2)
   2a03c:	e0bffd15 	stw	r2,-12(fp)
		if (!en) {
   2a040:	e0bffd17 	ldw	r2,-12(fp)
   2a044:	10001326 	beq	r2,zero,2a094 <listen_for_en+0x74>
			continue;
		}
		read = CPU_RD_GET;
   2a048:	00800134 	movhi	r2,4
   2a04c:	10843404 	addi	r2,r2,4304
   2a050:	10800037 	ldwio	r2,0(r2)
   2a054:	1005003a 	cmpeq	r2,r2,zero
   2a058:	10803fcc 	andi	r2,r2,255
   2a05c:	e0bffe15 	stw	r2,-8(fp)
		write = CPU_WR_GET;
   2a060:	00800134 	movhi	r2,4
   2a064:	10843004 	addi	r2,r2,4288
   2a068:	10800037 	ldwio	r2,0(r2)
   2a06c:	1005003a 	cmpeq	r2,r2,zero
   2a070:	10803fcc 	andi	r2,r2,255
   2a074:	e0bfff15 	stw	r2,-4(fp)
		if (read != write) {
   2a078:	e0fffe17 	ldw	r3,-8(fp)
   2a07c:	e0bfff17 	ldw	r2,-4(fp)
   2a080:	18bfeb26 	beq	r3,r2,2a030 <_gp+0xfffeeff0>
			printf("RD != WR\r\n");
   2a084:	010000f4 	movhi	r4,3
   2a088:	210a6604 	addi	r4,r4,10648
   2a08c:	002eb800 	call	2eb80 <puts>
			break;
   2a090:	00000206 	br	2a09c <listen_for_en+0x7c>
void listen_for_en() {
	int read, write, en;
	while(1) {
		en = EN_GET;
		if (!en) {
			continue;
   2a094:	0001883a 	nop
		write = CPU_WR_GET;
		if (read != write) {
			printf("RD != WR\r\n");
			break;
		}
	}
   2a098:	003fe506 	br	2a030 <_gp+0xfffeeff0>
}
   2a09c:	0001883a 	nop
   2a0a0:	e037883a 	mov	sp,fp
   2a0a4:	dfc00117 	ldw	ra,4(sp)
   2a0a8:	df000017 	ldw	fp,0(sp)
   2a0ac:	dec00204 	addi	sp,sp,8
   2a0b0:	f800283a 	ret

0002a0b4 <get_if_type>:

enum per_if_type get_if_type() {
   2a0b4:	defffb04 	addi	sp,sp,-20
   2a0b8:	dfc00415 	stw	ra,16(sp)
   2a0bc:	df000315 	stw	fp,12(sp)
   2a0c0:	df000304 	addi	fp,sp,12
	int read = CPU_RD_GET;
   2a0c4:	00800134 	movhi	r2,4
   2a0c8:	10843404 	addi	r2,r2,4304
   2a0cc:	10800037 	ldwio	r2,0(r2)
   2a0d0:	1005003a 	cmpeq	r2,r2,zero
   2a0d4:	10803fcc 	andi	r2,r2,255
   2a0d8:	e0bffd15 	stw	r2,-12(fp)
	int write = CPU_WR_GET;
   2a0dc:	00800134 	movhi	r2,4
   2a0e0:	10843004 	addi	r2,r2,4288
   2a0e4:	10800037 	ldwio	r2,0(r2)
   2a0e8:	1005003a 	cmpeq	r2,r2,zero
   2a0ec:	10803fcc 	andi	r2,r2,255
   2a0f0:	e0bffe15 	stw	r2,-8(fp)
	printf("RD: %d\r\n", read);
   2a0f4:	e17ffd17 	ldw	r5,-12(fp)
   2a0f8:	010000f4 	movhi	r4,3
   2a0fc:	210a6904 	addi	r4,r4,10660
   2a100:	002ea900 	call	2ea90 <printf>
	printf("WR: %d\r\n", write);
   2a104:	e17ffe17 	ldw	r5,-8(fp)
   2a108:	010000f4 	movhi	r4,3
   2a10c:	210a6c04 	addi	r4,r4,10672
   2a110:	002ea900 	call	2ea90 <printf>
	if (read == write) {
   2a114:	e0fffd17 	ldw	r3,-12(fp)
   2a118:	e0bffe17 	ldw	r2,-8(fp)
   2a11c:	1880021e 	bne	r3,r2,2a128 <get_if_type+0x74>
		return NA;
   2a120:	0005883a 	mov	r2,zero
   2a124:	00001a06 	br	2a190 <get_if_type+0xdc>
	}
	alt_u8 addr = CPU_ADDR_GET & 0xFF;
   2a128:	00800134 	movhi	r2,4
   2a12c:	10841004 	addi	r2,r2,4160
   2a130:	10800037 	ldwio	r2,0(r2)
   2a134:	e0bfff05 	stb	r2,-4(fp)

	switch (addr) {
   2a138:	e0bfff03 	ldbu	r2,-4(fp)
   2a13c:	10c00660 	cmpeqi	r3,r2,25
   2a140:	18000c1e 	bne	r3,zero,2a174 <get_if_type+0xc0>
   2a144:	10c00688 	cmpgei	r3,r2,26
   2a148:	1800031e 	bne	r3,zero,2a158 <get_if_type+0xa4>
   2a14c:	108005e0 	cmpeqi	r2,r2,23
   2a150:	1000061e 	bne	r2,zero,2a16c <get_if_type+0xb8>
   2a154:	00000d06 	br	2a18c <get_if_type+0xd8>
   2a158:	10c006e0 	cmpeqi	r3,r2,27
   2a15c:	1800071e 	bne	r3,zero,2a17c <get_if_type+0xc8>
   2a160:	10800760 	cmpeqi	r2,r2,29
   2a164:	1000071e 	bne	r2,zero,2a184 <get_if_type+0xd0>
   2a168:	00000806 	br	2a18c <get_if_type+0xd8>
		case 0x17:
			return INIT;
   2a16c:	00800044 	movi	r2,1
   2a170:	00000706 	br	2a190 <get_if_type+0xdc>
		case 0x19:
			return STATE;
   2a174:	00800104 	movi	r2,4
   2a178:	00000506 	br	2a190 <get_if_type+0xdc>
		case 0x1B:
			return SD;
   2a17c:	00800084 	movi	r2,2
   2a180:	00000306 	br	2a190 <get_if_type+0xdc>
		case 0x1D:
			return ONLINE;
   2a184:	008000c4 	movi	r2,3
   2a188:	00000106 	br	2a190 <get_if_type+0xdc>
	}
	return NA;
   2a18c:	0005883a 	mov	r2,zero

}
   2a190:	e037883a 	mov	sp,fp
   2a194:	dfc00117 	ldw	ra,4(sp)
   2a198:	df000017 	ldw	fp,0(sp)
   2a19c:	dec00204 	addi	sp,sp,8
   2a1a0:	f800283a 	ret

0002a1a4 <get_page_num>:
int get_page_num() {
   2a1a4:	deffff04 	addi	sp,sp,-4
   2a1a8:	df000015 	stw	fp,0(sp)
   2a1ac:	d839883a 	mov	fp,sp
	if (CPU_RD_GET == CPU_WR_GET) {
   2a1b0:	00800134 	movhi	r2,4
   2a1b4:	10843404 	addi	r2,r2,4304
   2a1b8:	10800037 	ldwio	r2,0(r2)
   2a1bc:	1004c03a 	cmpne	r2,r2,zero
   2a1c0:	1007883a 	mov	r3,r2
   2a1c4:	00800134 	movhi	r2,4
   2a1c8:	10843004 	addi	r2,r2,4288
   2a1cc:	10800037 	ldwio	r2,0(r2)
   2a1d0:	1005003a 	cmpeq	r2,r2,zero
   2a1d4:	1884f03a 	xor	r2,r3,r2
   2a1d8:	10803fcc 	andi	r2,r2,255
   2a1dc:	10000226 	beq	r2,zero,2a1e8 <get_page_num+0x44>
		return -1;
   2a1e0:	00bfffc4 	movi	r2,-1
   2a1e4:	00000506 	br	2a1fc <get_page_num+0x58>
	}

	return (CPU_ADDR_GET >> 8) & 0xFF;
   2a1e8:	00800134 	movhi	r2,4
   2a1ec:	10841004 	addi	r2,r2,4160
   2a1f0:	10800037 	ldwio	r2,0(r2)
   2a1f4:	1005d23a 	srai	r2,r2,8
   2a1f8:	10803fcc 	andi	r2,r2,255
}
   2a1fc:	e037883a 	mov	sp,fp
   2a200:	df000017 	ldw	fp,0(sp)
   2a204:	dec00104 	addi	sp,sp,4
   2a208:	f800283a 	ret

0002a20c <get_game_num>:

int get_game_num() {
   2a20c:	deffff04 	addi	sp,sp,-4
   2a210:	df000015 	stw	fp,0(sp)
   2a214:	d839883a 	mov	fp,sp
	if (CPU_WR_GET == 0) {
   2a218:	00800134 	movhi	r2,4
   2a21c:	10843004 	addi	r2,r2,4288
   2a220:	10800037 	ldwio	r2,0(r2)
   2a224:	10000226 	beq	r2,zero,2a230 <get_game_num+0x24>
		return -1;
   2a228:	00bfffc4 	movi	r2,-1
   2a22c:	00000406 	br	2a240 <get_game_num+0x34>
	}

	return CPU_CMD_GET & 0xF;
   2a230:	00800134 	movhi	r2,4
   2a234:	10842c04 	addi	r2,r2,4272
   2a238:	10800037 	ldwio	r2,0(r2)
   2a23c:	108003cc 	andi	r2,r2,15
}
   2a240:	e037883a 	mov	sp,fp
   2a244:	df000017 	ldw	fp,0(sp)
   2a248:	dec00104 	addi	sp,sp,4
   2a24c:	f800283a 	ret

0002a250 <is_read>:

bool is_read() {
   2a250:	deffff04 	addi	sp,sp,-4
   2a254:	df000015 	stw	fp,0(sp)
   2a258:	d839883a 	mov	fp,sp
	return CPU_RD_GET == 1;
   2a25c:	00800134 	movhi	r2,4
   2a260:	10843404 	addi	r2,r2,4304
   2a264:	10800037 	ldwio	r2,0(r2)
   2a268:	1005003a 	cmpeq	r2,r2,zero
   2a26c:	10803fcc 	andi	r2,r2,255
}
   2a270:	e037883a 	mov	sp,fp
   2a274:	df000017 	ldw	fp,0(sp)
   2a278:	dec00104 	addi	sp,sp,4
   2a27c:	f800283a 	ret

0002a280 <is_write>:
bool is_write() {
   2a280:	deffff04 	addi	sp,sp,-4
   2a284:	df000015 	stw	fp,0(sp)
   2a288:	d839883a 	mov	fp,sp
	return CPU_WR_GET == 1;
   2a28c:	00800134 	movhi	r2,4
   2a290:	10843004 	addi	r2,r2,4288
   2a294:	10800037 	ldwio	r2,0(r2)
   2a298:	1005003a 	cmpeq	r2,r2,zero
   2a29c:	10803fcc 	andi	r2,r2,255
}
   2a2a0:	e037883a 	mov	sp,fp
   2a2a4:	df000017 	ldw	fp,0(sp)
   2a2a8:	dec00104 	addi	sp,sp,4
   2a2ac:	f800283a 	ret

0002a2b0 <per_cmd_ack>:

void per_cmd_ack() {
   2a2b0:	defffe04 	addi	sp,sp,-8
   2a2b4:	dfc00115 	stw	ra,4(sp)
   2a2b8:	df000015 	stw	fp,0(sp)
   2a2bc:	d839883a 	mov	fp,sp
	CMD_ACK_SET(1);
   2a2c0:	00c00044 	movi	r3,1
   2a2c4:	00800134 	movhi	r2,4
   2a2c8:	10840c04 	addi	r2,r2,4144
   2a2cc:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   2a2d0:	0100fa04 	movi	r4,1000
   2a2d4:	00303800 	call	30380 <usleep>
	CMD_ACK_SET(0);
   2a2d8:	0007883a 	mov	r3,zero
   2a2dc:	00800134 	movhi	r2,4
   2a2e0:	10840c04 	addi	r2,r2,4144
   2a2e4:	10c00035 	stwio	r3,0(r2)
}
   2a2e8:	0001883a 	nop
   2a2ec:	e037883a 	mov	sp,fp
   2a2f0:	dfc00117 	ldw	ra,4(sp)
   2a2f4:	df000017 	ldw	fp,0(sp)
   2a2f8:	dec00204 	addi	sp,sp,8
   2a2fc:	f800283a 	ret

0002a300 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
   2a300:	defffd04 	addi	sp,sp,-12
   2a304:	dfc00215 	stw	ra,8(sp)
   2a308:	df000115 	stw	fp,4(sp)
   2a30c:	df000104 	addi	fp,sp,4
   2a310:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
   2a314:	e13fff17 	ldw	r4,-4(fp)
   2a318:	002ea900 	call	2ea90 <printf>
}
   2a31c:	0001883a 	nop
   2a320:	e037883a 	mov	sp,fp
   2a324:	dfc00117 	ldw	ra,4(sp)
   2a328:	df000017 	ldw	fp,0(sp)
   2a32c:	dec00204 	addi	sp,sp,8
   2a330:	f800283a 	ret

0002a334 <myprintf>:





int myprintf(char *format, ...){
   2a334:	deff7804 	addi	sp,sp,-544
   2a338:	dfc08415 	stw	ra,528(sp)
   2a33c:	df008315 	stw	fp,524(sp)
   2a340:	df008304 	addi	fp,sp,524
   2a344:	e13fff15 	stw	r4,-4(fp)
   2a348:	e1400215 	stw	r5,8(fp)
   2a34c:	e1800315 	stw	r6,12(fp)
   2a350:	e1c00415 	stw	r7,16(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
   2a354:	e0800204 	addi	r2,fp,8
   2a358:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
   2a35c:	e0fffe17 	ldw	r3,-8(fp)
   2a360:	e0bf7e04 	addi	r2,fp,-520
   2a364:	180f883a 	mov	r7,r3
   2a368:	e1bfff17 	ldw	r6,-4(fp)
   2a36c:	01408004 	movi	r5,512
   2a370:	1009883a 	mov	r4,r2
   2a374:	002fc1c0 	call	2fc1c <vsnprintf>
   2a378:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
   2a37c:	e0bf7e04 	addi	r2,fp,-520
   2a380:	1009883a 	mov	r4,r2
   2a384:	002a3000 	call	2a300 <debug_output>

    return rc;    
   2a388:	e0bf7d17 	ldw	r2,-524(fp)
}
   2a38c:	e037883a 	mov	sp,fp
   2a390:	dfc00117 	ldw	ra,4(sp)
   2a394:	df000017 	ldw	fp,0(sp)
   2a398:	dec00504 	addi	sp,sp,20
   2a39c:	f800283a 	ret

0002a3a0 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   2a3a0:	defff704 	addi	sp,sp,-36
   2a3a4:	dfc00815 	stw	ra,32(sp)
   2a3a8:	df000715 	stw	fp,28(sp)
   2a3ac:	df000704 	addi	fp,sp,28
   2a3b0:	e13ffe15 	stw	r4,-8(fp)
   2a3b4:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   2a3b8:	e03ff915 	stw	zero,-28(fp)
   2a3bc:	00001106 	br	2a404 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
   2a3c0:	e0bff917 	ldw	r2,-28(fp)
   2a3c4:	e0fffe17 	ldw	r3,-8(fp)
   2a3c8:	1885883a 	add	r2,r3,r2
   2a3cc:	10800003 	ldbu	r2,0(r2)
   2a3d0:	10c03fcc 	andi	r3,r2,255
   2a3d4:	e0bffa04 	addi	r2,fp,-24
   2a3d8:	180d883a 	mov	r6,r3
   2a3dc:	014000f4 	movhi	r5,3
   2a3e0:	294a6f04 	addi	r5,r5,10684
   2a3e4:	1009883a 	mov	r4,r2
   2a3e8:	002edc80 	call	2edc8 <sprintf>
        DEBUG((szText));
   2a3ec:	e0bffa04 	addi	r2,fp,-24
   2a3f0:	1009883a 	mov	r4,r2
   2a3f4:	002a3340 	call	2a334 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   2a3f8:	e0bff917 	ldw	r2,-28(fp)
   2a3fc:	10800044 	addi	r2,r2,1
   2a400:	e0bff915 	stw	r2,-28(fp)
   2a404:	e0fff917 	ldw	r3,-28(fp)
   2a408:	e0bfff17 	ldw	r2,-4(fp)
   2a40c:	18bfec16 	blt	r3,r2,2a3c0 <_gp+0xfffef380>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
   2a410:	e0bfff17 	ldw	r2,-4(fp)
}
   2a414:	e037883a 	mov	sp,fp
   2a418:	dfc00117 	ldw	ra,4(sp)
   2a41c:	df000017 	ldw	fp,0(sp)
   2a420:	dec00204 	addi	sp,sp,8
   2a424:	f800283a 	ret

0002a428 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   2a428:	defff704 	addi	sp,sp,-36
   2a42c:	dfc00815 	stw	ra,32(sp)
   2a430:	df000715 	stw	fp,28(sp)
   2a434:	df000704 	addi	fp,sp,28
   2a438:	e13ffe15 	stw	r4,-8(fp)
   2a43c:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   2a440:	e03ff915 	stw	zero,-28(fp)
   2a444:	00001306 	br	2a494 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
   2a448:	e0bff917 	ldw	r2,-28(fp)
   2a44c:	1085883a 	add	r2,r2,r2
   2a450:	1085883a 	add	r2,r2,r2
   2a454:	1007883a 	mov	r3,r2
   2a458:	e0bffe17 	ldw	r2,-8(fp)
   2a45c:	10c5883a 	add	r2,r2,r3
   2a460:	10c00017 	ldw	r3,0(r2)
   2a464:	e0bffa04 	addi	r2,fp,-24
   2a468:	180d883a 	mov	r6,r3
   2a46c:	014000f4 	movhi	r5,3
   2a470:	294a7104 	addi	r5,r5,10692
   2a474:	1009883a 	mov	r4,r2
   2a478:	002edc80 	call	2edc8 <sprintf>
        DEBUG((szText));
   2a47c:	e0bffa04 	addi	r2,fp,-24
   2a480:	1009883a 	mov	r4,r2
   2a484:	002a3340 	call	2a334 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   2a488:	e0bff917 	ldw	r2,-28(fp)
   2a48c:	10800044 	addi	r2,r2,1
   2a490:	e0bff915 	stw	r2,-28(fp)
   2a494:	e0fff917 	ldw	r3,-28(fp)
   2a498:	e0bfff17 	ldw	r2,-4(fp)
   2a49c:	18bfea16 	blt	r3,r2,2a448 <_gp+0xfffef408>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
   2a4a0:	e0bfff17 	ldw	r2,-4(fp)
}
   2a4a4:	e037883a 	mov	sp,fp
   2a4a8:	dfc00117 	ldw	ra,4(sp)
   2a4ac:	df000017 	ldw	fp,0(sp)
   2a4b0:	dec00204 	addi	sp,sp,8
   2a4b4:	f800283a 	ret

0002a4b8 <ceil>:
   2a4b8:	2811d53a 	srai	r8,r5,20
   2a4bc:	defffa04 	addi	sp,sp,-24
   2a4c0:	dcc00315 	stw	r19,12(sp)
   2a4c4:	4201ffcc 	andi	r8,r8,2047
   2a4c8:	dc800215 	stw	r18,8(sp)
   2a4cc:	dc400115 	stw	r17,4(sp)
   2a4d0:	dc000015 	stw	r16,0(sp)
   2a4d4:	dfc00515 	stw	ra,20(sp)
   2a4d8:	dd000415 	stw	r20,16(sp)
   2a4dc:	44bf0044 	addi	r18,r8,-1023
   2a4e0:	018004c4 	movi	r6,19
   2a4e4:	2821883a 	mov	r16,r5
   2a4e8:	2005883a 	mov	r2,r4
   2a4ec:	280f883a 	mov	r7,r5
   2a4f0:	2827883a 	mov	r19,r5
   2a4f4:	2023883a 	mov	r17,r4
   2a4f8:	34801c16 	blt	r6,r18,2a56c <ceil+0xb4>
   2a4fc:	90004916 	blt	r18,zero,2a624 <ceil+0x16c>
   2a500:	05000434 	movhi	r20,16
   2a504:	a53fffc4 	addi	r20,r20,-1
   2a508:	a4a9d83a 	sra	r20,r20,r18
   2a50c:	2d0c703a 	and	r6,r5,r20
   2a510:	310cb03a 	or	r6,r6,r4
   2a514:	30001926 	beq	r6,zero,2a57c <ceil+0xc4>
   2a518:	01a20034 	movhi	r6,34816
   2a51c:	01df8e34 	movhi	r7,32312
   2a520:	319d6704 	addi	r6,r6,30108
   2a524:	39f90f04 	addi	r7,r7,-7108
   2a528:	002bce40 	call	2bce4 <__adddf3>
   2a52c:	000d883a 	mov	r6,zero
   2a530:	000f883a 	mov	r7,zero
   2a534:	1009883a 	mov	r4,r2
   2a538:	180b883a 	mov	r5,r3
   2a53c:	002cfe80 	call	2cfe8 <__gedf2>
   2a540:	0080070e 	bge	zero,r2,2a560 <ceil+0xa8>
   2a544:	0400030e 	bge	zero,r16,2a554 <ceil+0x9c>
   2a548:	00800434 	movhi	r2,16
   2a54c:	14a5d83a 	sra	r18,r2,r18
   2a550:	84a7883a 	add	r19,r16,r18
   2a554:	0520303a 	nor	r16,zero,r20
   2a558:	84e0703a 	and	r16,r16,r19
   2a55c:	0023883a 	mov	r17,zero
   2a560:	8805883a 	mov	r2,r17
   2a564:	8007883a 	mov	r3,r16
   2a568:	00000506 	br	2a580 <ceil+0xc8>
   2a56c:	01800cc4 	movi	r6,51
   2a570:	34800b0e 	bge	r6,r18,2a5a0 <ceil+0xe8>
   2a574:	01810004 	movi	r6,1024
   2a578:	91803b26 	beq	r18,r6,2a668 <ceil+0x1b0>
   2a57c:	3807883a 	mov	r3,r7
   2a580:	dfc00517 	ldw	ra,20(sp)
   2a584:	dd000417 	ldw	r20,16(sp)
   2a588:	dcc00317 	ldw	r19,12(sp)
   2a58c:	dc800217 	ldw	r18,8(sp)
   2a590:	dc400117 	ldw	r17,4(sp)
   2a594:	dc000017 	ldw	r16,0(sp)
   2a598:	dec00604 	addi	sp,sp,24
   2a59c:	f800283a 	ret
   2a5a0:	423efb44 	addi	r8,r8,-1043
   2a5a4:	053fffc4 	movi	r20,-1
   2a5a8:	a228d83a 	srl	r20,r20,r8
   2a5ac:	250c703a 	and	r6,r4,r20
   2a5b0:	303ff226 	beq	r6,zero,2a57c <_gp+0xfffef53c>
   2a5b4:	01a20034 	movhi	r6,34816
   2a5b8:	01df8e34 	movhi	r7,32312
   2a5bc:	319d6704 	addi	r6,r6,30108
   2a5c0:	39f90f04 	addi	r7,r7,-7108
   2a5c4:	002bce40 	call	2bce4 <__adddf3>
   2a5c8:	000d883a 	mov	r6,zero
   2a5cc:	000f883a 	mov	r7,zero
   2a5d0:	1009883a 	mov	r4,r2
   2a5d4:	180b883a 	mov	r5,r3
   2a5d8:	002cfe80 	call	2cfe8 <__gedf2>
   2a5dc:	00bfe00e 	bge	zero,r2,2a560 <_gp+0xfffef520>
   2a5e0:	04000a0e 	bge	zero,r16,2a60c <ceil+0x154>
   2a5e4:	00800504 	movi	r2,20
   2a5e8:	90802926 	beq	r18,r2,2a690 <ceil+0x1d8>
   2a5ec:	00800d04 	movi	r2,52
   2a5f0:	14a5c83a 	sub	r18,r2,r18
   2a5f4:	00800044 	movi	r2,1
   2a5f8:	1484983a 	sll	r2,r2,r18
   2a5fc:	1445883a 	add	r2,r2,r17
   2a600:	14401e2e 	bgeu	r2,r17,2a67c <ceil+0x1c4>
   2a604:	84c00044 	addi	r19,r16,1
   2a608:	1023883a 	mov	r17,r2
   2a60c:	0510303a 	nor	r8,zero,r20
   2a610:	9821883a 	mov	r16,r19
   2a614:	8a22703a 	and	r17,r17,r8
   2a618:	8805883a 	mov	r2,r17
   2a61c:	8007883a 	mov	r3,r16
   2a620:	003fd706 	br	2a580 <_gp+0xfffef540>
   2a624:	01a20034 	movhi	r6,34816
   2a628:	01df8e34 	movhi	r7,32312
   2a62c:	319d6704 	addi	r6,r6,30108
   2a630:	39f90f04 	addi	r7,r7,-7108
   2a634:	002bce40 	call	2bce4 <__adddf3>
   2a638:	000d883a 	mov	r6,zero
   2a63c:	000f883a 	mov	r7,zero
   2a640:	1009883a 	mov	r4,r2
   2a644:	180b883a 	mov	r5,r3
   2a648:	002cfe80 	call	2cfe8 <__gedf2>
   2a64c:	00bfc40e 	bge	zero,r2,2a560 <_gp+0xfffef520>
   2a650:	80000c16 	blt	r16,zero,2a684 <ceil+0x1cc>
   2a654:	8460b03a 	or	r16,r16,r17
   2a658:	0023883a 	mov	r17,zero
   2a65c:	80000526 	beq	r16,zero,2a674 <ceil+0x1bc>
   2a660:	040ffc34 	movhi	r16,16368
   2a664:	003fbe06 	br	2a560 <_gp+0xfffef520>
   2a668:	200d883a 	mov	r6,r4
   2a66c:	002bce40 	call	2bce4 <__adddf3>
   2a670:	003fc306 	br	2a580 <_gp+0xfffef540>
   2a674:	0021883a 	mov	r16,zero
   2a678:	003fb906 	br	2a560 <_gp+0xfffef520>
   2a67c:	1023883a 	mov	r17,r2
   2a680:	003fe206 	br	2a60c <_gp+0xfffef5cc>
   2a684:	0023883a 	mov	r17,zero
   2a688:	04200034 	movhi	r16,32768
   2a68c:	003fb406 	br	2a560 <_gp+0xfffef520>
   2a690:	84c00044 	addi	r19,r16,1
   2a694:	003fdd06 	br	2a60c <_gp+0xfffef5cc>

0002a698 <log10>:
   2a698:	defff104 	addi	sp,sp,-60
   2a69c:	dd000d15 	stw	r20,52(sp)
   2a6a0:	050000f4 	movhi	r20,3
   2a6a4:	dcc00c15 	stw	r19,48(sp)
   2a6a8:	dc800b15 	stw	r18,44(sp)
   2a6ac:	dc400a15 	stw	r17,40(sp)
   2a6b0:	dc000915 	stw	r16,36(sp)
   2a6b4:	dfc00e15 	stw	ra,56(sp)
   2a6b8:	a50c1204 	addi	r20,r20,12360
   2a6bc:	2027883a 	mov	r19,r4
   2a6c0:	2825883a 	mov	r18,r5
   2a6c4:	002a8340 	call	2a834 <__ieee754_log10>
   2a6c8:	1821883a 	mov	r16,r3
   2a6cc:	a0c00017 	ldw	r3,0(r20)
   2a6d0:	1023883a 	mov	r17,r2
   2a6d4:	00bfffc4 	movi	r2,-1
   2a6d8:	18800a26 	beq	r3,r2,2a704 <log10+0x6c>
   2a6dc:	9809883a 	mov	r4,r19
   2a6e0:	900b883a 	mov	r5,r18
   2a6e4:	002aa040 	call	2aa04 <__fpclassifyd>
   2a6e8:	10000626 	beq	r2,zero,2a704 <log10+0x6c>
   2a6ec:	000d883a 	mov	r6,zero
   2a6f0:	000f883a 	mov	r7,zero
   2a6f4:	9809883a 	mov	r4,r19
   2a6f8:	900b883a 	mov	r5,r18
   2a6fc:	002d0c40 	call	2d0c4 <__ledf2>
   2a700:	00800a0e 	bge	zero,r2,2a72c <log10+0x94>
   2a704:	8805883a 	mov	r2,r17
   2a708:	8007883a 	mov	r3,r16
   2a70c:	dfc00e17 	ldw	ra,56(sp)
   2a710:	dd000d17 	ldw	r20,52(sp)
   2a714:	dcc00c17 	ldw	r19,48(sp)
   2a718:	dc800b17 	ldw	r18,44(sp)
   2a71c:	dc400a17 	ldw	r17,40(sp)
   2a720:	dc000917 	ldw	r16,36(sp)
   2a724:	dec00f04 	addi	sp,sp,60
   2a728:	f800283a 	ret
   2a72c:	008000f4 	movhi	r2,3
   2a730:	a4000017 	ldw	r16,0(r20)
   2a734:	108a7304 	addi	r2,r2,10700
   2a738:	d8000815 	stw	zero,32(sp)
   2a73c:	d8800115 	stw	r2,4(sp)
   2a740:	dcc00215 	stw	r19,8(sp)
   2a744:	dc800315 	stw	r18,12(sp)
   2a748:	dcc00415 	stw	r19,16(sp)
   2a74c:	dc800515 	stw	r18,20(sp)
   2a750:	000d883a 	mov	r6,zero
   2a754:	000f883a 	mov	r7,zero
   2a758:	9809883a 	mov	r4,r19
   2a75c:	900b883a 	mov	r5,r18
   2a760:	8000101e 	bne	r16,zero,2a7a4 <log10+0x10c>
   2a764:	00b80034 	movhi	r2,57344
   2a768:	d8800615 	stw	r2,24(sp)
   2a76c:	00b1fc34 	movhi	r2,51184
   2a770:	10bfffc4 	addi	r2,r2,-1
   2a774:	d8800715 	stw	r2,28(sp)
   2a778:	002cf600 	call	2cf60 <__eqdf2>
   2a77c:	10001f1e 	bne	r2,zero,2a7fc <log10+0x164>
   2a780:	00800084 	movi	r2,2
   2a784:	d8800015 	stw	r2,0(sp)
   2a788:	d809883a 	mov	r4,sp
   2a78c:	002aa780 	call	2aa78 <matherr>
   2a790:	1000151e 	bne	r2,zero,2a7e8 <log10+0x150>
   2a794:	002e7980 	call	2e798 <__errno>
   2a798:	00c00884 	movi	r3,34
   2a79c:	10c00015 	stw	r3,0(r2)
   2a7a0:	00001106 	br	2a7e8 <log10+0x150>
   2a7a4:	00bffc34 	movhi	r2,65520
   2a7a8:	d8000615 	stw	zero,24(sp)
   2a7ac:	d8800715 	stw	r2,28(sp)
   2a7b0:	002cf600 	call	2cf60 <__eqdf2>
   2a7b4:	10001726 	beq	r2,zero,2a814 <log10+0x17c>
   2a7b8:	00800044 	movi	r2,1
   2a7bc:	d8800015 	stw	r2,0(sp)
   2a7c0:	00800084 	movi	r2,2
   2a7c4:	80800f1e 	bne	r16,r2,2a804 <log10+0x16c>
   2a7c8:	002e7980 	call	2e798 <__errno>
   2a7cc:	00c00844 	movi	r3,33
   2a7d0:	10c00015 	stw	r3,0(r2)
   2a7d4:	010000f4 	movhi	r4,3
   2a7d8:	210a7504 	addi	r4,r4,10708
   2a7dc:	002aa800 	call	2aa80 <nan>
   2a7e0:	d8800615 	stw	r2,24(sp)
   2a7e4:	d8c00715 	stw	r3,28(sp)
   2a7e8:	d8800817 	ldw	r2,32(sp)
   2a7ec:	10000d1e 	bne	r2,zero,2a824 <log10+0x18c>
   2a7f0:	d8800617 	ldw	r2,24(sp)
   2a7f4:	d8c00717 	ldw	r3,28(sp)
   2a7f8:	003fc406 	br	2a70c <_gp+0xfffef6cc>
   2a7fc:	00800044 	movi	r2,1
   2a800:	d8800015 	stw	r2,0(sp)
   2a804:	d809883a 	mov	r4,sp
   2a808:	002aa780 	call	2aa78 <matherr>
   2a80c:	103ff11e 	bne	r2,zero,2a7d4 <_gp+0xfffef794>
   2a810:	003fed06 	br	2a7c8 <_gp+0xfffef788>
   2a814:	00800084 	movi	r2,2
   2a818:	d8800015 	stw	r2,0(sp)
   2a81c:	80bfdd26 	beq	r16,r2,2a794 <_gp+0xfffef754>
   2a820:	003fd906 	br	2a788 <_gp+0xfffef748>
   2a824:	002e7980 	call	2e798 <__errno>
   2a828:	d8c00817 	ldw	r3,32(sp)
   2a82c:	10c00015 	stw	r3,0(r2)
   2a830:	003fef06 	br	2a7f0 <_gp+0xfffef7b0>

0002a834 <__ieee754_log10>:
   2a834:	defff904 	addi	sp,sp,-28
   2a838:	00c00434 	movhi	r3,16
   2a83c:	dc000015 	stw	r16,0(sp)
   2a840:	dfc00615 	stw	ra,24(sp)
   2a844:	dd400515 	stw	r21,20(sp)
   2a848:	dd000415 	stw	r20,16(sp)
   2a84c:	dcc00315 	stw	r19,12(sp)
   2a850:	dc800215 	stw	r18,8(sp)
   2a854:	dc400115 	stw	r17,4(sp)
   2a858:	18ffffc4 	addi	r3,r3,-1
   2a85c:	280f883a 	mov	r7,r5
   2a860:	2021883a 	mov	r16,r4
   2a864:	19401d16 	blt	r3,r5,2a8dc <__ieee754_log10+0xa8>
   2a868:	00a00034 	movhi	r2,32768
   2a86c:	10bfffc4 	addi	r2,r2,-1
   2a870:	2884703a 	and	r2,r5,r2
   2a874:	1104b03a 	or	r2,r2,r4
   2a878:	10005426 	beq	r2,zero,2a9cc <__ieee754_log10+0x198>
   2a87c:	28005916 	blt	r5,zero,2a9e4 <__ieee754_log10+0x1b0>
   2a880:	01d0d434 	movhi	r7,17232
   2a884:	000d883a 	mov	r6,zero
   2a888:	002d1b80 	call	2d1b8 <__muldf3>
   2a88c:	011ffc34 	movhi	r4,32752
   2a890:	1021883a 	mov	r16,r2
   2a894:	213fffc4 	addi	r4,r4,-1
   2a898:	1805883a 	mov	r2,r3
   2a89c:	180f883a 	mov	r7,r3
   2a8a0:	00fff284 	movi	r3,-54
   2a8a4:	2080120e 	bge	r4,r2,2a8f0 <__ieee754_log10+0xbc>
   2a8a8:	800d883a 	mov	r6,r16
   2a8ac:	8009883a 	mov	r4,r16
   2a8b0:	380b883a 	mov	r5,r7
   2a8b4:	002bce40 	call	2bce4 <__adddf3>
   2a8b8:	dfc00617 	ldw	ra,24(sp)
   2a8bc:	dd400517 	ldw	r21,20(sp)
   2a8c0:	dd000417 	ldw	r20,16(sp)
   2a8c4:	dcc00317 	ldw	r19,12(sp)
   2a8c8:	dc800217 	ldw	r18,8(sp)
   2a8cc:	dc400117 	ldw	r17,4(sp)
   2a8d0:	dc000017 	ldw	r16,0(sp)
   2a8d4:	dec00704 	addi	sp,sp,28
   2a8d8:	f800283a 	ret
   2a8dc:	011ffc34 	movhi	r4,32752
   2a8e0:	2805883a 	mov	r2,r5
   2a8e4:	213fffc4 	addi	r4,r4,-1
   2a8e8:	0007883a 	mov	r3,zero
   2a8ec:	20bfee16 	blt	r4,r2,2a8a8 <_gp+0xfffef868>
   2a8f0:	1009d53a 	srai	r4,r2,20
   2a8f4:	04400434 	movhi	r17,16
   2a8f8:	8c7fffc4 	addi	r17,r17,-1
   2a8fc:	213f0044 	addi	r4,r4,-1023
   2a900:	20c9883a 	add	r4,r4,r3
   2a904:	2028d7fa 	srli	r20,r4,31
   2a908:	1462703a 	and	r17,r2,r17
   2a90c:	2509883a 	add	r4,r4,r20
   2a910:	002e3a00 	call	2e3a0 <__floatsidf>
   2a914:	1027883a 	mov	r19,r2
   2a918:	0080ffc4 	movi	r2,1023
   2a91c:	1505c83a 	sub	r2,r2,r20
   2a920:	100a953a 	slli	r5,r2,20
   2a924:	8009883a 	mov	r4,r16
   2a928:	1825883a 	mov	r18,r3
   2a92c:	2c4ab03a 	or	r5,r5,r17
   2a930:	002aa8c0 	call	2aa8c <__ieee754_log>
   2a934:	01847c74 	movhi	r6,4593
   2a938:	01cf56b4 	movhi	r7,15706
   2a93c:	9809883a 	mov	r4,r19
   2a940:	900b883a 	mov	r5,r18
   2a944:	318acd84 	addi	r6,r6,11062
   2a948:	39ffbcc4 	addi	r7,r7,-269
   2a94c:	102b883a 	mov	r21,r2
   2a950:	1829883a 	mov	r20,r3
   2a954:	002d1b80 	call	2d1b8 <__muldf3>
   2a958:	018549f4 	movhi	r6,5415
   2a95c:	01cff734 	movhi	r7,16348
   2a960:	a809883a 	mov	r4,r21
   2a964:	a00b883a 	mov	r5,r20
   2a968:	31b94384 	addi	r6,r6,-6898
   2a96c:	39f2dec4 	addi	r7,r7,-13445
   2a970:	1023883a 	mov	r17,r2
   2a974:	1821883a 	mov	r16,r3
   2a978:	002d1b80 	call	2d1b8 <__muldf3>
   2a97c:	8809883a 	mov	r4,r17
   2a980:	800b883a 	mov	r5,r16
   2a984:	100d883a 	mov	r6,r2
   2a988:	180f883a 	mov	r7,r3
   2a98c:	002bce40 	call	2bce4 <__adddf3>
   2a990:	019427f4 	movhi	r6,20639
   2a994:	01cff4f4 	movhi	r7,16339
   2a998:	9809883a 	mov	r4,r19
   2a99c:	900b883a 	mov	r5,r18
   2a9a0:	31980004 	addi	r6,r6,24576
   2a9a4:	39d104c4 	addi	r7,r7,17427
   2a9a8:	1023883a 	mov	r17,r2
   2a9ac:	1821883a 	mov	r16,r3
   2a9b0:	002d1b80 	call	2d1b8 <__muldf3>
   2a9b4:	100d883a 	mov	r6,r2
   2a9b8:	180f883a 	mov	r7,r3
   2a9bc:	8809883a 	mov	r4,r17
   2a9c0:	800b883a 	mov	r5,r16
   2a9c4:	002bce40 	call	2bce4 <__adddf3>
   2a9c8:	003fbb06 	br	2a8b8 <_gp+0xfffef878>
   2a9cc:	000d883a 	mov	r6,zero
   2a9d0:	000f883a 	mov	r7,zero
   2a9d4:	0009883a 	mov	r4,zero
   2a9d8:	0170d434 	movhi	r5,50000
   2a9dc:	002c5900 	call	2c590 <__divdf3>
   2a9e0:	003fb506 	br	2a8b8 <_gp+0xfffef878>
   2a9e4:	200d883a 	mov	r6,r4
   2a9e8:	002da240 	call	2da24 <__subdf3>
   2a9ec:	000d883a 	mov	r6,zero
   2a9f0:	000f883a 	mov	r7,zero
   2a9f4:	1009883a 	mov	r4,r2
   2a9f8:	180b883a 	mov	r5,r3
   2a9fc:	002c5900 	call	2c590 <__divdf3>
   2aa00:	003fad06 	br	2a8b8 <_gp+0xfffef878>

0002aa04 <__fpclassifyd>:
   2aa04:	00a00034 	movhi	r2,32768
   2aa08:	10bfffc4 	addi	r2,r2,-1
   2aa0c:	2884703a 	and	r2,r5,r2
   2aa10:	10000726 	beq	r2,zero,2aa30 <__fpclassifyd+0x2c>
   2aa14:	00fffc34 	movhi	r3,65520
   2aa18:	019ff834 	movhi	r6,32736
   2aa1c:	28c7883a 	add	r3,r5,r3
   2aa20:	31bfffc4 	addi	r6,r6,-1
   2aa24:	30c00536 	bltu	r6,r3,2aa3c <__fpclassifyd+0x38>
   2aa28:	00800104 	movi	r2,4
   2aa2c:	f800283a 	ret
   2aa30:	2000021e 	bne	r4,zero,2aa3c <__fpclassifyd+0x38>
   2aa34:	00800084 	movi	r2,2
   2aa38:	f800283a 	ret
   2aa3c:	00dffc34 	movhi	r3,32752
   2aa40:	019ff834 	movhi	r6,32736
   2aa44:	28cb883a 	add	r5,r5,r3
   2aa48:	31bfffc4 	addi	r6,r6,-1
   2aa4c:	317ff62e 	bgeu	r6,r5,2aa28 <_gp+0xfffef9e8>
   2aa50:	01400434 	movhi	r5,16
   2aa54:	297fffc4 	addi	r5,r5,-1
   2aa58:	28800236 	bltu	r5,r2,2aa64 <__fpclassifyd+0x60>
   2aa5c:	008000c4 	movi	r2,3
   2aa60:	f800283a 	ret
   2aa64:	10c00226 	beq	r2,r3,2aa70 <__fpclassifyd+0x6c>
   2aa68:	0005883a 	mov	r2,zero
   2aa6c:	f800283a 	ret
   2aa70:	2005003a 	cmpeq	r2,r4,zero
   2aa74:	f800283a 	ret

0002aa78 <matherr>:
   2aa78:	0005883a 	mov	r2,zero
   2aa7c:	f800283a 	ret

0002aa80 <nan>:
   2aa80:	0005883a 	mov	r2,zero
   2aa84:	00dffe34 	movhi	r3,32760
   2aa88:	f800283a 	ret

0002aa8c <__ieee754_log>:
   2aa8c:	defff204 	addi	sp,sp,-56
   2aa90:	01800434 	movhi	r6,16
   2aa94:	dfc00d15 	stw	ra,52(sp)
   2aa98:	df000c15 	stw	fp,48(sp)
   2aa9c:	ddc00b15 	stw	r23,44(sp)
   2aaa0:	dd800a15 	stw	r22,40(sp)
   2aaa4:	dd400915 	stw	r21,36(sp)
   2aaa8:	dd000815 	stw	r20,32(sp)
   2aaac:	dcc00715 	stw	r19,28(sp)
   2aab0:	dc800615 	stw	r18,24(sp)
   2aab4:	dc400515 	stw	r17,20(sp)
   2aab8:	dc000415 	stw	r16,16(sp)
   2aabc:	31bfffc4 	addi	r6,r6,-1
   2aac0:	280f883a 	mov	r7,r5
   2aac4:	2005883a 	mov	r2,r4
   2aac8:	31404616 	blt	r6,r5,2abe4 <__ieee754_log+0x158>
   2aacc:	00e00034 	movhi	r3,32768
   2aad0:	18ffffc4 	addi	r3,r3,-1
   2aad4:	28c6703a 	and	r3,r5,r3
   2aad8:	1906b03a 	or	r3,r3,r4
   2aadc:	1800f426 	beq	r3,zero,2aeb0 <__ieee754_log+0x424>
   2aae0:	28017816 	blt	r5,zero,2b0c4 <__ieee754_log+0x638>
   2aae4:	01d0d434 	movhi	r7,17232
   2aae8:	000d883a 	mov	r6,zero
   2aaec:	002d1b80 	call	2d1b8 <__muldf3>
   2aaf0:	015ffc34 	movhi	r5,32752
   2aaf4:	297fffc4 	addi	r5,r5,-1
   2aaf8:	180f883a 	mov	r7,r3
   2aafc:	013ff284 	movi	r4,-54
   2ab00:	28c03d16 	blt	r5,r3,2abf8 <__ieee754_log+0x16c>
   2ab04:	04c00434 	movhi	r19,16
   2ab08:	9cffffc4 	addi	r19,r19,-1
   2ab0c:	01400274 	movhi	r5,9
   2ab10:	1cf8703a 	and	fp,r3,r19
   2ab14:	2957d904 	addi	r5,r5,24420
   2ab18:	1821d53a 	srai	r16,r3,20
   2ab1c:	e14b883a 	add	r5,fp,r5
   2ab20:	2940042c 	andhi	r5,r5,16
   2ab24:	2807d53a 	srai	r3,r5,20
   2ab28:	843f0044 	addi	r16,r16,-1023
   2ab2c:	294ffc3c 	xorhi	r5,r5,16368
   2ab30:	8121883a 	add	r16,r16,r4
   2ab34:	000d883a 	mov	r6,zero
   2ab38:	01cffc34 	movhi	r7,16368
   2ab3c:	1009883a 	mov	r4,r2
   2ab40:	2f0ab03a 	or	r5,r5,fp
   2ab44:	1c21883a 	add	r16,r3,r16
   2ab48:	002da240 	call	2da24 <__subdf3>
   2ab4c:	1025883a 	mov	r18,r2
   2ab50:	e0800084 	addi	r2,fp,2
   2ab54:	14e6703a 	and	r19,r2,r19
   2ab58:	00800084 	movi	r2,2
   2ab5c:	1823883a 	mov	r17,r3
   2ab60:	000d883a 	mov	r6,zero
   2ab64:	14c03416 	blt	r2,r19,2ac38 <__ieee754_log+0x1ac>
   2ab68:	000f883a 	mov	r7,zero
   2ab6c:	9009883a 	mov	r4,r18
   2ab70:	180b883a 	mov	r5,r3
   2ab74:	002cf600 	call	2cf60 <__eqdf2>
   2ab78:	1000d31e 	bne	r2,zero,2aec8 <__ieee754_log+0x43c>
   2ab7c:	80015926 	beq	r16,zero,2b0e4 <__ieee754_log+0x658>
   2ab80:	8009883a 	mov	r4,r16
   2ab84:	002e3a00 	call	2e3a0 <__floatsidf>
   2ab88:	01cff9b4 	movhi	r7,16358
   2ab8c:	39cb9084 	addi	r7,r7,11842
   2ab90:	01bfb834 	movhi	r6,65248
   2ab94:	1009883a 	mov	r4,r2
   2ab98:	180b883a 	mov	r5,r3
   2ab9c:	1023883a 	mov	r17,r2
   2aba0:	1821883a 	mov	r16,r3
   2aba4:	002d1b80 	call	2d1b8 <__muldf3>
   2aba8:	018d5e74 	movhi	r6,13689
   2abac:	01cf7ab4 	movhi	r7,15850
   2abb0:	8809883a 	mov	r4,r17
   2abb4:	800b883a 	mov	r5,r16
   2abb8:	318f1d84 	addi	r6,r6,15478
   2abbc:	39ce7bc4 	addi	r7,r7,14831
   2abc0:	1027883a 	mov	r19,r2
   2abc4:	1825883a 	mov	r18,r3
   2abc8:	002d1b80 	call	2d1b8 <__muldf3>
   2abcc:	100d883a 	mov	r6,r2
   2abd0:	180f883a 	mov	r7,r3
   2abd4:	9809883a 	mov	r4,r19
   2abd8:	900b883a 	mov	r5,r18
   2abdc:	002bce40 	call	2bce4 <__adddf3>
   2abe0:	00000906 	br	2ac08 <__ieee754_log+0x17c>
   2abe4:	2807883a 	mov	r3,r5
   2abe8:	015ffc34 	movhi	r5,32752
   2abec:	297fffc4 	addi	r5,r5,-1
   2abf0:	0009883a 	mov	r4,zero
   2abf4:	28ffc30e 	bge	r5,r3,2ab04 <_gp+0xfffefac4>
   2abf8:	100d883a 	mov	r6,r2
   2abfc:	1009883a 	mov	r4,r2
   2ac00:	380b883a 	mov	r5,r7
   2ac04:	002bce40 	call	2bce4 <__adddf3>
   2ac08:	dfc00d17 	ldw	ra,52(sp)
   2ac0c:	df000c17 	ldw	fp,48(sp)
   2ac10:	ddc00b17 	ldw	r23,44(sp)
   2ac14:	dd800a17 	ldw	r22,40(sp)
   2ac18:	dd400917 	ldw	r21,36(sp)
   2ac1c:	dd000817 	ldw	r20,32(sp)
   2ac20:	dcc00717 	ldw	r19,28(sp)
   2ac24:	dc800617 	ldw	r18,24(sp)
   2ac28:	dc400517 	ldw	r17,20(sp)
   2ac2c:	dc000417 	ldw	r16,16(sp)
   2ac30:	dec00e04 	addi	sp,sp,56
   2ac34:	f800283a 	ret
   2ac38:	01d00034 	movhi	r7,16384
   2ac3c:	9009883a 	mov	r4,r18
   2ac40:	180b883a 	mov	r5,r3
   2ac44:	002bce40 	call	2bce4 <__adddf3>
   2ac48:	100d883a 	mov	r6,r2
   2ac4c:	180f883a 	mov	r7,r3
   2ac50:	880b883a 	mov	r5,r17
   2ac54:	9009883a 	mov	r4,r18
   2ac58:	002c5900 	call	2c590 <__divdf3>
   2ac5c:	8009883a 	mov	r4,r16
   2ac60:	102d883a 	mov	r22,r2
   2ac64:	182b883a 	mov	r21,r3
   2ac68:	002e3a00 	call	2e3a0 <__floatsidf>
   2ac6c:	b00d883a 	mov	r6,r22
   2ac70:	a80f883a 	mov	r7,r21
   2ac74:	b009883a 	mov	r4,r22
   2ac78:	a80b883a 	mov	r5,r21
   2ac7c:	d8800015 	stw	r2,0(sp)
   2ac80:	d8c00115 	stw	r3,4(sp)
   2ac84:	002d1b80 	call	2d1b8 <__muldf3>
   2ac88:	027ffeb4 	movhi	r9,65530
   2ac8c:	4a7ae184 	addi	r9,r9,-5242
   2ac90:	100d883a 	mov	r6,r2
   2ac94:	180f883a 	mov	r7,r3
   2ac98:	1009883a 	mov	r4,r2
   2ac9c:	180b883a 	mov	r5,r3
   2aca0:	e26f883a 	add	r23,fp,r9
   2aca4:	d8c00315 	stw	r3,12(sp)
   2aca8:	d8800215 	stw	r2,8(sp)
   2acac:	002d1b80 	call	2d1b8 <__muldf3>
   2acb0:	01b7cfb4 	movhi	r6,57150
   2acb4:	01cff0f4 	movhi	r7,16323
   2acb8:	31949104 	addi	r6,r6,21060
   2acbc:	39fc4484 	addi	r7,r7,-3822
   2acc0:	1009883a 	mov	r4,r2
   2acc4:	180b883a 	mov	r5,r3
   2acc8:	1029883a 	mov	r20,r2
   2accc:	1827883a 	mov	r19,r3
   2acd0:	002d1b80 	call	2d1b8 <__muldf3>
   2acd4:	01a5b2f4 	movhi	r6,38603
   2acd8:	01cff1f4 	movhi	r7,16327
   2acdc:	3180f784 	addi	r6,r6,990
   2ace0:	39d19904 	addi	r7,r7,18020
   2ace4:	1009883a 	mov	r4,r2
   2ace8:	180b883a 	mov	r5,r3
   2acec:	002bce40 	call	2bce4 <__adddf3>
   2acf0:	a00d883a 	mov	r6,r20
   2acf4:	980f883a 	mov	r7,r19
   2acf8:	1009883a 	mov	r4,r2
   2acfc:	180b883a 	mov	r5,r3
   2ad00:	002d1b80 	call	2d1b8 <__muldf3>
   2ad04:	01a508f4 	movhi	r6,37923
   2ad08:	01cff4b4 	movhi	r7,16338
   2ad0c:	31a4d644 	addi	r6,r6,-27815
   2ad10:	39d24904 	addi	r7,r7,18724
   2ad14:	1009883a 	mov	r4,r2
   2ad18:	180b883a 	mov	r5,r3
   2ad1c:	002bce40 	call	2bce4 <__adddf3>
   2ad20:	a00d883a 	mov	r6,r20
   2ad24:	980f883a 	mov	r7,r19
   2ad28:	1009883a 	mov	r4,r2
   2ad2c:	180b883a 	mov	r5,r3
   2ad30:	002d1b80 	call	2d1b8 <__muldf3>
   2ad34:	01955574 	movhi	r6,21845
   2ad38:	01cff974 	movhi	r7,16357
   2ad3c:	319564c4 	addi	r6,r6,21907
   2ad40:	39d55544 	addi	r7,r7,21845
   2ad44:	1009883a 	mov	r4,r2
   2ad48:	180b883a 	mov	r5,r3
   2ad4c:	002bce40 	call	2bce4 <__adddf3>
   2ad50:	dac00217 	ldw	r11,8(sp)
   2ad54:	da800317 	ldw	r10,12(sp)
   2ad58:	1009883a 	mov	r4,r2
   2ad5c:	580d883a 	mov	r6,r11
   2ad60:	500f883a 	mov	r7,r10
   2ad64:	180b883a 	mov	r5,r3
   2ad68:	002d1b80 	call	2d1b8 <__muldf3>
   2ad6c:	01b41e74 	movhi	r6,53369
   2ad70:	01cff134 	movhi	r7,16324
   2ad74:	a009883a 	mov	r4,r20
   2ad78:	980b883a 	mov	r5,r19
   2ad7c:	31b1a7c4 	addi	r6,r6,-14689
   2ad80:	39e68244 	addi	r7,r7,-26103
   2ad84:	d8c00315 	stw	r3,12(sp)
   2ad88:	d8800215 	stw	r2,8(sp)
   2ad8c:	002d1b80 	call	2d1b8 <__muldf3>
   2ad90:	018763b4 	movhi	r6,7566
   2ad94:	01cff334 	movhi	r7,16332
   2ad98:	319e2bc4 	addi	r6,r6,30895
   2ad9c:	39dc7144 	addi	r7,r7,29125
   2ada0:	1009883a 	mov	r4,r2
   2ada4:	180b883a 	mov	r5,r3
   2ada8:	002bce40 	call	2bce4 <__adddf3>
   2adac:	a00d883a 	mov	r6,r20
   2adb0:	980f883a 	mov	r7,r19
   2adb4:	1009883a 	mov	r4,r2
   2adb8:	180b883a 	mov	r5,r3
   2adbc:	002d1b80 	call	2d1b8 <__muldf3>
   2adc0:	01a66634 	movhi	r6,39320
   2adc4:	01cff6b4 	movhi	r7,16346
   2adc8:	31be8104 	addi	r6,r6,-1532
   2adcc:	39e66644 	addi	r7,r7,-26215
   2add0:	1009883a 	mov	r4,r2
   2add4:	180b883a 	mov	r5,r3
   2add8:	002bce40 	call	2bce4 <__adddf3>
   2addc:	a00d883a 	mov	r6,r20
   2ade0:	980f883a 	mov	r7,r19
   2ade4:	1009883a 	mov	r4,r2
   2ade8:	180b883a 	mov	r5,r3
   2adec:	002d1b80 	call	2d1b8 <__muldf3>
   2adf0:	dac00217 	ldw	r11,8(sp)
   2adf4:	da800317 	ldw	r10,12(sp)
   2adf8:	100d883a 	mov	r6,r2
   2adfc:	180f883a 	mov	r7,r3
   2ae00:	5809883a 	mov	r4,r11
   2ae04:	500b883a 	mov	r5,r10
   2ae08:	002bce40 	call	2bce4 <__adddf3>
   2ae0c:	1827883a 	mov	r19,r3
   2ae10:	00c001f4 	movhi	r3,7
   2ae14:	18ee1444 	addi	r3,r3,-18351
   2ae18:	1f07c83a 	sub	r3,r3,fp
   2ae1c:	1dd2b03a 	or	r9,r3,r23
   2ae20:	1029883a 	mov	r20,r2
   2ae24:	0240490e 	bge	zero,r9,2af4c <__ieee754_log+0x4c0>
   2ae28:	000d883a 	mov	r6,zero
   2ae2c:	01cff834 	movhi	r7,16352
   2ae30:	9009883a 	mov	r4,r18
   2ae34:	880b883a 	mov	r5,r17
   2ae38:	002d1b80 	call	2d1b8 <__muldf3>
   2ae3c:	900d883a 	mov	r6,r18
   2ae40:	880f883a 	mov	r7,r17
   2ae44:	1009883a 	mov	r4,r2
   2ae48:	180b883a 	mov	r5,r3
   2ae4c:	002d1b80 	call	2d1b8 <__muldf3>
   2ae50:	1039883a 	mov	fp,r2
   2ae54:	182f883a 	mov	r23,r3
   2ae58:	8000691e 	bne	r16,zero,2b000 <__ieee754_log+0x574>
   2ae5c:	100d883a 	mov	r6,r2
   2ae60:	180f883a 	mov	r7,r3
   2ae64:	a009883a 	mov	r4,r20
   2ae68:	980b883a 	mov	r5,r19
   2ae6c:	002bce40 	call	2bce4 <__adddf3>
   2ae70:	b00d883a 	mov	r6,r22
   2ae74:	a80f883a 	mov	r7,r21
   2ae78:	1009883a 	mov	r4,r2
   2ae7c:	180b883a 	mov	r5,r3
   2ae80:	002d1b80 	call	2d1b8 <__muldf3>
   2ae84:	100d883a 	mov	r6,r2
   2ae88:	180f883a 	mov	r7,r3
   2ae8c:	e009883a 	mov	r4,fp
   2ae90:	b80b883a 	mov	r5,r23
   2ae94:	002da240 	call	2da24 <__subdf3>
   2ae98:	100d883a 	mov	r6,r2
   2ae9c:	180f883a 	mov	r7,r3
   2aea0:	9009883a 	mov	r4,r18
   2aea4:	880b883a 	mov	r5,r17
   2aea8:	002da240 	call	2da24 <__subdf3>
   2aeac:	003f5606 	br	2ac08 <_gp+0xfffefbc8>
   2aeb0:	000d883a 	mov	r6,zero
   2aeb4:	000f883a 	mov	r7,zero
   2aeb8:	0009883a 	mov	r4,zero
   2aebc:	0170d434 	movhi	r5,50000
   2aec0:	002c5900 	call	2c590 <__divdf3>
   2aec4:	003f5006 	br	2ac08 <_gp+0xfffefbc8>
   2aec8:	01955574 	movhi	r6,21845
   2aecc:	01cff574 	movhi	r7,16341
   2aed0:	31955544 	addi	r6,r6,21845
   2aed4:	39d55544 	addi	r7,r7,21845
   2aed8:	9009883a 	mov	r4,r18
   2aedc:	880b883a 	mov	r5,r17
   2aee0:	002d1b80 	call	2d1b8 <__muldf3>
   2aee4:	100d883a 	mov	r6,r2
   2aee8:	180f883a 	mov	r7,r3
   2aeec:	0009883a 	mov	r4,zero
   2aef0:	014ff834 	movhi	r5,16352
   2aef4:	002da240 	call	2da24 <__subdf3>
   2aef8:	900d883a 	mov	r6,r18
   2aefc:	880f883a 	mov	r7,r17
   2af00:	9009883a 	mov	r4,r18
   2af04:	880b883a 	mov	r5,r17
   2af08:	1029883a 	mov	r20,r2
   2af0c:	1827883a 	mov	r19,r3
   2af10:	002d1b80 	call	2d1b8 <__muldf3>
   2af14:	a009883a 	mov	r4,r20
   2af18:	980b883a 	mov	r5,r19
   2af1c:	100d883a 	mov	r6,r2
   2af20:	180f883a 	mov	r7,r3
   2af24:	002d1b80 	call	2d1b8 <__muldf3>
   2af28:	1029883a 	mov	r20,r2
   2af2c:	1827883a 	mov	r19,r3
   2af30:	80006f1e 	bne	r16,zero,2b0f0 <__ieee754_log+0x664>
   2af34:	100d883a 	mov	r6,r2
   2af38:	180f883a 	mov	r7,r3
   2af3c:	9009883a 	mov	r4,r18
   2af40:	880b883a 	mov	r5,r17
   2af44:	002da240 	call	2da24 <__subdf3>
   2af48:	003f2f06 	br	2ac08 <_gp+0xfffefbc8>
   2af4c:	80008b26 	beq	r16,zero,2b17c <__ieee754_log+0x6f0>
   2af50:	d9000017 	ldw	r4,0(sp)
   2af54:	d9400117 	ldw	r5,4(sp)
   2af58:	01cff9b4 	movhi	r7,16358
   2af5c:	39cb9084 	addi	r7,r7,11842
   2af60:	01bfb834 	movhi	r6,65248
   2af64:	002d1b80 	call	2d1b8 <__muldf3>
   2af68:	a00d883a 	mov	r6,r20
   2af6c:	980f883a 	mov	r7,r19
   2af70:	9009883a 	mov	r4,r18
   2af74:	880b883a 	mov	r5,r17
   2af78:	1821883a 	mov	r16,r3
   2af7c:	d8800215 	stw	r2,8(sp)
   2af80:	002da240 	call	2da24 <__subdf3>
   2af84:	b00d883a 	mov	r6,r22
   2af88:	a80f883a 	mov	r7,r21
   2af8c:	1009883a 	mov	r4,r2
   2af90:	180b883a 	mov	r5,r3
   2af94:	002d1b80 	call	2d1b8 <__muldf3>
   2af98:	d9000017 	ldw	r4,0(sp)
   2af9c:	d9400117 	ldw	r5,4(sp)
   2afa0:	018d5e74 	movhi	r6,13689
   2afa4:	01cf7ab4 	movhi	r7,15850
   2afa8:	318f1d84 	addi	r6,r6,15478
   2afac:	39ce7bc4 	addi	r7,r7,14831
   2afb0:	1029883a 	mov	r20,r2
   2afb4:	1827883a 	mov	r19,r3
   2afb8:	002d1b80 	call	2d1b8 <__muldf3>
   2afbc:	a009883a 	mov	r4,r20
   2afc0:	980b883a 	mov	r5,r19
   2afc4:	100d883a 	mov	r6,r2
   2afc8:	180f883a 	mov	r7,r3
   2afcc:	002da240 	call	2da24 <__subdf3>
   2afd0:	900d883a 	mov	r6,r18
   2afd4:	880f883a 	mov	r7,r17
   2afd8:	1009883a 	mov	r4,r2
   2afdc:	180b883a 	mov	r5,r3
   2afe0:	002da240 	call	2da24 <__subdf3>
   2afe4:	da000217 	ldw	r8,8(sp)
   2afe8:	100d883a 	mov	r6,r2
   2afec:	180f883a 	mov	r7,r3
   2aff0:	4009883a 	mov	r4,r8
   2aff4:	800b883a 	mov	r5,r16
   2aff8:	002da240 	call	2da24 <__subdf3>
   2affc:	003f0206 	br	2ac08 <_gp+0xfffefbc8>
   2b000:	d9000017 	ldw	r4,0(sp)
   2b004:	d9400117 	ldw	r5,4(sp)
   2b008:	01cff9b4 	movhi	r7,16358
   2b00c:	39cb9084 	addi	r7,r7,11842
   2b010:	01bfb834 	movhi	r6,65248
   2b014:	002d1b80 	call	2d1b8 <__muldf3>
   2b018:	e00d883a 	mov	r6,fp
   2b01c:	b80f883a 	mov	r7,r23
   2b020:	a009883a 	mov	r4,r20
   2b024:	980b883a 	mov	r5,r19
   2b028:	1821883a 	mov	r16,r3
   2b02c:	d8800315 	stw	r2,12(sp)
   2b030:	002bce40 	call	2bce4 <__adddf3>
   2b034:	b00d883a 	mov	r6,r22
   2b038:	a80f883a 	mov	r7,r21
   2b03c:	1009883a 	mov	r4,r2
   2b040:	180b883a 	mov	r5,r3
   2b044:	002d1b80 	call	2d1b8 <__muldf3>
   2b048:	d9000017 	ldw	r4,0(sp)
   2b04c:	d9400117 	ldw	r5,4(sp)
   2b050:	018d5e74 	movhi	r6,13689
   2b054:	01cf7ab4 	movhi	r7,15850
   2b058:	318f1d84 	addi	r6,r6,15478
   2b05c:	39ce7bc4 	addi	r7,r7,14831
   2b060:	1029883a 	mov	r20,r2
   2b064:	1827883a 	mov	r19,r3
   2b068:	002d1b80 	call	2d1b8 <__muldf3>
   2b06c:	a009883a 	mov	r4,r20
   2b070:	980b883a 	mov	r5,r19
   2b074:	100d883a 	mov	r6,r2
   2b078:	180f883a 	mov	r7,r3
   2b07c:	002bce40 	call	2bce4 <__adddf3>
   2b080:	e009883a 	mov	r4,fp
   2b084:	b80b883a 	mov	r5,r23
   2b088:	100d883a 	mov	r6,r2
   2b08c:	180f883a 	mov	r7,r3
   2b090:	002da240 	call	2da24 <__subdf3>
   2b094:	900d883a 	mov	r6,r18
   2b098:	880f883a 	mov	r7,r17
   2b09c:	1009883a 	mov	r4,r2
   2b0a0:	180b883a 	mov	r5,r3
   2b0a4:	002da240 	call	2da24 <__subdf3>
   2b0a8:	da800317 	ldw	r10,12(sp)
   2b0ac:	100d883a 	mov	r6,r2
   2b0b0:	180f883a 	mov	r7,r3
   2b0b4:	5009883a 	mov	r4,r10
   2b0b8:	800b883a 	mov	r5,r16
   2b0bc:	002da240 	call	2da24 <__subdf3>
   2b0c0:	003ed106 	br	2ac08 <_gp+0xfffefbc8>
   2b0c4:	200d883a 	mov	r6,r4
   2b0c8:	002da240 	call	2da24 <__subdf3>
   2b0cc:	000d883a 	mov	r6,zero
   2b0d0:	000f883a 	mov	r7,zero
   2b0d4:	1009883a 	mov	r4,r2
   2b0d8:	180b883a 	mov	r5,r3
   2b0dc:	002c5900 	call	2c590 <__divdf3>
   2b0e0:	003ec906 	br	2ac08 <_gp+0xfffefbc8>
   2b0e4:	0005883a 	mov	r2,zero
   2b0e8:	0007883a 	mov	r3,zero
   2b0ec:	003ec606 	br	2ac08 <_gp+0xfffefbc8>
   2b0f0:	8009883a 	mov	r4,r16
   2b0f4:	002e3a00 	call	2e3a0 <__floatsidf>
   2b0f8:	01cff9b4 	movhi	r7,16358
   2b0fc:	39cb9084 	addi	r7,r7,11842
   2b100:	01bfb834 	movhi	r6,65248
   2b104:	1009883a 	mov	r4,r2
   2b108:	180b883a 	mov	r5,r3
   2b10c:	102b883a 	mov	r21,r2
   2b110:	1821883a 	mov	r16,r3
   2b114:	002d1b80 	call	2d1b8 <__muldf3>
   2b118:	018d5e74 	movhi	r6,13689
   2b11c:	01cf7ab4 	movhi	r7,15850
   2b120:	a809883a 	mov	r4,r21
   2b124:	800b883a 	mov	r5,r16
   2b128:	318f1d84 	addi	r6,r6,15478
   2b12c:	39ce7bc4 	addi	r7,r7,14831
   2b130:	102f883a 	mov	r23,r2
   2b134:	182d883a 	mov	r22,r3
   2b138:	002d1b80 	call	2d1b8 <__muldf3>
   2b13c:	a009883a 	mov	r4,r20
   2b140:	980b883a 	mov	r5,r19
   2b144:	100d883a 	mov	r6,r2
   2b148:	180f883a 	mov	r7,r3
   2b14c:	002da240 	call	2da24 <__subdf3>
   2b150:	900d883a 	mov	r6,r18
   2b154:	880f883a 	mov	r7,r17
   2b158:	1009883a 	mov	r4,r2
   2b15c:	180b883a 	mov	r5,r3
   2b160:	002da240 	call	2da24 <__subdf3>
   2b164:	100d883a 	mov	r6,r2
   2b168:	180f883a 	mov	r7,r3
   2b16c:	b809883a 	mov	r4,r23
   2b170:	b00b883a 	mov	r5,r22
   2b174:	002da240 	call	2da24 <__subdf3>
   2b178:	003ea306 	br	2ac08 <_gp+0xfffefbc8>
   2b17c:	a00d883a 	mov	r6,r20
   2b180:	980f883a 	mov	r7,r19
   2b184:	9009883a 	mov	r4,r18
   2b188:	880b883a 	mov	r5,r17
   2b18c:	002da240 	call	2da24 <__subdf3>
   2b190:	b00d883a 	mov	r6,r22
   2b194:	a80f883a 	mov	r7,r21
   2b198:	1009883a 	mov	r4,r2
   2b19c:	180b883a 	mov	r5,r3
   2b1a0:	002d1b80 	call	2d1b8 <__muldf3>
   2b1a4:	003f3c06 	br	2ae98 <_gp+0xfffefe58>

0002b1a8 <__divsi3>:
   2b1a8:	20001b16 	blt	r4,zero,2b218 <__divsi3+0x70>
   2b1ac:	000f883a 	mov	r7,zero
   2b1b0:	28001616 	blt	r5,zero,2b20c <__divsi3+0x64>
   2b1b4:	200d883a 	mov	r6,r4
   2b1b8:	29001a2e 	bgeu	r5,r4,2b224 <__divsi3+0x7c>
   2b1bc:	00800804 	movi	r2,32
   2b1c0:	00c00044 	movi	r3,1
   2b1c4:	00000106 	br	2b1cc <__divsi3+0x24>
   2b1c8:	10000d26 	beq	r2,zero,2b200 <__divsi3+0x58>
   2b1cc:	294b883a 	add	r5,r5,r5
   2b1d0:	10bfffc4 	addi	r2,r2,-1
   2b1d4:	18c7883a 	add	r3,r3,r3
   2b1d8:	293ffb36 	bltu	r5,r4,2b1c8 <_gp+0xffff0188>
   2b1dc:	0005883a 	mov	r2,zero
   2b1e0:	18000726 	beq	r3,zero,2b200 <__divsi3+0x58>
   2b1e4:	0005883a 	mov	r2,zero
   2b1e8:	31400236 	bltu	r6,r5,2b1f4 <__divsi3+0x4c>
   2b1ec:	314dc83a 	sub	r6,r6,r5
   2b1f0:	10c4b03a 	or	r2,r2,r3
   2b1f4:	1806d07a 	srli	r3,r3,1
   2b1f8:	280ad07a 	srli	r5,r5,1
   2b1fc:	183ffa1e 	bne	r3,zero,2b1e8 <_gp+0xffff01a8>
   2b200:	38000126 	beq	r7,zero,2b208 <__divsi3+0x60>
   2b204:	0085c83a 	sub	r2,zero,r2
   2b208:	f800283a 	ret
   2b20c:	014bc83a 	sub	r5,zero,r5
   2b210:	39c0005c 	xori	r7,r7,1
   2b214:	003fe706 	br	2b1b4 <_gp+0xffff0174>
   2b218:	0109c83a 	sub	r4,zero,r4
   2b21c:	01c00044 	movi	r7,1
   2b220:	003fe306 	br	2b1b0 <_gp+0xffff0170>
   2b224:	00c00044 	movi	r3,1
   2b228:	003fee06 	br	2b1e4 <_gp+0xffff01a4>

0002b22c <__modsi3>:
   2b22c:	20001716 	blt	r4,zero,2b28c <__modsi3+0x60>
   2b230:	000f883a 	mov	r7,zero
   2b234:	2005883a 	mov	r2,r4
   2b238:	28001216 	blt	r5,zero,2b284 <__modsi3+0x58>
   2b23c:	2900162e 	bgeu	r5,r4,2b298 <__modsi3+0x6c>
   2b240:	01800804 	movi	r6,32
   2b244:	00c00044 	movi	r3,1
   2b248:	00000106 	br	2b250 <__modsi3+0x24>
   2b24c:	30000a26 	beq	r6,zero,2b278 <__modsi3+0x4c>
   2b250:	294b883a 	add	r5,r5,r5
   2b254:	31bfffc4 	addi	r6,r6,-1
   2b258:	18c7883a 	add	r3,r3,r3
   2b25c:	293ffb36 	bltu	r5,r4,2b24c <_gp+0xffff020c>
   2b260:	18000526 	beq	r3,zero,2b278 <__modsi3+0x4c>
   2b264:	1806d07a 	srli	r3,r3,1
   2b268:	11400136 	bltu	r2,r5,2b270 <__modsi3+0x44>
   2b26c:	1145c83a 	sub	r2,r2,r5
   2b270:	280ad07a 	srli	r5,r5,1
   2b274:	183ffb1e 	bne	r3,zero,2b264 <_gp+0xffff0224>
   2b278:	38000126 	beq	r7,zero,2b280 <__modsi3+0x54>
   2b27c:	0085c83a 	sub	r2,zero,r2
   2b280:	f800283a 	ret
   2b284:	014bc83a 	sub	r5,zero,r5
   2b288:	003fec06 	br	2b23c <_gp+0xffff01fc>
   2b28c:	0109c83a 	sub	r4,zero,r4
   2b290:	01c00044 	movi	r7,1
   2b294:	003fe706 	br	2b234 <_gp+0xffff01f4>
   2b298:	00c00044 	movi	r3,1
   2b29c:	003ff106 	br	2b264 <_gp+0xffff0224>

0002b2a0 <__udivsi3>:
   2b2a0:	200d883a 	mov	r6,r4
   2b2a4:	2900152e 	bgeu	r5,r4,2b2fc <__udivsi3+0x5c>
   2b2a8:	28001416 	blt	r5,zero,2b2fc <__udivsi3+0x5c>
   2b2ac:	00800804 	movi	r2,32
   2b2b0:	00c00044 	movi	r3,1
   2b2b4:	00000206 	br	2b2c0 <__udivsi3+0x20>
   2b2b8:	10000e26 	beq	r2,zero,2b2f4 <__udivsi3+0x54>
   2b2bc:	28000516 	blt	r5,zero,2b2d4 <__udivsi3+0x34>
   2b2c0:	294b883a 	add	r5,r5,r5
   2b2c4:	10bfffc4 	addi	r2,r2,-1
   2b2c8:	18c7883a 	add	r3,r3,r3
   2b2cc:	293ffa36 	bltu	r5,r4,2b2b8 <_gp+0xffff0278>
   2b2d0:	18000826 	beq	r3,zero,2b2f4 <__udivsi3+0x54>
   2b2d4:	0005883a 	mov	r2,zero
   2b2d8:	31400236 	bltu	r6,r5,2b2e4 <__udivsi3+0x44>
   2b2dc:	314dc83a 	sub	r6,r6,r5
   2b2e0:	10c4b03a 	or	r2,r2,r3
   2b2e4:	1806d07a 	srli	r3,r3,1
   2b2e8:	280ad07a 	srli	r5,r5,1
   2b2ec:	183ffa1e 	bne	r3,zero,2b2d8 <_gp+0xffff0298>
   2b2f0:	f800283a 	ret
   2b2f4:	0005883a 	mov	r2,zero
   2b2f8:	f800283a 	ret
   2b2fc:	00c00044 	movi	r3,1
   2b300:	003ff406 	br	2b2d4 <_gp+0xffff0294>

0002b304 <__umodsi3>:
   2b304:	2005883a 	mov	r2,r4
   2b308:	2900122e 	bgeu	r5,r4,2b354 <__umodsi3+0x50>
   2b30c:	28001116 	blt	r5,zero,2b354 <__umodsi3+0x50>
   2b310:	01800804 	movi	r6,32
   2b314:	00c00044 	movi	r3,1
   2b318:	00000206 	br	2b324 <__umodsi3+0x20>
   2b31c:	30000c26 	beq	r6,zero,2b350 <__umodsi3+0x4c>
   2b320:	28000516 	blt	r5,zero,2b338 <__umodsi3+0x34>
   2b324:	294b883a 	add	r5,r5,r5
   2b328:	31bfffc4 	addi	r6,r6,-1
   2b32c:	18c7883a 	add	r3,r3,r3
   2b330:	293ffa36 	bltu	r5,r4,2b31c <_gp+0xffff02dc>
   2b334:	18000626 	beq	r3,zero,2b350 <__umodsi3+0x4c>
   2b338:	1806d07a 	srli	r3,r3,1
   2b33c:	11400136 	bltu	r2,r5,2b344 <__umodsi3+0x40>
   2b340:	1145c83a 	sub	r2,r2,r5
   2b344:	280ad07a 	srli	r5,r5,1
   2b348:	183ffb1e 	bne	r3,zero,2b338 <_gp+0xffff02f8>
   2b34c:	f800283a 	ret
   2b350:	f800283a 	ret
   2b354:	00c00044 	movi	r3,1
   2b358:	003ff706 	br	2b338 <_gp+0xffff02f8>

0002b35c <__mulsi3>:
   2b35c:	0005883a 	mov	r2,zero
   2b360:	20000726 	beq	r4,zero,2b380 <__mulsi3+0x24>
   2b364:	20c0004c 	andi	r3,r4,1
   2b368:	2008d07a 	srli	r4,r4,1
   2b36c:	18000126 	beq	r3,zero,2b374 <__mulsi3+0x18>
   2b370:	1145883a 	add	r2,r2,r5
   2b374:	294b883a 	add	r5,r5,r5
   2b378:	203ffa1e 	bne	r4,zero,2b364 <_gp+0xffff0324>
   2b37c:	f800283a 	ret
   2b380:	f800283a 	ret

0002b384 <__divsf3>:
   2b384:	defff504 	addi	sp,sp,-44
   2b388:	200cd5fa 	srli	r6,r4,23
   2b38c:	dcc00415 	stw	r19,16(sp)
   2b390:	2026d7fa 	srli	r19,r4,31
   2b394:	00c02034 	movhi	r3,128
   2b398:	dd800715 	stw	r22,28(sp)
   2b39c:	dd000515 	stw	r20,20(sp)
   2b3a0:	dc800315 	stw	r18,12(sp)
   2b3a4:	18ffffc4 	addi	r3,r3,-1
   2b3a8:	dfc00a15 	stw	ra,40(sp)
   2b3ac:	df000915 	stw	fp,36(sp)
   2b3b0:	ddc00815 	stw	r23,32(sp)
   2b3b4:	dd400615 	stw	r21,24(sp)
   2b3b8:	dc400215 	stw	r17,8(sp)
   2b3bc:	dc000115 	stw	r16,4(sp)
   2b3c0:	35003fcc 	andi	r20,r6,255
   2b3c4:	1924703a 	and	r18,r3,r4
   2b3c8:	9d803fcc 	andi	r22,r19,255
   2b3cc:	a0005226 	beq	r20,zero,2b518 <__divsf3+0x194>
   2b3d0:	00803fc4 	movi	r2,255
   2b3d4:	a0802e26 	beq	r20,r2,2b490 <__divsf3+0x10c>
   2b3d8:	91002034 	orhi	r4,r18,128
   2b3dc:	202490fa 	slli	r18,r4,3
   2b3e0:	a53fe044 	addi	r20,r20,-127
   2b3e4:	0021883a 	mov	r16,zero
   2b3e8:	002f883a 	mov	r23,zero
   2b3ec:	280cd5fa 	srli	r6,r5,23
   2b3f0:	282ad7fa 	srli	r21,r5,31
   2b3f4:	00c02034 	movhi	r3,128
   2b3f8:	18ffffc4 	addi	r3,r3,-1
   2b3fc:	31803fcc 	andi	r6,r6,255
   2b400:	1962703a 	and	r17,r3,r5
   2b404:	af003fcc 	andi	fp,r21,255
   2b408:	30004a26 	beq	r6,zero,2b534 <__divsf3+0x1b0>
   2b40c:	00803fc4 	movi	r2,255
   2b410:	30804526 	beq	r6,r2,2b528 <__divsf3+0x1a4>
   2b414:	89402034 	orhi	r5,r17,128
   2b418:	282290fa 	slli	r17,r5,3
   2b41c:	31bfe044 	addi	r6,r6,-127
   2b420:	000b883a 	mov	r5,zero
   2b424:	2c20b03a 	or	r16,r5,r16
   2b428:	802090ba 	slli	r16,r16,2
   2b42c:	008000f4 	movhi	r2,3
   2b430:	10ad1404 	addi	r2,r2,-19376
   2b434:	80a1883a 	add	r16,r16,r2
   2b438:	81000017 	ldw	r4,0(r16)
   2b43c:	9d46f03a 	xor	r3,r19,r21
   2b440:	180f883a 	mov	r7,r3
   2b444:	18803fcc 	andi	r2,r3,255
   2b448:	a18dc83a 	sub	r6,r20,r6
   2b44c:	2000683a 	jmp	r4
   2b450:	0002b634 	movhi	zero,2776
   2b454:	0002b4b8 	rdprs	zero,zero,2770
   2b458:	0002b628 	cmpgeui	zero,zero,2776
   2b45c:	0002b4a4 	muli	zero,zero,2770
   2b460:	0002b628 	cmpgeui	zero,zero,2776
   2b464:	0002b600 	call	2b60 <__alt_mem_onchip_memory-0x1d4a0>
   2b468:	0002b628 	cmpgeui	zero,zero,2776
   2b46c:	0002b4a4 	muli	zero,zero,2770
   2b470:	0002b4b8 	rdprs	zero,zero,2770
   2b474:	0002b4b8 	rdprs	zero,zero,2770
   2b478:	0002b600 	call	2b60 <__alt_mem_onchip_memory-0x1d4a0>
   2b47c:	0002b4a4 	muli	zero,zero,2770
   2b480:	0002b714 	movui	zero,2780
   2b484:	0002b714 	movui	zero,2780
   2b488:	0002b714 	movui	zero,2780
   2b48c:	0002b6c8 	cmpgei	zero,zero,2779
   2b490:	9000581e 	bne	r18,zero,2b5f4 <__divsf3+0x270>
   2b494:	04000204 	movi	r16,8
   2b498:	05c00084 	movi	r23,2
   2b49c:	003fd306 	br	2b3ec <_gp+0xffff03ac>
   2b4a0:	0023883a 	mov	r17,zero
   2b4a4:	e02d883a 	mov	r22,fp
   2b4a8:	282f883a 	mov	r23,r5
   2b4ac:	00800084 	movi	r2,2
   2b4b0:	b8808f1e 	bne	r23,r2,2b6f0 <__divsf3+0x36c>
   2b4b4:	b005883a 	mov	r2,r22
   2b4b8:	11c0004c 	andi	r7,r2,1
   2b4bc:	013fffc4 	movi	r4,-1
   2b4c0:	000d883a 	mov	r6,zero
   2b4c4:	21003fcc 	andi	r4,r4,255
   2b4c8:	200895fa 	slli	r4,r4,23
   2b4cc:	38803fcc 	andi	r2,r7,255
   2b4d0:	00c02034 	movhi	r3,128
   2b4d4:	100497fa 	slli	r2,r2,31
   2b4d8:	18ffffc4 	addi	r3,r3,-1
   2b4dc:	30c6703a 	and	r3,r6,r3
   2b4e0:	1906b03a 	or	r3,r3,r4
   2b4e4:	1884b03a 	or	r2,r3,r2
   2b4e8:	dfc00a17 	ldw	ra,40(sp)
   2b4ec:	df000917 	ldw	fp,36(sp)
   2b4f0:	ddc00817 	ldw	r23,32(sp)
   2b4f4:	dd800717 	ldw	r22,28(sp)
   2b4f8:	dd400617 	ldw	r21,24(sp)
   2b4fc:	dd000517 	ldw	r20,20(sp)
   2b500:	dcc00417 	ldw	r19,16(sp)
   2b504:	dc800317 	ldw	r18,12(sp)
   2b508:	dc400217 	ldw	r17,8(sp)
   2b50c:	dc000117 	ldw	r16,4(sp)
   2b510:	dec00b04 	addi	sp,sp,44
   2b514:	f800283a 	ret
   2b518:	90002b1e 	bne	r18,zero,2b5c8 <__divsf3+0x244>
   2b51c:	04000104 	movi	r16,4
   2b520:	05c00044 	movi	r23,1
   2b524:	003fb106 	br	2b3ec <_gp+0xffff03ac>
   2b528:	8800251e 	bne	r17,zero,2b5c0 <__divsf3+0x23c>
   2b52c:	01400084 	movi	r5,2
   2b530:	00000206 	br	2b53c <__divsf3+0x1b8>
   2b534:	88001a1e 	bne	r17,zero,2b5a0 <__divsf3+0x21c>
   2b538:	01400044 	movi	r5,1
   2b53c:	8160b03a 	or	r16,r16,r5
   2b540:	802090ba 	slli	r16,r16,2
   2b544:	00c000f4 	movhi	r3,3
   2b548:	18ed5804 	addi	r3,r3,-19104
   2b54c:	80e1883a 	add	r16,r16,r3
   2b550:	80c00017 	ldw	r3,0(r16)
   2b554:	9d44f03a 	xor	r2,r19,r21
   2b558:	a18dc83a 	sub	r6,r20,r6
   2b55c:	1800683a 	jmp	r3
   2b560:	0002b4b8 	rdprs	zero,zero,2770
   2b564:	0002b4b8 	rdprs	zero,zero,2770
   2b568:	0002b704 	movi	zero,2780
   2b56c:	0002b4a0 	cmpeqi	zero,zero,2770
   2b570:	0002b704 	movi	zero,2780
   2b574:	0002b600 	call	2b60 <__alt_mem_onchip_memory-0x1d4a0>
   2b578:	0002b704 	movi	zero,2780
   2b57c:	0002b4a0 	cmpeqi	zero,zero,2770
   2b580:	0002b4b8 	rdprs	zero,zero,2770
   2b584:	0002b4b8 	rdprs	zero,zero,2770
   2b588:	0002b600 	call	2b60 <__alt_mem_onchip_memory-0x1d4a0>
   2b58c:	0002b4a0 	cmpeqi	zero,zero,2770
   2b590:	0002b714 	movui	zero,2780
   2b594:	0002b714 	movui	zero,2780
   2b598:	0002b714 	movui	zero,2780
   2b59c:	0002b72c 	andhi	zero,zero,2780
   2b5a0:	8809883a 	mov	r4,r17
   2b5a4:	002e7340 	call	2e734 <__clzsi2>
   2b5a8:	10fffec4 	addi	r3,r2,-5
   2b5ac:	10801d84 	addi	r2,r2,118
   2b5b0:	88e2983a 	sll	r17,r17,r3
   2b5b4:	008dc83a 	sub	r6,zero,r2
   2b5b8:	000b883a 	mov	r5,zero
   2b5bc:	003f9906 	br	2b424 <_gp+0xffff03e4>
   2b5c0:	014000c4 	movi	r5,3
   2b5c4:	003f9706 	br	2b424 <_gp+0xffff03e4>
   2b5c8:	9009883a 	mov	r4,r18
   2b5cc:	d9400015 	stw	r5,0(sp)
   2b5d0:	002e7340 	call	2e734 <__clzsi2>
   2b5d4:	10fffec4 	addi	r3,r2,-5
   2b5d8:	11801d84 	addi	r6,r2,118
   2b5dc:	90e4983a 	sll	r18,r18,r3
   2b5e0:	01a9c83a 	sub	r20,zero,r6
   2b5e4:	0021883a 	mov	r16,zero
   2b5e8:	002f883a 	mov	r23,zero
   2b5ec:	d9400017 	ldw	r5,0(sp)
   2b5f0:	003f7e06 	br	2b3ec <_gp+0xffff03ac>
   2b5f4:	04000304 	movi	r16,12
   2b5f8:	05c000c4 	movi	r23,3
   2b5fc:	003f7b06 	br	2b3ec <_gp+0xffff03ac>
   2b600:	01802034 	movhi	r6,128
   2b604:	000f883a 	mov	r7,zero
   2b608:	31bfffc4 	addi	r6,r6,-1
   2b60c:	013fffc4 	movi	r4,-1
   2b610:	003fac06 	br	2b4c4 <_gp+0xffff0484>
   2b614:	01400044 	movi	r5,1
   2b618:	2909c83a 	sub	r4,r5,r4
   2b61c:	00c006c4 	movi	r3,27
   2b620:	19004b0e 	bge	r3,r4,2b750 <__divsf3+0x3cc>
   2b624:	114e703a 	and	r7,r2,r5
   2b628:	0009883a 	mov	r4,zero
   2b62c:	000d883a 	mov	r6,zero
   2b630:	003fa406 	br	2b4c4 <_gp+0xffff0484>
   2b634:	9006917a 	slli	r3,r18,5
   2b638:	8822917a 	slli	r17,r17,5
   2b63c:	1c40372e 	bgeu	r3,r17,2b71c <__divsf3+0x398>
   2b640:	31bfffc4 	addi	r6,r6,-1
   2b644:	010006c4 	movi	r4,27
   2b648:	000b883a 	mov	r5,zero
   2b64c:	180f883a 	mov	r7,r3
   2b650:	294b883a 	add	r5,r5,r5
   2b654:	18c7883a 	add	r3,r3,r3
   2b658:	38000116 	blt	r7,zero,2b660 <__divsf3+0x2dc>
   2b65c:	1c400236 	bltu	r3,r17,2b668 <__divsf3+0x2e4>
   2b660:	1c47c83a 	sub	r3,r3,r17
   2b664:	29400054 	ori	r5,r5,1
   2b668:	213fffc4 	addi	r4,r4,-1
   2b66c:	203ff71e 	bne	r4,zero,2b64c <_gp+0xffff060c>
   2b670:	1806c03a 	cmpne	r3,r3,zero
   2b674:	1962b03a 	or	r17,r3,r5
   2b678:	31001fc4 	addi	r4,r6,127
   2b67c:	013fe50e 	bge	zero,r4,2b614 <_gp+0xffff05d4>
   2b680:	88c001cc 	andi	r3,r17,7
   2b684:	18000426 	beq	r3,zero,2b698 <__divsf3+0x314>
   2b688:	88c003cc 	andi	r3,r17,15
   2b68c:	01400104 	movi	r5,4
   2b690:	19400126 	beq	r3,r5,2b698 <__divsf3+0x314>
   2b694:	8963883a 	add	r17,r17,r5
   2b698:	88c2002c 	andhi	r3,r17,2048
   2b69c:	18000426 	beq	r3,zero,2b6b0 <__divsf3+0x32c>
   2b6a0:	00fe0034 	movhi	r3,63488
   2b6a4:	18ffffc4 	addi	r3,r3,-1
   2b6a8:	31002004 	addi	r4,r6,128
   2b6ac:	88e2703a 	and	r17,r17,r3
   2b6b0:	00c03f84 	movi	r3,254
   2b6b4:	193f8016 	blt	r3,r4,2b4b8 <_gp+0xffff0478>
   2b6b8:	880c91ba 	slli	r6,r17,6
   2b6bc:	11c0004c 	andi	r7,r2,1
   2b6c0:	300cd27a 	srli	r6,r6,9
   2b6c4:	003f7f06 	br	2b4c4 <_gp+0xffff0484>
   2b6c8:	9080102c 	andhi	r2,r18,64
   2b6cc:	10000226 	beq	r2,zero,2b6d8 <__divsf3+0x354>
   2b6d0:	8880102c 	andhi	r2,r17,64
   2b6d4:	10001826 	beq	r2,zero,2b738 <__divsf3+0x3b4>
   2b6d8:	00802034 	movhi	r2,128
   2b6dc:	91801034 	orhi	r6,r18,64
   2b6e0:	10bfffc4 	addi	r2,r2,-1
   2b6e4:	980f883a 	mov	r7,r19
   2b6e8:	308c703a 	and	r6,r6,r2
   2b6ec:	003fc706 	br	2b60c <_gp+0xffff05cc>
   2b6f0:	008000c4 	movi	r2,3
   2b6f4:	b8802d26 	beq	r23,r2,2b7ac <__divsf3+0x428>
   2b6f8:	00c00044 	movi	r3,1
   2b6fc:	b005883a 	mov	r2,r22
   2b700:	b8ffdd1e 	bne	r23,r3,2b678 <_gp+0xffff0638>
   2b704:	11c0004c 	andi	r7,r2,1
   2b708:	0009883a 	mov	r4,zero
   2b70c:	000d883a 	mov	r6,zero
   2b710:	003f6c06 	br	2b4c4 <_gp+0xffff0484>
   2b714:	9023883a 	mov	r17,r18
   2b718:	003f6406 	br	2b4ac <_gp+0xffff046c>
   2b71c:	1c47c83a 	sub	r3,r3,r17
   2b720:	01000684 	movi	r4,26
   2b724:	01400044 	movi	r5,1
   2b728:	003fc806 	br	2b64c <_gp+0xffff060c>
   2b72c:	9080102c 	andhi	r2,r18,64
   2b730:	103fe926 	beq	r2,zero,2b6d8 <_gp+0xffff0698>
   2b734:	0023883a 	mov	r17,zero
   2b738:	00802034 	movhi	r2,128
   2b73c:	89801034 	orhi	r6,r17,64
   2b740:	10bfffc4 	addi	r2,r2,-1
   2b744:	a80f883a 	mov	r7,r21
   2b748:	308c703a 	and	r6,r6,r2
   2b74c:	003faf06 	br	2b60c <_gp+0xffff05cc>
   2b750:	01c00804 	movi	r7,32
   2b754:	390fc83a 	sub	r7,r7,r4
   2b758:	89ce983a 	sll	r7,r17,r7
   2b75c:	890ad83a 	srl	r5,r17,r4
   2b760:	380ec03a 	cmpne	r7,r7,zero
   2b764:	29cab03a 	or	r5,r5,r7
   2b768:	28c001cc 	andi	r3,r5,7
   2b76c:	18000426 	beq	r3,zero,2b780 <__divsf3+0x3fc>
   2b770:	28c003cc 	andi	r3,r5,15
   2b774:	01000104 	movi	r4,4
   2b778:	19000126 	beq	r3,r4,2b780 <__divsf3+0x3fc>
   2b77c:	290b883a 	add	r5,r5,r4
   2b780:	28c1002c 	andhi	r3,r5,1024
   2b784:	18000426 	beq	r3,zero,2b798 <__divsf3+0x414>
   2b788:	11c0004c 	andi	r7,r2,1
   2b78c:	01000044 	movi	r4,1
   2b790:	000d883a 	mov	r6,zero
   2b794:	003f4b06 	br	2b4c4 <_gp+0xffff0484>
   2b798:	280a91ba 	slli	r5,r5,6
   2b79c:	11c0004c 	andi	r7,r2,1
   2b7a0:	0009883a 	mov	r4,zero
   2b7a4:	280cd27a 	srli	r6,r5,9
   2b7a8:	003f4606 	br	2b4c4 <_gp+0xffff0484>
   2b7ac:	00802034 	movhi	r2,128
   2b7b0:	89801034 	orhi	r6,r17,64
   2b7b4:	10bfffc4 	addi	r2,r2,-1
   2b7b8:	b00f883a 	mov	r7,r22
   2b7bc:	308c703a 	and	r6,r6,r2
   2b7c0:	003f9206 	br	2b60c <_gp+0xffff05cc>

0002b7c4 <__mulsf3>:
   2b7c4:	defff504 	addi	sp,sp,-44
   2b7c8:	dc000115 	stw	r16,4(sp)
   2b7cc:	2020d5fa 	srli	r16,r4,23
   2b7d0:	dd400615 	stw	r21,24(sp)
   2b7d4:	202ad7fa 	srli	r21,r4,31
   2b7d8:	dc800315 	stw	r18,12(sp)
   2b7dc:	04802034 	movhi	r18,128
   2b7e0:	df000915 	stw	fp,36(sp)
   2b7e4:	dd000515 	stw	r20,20(sp)
   2b7e8:	94bfffc4 	addi	r18,r18,-1
   2b7ec:	dfc00a15 	stw	ra,40(sp)
   2b7f0:	ddc00815 	stw	r23,32(sp)
   2b7f4:	dd800715 	stw	r22,28(sp)
   2b7f8:	dcc00415 	stw	r19,16(sp)
   2b7fc:	dc400215 	stw	r17,8(sp)
   2b800:	84003fcc 	andi	r16,r16,255
   2b804:	9124703a 	and	r18,r18,r4
   2b808:	a829883a 	mov	r20,r21
   2b80c:	af003fcc 	andi	fp,r21,255
   2b810:	80005426 	beq	r16,zero,2b964 <__mulsf3+0x1a0>
   2b814:	00803fc4 	movi	r2,255
   2b818:	80802f26 	beq	r16,r2,2b8d8 <__mulsf3+0x114>
   2b81c:	91002034 	orhi	r4,r18,128
   2b820:	202490fa 	slli	r18,r4,3
   2b824:	843fe044 	addi	r16,r16,-127
   2b828:	0023883a 	mov	r17,zero
   2b82c:	002f883a 	mov	r23,zero
   2b830:	2804d5fa 	srli	r2,r5,23
   2b834:	282cd7fa 	srli	r22,r5,31
   2b838:	01002034 	movhi	r4,128
   2b83c:	213fffc4 	addi	r4,r4,-1
   2b840:	10803fcc 	andi	r2,r2,255
   2b844:	2166703a 	and	r19,r4,r5
   2b848:	b1803fcc 	andi	r6,r22,255
   2b84c:	10004c26 	beq	r2,zero,2b980 <__mulsf3+0x1bc>
   2b850:	00c03fc4 	movi	r3,255
   2b854:	10c04726 	beq	r2,r3,2b974 <__mulsf3+0x1b0>
   2b858:	99002034 	orhi	r4,r19,128
   2b85c:	202690fa 	slli	r19,r4,3
   2b860:	10bfe044 	addi	r2,r2,-127
   2b864:	0007883a 	mov	r3,zero
   2b868:	80a1883a 	add	r16,r16,r2
   2b86c:	010003c4 	movi	r4,15
   2b870:	1c44b03a 	or	r2,r3,r17
   2b874:	b56af03a 	xor	r21,r22,r21
   2b878:	81c00044 	addi	r7,r16,1
   2b87c:	20806b36 	bltu	r4,r2,2ba2c <__mulsf3+0x268>
   2b880:	100490ba 	slli	r2,r2,2
   2b884:	010000f4 	movhi	r4,3
   2b888:	212e2604 	addi	r4,r4,-18280
   2b88c:	1105883a 	add	r2,r2,r4
   2b890:	10800017 	ldw	r2,0(r2)
   2b894:	1000683a 	jmp	r2
   2b898:	0002ba2c 	andhi	zero,zero,2792
   2b89c:	0002b8ec 	andhi	zero,zero,2787
   2b8a0:	0002b8ec 	andhi	zero,zero,2787
   2b8a4:	0002b8e8 	cmpgeui	zero,zero,2787
   2b8a8:	0002ba10 	cmplti	zero,zero,2792
   2b8ac:	0002ba10 	cmplti	zero,zero,2792
   2b8b0:	0002b9fc 	xorhi	zero,zero,2791
   2b8b4:	0002b8e8 	cmpgeui	zero,zero,2787
   2b8b8:	0002ba10 	cmplti	zero,zero,2792
   2b8bc:	0002b9fc 	xorhi	zero,zero,2791
   2b8c0:	0002ba10 	cmplti	zero,zero,2792
   2b8c4:	0002b8e8 	cmpgeui	zero,zero,2787
   2b8c8:	0002ba1c 	xori	zero,zero,2792
   2b8cc:	0002ba1c 	xori	zero,zero,2792
   2b8d0:	0002ba1c 	xori	zero,zero,2792
   2b8d4:	0002bb2c 	andhi	zero,zero,2796
   2b8d8:	90003b1e 	bne	r18,zero,2b9c8 <__mulsf3+0x204>
   2b8dc:	04400204 	movi	r17,8
   2b8e0:	05c00084 	movi	r23,2
   2b8e4:	003fd206 	br	2b830 <_gp+0xffff07f0>
   2b8e8:	302b883a 	mov	r21,r6
   2b8ec:	00800084 	movi	r2,2
   2b8f0:	18802626 	beq	r3,r2,2b98c <__mulsf3+0x1c8>
   2b8f4:	008000c4 	movi	r2,3
   2b8f8:	1880b826 	beq	r3,r2,2bbdc <__mulsf3+0x418>
   2b8fc:	00800044 	movi	r2,1
   2b900:	1880af1e 	bne	r3,r2,2bbc0 <__mulsf3+0x3fc>
   2b904:	a829883a 	mov	r20,r21
   2b908:	0007883a 	mov	r3,zero
   2b90c:	0009883a 	mov	r4,zero
   2b910:	18803fcc 	andi	r2,r3,255
   2b914:	100695fa 	slli	r3,r2,23
   2b918:	a0803fcc 	andi	r2,r20,255
   2b91c:	100a97fa 	slli	r5,r2,31
   2b920:	00802034 	movhi	r2,128
   2b924:	10bfffc4 	addi	r2,r2,-1
   2b928:	2084703a 	and	r2,r4,r2
   2b92c:	10c4b03a 	or	r2,r2,r3
   2b930:	1144b03a 	or	r2,r2,r5
   2b934:	dfc00a17 	ldw	ra,40(sp)
   2b938:	df000917 	ldw	fp,36(sp)
   2b93c:	ddc00817 	ldw	r23,32(sp)
   2b940:	dd800717 	ldw	r22,28(sp)
   2b944:	dd400617 	ldw	r21,24(sp)
   2b948:	dd000517 	ldw	r20,20(sp)
   2b94c:	dcc00417 	ldw	r19,16(sp)
   2b950:	dc800317 	ldw	r18,12(sp)
   2b954:	dc400217 	ldw	r17,8(sp)
   2b958:	dc000117 	ldw	r16,4(sp)
   2b95c:	dec00b04 	addi	sp,sp,44
   2b960:	f800283a 	ret
   2b964:	90000d1e 	bne	r18,zero,2b99c <__mulsf3+0x1d8>
   2b968:	04400104 	movi	r17,4
   2b96c:	05c00044 	movi	r23,1
   2b970:	003faf06 	br	2b830 <_gp+0xffff07f0>
   2b974:	9806c03a 	cmpne	r3,r19,zero
   2b978:	18c00084 	addi	r3,r3,2
   2b97c:	003fba06 	br	2b868 <_gp+0xffff0828>
   2b980:	9800141e 	bne	r19,zero,2b9d4 <__mulsf3+0x210>
   2b984:	00c00044 	movi	r3,1
   2b988:	003fb706 	br	2b868 <_gp+0xffff0828>
   2b98c:	a829883a 	mov	r20,r21
   2b990:	00ffffc4 	movi	r3,-1
   2b994:	0009883a 	mov	r4,zero
   2b998:	003fdd06 	br	2b910 <_gp+0xffff08d0>
   2b99c:	9009883a 	mov	r4,r18
   2b9a0:	d9400015 	stw	r5,0(sp)
   2b9a4:	002e7340 	call	2e734 <__clzsi2>
   2b9a8:	10fffec4 	addi	r3,r2,-5
   2b9ac:	10801d84 	addi	r2,r2,118
   2b9b0:	90e4983a 	sll	r18,r18,r3
   2b9b4:	00a1c83a 	sub	r16,zero,r2
   2b9b8:	0023883a 	mov	r17,zero
   2b9bc:	002f883a 	mov	r23,zero
   2b9c0:	d9400017 	ldw	r5,0(sp)
   2b9c4:	003f9a06 	br	2b830 <_gp+0xffff07f0>
   2b9c8:	04400304 	movi	r17,12
   2b9cc:	05c000c4 	movi	r23,3
   2b9d0:	003f9706 	br	2b830 <_gp+0xffff07f0>
   2b9d4:	9809883a 	mov	r4,r19
   2b9d8:	d9800015 	stw	r6,0(sp)
   2b9dc:	002e7340 	call	2e734 <__clzsi2>
   2b9e0:	10fffec4 	addi	r3,r2,-5
   2b9e4:	10801d84 	addi	r2,r2,118
   2b9e8:	98e6983a 	sll	r19,r19,r3
   2b9ec:	0085c83a 	sub	r2,zero,r2
   2b9f0:	0007883a 	mov	r3,zero
   2b9f4:	d9800017 	ldw	r6,0(sp)
   2b9f8:	003f9b06 	br	2b868 <_gp+0xffff0828>
   2b9fc:	01002034 	movhi	r4,128
   2ba00:	0029883a 	mov	r20,zero
   2ba04:	213fffc4 	addi	r4,r4,-1
   2ba08:	00ffffc4 	movi	r3,-1
   2ba0c:	003fc006 	br	2b910 <_gp+0xffff08d0>
   2ba10:	9027883a 	mov	r19,r18
   2ba14:	b807883a 	mov	r3,r23
   2ba18:	003fb406 	br	2b8ec <_gp+0xffff08ac>
   2ba1c:	9027883a 	mov	r19,r18
   2ba20:	e02b883a 	mov	r21,fp
   2ba24:	b807883a 	mov	r3,r23
   2ba28:	003fb006 	br	2b8ec <_gp+0xffff08ac>
   2ba2c:	9028d43a 	srli	r20,r18,16
   2ba30:	982cd43a 	srli	r22,r19,16
   2ba34:	94bfffcc 	andi	r18,r18,65535
   2ba38:	9cffffcc 	andi	r19,r19,65535
   2ba3c:	980b883a 	mov	r5,r19
   2ba40:	9009883a 	mov	r4,r18
   2ba44:	d9c00015 	stw	r7,0(sp)
   2ba48:	002b35c0 	call	2b35c <__mulsi3>
   2ba4c:	a00b883a 	mov	r5,r20
   2ba50:	9809883a 	mov	r4,r19
   2ba54:	1023883a 	mov	r17,r2
   2ba58:	002b35c0 	call	2b35c <__mulsi3>
   2ba5c:	a009883a 	mov	r4,r20
   2ba60:	b00b883a 	mov	r5,r22
   2ba64:	1027883a 	mov	r19,r2
   2ba68:	002b35c0 	call	2b35c <__mulsi3>
   2ba6c:	b00b883a 	mov	r5,r22
   2ba70:	9009883a 	mov	r4,r18
   2ba74:	1029883a 	mov	r20,r2
   2ba78:	002b35c0 	call	2b35c <__mulsi3>
   2ba7c:	8806d43a 	srli	r3,r17,16
   2ba80:	14c5883a 	add	r2,r2,r19
   2ba84:	d9c00017 	ldw	r7,0(sp)
   2ba88:	1885883a 	add	r2,r3,r2
   2ba8c:	14c0022e 	bgeu	r2,r19,2ba98 <__mulsf3+0x2d4>
   2ba90:	00c00074 	movhi	r3,1
   2ba94:	a0e9883a 	add	r20,r20,r3
   2ba98:	1026943a 	slli	r19,r2,16
   2ba9c:	8c7fffcc 	andi	r17,r17,65535
   2baa0:	1004d43a 	srli	r2,r2,16
   2baa4:	9c63883a 	add	r17,r19,r17
   2baa8:	882691ba 	slli	r19,r17,6
   2baac:	1505883a 	add	r2,r2,r20
   2bab0:	8822d6ba 	srli	r17,r17,26
   2bab4:	100891ba 	slli	r4,r2,6
   2bab8:	9826c03a 	cmpne	r19,r19,zero
   2babc:	9c62b03a 	or	r17,r19,r17
   2bac0:	8926b03a 	or	r19,r17,r4
   2bac4:	9882002c 	andhi	r2,r19,2048
   2bac8:	10000426 	beq	r2,zero,2badc <__mulsf3+0x318>
   2bacc:	9804d07a 	srli	r2,r19,1
   2bad0:	9900004c 	andi	r4,r19,1
   2bad4:	3821883a 	mov	r16,r7
   2bad8:	1126b03a 	or	r19,r2,r4
   2badc:	80c01fc4 	addi	r3,r16,127
   2bae0:	00c0210e 	bge	zero,r3,2bb68 <__mulsf3+0x3a4>
   2bae4:	988001cc 	andi	r2,r19,7
   2bae8:	10000426 	beq	r2,zero,2bafc <__mulsf3+0x338>
   2baec:	988003cc 	andi	r2,r19,15
   2baf0:	01000104 	movi	r4,4
   2baf4:	11000126 	beq	r2,r4,2bafc <__mulsf3+0x338>
   2baf8:	9927883a 	add	r19,r19,r4
   2bafc:	9882002c 	andhi	r2,r19,2048
   2bb00:	10000426 	beq	r2,zero,2bb14 <__mulsf3+0x350>
   2bb04:	00be0034 	movhi	r2,63488
   2bb08:	10bfffc4 	addi	r2,r2,-1
   2bb0c:	80c02004 	addi	r3,r16,128
   2bb10:	98a6703a 	and	r19,r19,r2
   2bb14:	00803f84 	movi	r2,254
   2bb18:	10ff9c16 	blt	r2,r3,2b98c <_gp+0xffff094c>
   2bb1c:	980891ba 	slli	r4,r19,6
   2bb20:	a829883a 	mov	r20,r21
   2bb24:	2008d27a 	srli	r4,r4,9
   2bb28:	003f7906 	br	2b910 <_gp+0xffff08d0>
   2bb2c:	9080102c 	andhi	r2,r18,64
   2bb30:	10000826 	beq	r2,zero,2bb54 <__mulsf3+0x390>
   2bb34:	9880102c 	andhi	r2,r19,64
   2bb38:	1000061e 	bne	r2,zero,2bb54 <__mulsf3+0x390>
   2bb3c:	00802034 	movhi	r2,128
   2bb40:	99001034 	orhi	r4,r19,64
   2bb44:	10bfffc4 	addi	r2,r2,-1
   2bb48:	b029883a 	mov	r20,r22
   2bb4c:	2088703a 	and	r4,r4,r2
   2bb50:	003fad06 	br	2ba08 <_gp+0xffff09c8>
   2bb54:	00802034 	movhi	r2,128
   2bb58:	91001034 	orhi	r4,r18,64
   2bb5c:	10bfffc4 	addi	r2,r2,-1
   2bb60:	2088703a 	and	r4,r4,r2
   2bb64:	003fa806 	br	2ba08 <_gp+0xffff09c8>
   2bb68:	00800044 	movi	r2,1
   2bb6c:	10c7c83a 	sub	r3,r2,r3
   2bb70:	008006c4 	movi	r2,27
   2bb74:	10ff6316 	blt	r2,r3,2b904 <_gp+0xffff08c4>
   2bb78:	00800804 	movi	r2,32
   2bb7c:	10c5c83a 	sub	r2,r2,r3
   2bb80:	9884983a 	sll	r2,r19,r2
   2bb84:	98c6d83a 	srl	r3,r19,r3
   2bb88:	1004c03a 	cmpne	r2,r2,zero
   2bb8c:	1884b03a 	or	r2,r3,r2
   2bb90:	10c001cc 	andi	r3,r2,7
   2bb94:	18000426 	beq	r3,zero,2bba8 <__mulsf3+0x3e4>
   2bb98:	10c003cc 	andi	r3,r2,15
   2bb9c:	01000104 	movi	r4,4
   2bba0:	19000126 	beq	r3,r4,2bba8 <__mulsf3+0x3e4>
   2bba4:	1105883a 	add	r2,r2,r4
   2bba8:	10c1002c 	andhi	r3,r2,1024
   2bbac:	18000626 	beq	r3,zero,2bbc8 <__mulsf3+0x404>
   2bbb0:	a829883a 	mov	r20,r21
   2bbb4:	00c00044 	movi	r3,1
   2bbb8:	0009883a 	mov	r4,zero
   2bbbc:	003f5406 	br	2b910 <_gp+0xffff08d0>
   2bbc0:	3821883a 	mov	r16,r7
   2bbc4:	003fc506 	br	2badc <_gp+0xffff0a9c>
   2bbc8:	100491ba 	slli	r2,r2,6
   2bbcc:	a829883a 	mov	r20,r21
   2bbd0:	0007883a 	mov	r3,zero
   2bbd4:	1008d27a 	srli	r4,r2,9
   2bbd8:	003f4d06 	br	2b910 <_gp+0xffff08d0>
   2bbdc:	00802034 	movhi	r2,128
   2bbe0:	99001034 	orhi	r4,r19,64
   2bbe4:	10bfffc4 	addi	r2,r2,-1
   2bbe8:	a829883a 	mov	r20,r21
   2bbec:	2088703a 	and	r4,r4,r2
   2bbf0:	003f8506 	br	2ba08 <_gp+0xffff09c8>

0002bbf4 <__floatunsisf>:
   2bbf4:	defffe04 	addi	sp,sp,-8
   2bbf8:	dfc00115 	stw	ra,4(sp)
   2bbfc:	dc000015 	stw	r16,0(sp)
   2bc00:	20002c26 	beq	r4,zero,2bcb4 <__floatunsisf+0xc0>
   2bc04:	2021883a 	mov	r16,r4
   2bc08:	002e7340 	call	2e734 <__clzsi2>
   2bc0c:	00c02784 	movi	r3,158
   2bc10:	1887c83a 	sub	r3,r3,r2
   2bc14:	01002584 	movi	r4,150
   2bc18:	20c00f16 	blt	r4,r3,2bc58 <__floatunsisf+0x64>
   2bc1c:	20c9c83a 	sub	r4,r4,r3
   2bc20:	8108983a 	sll	r4,r16,r4
   2bc24:	00802034 	movhi	r2,128
   2bc28:	10bfffc4 	addi	r2,r2,-1
   2bc2c:	2088703a 	and	r4,r4,r2
   2bc30:	18803fcc 	andi	r2,r3,255
   2bc34:	100695fa 	slli	r3,r2,23
   2bc38:	00802034 	movhi	r2,128
   2bc3c:	10bfffc4 	addi	r2,r2,-1
   2bc40:	2084703a 	and	r2,r4,r2
   2bc44:	10c4b03a 	or	r2,r2,r3
   2bc48:	dfc00117 	ldw	ra,4(sp)
   2bc4c:	dc000017 	ldw	r16,0(sp)
   2bc50:	dec00204 	addi	sp,sp,8
   2bc54:	f800283a 	ret
   2bc58:	01002644 	movi	r4,153
   2bc5c:	20c01816 	blt	r4,r3,2bcc0 <__floatunsisf+0xcc>
   2bc60:	20c9c83a 	sub	r4,r4,r3
   2bc64:	8108983a 	sll	r4,r16,r4
   2bc68:	017f0034 	movhi	r5,64512
   2bc6c:	297fffc4 	addi	r5,r5,-1
   2bc70:	218001cc 	andi	r6,r4,7
   2bc74:	214a703a 	and	r5,r4,r5
   2bc78:	30000426 	beq	r6,zero,2bc8c <__floatunsisf+0x98>
   2bc7c:	210003cc 	andi	r4,r4,15
   2bc80:	01800104 	movi	r6,4
   2bc84:	21800126 	beq	r4,r6,2bc8c <__floatunsisf+0x98>
   2bc88:	298b883a 	add	r5,r5,r6
   2bc8c:	2901002c 	andhi	r4,r5,1024
   2bc90:	20000526 	beq	r4,zero,2bca8 <__floatunsisf+0xb4>
   2bc94:	00c027c4 	movi	r3,159
   2bc98:	1887c83a 	sub	r3,r3,r2
   2bc9c:	00bf0034 	movhi	r2,64512
   2bca0:	10bfffc4 	addi	r2,r2,-1
   2bca4:	288a703a 	and	r5,r5,r2
   2bca8:	280891ba 	slli	r4,r5,6
   2bcac:	2008d27a 	srli	r4,r4,9
   2bcb0:	003fdf06 	br	2bc30 <_gp+0xffff0bf0>
   2bcb4:	0007883a 	mov	r3,zero
   2bcb8:	0009883a 	mov	r4,zero
   2bcbc:	003fdc06 	br	2bc30 <_gp+0xffff0bf0>
   2bcc0:	01402e44 	movi	r5,185
   2bcc4:	28cbc83a 	sub	r5,r5,r3
   2bcc8:	01000144 	movi	r4,5
   2bccc:	2089c83a 	sub	r4,r4,r2
   2bcd0:	814a983a 	sll	r5,r16,r5
   2bcd4:	8108d83a 	srl	r4,r16,r4
   2bcd8:	2820c03a 	cmpne	r16,r5,zero
   2bcdc:	2408b03a 	or	r4,r4,r16
   2bce0:	003fe106 	br	2bc68 <_gp+0xffff0c28>

0002bce4 <__adddf3>:
   2bce4:	02c00434 	movhi	r11,16
   2bce8:	5affffc4 	addi	r11,r11,-1
   2bcec:	2806d7fa 	srli	r3,r5,31
   2bcf0:	2ad4703a 	and	r10,r5,r11
   2bcf4:	3ad2703a 	and	r9,r7,r11
   2bcf8:	3804d53a 	srli	r2,r7,20
   2bcfc:	3018d77a 	srli	r12,r6,29
   2bd00:	280ad53a 	srli	r5,r5,20
   2bd04:	501490fa 	slli	r10,r10,3
   2bd08:	2010d77a 	srli	r8,r4,29
   2bd0c:	481290fa 	slli	r9,r9,3
   2bd10:	380ed7fa 	srli	r7,r7,31
   2bd14:	defffb04 	addi	sp,sp,-20
   2bd18:	dc800215 	stw	r18,8(sp)
   2bd1c:	dc400115 	stw	r17,4(sp)
   2bd20:	dc000015 	stw	r16,0(sp)
   2bd24:	dfc00415 	stw	ra,16(sp)
   2bd28:	dcc00315 	stw	r19,12(sp)
   2bd2c:	1c803fcc 	andi	r18,r3,255
   2bd30:	2c01ffcc 	andi	r16,r5,2047
   2bd34:	5210b03a 	or	r8,r10,r8
   2bd38:	202290fa 	slli	r17,r4,3
   2bd3c:	1081ffcc 	andi	r2,r2,2047
   2bd40:	4b12b03a 	or	r9,r9,r12
   2bd44:	300c90fa 	slli	r6,r6,3
   2bd48:	91c07526 	beq	r18,r7,2bf20 <__adddf3+0x23c>
   2bd4c:	8087c83a 	sub	r3,r16,r2
   2bd50:	00c0ab0e 	bge	zero,r3,2c000 <__adddf3+0x31c>
   2bd54:	10002a1e 	bne	r2,zero,2be00 <__adddf3+0x11c>
   2bd58:	4984b03a 	or	r2,r9,r6
   2bd5c:	1000961e 	bne	r2,zero,2bfb8 <__adddf3+0x2d4>
   2bd60:	888001cc 	andi	r2,r17,7
   2bd64:	10000726 	beq	r2,zero,2bd84 <__adddf3+0xa0>
   2bd68:	888003cc 	andi	r2,r17,15
   2bd6c:	00c00104 	movi	r3,4
   2bd70:	10c00426 	beq	r2,r3,2bd84 <__adddf3+0xa0>
   2bd74:	88c7883a 	add	r3,r17,r3
   2bd78:	1c63803a 	cmpltu	r17,r3,r17
   2bd7c:	4451883a 	add	r8,r8,r17
   2bd80:	1823883a 	mov	r17,r3
   2bd84:	4080202c 	andhi	r2,r8,128
   2bd88:	10005926 	beq	r2,zero,2bef0 <__adddf3+0x20c>
   2bd8c:	84000044 	addi	r16,r16,1
   2bd90:	0081ffc4 	movi	r2,2047
   2bd94:	8080ba26 	beq	r16,r2,2c080 <__adddf3+0x39c>
   2bd98:	00bfe034 	movhi	r2,65408
   2bd9c:	10bfffc4 	addi	r2,r2,-1
   2bda0:	4090703a 	and	r8,r8,r2
   2bda4:	4004977a 	slli	r2,r8,29
   2bda8:	4010927a 	slli	r8,r8,9
   2bdac:	8822d0fa 	srli	r17,r17,3
   2bdb0:	8401ffcc 	andi	r16,r16,2047
   2bdb4:	4010d33a 	srli	r8,r8,12
   2bdb8:	9007883a 	mov	r3,r18
   2bdbc:	1444b03a 	or	r2,r2,r17
   2bdc0:	8401ffcc 	andi	r16,r16,2047
   2bdc4:	8020953a 	slli	r16,r16,20
   2bdc8:	18c03fcc 	andi	r3,r3,255
   2bdcc:	01000434 	movhi	r4,16
   2bdd0:	213fffc4 	addi	r4,r4,-1
   2bdd4:	180697fa 	slli	r3,r3,31
   2bdd8:	4110703a 	and	r8,r8,r4
   2bddc:	4410b03a 	or	r8,r8,r16
   2bde0:	40c6b03a 	or	r3,r8,r3
   2bde4:	dfc00417 	ldw	ra,16(sp)
   2bde8:	dcc00317 	ldw	r19,12(sp)
   2bdec:	dc800217 	ldw	r18,8(sp)
   2bdf0:	dc400117 	ldw	r17,4(sp)
   2bdf4:	dc000017 	ldw	r16,0(sp)
   2bdf8:	dec00504 	addi	sp,sp,20
   2bdfc:	f800283a 	ret
   2be00:	0081ffc4 	movi	r2,2047
   2be04:	80bfd626 	beq	r16,r2,2bd60 <_gp+0xffff0d20>
   2be08:	4a402034 	orhi	r9,r9,128
   2be0c:	00800e04 	movi	r2,56
   2be10:	10c09f16 	blt	r2,r3,2c090 <__adddf3+0x3ac>
   2be14:	008007c4 	movi	r2,31
   2be18:	10c0c216 	blt	r2,r3,2c124 <__adddf3+0x440>
   2be1c:	00800804 	movi	r2,32
   2be20:	10c5c83a 	sub	r2,r2,r3
   2be24:	488a983a 	sll	r5,r9,r2
   2be28:	30c8d83a 	srl	r4,r6,r3
   2be2c:	3084983a 	sll	r2,r6,r2
   2be30:	48c6d83a 	srl	r3,r9,r3
   2be34:	290cb03a 	or	r6,r5,r4
   2be38:	1004c03a 	cmpne	r2,r2,zero
   2be3c:	308cb03a 	or	r6,r6,r2
   2be40:	898dc83a 	sub	r6,r17,r6
   2be44:	89a3803a 	cmpltu	r17,r17,r6
   2be48:	40d1c83a 	sub	r8,r8,r3
   2be4c:	4451c83a 	sub	r8,r8,r17
   2be50:	3023883a 	mov	r17,r6
   2be54:	4080202c 	andhi	r2,r8,128
   2be58:	10002326 	beq	r2,zero,2bee8 <__adddf3+0x204>
   2be5c:	04c02034 	movhi	r19,128
   2be60:	9cffffc4 	addi	r19,r19,-1
   2be64:	44e6703a 	and	r19,r8,r19
   2be68:	98007626 	beq	r19,zero,2c044 <__adddf3+0x360>
   2be6c:	9809883a 	mov	r4,r19
   2be70:	002e7340 	call	2e734 <__clzsi2>
   2be74:	10fffe04 	addi	r3,r2,-8
   2be78:	010007c4 	movi	r4,31
   2be7c:	20c07716 	blt	r4,r3,2c05c <__adddf3+0x378>
   2be80:	00800804 	movi	r2,32
   2be84:	10c5c83a 	sub	r2,r2,r3
   2be88:	8884d83a 	srl	r2,r17,r2
   2be8c:	98d0983a 	sll	r8,r19,r3
   2be90:	88e2983a 	sll	r17,r17,r3
   2be94:	1204b03a 	or	r2,r2,r8
   2be98:	1c007416 	blt	r3,r16,2c06c <__adddf3+0x388>
   2be9c:	1c21c83a 	sub	r16,r3,r16
   2bea0:	82000044 	addi	r8,r16,1
   2bea4:	00c007c4 	movi	r3,31
   2bea8:	1a009116 	blt	r3,r8,2c0f0 <__adddf3+0x40c>
   2beac:	00c00804 	movi	r3,32
   2beb0:	1a07c83a 	sub	r3,r3,r8
   2beb4:	8a08d83a 	srl	r4,r17,r8
   2beb8:	88e2983a 	sll	r17,r17,r3
   2bebc:	10c6983a 	sll	r3,r2,r3
   2bec0:	1210d83a 	srl	r8,r2,r8
   2bec4:	8804c03a 	cmpne	r2,r17,zero
   2bec8:	1906b03a 	or	r3,r3,r4
   2becc:	18a2b03a 	or	r17,r3,r2
   2bed0:	0021883a 	mov	r16,zero
   2bed4:	003fa206 	br	2bd60 <_gp+0xffff0d20>
   2bed8:	1890b03a 	or	r8,r3,r2
   2bedc:	40017d26 	beq	r8,zero,2c4d4 <__adddf3+0x7f0>
   2bee0:	1011883a 	mov	r8,r2
   2bee4:	1823883a 	mov	r17,r3
   2bee8:	888001cc 	andi	r2,r17,7
   2beec:	103f9e1e 	bne	r2,zero,2bd68 <_gp+0xffff0d28>
   2bef0:	4004977a 	slli	r2,r8,29
   2bef4:	8822d0fa 	srli	r17,r17,3
   2bef8:	4010d0fa 	srli	r8,r8,3
   2befc:	9007883a 	mov	r3,r18
   2bf00:	1444b03a 	or	r2,r2,r17
   2bf04:	0101ffc4 	movi	r4,2047
   2bf08:	81002426 	beq	r16,r4,2bf9c <__adddf3+0x2b8>
   2bf0c:	8120703a 	and	r16,r16,r4
   2bf10:	01000434 	movhi	r4,16
   2bf14:	213fffc4 	addi	r4,r4,-1
   2bf18:	4110703a 	and	r8,r8,r4
   2bf1c:	003fa806 	br	2bdc0 <_gp+0xffff0d80>
   2bf20:	8089c83a 	sub	r4,r16,r2
   2bf24:	01005e0e 	bge	zero,r4,2c0a0 <__adddf3+0x3bc>
   2bf28:	10002b26 	beq	r2,zero,2bfd8 <__adddf3+0x2f4>
   2bf2c:	0081ffc4 	movi	r2,2047
   2bf30:	80bf8b26 	beq	r16,r2,2bd60 <_gp+0xffff0d20>
   2bf34:	4a402034 	orhi	r9,r9,128
   2bf38:	00800e04 	movi	r2,56
   2bf3c:	1100a40e 	bge	r2,r4,2c1d0 <__adddf3+0x4ec>
   2bf40:	498cb03a 	or	r6,r9,r6
   2bf44:	300ac03a 	cmpne	r5,r6,zero
   2bf48:	0013883a 	mov	r9,zero
   2bf4c:	2c4b883a 	add	r5,r5,r17
   2bf50:	2c63803a 	cmpltu	r17,r5,r17
   2bf54:	4a11883a 	add	r8,r9,r8
   2bf58:	8a11883a 	add	r8,r17,r8
   2bf5c:	2823883a 	mov	r17,r5
   2bf60:	4080202c 	andhi	r2,r8,128
   2bf64:	103fe026 	beq	r2,zero,2bee8 <_gp+0xffff0ea8>
   2bf68:	84000044 	addi	r16,r16,1
   2bf6c:	0081ffc4 	movi	r2,2047
   2bf70:	8080d226 	beq	r16,r2,2c2bc <__adddf3+0x5d8>
   2bf74:	00bfe034 	movhi	r2,65408
   2bf78:	10bfffc4 	addi	r2,r2,-1
   2bf7c:	4090703a 	and	r8,r8,r2
   2bf80:	880ad07a 	srli	r5,r17,1
   2bf84:	400897fa 	slli	r4,r8,31
   2bf88:	88c0004c 	andi	r3,r17,1
   2bf8c:	28e2b03a 	or	r17,r5,r3
   2bf90:	4010d07a 	srli	r8,r8,1
   2bf94:	2462b03a 	or	r17,r4,r17
   2bf98:	003f7106 	br	2bd60 <_gp+0xffff0d20>
   2bf9c:	4088b03a 	or	r4,r8,r2
   2bfa0:	20014526 	beq	r4,zero,2c4b8 <__adddf3+0x7d4>
   2bfa4:	01000434 	movhi	r4,16
   2bfa8:	42000234 	orhi	r8,r8,8
   2bfac:	213fffc4 	addi	r4,r4,-1
   2bfb0:	4110703a 	and	r8,r8,r4
   2bfb4:	003f8206 	br	2bdc0 <_gp+0xffff0d80>
   2bfb8:	18ffffc4 	addi	r3,r3,-1
   2bfbc:	1800491e 	bne	r3,zero,2c0e4 <__adddf3+0x400>
   2bfc0:	898bc83a 	sub	r5,r17,r6
   2bfc4:	8963803a 	cmpltu	r17,r17,r5
   2bfc8:	4251c83a 	sub	r8,r8,r9
   2bfcc:	4451c83a 	sub	r8,r8,r17
   2bfd0:	2823883a 	mov	r17,r5
   2bfd4:	003f9f06 	br	2be54 <_gp+0xffff0e14>
   2bfd8:	4984b03a 	or	r2,r9,r6
   2bfdc:	103f6026 	beq	r2,zero,2bd60 <_gp+0xffff0d20>
   2bfe0:	213fffc4 	addi	r4,r4,-1
   2bfe4:	2000931e 	bne	r4,zero,2c234 <__adddf3+0x550>
   2bfe8:	898d883a 	add	r6,r17,r6
   2bfec:	3463803a 	cmpltu	r17,r6,r17
   2bff0:	4251883a 	add	r8,r8,r9
   2bff4:	8a11883a 	add	r8,r17,r8
   2bff8:	3023883a 	mov	r17,r6
   2bffc:	003fd806 	br	2bf60 <_gp+0xffff0f20>
   2c000:	1800541e 	bne	r3,zero,2c154 <__adddf3+0x470>
   2c004:	80800044 	addi	r2,r16,1
   2c008:	1081ffcc 	andi	r2,r2,2047
   2c00c:	00c00044 	movi	r3,1
   2c010:	1880a00e 	bge	r3,r2,2c294 <__adddf3+0x5b0>
   2c014:	8989c83a 	sub	r4,r17,r6
   2c018:	8905803a 	cmpltu	r2,r17,r4
   2c01c:	4267c83a 	sub	r19,r8,r9
   2c020:	98a7c83a 	sub	r19,r19,r2
   2c024:	9880202c 	andhi	r2,r19,128
   2c028:	10006326 	beq	r2,zero,2c1b8 <__adddf3+0x4d4>
   2c02c:	3463c83a 	sub	r17,r6,r17
   2c030:	4a07c83a 	sub	r3,r9,r8
   2c034:	344d803a 	cmpltu	r6,r6,r17
   2c038:	19a7c83a 	sub	r19,r3,r6
   2c03c:	3825883a 	mov	r18,r7
   2c040:	983f8a1e 	bne	r19,zero,2be6c <_gp+0xffff0e2c>
   2c044:	8809883a 	mov	r4,r17
   2c048:	002e7340 	call	2e734 <__clzsi2>
   2c04c:	10800804 	addi	r2,r2,32
   2c050:	10fffe04 	addi	r3,r2,-8
   2c054:	010007c4 	movi	r4,31
   2c058:	20ff890e 	bge	r4,r3,2be80 <_gp+0xffff0e40>
   2c05c:	10bff604 	addi	r2,r2,-40
   2c060:	8884983a 	sll	r2,r17,r2
   2c064:	0023883a 	mov	r17,zero
   2c068:	1c3f8c0e 	bge	r3,r16,2be9c <_gp+0xffff0e5c>
   2c06c:	023fe034 	movhi	r8,65408
   2c070:	423fffc4 	addi	r8,r8,-1
   2c074:	80e1c83a 	sub	r16,r16,r3
   2c078:	1210703a 	and	r8,r2,r8
   2c07c:	003f3806 	br	2bd60 <_gp+0xffff0d20>
   2c080:	9007883a 	mov	r3,r18
   2c084:	0011883a 	mov	r8,zero
   2c088:	0005883a 	mov	r2,zero
   2c08c:	003f4c06 	br	2bdc0 <_gp+0xffff0d80>
   2c090:	498cb03a 	or	r6,r9,r6
   2c094:	300cc03a 	cmpne	r6,r6,zero
   2c098:	0007883a 	mov	r3,zero
   2c09c:	003f6806 	br	2be40 <_gp+0xffff0e00>
   2c0a0:	20009c1e 	bne	r4,zero,2c314 <__adddf3+0x630>
   2c0a4:	80800044 	addi	r2,r16,1
   2c0a8:	1141ffcc 	andi	r5,r2,2047
   2c0ac:	01000044 	movi	r4,1
   2c0b0:	2140670e 	bge	r4,r5,2c250 <__adddf3+0x56c>
   2c0b4:	0101ffc4 	movi	r4,2047
   2c0b8:	11007f26 	beq	r2,r4,2c2b8 <__adddf3+0x5d4>
   2c0bc:	898d883a 	add	r6,r17,r6
   2c0c0:	4247883a 	add	r3,r8,r9
   2c0c4:	3451803a 	cmpltu	r8,r6,r17
   2c0c8:	40d1883a 	add	r8,r8,r3
   2c0cc:	402297fa 	slli	r17,r8,31
   2c0d0:	300cd07a 	srli	r6,r6,1
   2c0d4:	4010d07a 	srli	r8,r8,1
   2c0d8:	1021883a 	mov	r16,r2
   2c0dc:	89a2b03a 	or	r17,r17,r6
   2c0e0:	003f1f06 	br	2bd60 <_gp+0xffff0d20>
   2c0e4:	0081ffc4 	movi	r2,2047
   2c0e8:	80bf481e 	bne	r16,r2,2be0c <_gp+0xffff0dcc>
   2c0ec:	003f1c06 	br	2bd60 <_gp+0xffff0d20>
   2c0f0:	843ff844 	addi	r16,r16,-31
   2c0f4:	01000804 	movi	r4,32
   2c0f8:	1406d83a 	srl	r3,r2,r16
   2c0fc:	41005026 	beq	r8,r4,2c240 <__adddf3+0x55c>
   2c100:	01001004 	movi	r4,64
   2c104:	2211c83a 	sub	r8,r4,r8
   2c108:	1204983a 	sll	r2,r2,r8
   2c10c:	88a2b03a 	or	r17,r17,r2
   2c110:	8822c03a 	cmpne	r17,r17,zero
   2c114:	1c62b03a 	or	r17,r3,r17
   2c118:	0011883a 	mov	r8,zero
   2c11c:	0021883a 	mov	r16,zero
   2c120:	003f7106 	br	2bee8 <_gp+0xffff0ea8>
   2c124:	193ff804 	addi	r4,r3,-32
   2c128:	00800804 	movi	r2,32
   2c12c:	4908d83a 	srl	r4,r9,r4
   2c130:	18804526 	beq	r3,r2,2c248 <__adddf3+0x564>
   2c134:	00801004 	movi	r2,64
   2c138:	10c5c83a 	sub	r2,r2,r3
   2c13c:	4886983a 	sll	r3,r9,r2
   2c140:	198cb03a 	or	r6,r3,r6
   2c144:	300cc03a 	cmpne	r6,r6,zero
   2c148:	218cb03a 	or	r6,r4,r6
   2c14c:	0007883a 	mov	r3,zero
   2c150:	003f3b06 	br	2be40 <_gp+0xffff0e00>
   2c154:	80002a26 	beq	r16,zero,2c200 <__adddf3+0x51c>
   2c158:	0101ffc4 	movi	r4,2047
   2c15c:	11006826 	beq	r2,r4,2c300 <__adddf3+0x61c>
   2c160:	00c7c83a 	sub	r3,zero,r3
   2c164:	42002034 	orhi	r8,r8,128
   2c168:	01000e04 	movi	r4,56
   2c16c:	20c07c16 	blt	r4,r3,2c360 <__adddf3+0x67c>
   2c170:	010007c4 	movi	r4,31
   2c174:	20c0da16 	blt	r4,r3,2c4e0 <__adddf3+0x7fc>
   2c178:	01000804 	movi	r4,32
   2c17c:	20c9c83a 	sub	r4,r4,r3
   2c180:	4114983a 	sll	r10,r8,r4
   2c184:	88cad83a 	srl	r5,r17,r3
   2c188:	8908983a 	sll	r4,r17,r4
   2c18c:	40c6d83a 	srl	r3,r8,r3
   2c190:	5162b03a 	or	r17,r10,r5
   2c194:	2008c03a 	cmpne	r4,r4,zero
   2c198:	8922b03a 	or	r17,r17,r4
   2c19c:	3463c83a 	sub	r17,r6,r17
   2c1a0:	48c7c83a 	sub	r3,r9,r3
   2c1a4:	344d803a 	cmpltu	r6,r6,r17
   2c1a8:	1991c83a 	sub	r8,r3,r6
   2c1ac:	1021883a 	mov	r16,r2
   2c1b0:	3825883a 	mov	r18,r7
   2c1b4:	003f2706 	br	2be54 <_gp+0xffff0e14>
   2c1b8:	24d0b03a 	or	r8,r4,r19
   2c1bc:	40001b1e 	bne	r8,zero,2c22c <__adddf3+0x548>
   2c1c0:	0005883a 	mov	r2,zero
   2c1c4:	0007883a 	mov	r3,zero
   2c1c8:	0021883a 	mov	r16,zero
   2c1cc:	003f4d06 	br	2bf04 <_gp+0xffff0ec4>
   2c1d0:	008007c4 	movi	r2,31
   2c1d4:	11003c16 	blt	r2,r4,2c2c8 <__adddf3+0x5e4>
   2c1d8:	00800804 	movi	r2,32
   2c1dc:	1105c83a 	sub	r2,r2,r4
   2c1e0:	488e983a 	sll	r7,r9,r2
   2c1e4:	310ad83a 	srl	r5,r6,r4
   2c1e8:	3084983a 	sll	r2,r6,r2
   2c1ec:	4912d83a 	srl	r9,r9,r4
   2c1f0:	394ab03a 	or	r5,r7,r5
   2c1f4:	1004c03a 	cmpne	r2,r2,zero
   2c1f8:	288ab03a 	or	r5,r5,r2
   2c1fc:	003f5306 	br	2bf4c <_gp+0xffff0f0c>
   2c200:	4448b03a 	or	r4,r8,r17
   2c204:	20003e26 	beq	r4,zero,2c300 <__adddf3+0x61c>
   2c208:	00c6303a 	nor	r3,zero,r3
   2c20c:	18003a1e 	bne	r3,zero,2c2f8 <__adddf3+0x614>
   2c210:	3463c83a 	sub	r17,r6,r17
   2c214:	4a07c83a 	sub	r3,r9,r8
   2c218:	344d803a 	cmpltu	r6,r6,r17
   2c21c:	1991c83a 	sub	r8,r3,r6
   2c220:	1021883a 	mov	r16,r2
   2c224:	3825883a 	mov	r18,r7
   2c228:	003f0a06 	br	2be54 <_gp+0xffff0e14>
   2c22c:	2023883a 	mov	r17,r4
   2c230:	003f0d06 	br	2be68 <_gp+0xffff0e28>
   2c234:	0081ffc4 	movi	r2,2047
   2c238:	80bf3f1e 	bne	r16,r2,2bf38 <_gp+0xffff0ef8>
   2c23c:	003ec806 	br	2bd60 <_gp+0xffff0d20>
   2c240:	0005883a 	mov	r2,zero
   2c244:	003fb106 	br	2c10c <_gp+0xffff10cc>
   2c248:	0007883a 	mov	r3,zero
   2c24c:	003fbc06 	br	2c140 <_gp+0xffff1100>
   2c250:	4444b03a 	or	r2,r8,r17
   2c254:	8000871e 	bne	r16,zero,2c474 <__adddf3+0x790>
   2c258:	1000ba26 	beq	r2,zero,2c544 <__adddf3+0x860>
   2c25c:	4984b03a 	or	r2,r9,r6
   2c260:	103ebf26 	beq	r2,zero,2bd60 <_gp+0xffff0d20>
   2c264:	8985883a 	add	r2,r17,r6
   2c268:	4247883a 	add	r3,r8,r9
   2c26c:	1451803a 	cmpltu	r8,r2,r17
   2c270:	40d1883a 	add	r8,r8,r3
   2c274:	40c0202c 	andhi	r3,r8,128
   2c278:	1023883a 	mov	r17,r2
   2c27c:	183f1a26 	beq	r3,zero,2bee8 <_gp+0xffff0ea8>
   2c280:	00bfe034 	movhi	r2,65408
   2c284:	10bfffc4 	addi	r2,r2,-1
   2c288:	2021883a 	mov	r16,r4
   2c28c:	4090703a 	and	r8,r8,r2
   2c290:	003eb306 	br	2bd60 <_gp+0xffff0d20>
   2c294:	4444b03a 	or	r2,r8,r17
   2c298:	8000291e 	bne	r16,zero,2c340 <__adddf3+0x65c>
   2c29c:	10004b1e 	bne	r2,zero,2c3cc <__adddf3+0x6e8>
   2c2a0:	4990b03a 	or	r8,r9,r6
   2c2a4:	40008b26 	beq	r8,zero,2c4d4 <__adddf3+0x7f0>
   2c2a8:	4811883a 	mov	r8,r9
   2c2ac:	3023883a 	mov	r17,r6
   2c2b0:	3825883a 	mov	r18,r7
   2c2b4:	003eaa06 	br	2bd60 <_gp+0xffff0d20>
   2c2b8:	1021883a 	mov	r16,r2
   2c2bc:	0011883a 	mov	r8,zero
   2c2c0:	0005883a 	mov	r2,zero
   2c2c4:	003f0f06 	br	2bf04 <_gp+0xffff0ec4>
   2c2c8:	217ff804 	addi	r5,r4,-32
   2c2cc:	00800804 	movi	r2,32
   2c2d0:	494ad83a 	srl	r5,r9,r5
   2c2d4:	20807d26 	beq	r4,r2,2c4cc <__adddf3+0x7e8>
   2c2d8:	00801004 	movi	r2,64
   2c2dc:	1109c83a 	sub	r4,r2,r4
   2c2e0:	4912983a 	sll	r9,r9,r4
   2c2e4:	498cb03a 	or	r6,r9,r6
   2c2e8:	300cc03a 	cmpne	r6,r6,zero
   2c2ec:	298ab03a 	or	r5,r5,r6
   2c2f0:	0013883a 	mov	r9,zero
   2c2f4:	003f1506 	br	2bf4c <_gp+0xffff0f0c>
   2c2f8:	0101ffc4 	movi	r4,2047
   2c2fc:	113f9a1e 	bne	r2,r4,2c168 <_gp+0xffff1128>
   2c300:	4811883a 	mov	r8,r9
   2c304:	3023883a 	mov	r17,r6
   2c308:	1021883a 	mov	r16,r2
   2c30c:	3825883a 	mov	r18,r7
   2c310:	003e9306 	br	2bd60 <_gp+0xffff0d20>
   2c314:	8000161e 	bne	r16,zero,2c370 <__adddf3+0x68c>
   2c318:	444ab03a 	or	r5,r8,r17
   2c31c:	28005126 	beq	r5,zero,2c464 <__adddf3+0x780>
   2c320:	0108303a 	nor	r4,zero,r4
   2c324:	20004d1e 	bne	r4,zero,2c45c <__adddf3+0x778>
   2c328:	89a3883a 	add	r17,r17,r6
   2c32c:	4253883a 	add	r9,r8,r9
   2c330:	898d803a 	cmpltu	r6,r17,r6
   2c334:	3251883a 	add	r8,r6,r9
   2c338:	1021883a 	mov	r16,r2
   2c33c:	003f0806 	br	2bf60 <_gp+0xffff0f20>
   2c340:	1000301e 	bne	r2,zero,2c404 <__adddf3+0x720>
   2c344:	4984b03a 	or	r2,r9,r6
   2c348:	10007126 	beq	r2,zero,2c510 <__adddf3+0x82c>
   2c34c:	4811883a 	mov	r8,r9
   2c350:	3023883a 	mov	r17,r6
   2c354:	3825883a 	mov	r18,r7
   2c358:	0401ffc4 	movi	r16,2047
   2c35c:	003e8006 	br	2bd60 <_gp+0xffff0d20>
   2c360:	4462b03a 	or	r17,r8,r17
   2c364:	8822c03a 	cmpne	r17,r17,zero
   2c368:	0007883a 	mov	r3,zero
   2c36c:	003f8b06 	br	2c19c <_gp+0xffff115c>
   2c370:	0141ffc4 	movi	r5,2047
   2c374:	11403b26 	beq	r2,r5,2c464 <__adddf3+0x780>
   2c378:	0109c83a 	sub	r4,zero,r4
   2c37c:	42002034 	orhi	r8,r8,128
   2c380:	01400e04 	movi	r5,56
   2c384:	29006716 	blt	r5,r4,2c524 <__adddf3+0x840>
   2c388:	014007c4 	movi	r5,31
   2c38c:	29007016 	blt	r5,r4,2c550 <__adddf3+0x86c>
   2c390:	01400804 	movi	r5,32
   2c394:	290bc83a 	sub	r5,r5,r4
   2c398:	4154983a 	sll	r10,r8,r5
   2c39c:	890ed83a 	srl	r7,r17,r4
   2c3a0:	894a983a 	sll	r5,r17,r5
   2c3a4:	4108d83a 	srl	r4,r8,r4
   2c3a8:	51e2b03a 	or	r17,r10,r7
   2c3ac:	280ac03a 	cmpne	r5,r5,zero
   2c3b0:	8962b03a 	or	r17,r17,r5
   2c3b4:	89a3883a 	add	r17,r17,r6
   2c3b8:	2253883a 	add	r9,r4,r9
   2c3bc:	898d803a 	cmpltu	r6,r17,r6
   2c3c0:	3251883a 	add	r8,r6,r9
   2c3c4:	1021883a 	mov	r16,r2
   2c3c8:	003ee506 	br	2bf60 <_gp+0xffff0f20>
   2c3cc:	4984b03a 	or	r2,r9,r6
   2c3d0:	103e6326 	beq	r2,zero,2bd60 <_gp+0xffff0d20>
   2c3d4:	8987c83a 	sub	r3,r17,r6
   2c3d8:	88c9803a 	cmpltu	r4,r17,r3
   2c3dc:	4245c83a 	sub	r2,r8,r9
   2c3e0:	1105c83a 	sub	r2,r2,r4
   2c3e4:	1100202c 	andhi	r4,r2,128
   2c3e8:	203ebb26 	beq	r4,zero,2bed8 <_gp+0xffff0e98>
   2c3ec:	3463c83a 	sub	r17,r6,r17
   2c3f0:	4a07c83a 	sub	r3,r9,r8
   2c3f4:	344d803a 	cmpltu	r6,r6,r17
   2c3f8:	1991c83a 	sub	r8,r3,r6
   2c3fc:	3825883a 	mov	r18,r7
   2c400:	003e5706 	br	2bd60 <_gp+0xffff0d20>
   2c404:	4984b03a 	or	r2,r9,r6
   2c408:	10002e26 	beq	r2,zero,2c4c4 <__adddf3+0x7e0>
   2c40c:	4004d0fa 	srli	r2,r8,3
   2c410:	8822d0fa 	srli	r17,r17,3
   2c414:	4010977a 	slli	r8,r8,29
   2c418:	10c0022c 	andhi	r3,r2,8
   2c41c:	4462b03a 	or	r17,r8,r17
   2c420:	18000826 	beq	r3,zero,2c444 <__adddf3+0x760>
   2c424:	4808d0fa 	srli	r4,r9,3
   2c428:	20c0022c 	andhi	r3,r4,8
   2c42c:	1800051e 	bne	r3,zero,2c444 <__adddf3+0x760>
   2c430:	300cd0fa 	srli	r6,r6,3
   2c434:	4806977a 	slli	r3,r9,29
   2c438:	2005883a 	mov	r2,r4
   2c43c:	3825883a 	mov	r18,r7
   2c440:	19a2b03a 	or	r17,r3,r6
   2c444:	8810d77a 	srli	r8,r17,29
   2c448:	100490fa 	slli	r2,r2,3
   2c44c:	882290fa 	slli	r17,r17,3
   2c450:	0401ffc4 	movi	r16,2047
   2c454:	4090b03a 	or	r8,r8,r2
   2c458:	003e4106 	br	2bd60 <_gp+0xffff0d20>
   2c45c:	0141ffc4 	movi	r5,2047
   2c460:	117fc71e 	bne	r2,r5,2c380 <_gp+0xffff1340>
   2c464:	4811883a 	mov	r8,r9
   2c468:	3023883a 	mov	r17,r6
   2c46c:	1021883a 	mov	r16,r2
   2c470:	003e3b06 	br	2bd60 <_gp+0xffff0d20>
   2c474:	10002f26 	beq	r2,zero,2c534 <__adddf3+0x850>
   2c478:	4984b03a 	or	r2,r9,r6
   2c47c:	10001126 	beq	r2,zero,2c4c4 <__adddf3+0x7e0>
   2c480:	4004d0fa 	srli	r2,r8,3
   2c484:	8822d0fa 	srli	r17,r17,3
   2c488:	4010977a 	slli	r8,r8,29
   2c48c:	10c0022c 	andhi	r3,r2,8
   2c490:	4462b03a 	or	r17,r8,r17
   2c494:	183feb26 	beq	r3,zero,2c444 <_gp+0xffff1404>
   2c498:	4808d0fa 	srli	r4,r9,3
   2c49c:	20c0022c 	andhi	r3,r4,8
   2c4a0:	183fe81e 	bne	r3,zero,2c444 <_gp+0xffff1404>
   2c4a4:	300cd0fa 	srli	r6,r6,3
   2c4a8:	4806977a 	slli	r3,r9,29
   2c4ac:	2005883a 	mov	r2,r4
   2c4b0:	19a2b03a 	or	r17,r3,r6
   2c4b4:	003fe306 	br	2c444 <_gp+0xffff1404>
   2c4b8:	0011883a 	mov	r8,zero
   2c4bc:	0005883a 	mov	r2,zero
   2c4c0:	003e3f06 	br	2bdc0 <_gp+0xffff0d80>
   2c4c4:	0401ffc4 	movi	r16,2047
   2c4c8:	003e2506 	br	2bd60 <_gp+0xffff0d20>
   2c4cc:	0013883a 	mov	r9,zero
   2c4d0:	003f8406 	br	2c2e4 <_gp+0xffff12a4>
   2c4d4:	0005883a 	mov	r2,zero
   2c4d8:	0007883a 	mov	r3,zero
   2c4dc:	003e8906 	br	2bf04 <_gp+0xffff0ec4>
   2c4e0:	197ff804 	addi	r5,r3,-32
   2c4e4:	01000804 	movi	r4,32
   2c4e8:	414ad83a 	srl	r5,r8,r5
   2c4ec:	19002426 	beq	r3,r4,2c580 <__adddf3+0x89c>
   2c4f0:	01001004 	movi	r4,64
   2c4f4:	20c7c83a 	sub	r3,r4,r3
   2c4f8:	40c6983a 	sll	r3,r8,r3
   2c4fc:	1c46b03a 	or	r3,r3,r17
   2c500:	1806c03a 	cmpne	r3,r3,zero
   2c504:	28e2b03a 	or	r17,r5,r3
   2c508:	0007883a 	mov	r3,zero
   2c50c:	003f2306 	br	2c19c <_gp+0xffff115c>
   2c510:	0007883a 	mov	r3,zero
   2c514:	5811883a 	mov	r8,r11
   2c518:	00bfffc4 	movi	r2,-1
   2c51c:	0401ffc4 	movi	r16,2047
   2c520:	003e7806 	br	2bf04 <_gp+0xffff0ec4>
   2c524:	4462b03a 	or	r17,r8,r17
   2c528:	8822c03a 	cmpne	r17,r17,zero
   2c52c:	0009883a 	mov	r4,zero
   2c530:	003fa006 	br	2c3b4 <_gp+0xffff1374>
   2c534:	4811883a 	mov	r8,r9
   2c538:	3023883a 	mov	r17,r6
   2c53c:	0401ffc4 	movi	r16,2047
   2c540:	003e0706 	br	2bd60 <_gp+0xffff0d20>
   2c544:	4811883a 	mov	r8,r9
   2c548:	3023883a 	mov	r17,r6
   2c54c:	003e0406 	br	2bd60 <_gp+0xffff0d20>
   2c550:	21fff804 	addi	r7,r4,-32
   2c554:	01400804 	movi	r5,32
   2c558:	41ced83a 	srl	r7,r8,r7
   2c55c:	21400a26 	beq	r4,r5,2c588 <__adddf3+0x8a4>
   2c560:	01401004 	movi	r5,64
   2c564:	2909c83a 	sub	r4,r5,r4
   2c568:	4108983a 	sll	r4,r8,r4
   2c56c:	2448b03a 	or	r4,r4,r17
   2c570:	2008c03a 	cmpne	r4,r4,zero
   2c574:	3922b03a 	or	r17,r7,r4
   2c578:	0009883a 	mov	r4,zero
   2c57c:	003f8d06 	br	2c3b4 <_gp+0xffff1374>
   2c580:	0007883a 	mov	r3,zero
   2c584:	003fdd06 	br	2c4fc <_gp+0xffff14bc>
   2c588:	0009883a 	mov	r4,zero
   2c58c:	003ff706 	br	2c56c <_gp+0xffff152c>

0002c590 <__divdf3>:
   2c590:	defff004 	addi	sp,sp,-64
   2c594:	dc800815 	stw	r18,32(sp)
   2c598:	2824d53a 	srli	r18,r5,20
   2c59c:	dd800c15 	stw	r22,48(sp)
   2c5a0:	282cd7fa 	srli	r22,r5,31
   2c5a4:	dc000615 	stw	r16,24(sp)
   2c5a8:	04000434 	movhi	r16,16
   2c5ac:	843fffc4 	addi	r16,r16,-1
   2c5b0:	dfc00f15 	stw	ra,60(sp)
   2c5b4:	df000e15 	stw	fp,56(sp)
   2c5b8:	ddc00d15 	stw	r23,52(sp)
   2c5bc:	dd400b15 	stw	r21,44(sp)
   2c5c0:	dd000a15 	stw	r20,40(sp)
   2c5c4:	dcc00915 	stw	r19,36(sp)
   2c5c8:	dc400715 	stw	r17,28(sp)
   2c5cc:	9481ffcc 	andi	r18,r18,2047
   2c5d0:	2c20703a 	and	r16,r5,r16
   2c5d4:	b2003fcc 	andi	r8,r22,255
   2c5d8:	90006126 	beq	r18,zero,2c760 <__divdf3+0x1d0>
   2c5dc:	0081ffc4 	movi	r2,2047
   2c5e0:	202b883a 	mov	r21,r4
   2c5e4:	90803726 	beq	r18,r2,2c6c4 <__divdf3+0x134>
   2c5e8:	80800434 	orhi	r2,r16,16
   2c5ec:	100490fa 	slli	r2,r2,3
   2c5f0:	2020d77a 	srli	r16,r4,29
   2c5f4:	202a90fa 	slli	r21,r4,3
   2c5f8:	94bf0044 	addi	r18,r18,-1023
   2c5fc:	80a0b03a 	or	r16,r16,r2
   2c600:	0013883a 	mov	r9,zero
   2c604:	000b883a 	mov	r5,zero
   2c608:	3806d53a 	srli	r3,r7,20
   2c60c:	382ed7fa 	srli	r23,r7,31
   2c610:	04400434 	movhi	r17,16
   2c614:	8c7fffc4 	addi	r17,r17,-1
   2c618:	18c1ffcc 	andi	r3,r3,2047
   2c61c:	3029883a 	mov	r20,r6
   2c620:	3c62703a 	and	r17,r7,r17
   2c624:	bf003fcc 	andi	fp,r23,255
   2c628:	18006e26 	beq	r3,zero,2c7e4 <__divdf3+0x254>
   2c62c:	0081ffc4 	movi	r2,2047
   2c630:	18806626 	beq	r3,r2,2c7cc <__divdf3+0x23c>
   2c634:	88800434 	orhi	r2,r17,16
   2c638:	100490fa 	slli	r2,r2,3
   2c63c:	3022d77a 	srli	r17,r6,29
   2c640:	302890fa 	slli	r20,r6,3
   2c644:	18ff0044 	addi	r3,r3,-1023
   2c648:	88a2b03a 	or	r17,r17,r2
   2c64c:	000f883a 	mov	r7,zero
   2c650:	b5e6f03a 	xor	r19,r22,r23
   2c654:	3a4cb03a 	or	r6,r7,r9
   2c658:	008003c4 	movi	r2,15
   2c65c:	9809883a 	mov	r4,r19
   2c660:	90c7c83a 	sub	r3,r18,r3
   2c664:	9cc03fcc 	andi	r19,r19,255
   2c668:	11809636 	bltu	r2,r6,2c8c4 <__divdf3+0x334>
   2c66c:	300c90ba 	slli	r6,r6,2
   2c670:	008000f4 	movhi	r2,3
   2c674:	10b1a104 	addi	r2,r2,-14716
   2c678:	308d883a 	add	r6,r6,r2
   2c67c:	30800017 	ldw	r2,0(r6)
   2c680:	1000683a 	jmp	r2
   2c684:	0002c8c4 	movi	zero,2851
   2c688:	0002c6fc 	xorhi	zero,zero,2843
   2c68c:	0002c8b4 	movhi	zero,2850
   2c690:	0002c6f0 	cmpltui	zero,zero,2843
   2c694:	0002c8b4 	movhi	zero,2850
   2c698:	0002c888 	cmpgei	zero,zero,2850
   2c69c:	0002c8b4 	movhi	zero,2850
   2c6a0:	0002c6f0 	cmpltui	zero,zero,2843
   2c6a4:	0002c6fc 	xorhi	zero,zero,2843
   2c6a8:	0002c6fc 	xorhi	zero,zero,2843
   2c6ac:	0002c888 	cmpgei	zero,zero,2850
   2c6b0:	0002c6f0 	cmpltui	zero,zero,2843
   2c6b4:	0002c6e0 	cmpeqi	zero,zero,2843
   2c6b8:	0002c6e0 	cmpeqi	zero,zero,2843
   2c6bc:	0002c6e0 	cmpeqi	zero,zero,2843
   2c6c0:	0002cc4c 	andi	zero,zero,2865
   2c6c4:	2404b03a 	or	r2,r4,r16
   2c6c8:	10006c1e 	bne	r2,zero,2c87c <__divdf3+0x2ec>
   2c6cc:	02400204 	movi	r9,8
   2c6d0:	0021883a 	mov	r16,zero
   2c6d4:	002b883a 	mov	r21,zero
   2c6d8:	01400084 	movi	r5,2
   2c6dc:	003fca06 	br	2c608 <_gp+0xffff15c8>
   2c6e0:	8023883a 	mov	r17,r16
   2c6e4:	a829883a 	mov	r20,r21
   2c6e8:	4039883a 	mov	fp,r8
   2c6ec:	280f883a 	mov	r7,r5
   2c6f0:	00800084 	movi	r2,2
   2c6f4:	3881601e 	bne	r7,r2,2cc78 <__divdf3+0x6e8>
   2c6f8:	e027883a 	mov	r19,fp
   2c6fc:	9900004c 	andi	r4,r19,1
   2c700:	0081ffc4 	movi	r2,2047
   2c704:	0021883a 	mov	r16,zero
   2c708:	002b883a 	mov	r21,zero
   2c70c:	1004953a 	slli	r2,r2,20
   2c710:	20c03fcc 	andi	r3,r4,255
   2c714:	01400434 	movhi	r5,16
   2c718:	297fffc4 	addi	r5,r5,-1
   2c71c:	180697fa 	slli	r3,r3,31
   2c720:	8160703a 	and	r16,r16,r5
   2c724:	80a0b03a 	or	r16,r16,r2
   2c728:	80c6b03a 	or	r3,r16,r3
   2c72c:	a805883a 	mov	r2,r21
   2c730:	dfc00f17 	ldw	ra,60(sp)
   2c734:	df000e17 	ldw	fp,56(sp)
   2c738:	ddc00d17 	ldw	r23,52(sp)
   2c73c:	dd800c17 	ldw	r22,48(sp)
   2c740:	dd400b17 	ldw	r21,44(sp)
   2c744:	dd000a17 	ldw	r20,40(sp)
   2c748:	dcc00917 	ldw	r19,36(sp)
   2c74c:	dc800817 	ldw	r18,32(sp)
   2c750:	dc400717 	ldw	r17,28(sp)
   2c754:	dc000617 	ldw	r16,24(sp)
   2c758:	dec01004 	addi	sp,sp,64
   2c75c:	f800283a 	ret
   2c760:	2404b03a 	or	r2,r4,r16
   2c764:	2023883a 	mov	r17,r4
   2c768:	10003f26 	beq	r2,zero,2c868 <__divdf3+0x2d8>
   2c76c:	80015e26 	beq	r16,zero,2cce8 <__divdf3+0x758>
   2c770:	8009883a 	mov	r4,r16
   2c774:	d9800215 	stw	r6,8(sp)
   2c778:	d9c00515 	stw	r7,20(sp)
   2c77c:	da000415 	stw	r8,16(sp)
   2c780:	002e7340 	call	2e734 <__clzsi2>
   2c784:	d9800217 	ldw	r6,8(sp)
   2c788:	d9c00517 	ldw	r7,20(sp)
   2c78c:	da000417 	ldw	r8,16(sp)
   2c790:	113ffd44 	addi	r4,r2,-11
   2c794:	00c00704 	movi	r3,28
   2c798:	19014f16 	blt	r3,r4,2ccd8 <__divdf3+0x748>
   2c79c:	00c00744 	movi	r3,29
   2c7a0:	157ffe04 	addi	r21,r2,-8
   2c7a4:	1907c83a 	sub	r3,r3,r4
   2c7a8:	8560983a 	sll	r16,r16,r21
   2c7ac:	88c6d83a 	srl	r3,r17,r3
   2c7b0:	8d6a983a 	sll	r21,r17,r21
   2c7b4:	1c20b03a 	or	r16,r3,r16
   2c7b8:	1080fcc4 	addi	r2,r2,1011
   2c7bc:	00a5c83a 	sub	r18,zero,r2
   2c7c0:	0013883a 	mov	r9,zero
   2c7c4:	000b883a 	mov	r5,zero
   2c7c8:	003f8f06 	br	2c608 <_gp+0xffff15c8>
   2c7cc:	3444b03a 	or	r2,r6,r17
   2c7d0:	1000231e 	bne	r2,zero,2c860 <__divdf3+0x2d0>
   2c7d4:	0023883a 	mov	r17,zero
   2c7d8:	0029883a 	mov	r20,zero
   2c7dc:	01c00084 	movi	r7,2
   2c7e0:	003f9b06 	br	2c650 <_gp+0xffff1610>
   2c7e4:	3444b03a 	or	r2,r6,r17
   2c7e8:	10001926 	beq	r2,zero,2c850 <__divdf3+0x2c0>
   2c7ec:	88014b26 	beq	r17,zero,2cd1c <__divdf3+0x78c>
   2c7f0:	8809883a 	mov	r4,r17
   2c7f4:	d9400115 	stw	r5,4(sp)
   2c7f8:	d9800215 	stw	r6,8(sp)
   2c7fc:	da000415 	stw	r8,16(sp)
   2c800:	da400315 	stw	r9,12(sp)
   2c804:	002e7340 	call	2e734 <__clzsi2>
   2c808:	d9400117 	ldw	r5,4(sp)
   2c80c:	d9800217 	ldw	r6,8(sp)
   2c810:	da000417 	ldw	r8,16(sp)
   2c814:	da400317 	ldw	r9,12(sp)
   2c818:	113ffd44 	addi	r4,r2,-11
   2c81c:	00c00704 	movi	r3,28
   2c820:	19013a16 	blt	r3,r4,2cd0c <__divdf3+0x77c>
   2c824:	00c00744 	movi	r3,29
   2c828:	153ffe04 	addi	r20,r2,-8
   2c82c:	1907c83a 	sub	r3,r3,r4
   2c830:	8d22983a 	sll	r17,r17,r20
   2c834:	30c6d83a 	srl	r3,r6,r3
   2c838:	3528983a 	sll	r20,r6,r20
   2c83c:	1c62b03a 	or	r17,r3,r17
   2c840:	1080fcc4 	addi	r2,r2,1011
   2c844:	0087c83a 	sub	r3,zero,r2
   2c848:	000f883a 	mov	r7,zero
   2c84c:	003f8006 	br	2c650 <_gp+0xffff1610>
   2c850:	0023883a 	mov	r17,zero
   2c854:	0029883a 	mov	r20,zero
   2c858:	01c00044 	movi	r7,1
   2c85c:	003f7c06 	br	2c650 <_gp+0xffff1610>
   2c860:	01c000c4 	movi	r7,3
   2c864:	003f7a06 	br	2c650 <_gp+0xffff1610>
   2c868:	02400104 	movi	r9,4
   2c86c:	0021883a 	mov	r16,zero
   2c870:	002b883a 	mov	r21,zero
   2c874:	01400044 	movi	r5,1
   2c878:	003f6306 	br	2c608 <_gp+0xffff15c8>
   2c87c:	02400304 	movi	r9,12
   2c880:	014000c4 	movi	r5,3
   2c884:	003f6006 	br	2c608 <_gp+0xffff15c8>
   2c888:	04000434 	movhi	r16,16
   2c88c:	0009883a 	mov	r4,zero
   2c890:	843fffc4 	addi	r16,r16,-1
   2c894:	057fffc4 	movi	r21,-1
   2c898:	0081ffc4 	movi	r2,2047
   2c89c:	003f9b06 	br	2c70c <_gp+0xffff16cc>
   2c8a0:	00c00044 	movi	r3,1
   2c8a4:	1887c83a 	sub	r3,r3,r2
   2c8a8:	01000e04 	movi	r4,56
   2c8ac:	20c1530e 	bge	r4,r3,2cdfc <__divdf3+0x86c>
   2c8b0:	9900004c 	andi	r4,r19,1
   2c8b4:	0005883a 	mov	r2,zero
   2c8b8:	0021883a 	mov	r16,zero
   2c8bc:	002b883a 	mov	r21,zero
   2c8c0:	003f9206 	br	2c70c <_gp+0xffff16cc>
   2c8c4:	8c012e36 	bltu	r17,r16,2cd80 <__divdf3+0x7f0>
   2c8c8:	84412c26 	beq	r16,r17,2cd7c <__divdf3+0x7ec>
   2c8cc:	a82f883a 	mov	r23,r21
   2c8d0:	18ffffc4 	addi	r3,r3,-1
   2c8d4:	002b883a 	mov	r21,zero
   2c8d8:	a004d63a 	srli	r2,r20,24
   2c8dc:	8822923a 	slli	r17,r17,8
   2c8e0:	a028923a 	slli	r20,r20,8
   2c8e4:	8009883a 	mov	r4,r16
   2c8e8:	88acb03a 	or	r22,r17,r2
   2c8ec:	dd000015 	stw	r20,0(sp)
   2c8f0:	b028d43a 	srli	r20,r22,16
   2c8f4:	d8c00215 	stw	r3,8(sp)
   2c8f8:	b4bfffcc 	andi	r18,r22,65535
   2c8fc:	a00b883a 	mov	r5,r20
   2c900:	002b2a00 	call	2b2a0 <__udivsi3>
   2c904:	100b883a 	mov	r5,r2
   2c908:	9009883a 	mov	r4,r18
   2c90c:	1023883a 	mov	r17,r2
   2c910:	002b35c0 	call	2b35c <__mulsi3>
   2c914:	8009883a 	mov	r4,r16
   2c918:	a00b883a 	mov	r5,r20
   2c91c:	1039883a 	mov	fp,r2
   2c920:	002b3040 	call	2b304 <__umodsi3>
   2c924:	1004943a 	slli	r2,r2,16
   2c928:	b808d43a 	srli	r4,r23,16
   2c92c:	d8c00217 	ldw	r3,8(sp)
   2c930:	2084b03a 	or	r2,r4,r2
   2c934:	1700062e 	bgeu	r2,fp,2c950 <__divdf3+0x3c0>
   2c938:	1585883a 	add	r2,r2,r22
   2c93c:	893fffc4 	addi	r4,r17,-1
   2c940:	15811d36 	bltu	r2,r22,2cdb8 <__divdf3+0x828>
   2c944:	17011c2e 	bgeu	r2,fp,2cdb8 <__divdf3+0x828>
   2c948:	8c7fff84 	addi	r17,r17,-2
   2c94c:	1585883a 	add	r2,r2,r22
   2c950:	1739c83a 	sub	fp,r2,fp
   2c954:	a00b883a 	mov	r5,r20
   2c958:	e009883a 	mov	r4,fp
   2c95c:	d8c00215 	stw	r3,8(sp)
   2c960:	002b2a00 	call	2b2a0 <__udivsi3>
   2c964:	100b883a 	mov	r5,r2
   2c968:	9009883a 	mov	r4,r18
   2c96c:	1021883a 	mov	r16,r2
   2c970:	002b35c0 	call	2b35c <__mulsi3>
   2c974:	a00b883a 	mov	r5,r20
   2c978:	e009883a 	mov	r4,fp
   2c97c:	d8800415 	stw	r2,16(sp)
   2c980:	002b3040 	call	2b304 <__umodsi3>
   2c984:	1004943a 	slli	r2,r2,16
   2c988:	da000417 	ldw	r8,16(sp)
   2c98c:	bdffffcc 	andi	r23,r23,65535
   2c990:	b884b03a 	or	r2,r23,r2
   2c994:	d8c00217 	ldw	r3,8(sp)
   2c998:	1200062e 	bgeu	r2,r8,2c9b4 <__divdf3+0x424>
   2c99c:	1585883a 	add	r2,r2,r22
   2c9a0:	813fffc4 	addi	r4,r16,-1
   2c9a4:	15810236 	bltu	r2,r22,2cdb0 <__divdf3+0x820>
   2c9a8:	1201012e 	bgeu	r2,r8,2cdb0 <__divdf3+0x820>
   2c9ac:	843fff84 	addi	r16,r16,-2
   2c9b0:	1585883a 	add	r2,r2,r22
   2c9b4:	8822943a 	slli	r17,r17,16
   2c9b8:	d9800017 	ldw	r6,0(sp)
   2c9bc:	1211c83a 	sub	r8,r2,r8
   2c9c0:	8c22b03a 	or	r17,r17,r16
   2c9c4:	373fffcc 	andi	fp,r6,65535
   2c9c8:	8abfffcc 	andi	r10,r17,65535
   2c9cc:	8820d43a 	srli	r16,r17,16
   2c9d0:	5009883a 	mov	r4,r10
   2c9d4:	e00b883a 	mov	r5,fp
   2c9d8:	302ed43a 	srli	r23,r6,16
   2c9dc:	d8c00215 	stw	r3,8(sp)
   2c9e0:	da000415 	stw	r8,16(sp)
   2c9e4:	da800115 	stw	r10,4(sp)
   2c9e8:	002b35c0 	call	2b35c <__mulsi3>
   2c9ec:	800b883a 	mov	r5,r16
   2c9f0:	e009883a 	mov	r4,fp
   2c9f4:	d8800515 	stw	r2,20(sp)
   2c9f8:	002b35c0 	call	2b35c <__mulsi3>
   2c9fc:	8009883a 	mov	r4,r16
   2ca00:	b80b883a 	mov	r5,r23
   2ca04:	d8800315 	stw	r2,12(sp)
   2ca08:	002b35c0 	call	2b35c <__mulsi3>
   2ca0c:	da800117 	ldw	r10,4(sp)
   2ca10:	b80b883a 	mov	r5,r23
   2ca14:	1021883a 	mov	r16,r2
   2ca18:	5009883a 	mov	r4,r10
   2ca1c:	002b35c0 	call	2b35c <__mulsi3>
   2ca20:	d9c00517 	ldw	r7,20(sp)
   2ca24:	da400317 	ldw	r9,12(sp)
   2ca28:	d8c00217 	ldw	r3,8(sp)
   2ca2c:	3808d43a 	srli	r4,r7,16
   2ca30:	1245883a 	add	r2,r2,r9
   2ca34:	da000417 	ldw	r8,16(sp)
   2ca38:	2085883a 	add	r2,r4,r2
   2ca3c:	1240022e 	bgeu	r2,r9,2ca48 <__divdf3+0x4b8>
   2ca40:	01000074 	movhi	r4,1
   2ca44:	8121883a 	add	r16,r16,r4
   2ca48:	1008d43a 	srli	r4,r2,16
   2ca4c:	1004943a 	slli	r2,r2,16
   2ca50:	39ffffcc 	andi	r7,r7,65535
   2ca54:	2409883a 	add	r4,r4,r16
   2ca58:	11c5883a 	add	r2,r2,r7
   2ca5c:	4100bb36 	bltu	r8,r4,2cd4c <__divdf3+0x7bc>
   2ca60:	4100d726 	beq	r8,r4,2cdc0 <__divdf3+0x830>
   2ca64:	4109c83a 	sub	r4,r8,r4
   2ca68:	a8a1c83a 	sub	r16,r21,r2
   2ca6c:	ac2b803a 	cmpltu	r21,r21,r16
   2ca70:	256bc83a 	sub	r21,r4,r21
   2ca74:	b540d926 	beq	r22,r21,2cddc <__divdf3+0x84c>
   2ca78:	a00b883a 	mov	r5,r20
   2ca7c:	a809883a 	mov	r4,r21
   2ca80:	d8c00215 	stw	r3,8(sp)
   2ca84:	002b2a00 	call	2b2a0 <__udivsi3>
   2ca88:	100b883a 	mov	r5,r2
   2ca8c:	9009883a 	mov	r4,r18
   2ca90:	d8800515 	stw	r2,20(sp)
   2ca94:	002b35c0 	call	2b35c <__mulsi3>
   2ca98:	a809883a 	mov	r4,r21
   2ca9c:	a00b883a 	mov	r5,r20
   2caa0:	d8800415 	stw	r2,16(sp)
   2caa4:	002b3040 	call	2b304 <__umodsi3>
   2caa8:	1004943a 	slli	r2,r2,16
   2caac:	8008d43a 	srli	r4,r16,16
   2cab0:	da000417 	ldw	r8,16(sp)
   2cab4:	d8c00217 	ldw	r3,8(sp)
   2cab8:	2084b03a 	or	r2,r4,r2
   2cabc:	d9c00517 	ldw	r7,20(sp)
   2cac0:	1200062e 	bgeu	r2,r8,2cadc <__divdf3+0x54c>
   2cac4:	1585883a 	add	r2,r2,r22
   2cac8:	393fffc4 	addi	r4,r7,-1
   2cacc:	1580c536 	bltu	r2,r22,2cde4 <__divdf3+0x854>
   2cad0:	1200c42e 	bgeu	r2,r8,2cde4 <__divdf3+0x854>
   2cad4:	39ffff84 	addi	r7,r7,-2
   2cad8:	1585883a 	add	r2,r2,r22
   2cadc:	122bc83a 	sub	r21,r2,r8
   2cae0:	a00b883a 	mov	r5,r20
   2cae4:	a809883a 	mov	r4,r21
   2cae8:	d8c00215 	stw	r3,8(sp)
   2caec:	d9c00515 	stw	r7,20(sp)
   2caf0:	002b2a00 	call	2b2a0 <__udivsi3>
   2caf4:	9009883a 	mov	r4,r18
   2caf8:	100b883a 	mov	r5,r2
   2cafc:	d8800415 	stw	r2,16(sp)
   2cb00:	002b35c0 	call	2b35c <__mulsi3>
   2cb04:	a809883a 	mov	r4,r21
   2cb08:	a00b883a 	mov	r5,r20
   2cb0c:	1025883a 	mov	r18,r2
   2cb10:	002b3040 	call	2b304 <__umodsi3>
   2cb14:	1004943a 	slli	r2,r2,16
   2cb18:	813fffcc 	andi	r4,r16,65535
   2cb1c:	d8c00217 	ldw	r3,8(sp)
   2cb20:	20a0b03a 	or	r16,r4,r2
   2cb24:	d9c00517 	ldw	r7,20(sp)
   2cb28:	da000417 	ldw	r8,16(sp)
   2cb2c:	8480062e 	bgeu	r16,r18,2cb48 <__divdf3+0x5b8>
   2cb30:	85a1883a 	add	r16,r16,r22
   2cb34:	40bfffc4 	addi	r2,r8,-1
   2cb38:	8580ac36 	bltu	r16,r22,2cdec <__divdf3+0x85c>
   2cb3c:	8480ab2e 	bgeu	r16,r18,2cdec <__divdf3+0x85c>
   2cb40:	423fff84 	addi	r8,r8,-2
   2cb44:	85a1883a 	add	r16,r16,r22
   2cb48:	3804943a 	slli	r2,r7,16
   2cb4c:	84a1c83a 	sub	r16,r16,r18
   2cb50:	e009883a 	mov	r4,fp
   2cb54:	1228b03a 	or	r20,r2,r8
   2cb58:	a1ffffcc 	andi	r7,r20,65535
   2cb5c:	a024d43a 	srli	r18,r20,16
   2cb60:	380b883a 	mov	r5,r7
   2cb64:	d8c00215 	stw	r3,8(sp)
   2cb68:	d9c00515 	stw	r7,20(sp)
   2cb6c:	002b35c0 	call	2b35c <__mulsi3>
   2cb70:	900b883a 	mov	r5,r18
   2cb74:	e009883a 	mov	r4,fp
   2cb78:	102b883a 	mov	r21,r2
   2cb7c:	002b35c0 	call	2b35c <__mulsi3>
   2cb80:	900b883a 	mov	r5,r18
   2cb84:	b809883a 	mov	r4,r23
   2cb88:	1039883a 	mov	fp,r2
   2cb8c:	002b35c0 	call	2b35c <__mulsi3>
   2cb90:	d9c00517 	ldw	r7,20(sp)
   2cb94:	b80b883a 	mov	r5,r23
   2cb98:	1025883a 	mov	r18,r2
   2cb9c:	3809883a 	mov	r4,r7
   2cba0:	002b35c0 	call	2b35c <__mulsi3>
   2cba4:	a808d43a 	srli	r4,r21,16
   2cba8:	1705883a 	add	r2,r2,fp
   2cbac:	d8c00217 	ldw	r3,8(sp)
   2cbb0:	2085883a 	add	r2,r4,r2
   2cbb4:	1700022e 	bgeu	r2,fp,2cbc0 <__divdf3+0x630>
   2cbb8:	01000074 	movhi	r4,1
   2cbbc:	9125883a 	add	r18,r18,r4
   2cbc0:	1008d43a 	srli	r4,r2,16
   2cbc4:	1004943a 	slli	r2,r2,16
   2cbc8:	ad7fffcc 	andi	r21,r21,65535
   2cbcc:	2489883a 	add	r4,r4,r18
   2cbd0:	1545883a 	add	r2,r2,r21
   2cbd4:	81003836 	bltu	r16,r4,2ccb8 <__divdf3+0x728>
   2cbd8:	81003626 	beq	r16,r4,2ccb4 <__divdf3+0x724>
   2cbdc:	a5000054 	ori	r20,r20,1
   2cbe0:	1880ffc4 	addi	r2,r3,1023
   2cbe4:	00bf2e0e 	bge	zero,r2,2c8a0 <_gp+0xffff1860>
   2cbe8:	a10001cc 	andi	r4,r20,7
   2cbec:	20000726 	beq	r4,zero,2cc0c <__divdf3+0x67c>
   2cbf0:	a10003cc 	andi	r4,r20,15
   2cbf4:	01400104 	movi	r5,4
   2cbf8:	21400426 	beq	r4,r5,2cc0c <__divdf3+0x67c>
   2cbfc:	a149883a 	add	r4,r20,r5
   2cc00:	2529803a 	cmpltu	r20,r4,r20
   2cc04:	8d23883a 	add	r17,r17,r20
   2cc08:	2029883a 	mov	r20,r4
   2cc0c:	8900402c 	andhi	r4,r17,256
   2cc10:	20000426 	beq	r4,zero,2cc24 <__divdf3+0x694>
   2cc14:	18810004 	addi	r2,r3,1024
   2cc18:	00ffc034 	movhi	r3,65280
   2cc1c:	18ffffc4 	addi	r3,r3,-1
   2cc20:	88e2703a 	and	r17,r17,r3
   2cc24:	00c1ff84 	movi	r3,2046
   2cc28:	18beb416 	blt	r3,r2,2c6fc <_gp+0xffff16bc>
   2cc2c:	a028d0fa 	srli	r20,r20,3
   2cc30:	882a977a 	slli	r21,r17,29
   2cc34:	8820927a 	slli	r16,r17,9
   2cc38:	1081ffcc 	andi	r2,r2,2047
   2cc3c:	ad2ab03a 	or	r21,r21,r20
   2cc40:	8020d33a 	srli	r16,r16,12
   2cc44:	9900004c 	andi	r4,r19,1
   2cc48:	003eb006 	br	2c70c <_gp+0xffff16cc>
   2cc4c:	8080022c 	andhi	r2,r16,8
   2cc50:	10001226 	beq	r2,zero,2cc9c <__divdf3+0x70c>
   2cc54:	8880022c 	andhi	r2,r17,8
   2cc58:	1000101e 	bne	r2,zero,2cc9c <__divdf3+0x70c>
   2cc5c:	00800434 	movhi	r2,16
   2cc60:	8c000234 	orhi	r16,r17,8
   2cc64:	10bfffc4 	addi	r2,r2,-1
   2cc68:	b809883a 	mov	r4,r23
   2cc6c:	80a0703a 	and	r16,r16,r2
   2cc70:	a02b883a 	mov	r21,r20
   2cc74:	003f0806 	br	2c898 <_gp+0xffff1858>
   2cc78:	008000c4 	movi	r2,3
   2cc7c:	3880b126 	beq	r7,r2,2cf44 <__divdf3+0x9b4>
   2cc80:	00800044 	movi	r2,1
   2cc84:	38805b1e 	bne	r7,r2,2cdf4 <__divdf3+0x864>
   2cc88:	e009883a 	mov	r4,fp
   2cc8c:	0005883a 	mov	r2,zero
   2cc90:	0021883a 	mov	r16,zero
   2cc94:	002b883a 	mov	r21,zero
   2cc98:	003e9c06 	br	2c70c <_gp+0xffff16cc>
   2cc9c:	00800434 	movhi	r2,16
   2cca0:	84000234 	orhi	r16,r16,8
   2cca4:	10bfffc4 	addi	r2,r2,-1
   2cca8:	b009883a 	mov	r4,r22
   2ccac:	80a0703a 	and	r16,r16,r2
   2ccb0:	003ef906 	br	2c898 <_gp+0xffff1858>
   2ccb4:	103fca26 	beq	r2,zero,2cbe0 <_gp+0xffff1ba0>
   2ccb8:	b421883a 	add	r16,r22,r16
   2ccbc:	a17fffc4 	addi	r5,r20,-1
   2ccc0:	8580422e 	bgeu	r16,r22,2cdcc <__divdf3+0x83c>
   2ccc4:	2829883a 	mov	r20,r5
   2ccc8:	813fc41e 	bne	r16,r4,2cbdc <_gp+0xffff1b9c>
   2cccc:	d9800017 	ldw	r6,0(sp)
   2ccd0:	30bfc21e 	bne	r6,r2,2cbdc <_gp+0xffff1b9c>
   2ccd4:	003fc206 	br	2cbe0 <_gp+0xffff1ba0>
   2ccd8:	143ff604 	addi	r16,r2,-40
   2ccdc:	8c20983a 	sll	r16,r17,r16
   2cce0:	002b883a 	mov	r21,zero
   2cce4:	003eb406 	br	2c7b8 <_gp+0xffff1778>
   2cce8:	d9800215 	stw	r6,8(sp)
   2ccec:	d9c00515 	stw	r7,20(sp)
   2ccf0:	da000415 	stw	r8,16(sp)
   2ccf4:	002e7340 	call	2e734 <__clzsi2>
   2ccf8:	10800804 	addi	r2,r2,32
   2ccfc:	da000417 	ldw	r8,16(sp)
   2cd00:	d9c00517 	ldw	r7,20(sp)
   2cd04:	d9800217 	ldw	r6,8(sp)
   2cd08:	003ea106 	br	2c790 <_gp+0xffff1750>
   2cd0c:	147ff604 	addi	r17,r2,-40
   2cd10:	3462983a 	sll	r17,r6,r17
   2cd14:	0029883a 	mov	r20,zero
   2cd18:	003ec906 	br	2c840 <_gp+0xffff1800>
   2cd1c:	3009883a 	mov	r4,r6
   2cd20:	d9400115 	stw	r5,4(sp)
   2cd24:	d9800215 	stw	r6,8(sp)
   2cd28:	da000415 	stw	r8,16(sp)
   2cd2c:	da400315 	stw	r9,12(sp)
   2cd30:	002e7340 	call	2e734 <__clzsi2>
   2cd34:	10800804 	addi	r2,r2,32
   2cd38:	da400317 	ldw	r9,12(sp)
   2cd3c:	da000417 	ldw	r8,16(sp)
   2cd40:	d9800217 	ldw	r6,8(sp)
   2cd44:	d9400117 	ldw	r5,4(sp)
   2cd48:	003eb306 	br	2c818 <_gp+0xffff17d8>
   2cd4c:	d9800017 	ldw	r6,0(sp)
   2cd50:	a9ab883a 	add	r21,r21,r6
   2cd54:	a98b803a 	cmpltu	r5,r21,r6
   2cd58:	2d8b883a 	add	r5,r5,r22
   2cd5c:	2a11883a 	add	r8,r5,r8
   2cd60:	897fffc4 	addi	r5,r17,-1
   2cd64:	b2000c2e 	bgeu	r22,r8,2cd98 <__divdf3+0x808>
   2cd68:	41003f36 	bltu	r8,r4,2ce68 <__divdf3+0x8d8>
   2cd6c:	22006c26 	beq	r4,r8,2cf20 <__divdf3+0x990>
   2cd70:	4109c83a 	sub	r4,r8,r4
   2cd74:	2823883a 	mov	r17,r5
   2cd78:	003f3b06 	br	2ca68 <_gp+0xffff1a28>
   2cd7c:	ad3ed336 	bltu	r21,r20,2c8cc <_gp+0xffff188c>
   2cd80:	a804d07a 	srli	r2,r21,1
   2cd84:	802e97fa 	slli	r23,r16,31
   2cd88:	a82a97fa 	slli	r21,r21,31
   2cd8c:	8020d07a 	srli	r16,r16,1
   2cd90:	b8aeb03a 	or	r23,r23,r2
   2cd94:	003ed006 	br	2c8d8 <_gp+0xffff1898>
   2cd98:	b23ff51e 	bne	r22,r8,2cd70 <_gp+0xffff1d30>
   2cd9c:	d9800017 	ldw	r6,0(sp)
   2cda0:	a9bff12e 	bgeu	r21,r6,2cd68 <_gp+0xffff1d28>
   2cda4:	b109c83a 	sub	r4,r22,r4
   2cda8:	2823883a 	mov	r17,r5
   2cdac:	003f2e06 	br	2ca68 <_gp+0xffff1a28>
   2cdb0:	2021883a 	mov	r16,r4
   2cdb4:	003eff06 	br	2c9b4 <_gp+0xffff1974>
   2cdb8:	2023883a 	mov	r17,r4
   2cdbc:	003ee406 	br	2c950 <_gp+0xffff1910>
   2cdc0:	a8bfe236 	bltu	r21,r2,2cd4c <_gp+0xffff1d0c>
   2cdc4:	0009883a 	mov	r4,zero
   2cdc8:	003f2706 	br	2ca68 <_gp+0xffff1a28>
   2cdcc:	81002d36 	bltu	r16,r4,2ce84 <__divdf3+0x8f4>
   2cdd0:	24005626 	beq	r4,r16,2cf2c <__divdf3+0x99c>
   2cdd4:	2829883a 	mov	r20,r5
   2cdd8:	003f8006 	br	2cbdc <_gp+0xffff1b9c>
   2cddc:	053fffc4 	movi	r20,-1
   2cde0:	003f7f06 	br	2cbe0 <_gp+0xffff1ba0>
   2cde4:	200f883a 	mov	r7,r4
   2cde8:	003f3c06 	br	2cadc <_gp+0xffff1a9c>
   2cdec:	1011883a 	mov	r8,r2
   2cdf0:	003f5506 	br	2cb48 <_gp+0xffff1b08>
   2cdf4:	e027883a 	mov	r19,fp
   2cdf8:	003f7906 	br	2cbe0 <_gp+0xffff1ba0>
   2cdfc:	010007c4 	movi	r4,31
   2ce00:	20c02816 	blt	r4,r3,2cea4 <__divdf3+0x914>
   2ce04:	00800804 	movi	r2,32
   2ce08:	10c5c83a 	sub	r2,r2,r3
   2ce0c:	888a983a 	sll	r5,r17,r2
   2ce10:	a0c8d83a 	srl	r4,r20,r3
   2ce14:	a084983a 	sll	r2,r20,r2
   2ce18:	88e2d83a 	srl	r17,r17,r3
   2ce1c:	2906b03a 	or	r3,r5,r4
   2ce20:	1004c03a 	cmpne	r2,r2,zero
   2ce24:	1886b03a 	or	r3,r3,r2
   2ce28:	188001cc 	andi	r2,r3,7
   2ce2c:	10000726 	beq	r2,zero,2ce4c <__divdf3+0x8bc>
   2ce30:	188003cc 	andi	r2,r3,15
   2ce34:	01000104 	movi	r4,4
   2ce38:	11000426 	beq	r2,r4,2ce4c <__divdf3+0x8bc>
   2ce3c:	1805883a 	mov	r2,r3
   2ce40:	10c00104 	addi	r3,r2,4
   2ce44:	1885803a 	cmpltu	r2,r3,r2
   2ce48:	88a3883a 	add	r17,r17,r2
   2ce4c:	8880202c 	andhi	r2,r17,128
   2ce50:	10002926 	beq	r2,zero,2cef8 <__divdf3+0x968>
   2ce54:	9900004c 	andi	r4,r19,1
   2ce58:	00800044 	movi	r2,1
   2ce5c:	0021883a 	mov	r16,zero
   2ce60:	002b883a 	mov	r21,zero
   2ce64:	003e2906 	br	2c70c <_gp+0xffff16cc>
   2ce68:	d9800017 	ldw	r6,0(sp)
   2ce6c:	8c7fff84 	addi	r17,r17,-2
   2ce70:	a9ab883a 	add	r21,r21,r6
   2ce74:	a98b803a 	cmpltu	r5,r21,r6
   2ce78:	2d8b883a 	add	r5,r5,r22
   2ce7c:	2a11883a 	add	r8,r5,r8
   2ce80:	003ef806 	br	2ca64 <_gp+0xffff1a24>
   2ce84:	d9800017 	ldw	r6,0(sp)
   2ce88:	318f883a 	add	r7,r6,r6
   2ce8c:	398b803a 	cmpltu	r5,r7,r6
   2ce90:	2d8d883a 	add	r6,r5,r22
   2ce94:	81a1883a 	add	r16,r16,r6
   2ce98:	a17fff84 	addi	r5,r20,-2
   2ce9c:	d9c00015 	stw	r7,0(sp)
   2cea0:	003f8806 	br	2ccc4 <_gp+0xffff1c84>
   2cea4:	013ff844 	movi	r4,-31
   2cea8:	2085c83a 	sub	r2,r4,r2
   2ceac:	8888d83a 	srl	r4,r17,r2
   2ceb0:	00800804 	movi	r2,32
   2ceb4:	18802126 	beq	r3,r2,2cf3c <__divdf3+0x9ac>
   2ceb8:	04001004 	movi	r16,64
   2cebc:	80c7c83a 	sub	r3,r16,r3
   2cec0:	88e0983a 	sll	r16,r17,r3
   2cec4:	8504b03a 	or	r2,r16,r20
   2cec8:	1004c03a 	cmpne	r2,r2,zero
   2cecc:	2084b03a 	or	r2,r4,r2
   2ced0:	144001cc 	andi	r17,r2,7
   2ced4:	88000d1e 	bne	r17,zero,2cf0c <__divdf3+0x97c>
   2ced8:	0021883a 	mov	r16,zero
   2cedc:	102ad0fa 	srli	r21,r2,3
   2cee0:	9900004c 	andi	r4,r19,1
   2cee4:	0005883a 	mov	r2,zero
   2cee8:	ac6ab03a 	or	r21,r21,r17
   2ceec:	003e0706 	br	2c70c <_gp+0xffff16cc>
   2cef0:	1007883a 	mov	r3,r2
   2cef4:	0023883a 	mov	r17,zero
   2cef8:	8820927a 	slli	r16,r17,9
   2cefc:	1805883a 	mov	r2,r3
   2cf00:	8822977a 	slli	r17,r17,29
   2cf04:	8020d33a 	srli	r16,r16,12
   2cf08:	003ff406 	br	2cedc <_gp+0xffff1e9c>
   2cf0c:	10c003cc 	andi	r3,r2,15
   2cf10:	01000104 	movi	r4,4
   2cf14:	193ff626 	beq	r3,r4,2cef0 <_gp+0xffff1eb0>
   2cf18:	0023883a 	mov	r17,zero
   2cf1c:	003fc806 	br	2ce40 <_gp+0xffff1e00>
   2cf20:	a8bfd136 	bltu	r21,r2,2ce68 <_gp+0xffff1e28>
   2cf24:	2823883a 	mov	r17,r5
   2cf28:	003fa606 	br	2cdc4 <_gp+0xffff1d84>
   2cf2c:	d9800017 	ldw	r6,0(sp)
   2cf30:	30bfd436 	bltu	r6,r2,2ce84 <_gp+0xffff1e44>
   2cf34:	2829883a 	mov	r20,r5
   2cf38:	003f6406 	br	2cccc <_gp+0xffff1c8c>
   2cf3c:	0021883a 	mov	r16,zero
   2cf40:	003fe006 	br	2cec4 <_gp+0xffff1e84>
   2cf44:	00800434 	movhi	r2,16
   2cf48:	8c000234 	orhi	r16,r17,8
   2cf4c:	10bfffc4 	addi	r2,r2,-1
   2cf50:	e009883a 	mov	r4,fp
   2cf54:	80a0703a 	and	r16,r16,r2
   2cf58:	a02b883a 	mov	r21,r20
   2cf5c:	003e4e06 	br	2c898 <_gp+0xffff1858>

0002cf60 <__eqdf2>:
   2cf60:	2804d53a 	srli	r2,r5,20
   2cf64:	3806d53a 	srli	r3,r7,20
   2cf68:	02000434 	movhi	r8,16
   2cf6c:	423fffc4 	addi	r8,r8,-1
   2cf70:	1081ffcc 	andi	r2,r2,2047
   2cf74:	0281ffc4 	movi	r10,2047
   2cf78:	2a12703a 	and	r9,r5,r8
   2cf7c:	18c1ffcc 	andi	r3,r3,2047
   2cf80:	3a10703a 	and	r8,r7,r8
   2cf84:	280ad7fa 	srli	r5,r5,31
   2cf88:	380ed7fa 	srli	r7,r7,31
   2cf8c:	12801026 	beq	r2,r10,2cfd0 <__eqdf2+0x70>
   2cf90:	0281ffc4 	movi	r10,2047
   2cf94:	1a800a26 	beq	r3,r10,2cfc0 <__eqdf2+0x60>
   2cf98:	10c00226 	beq	r2,r3,2cfa4 <__eqdf2+0x44>
   2cf9c:	00800044 	movi	r2,1
   2cfa0:	f800283a 	ret
   2cfa4:	4a3ffd1e 	bne	r9,r8,2cf9c <_gp+0xffff1f5c>
   2cfa8:	21bffc1e 	bne	r4,r6,2cf9c <_gp+0xffff1f5c>
   2cfac:	29c00c26 	beq	r5,r7,2cfe0 <__eqdf2+0x80>
   2cfb0:	103ffa1e 	bne	r2,zero,2cf9c <_gp+0xffff1f5c>
   2cfb4:	2244b03a 	or	r2,r4,r9
   2cfb8:	1004c03a 	cmpne	r2,r2,zero
   2cfbc:	f800283a 	ret
   2cfc0:	3214b03a 	or	r10,r6,r8
   2cfc4:	503ff426 	beq	r10,zero,2cf98 <_gp+0xffff1f58>
   2cfc8:	00800044 	movi	r2,1
   2cfcc:	f800283a 	ret
   2cfd0:	2254b03a 	or	r10,r4,r9
   2cfd4:	503fee26 	beq	r10,zero,2cf90 <_gp+0xffff1f50>
   2cfd8:	00800044 	movi	r2,1
   2cfdc:	f800283a 	ret
   2cfe0:	0005883a 	mov	r2,zero
   2cfe4:	f800283a 	ret

0002cfe8 <__gedf2>:
   2cfe8:	2804d53a 	srli	r2,r5,20
   2cfec:	3806d53a 	srli	r3,r7,20
   2cff0:	02000434 	movhi	r8,16
   2cff4:	423fffc4 	addi	r8,r8,-1
   2cff8:	1081ffcc 	andi	r2,r2,2047
   2cffc:	0241ffc4 	movi	r9,2047
   2d000:	2a14703a 	and	r10,r5,r8
   2d004:	18c1ffcc 	andi	r3,r3,2047
   2d008:	3a10703a 	and	r8,r7,r8
   2d00c:	280ad7fa 	srli	r5,r5,31
   2d010:	380ed7fa 	srli	r7,r7,31
   2d014:	12401d26 	beq	r2,r9,2d08c <__gedf2+0xa4>
   2d018:	0241ffc4 	movi	r9,2047
   2d01c:	1a401226 	beq	r3,r9,2d068 <__gedf2+0x80>
   2d020:	1000081e 	bne	r2,zero,2d044 <__gedf2+0x5c>
   2d024:	2296b03a 	or	r11,r4,r10
   2d028:	5813003a 	cmpeq	r9,r11,zero
   2d02c:	1800091e 	bne	r3,zero,2d054 <__gedf2+0x6c>
   2d030:	3218b03a 	or	r12,r6,r8
   2d034:	6000071e 	bne	r12,zero,2d054 <__gedf2+0x6c>
   2d038:	0005883a 	mov	r2,zero
   2d03c:	5800101e 	bne	r11,zero,2d080 <__gedf2+0x98>
   2d040:	f800283a 	ret
   2d044:	18000c1e 	bne	r3,zero,2d078 <__gedf2+0x90>
   2d048:	3212b03a 	or	r9,r6,r8
   2d04c:	48000c26 	beq	r9,zero,2d080 <__gedf2+0x98>
   2d050:	0013883a 	mov	r9,zero
   2d054:	39c03fcc 	andi	r7,r7,255
   2d058:	48000826 	beq	r9,zero,2d07c <__gedf2+0x94>
   2d05c:	38000926 	beq	r7,zero,2d084 <__gedf2+0x9c>
   2d060:	00800044 	movi	r2,1
   2d064:	f800283a 	ret
   2d068:	3212b03a 	or	r9,r6,r8
   2d06c:	483fec26 	beq	r9,zero,2d020 <_gp+0xffff1fe0>
   2d070:	00bfff84 	movi	r2,-2
   2d074:	f800283a 	ret
   2d078:	39c03fcc 	andi	r7,r7,255
   2d07c:	29c00626 	beq	r5,r7,2d098 <__gedf2+0xb0>
   2d080:	283ff726 	beq	r5,zero,2d060 <_gp+0xffff2020>
   2d084:	00bfffc4 	movi	r2,-1
   2d088:	f800283a 	ret
   2d08c:	2292b03a 	or	r9,r4,r10
   2d090:	483fe126 	beq	r9,zero,2d018 <_gp+0xffff1fd8>
   2d094:	003ff606 	br	2d070 <_gp+0xffff2030>
   2d098:	18bff916 	blt	r3,r2,2d080 <_gp+0xffff2040>
   2d09c:	10c00316 	blt	r2,r3,2d0ac <__gedf2+0xc4>
   2d0a0:	42bff736 	bltu	r8,r10,2d080 <_gp+0xffff2040>
   2d0a4:	52000326 	beq	r10,r8,2d0b4 <__gedf2+0xcc>
   2d0a8:	5200042e 	bgeu	r10,r8,2d0bc <__gedf2+0xd4>
   2d0ac:	283fec1e 	bne	r5,zero,2d060 <_gp+0xffff2020>
   2d0b0:	003ff406 	br	2d084 <_gp+0xffff2044>
   2d0b4:	313ff236 	bltu	r6,r4,2d080 <_gp+0xffff2040>
   2d0b8:	21bffc36 	bltu	r4,r6,2d0ac <_gp+0xffff206c>
   2d0bc:	0005883a 	mov	r2,zero
   2d0c0:	f800283a 	ret

0002d0c4 <__ledf2>:
   2d0c4:	2804d53a 	srli	r2,r5,20
   2d0c8:	3810d53a 	srli	r8,r7,20
   2d0cc:	00c00434 	movhi	r3,16
   2d0d0:	18ffffc4 	addi	r3,r3,-1
   2d0d4:	1081ffcc 	andi	r2,r2,2047
   2d0d8:	0241ffc4 	movi	r9,2047
   2d0dc:	28d4703a 	and	r10,r5,r3
   2d0e0:	4201ffcc 	andi	r8,r8,2047
   2d0e4:	38c6703a 	and	r3,r7,r3
   2d0e8:	280ad7fa 	srli	r5,r5,31
   2d0ec:	380ed7fa 	srli	r7,r7,31
   2d0f0:	12401f26 	beq	r2,r9,2d170 <__ledf2+0xac>
   2d0f4:	0241ffc4 	movi	r9,2047
   2d0f8:	42401426 	beq	r8,r9,2d14c <__ledf2+0x88>
   2d0fc:	1000091e 	bne	r2,zero,2d124 <__ledf2+0x60>
   2d100:	2296b03a 	or	r11,r4,r10
   2d104:	5813003a 	cmpeq	r9,r11,zero
   2d108:	29403fcc 	andi	r5,r5,255
   2d10c:	40000a1e 	bne	r8,zero,2d138 <__ledf2+0x74>
   2d110:	30d8b03a 	or	r12,r6,r3
   2d114:	6000081e 	bne	r12,zero,2d138 <__ledf2+0x74>
   2d118:	0005883a 	mov	r2,zero
   2d11c:	5800111e 	bne	r11,zero,2d164 <__ledf2+0xa0>
   2d120:	f800283a 	ret
   2d124:	29403fcc 	andi	r5,r5,255
   2d128:	40000c1e 	bne	r8,zero,2d15c <__ledf2+0x98>
   2d12c:	30d2b03a 	or	r9,r6,r3
   2d130:	48000c26 	beq	r9,zero,2d164 <__ledf2+0xa0>
   2d134:	0013883a 	mov	r9,zero
   2d138:	39c03fcc 	andi	r7,r7,255
   2d13c:	48000826 	beq	r9,zero,2d160 <__ledf2+0x9c>
   2d140:	38001126 	beq	r7,zero,2d188 <__ledf2+0xc4>
   2d144:	00800044 	movi	r2,1
   2d148:	f800283a 	ret
   2d14c:	30d2b03a 	or	r9,r6,r3
   2d150:	483fea26 	beq	r9,zero,2d0fc <_gp+0xffff20bc>
   2d154:	00800084 	movi	r2,2
   2d158:	f800283a 	ret
   2d15c:	39c03fcc 	andi	r7,r7,255
   2d160:	39400726 	beq	r7,r5,2d180 <__ledf2+0xbc>
   2d164:	2800081e 	bne	r5,zero,2d188 <__ledf2+0xc4>
   2d168:	00800044 	movi	r2,1
   2d16c:	f800283a 	ret
   2d170:	2292b03a 	or	r9,r4,r10
   2d174:	483fdf26 	beq	r9,zero,2d0f4 <_gp+0xffff20b4>
   2d178:	00800084 	movi	r2,2
   2d17c:	f800283a 	ret
   2d180:	4080030e 	bge	r8,r2,2d190 <__ledf2+0xcc>
   2d184:	383fef26 	beq	r7,zero,2d144 <_gp+0xffff2104>
   2d188:	00bfffc4 	movi	r2,-1
   2d18c:	f800283a 	ret
   2d190:	123feb16 	blt	r2,r8,2d140 <_gp+0xffff2100>
   2d194:	1abff336 	bltu	r3,r10,2d164 <_gp+0xffff2124>
   2d198:	50c00326 	beq	r10,r3,2d1a8 <__ledf2+0xe4>
   2d19c:	50c0042e 	bgeu	r10,r3,2d1b0 <__ledf2+0xec>
   2d1a0:	283fe81e 	bne	r5,zero,2d144 <_gp+0xffff2104>
   2d1a4:	003ff806 	br	2d188 <_gp+0xffff2148>
   2d1a8:	313fee36 	bltu	r6,r4,2d164 <_gp+0xffff2124>
   2d1ac:	21bffc36 	bltu	r4,r6,2d1a0 <_gp+0xffff2160>
   2d1b0:	0005883a 	mov	r2,zero
   2d1b4:	f800283a 	ret

0002d1b8 <__muldf3>:
   2d1b8:	deffee04 	addi	sp,sp,-72
   2d1bc:	dd000c15 	stw	r20,48(sp)
   2d1c0:	2828d53a 	srli	r20,r5,20
   2d1c4:	ddc00f15 	stw	r23,60(sp)
   2d1c8:	282ed7fa 	srli	r23,r5,31
   2d1cc:	dc000815 	stw	r16,32(sp)
   2d1d0:	04000434 	movhi	r16,16
   2d1d4:	dcc00b15 	stw	r19,44(sp)
   2d1d8:	843fffc4 	addi	r16,r16,-1
   2d1dc:	dfc01115 	stw	ra,68(sp)
   2d1e0:	df001015 	stw	fp,64(sp)
   2d1e4:	dd800e15 	stw	r22,56(sp)
   2d1e8:	dd400d15 	stw	r21,52(sp)
   2d1ec:	dc800a15 	stw	r18,40(sp)
   2d1f0:	dc400915 	stw	r17,36(sp)
   2d1f4:	a501ffcc 	andi	r20,r20,2047
   2d1f8:	2c20703a 	and	r16,r5,r16
   2d1fc:	b827883a 	mov	r19,r23
   2d200:	ba403fcc 	andi	r9,r23,255
   2d204:	a0006026 	beq	r20,zero,2d388 <__muldf3+0x1d0>
   2d208:	0081ffc4 	movi	r2,2047
   2d20c:	202d883a 	mov	r22,r4
   2d210:	a0803626 	beq	r20,r2,2d2ec <__muldf3+0x134>
   2d214:	84000434 	orhi	r16,r16,16
   2d218:	200ad77a 	srli	r5,r4,29
   2d21c:	800490fa 	slli	r2,r16,3
   2d220:	202c90fa 	slli	r22,r4,3
   2d224:	a53f0044 	addi	r20,r20,-1023
   2d228:	28a0b03a 	or	r16,r5,r2
   2d22c:	002b883a 	mov	r21,zero
   2d230:	000b883a 	mov	r5,zero
   2d234:	3804d53a 	srli	r2,r7,20
   2d238:	3838d7fa 	srli	fp,r7,31
   2d23c:	04400434 	movhi	r17,16
   2d240:	8c7fffc4 	addi	r17,r17,-1
   2d244:	1081ffcc 	andi	r2,r2,2047
   2d248:	3025883a 	mov	r18,r6
   2d24c:	3c62703a 	and	r17,r7,r17
   2d250:	e2803fcc 	andi	r10,fp,255
   2d254:	10006d26 	beq	r2,zero,2d40c <__muldf3+0x254>
   2d258:	00c1ffc4 	movi	r3,2047
   2d25c:	10c06526 	beq	r2,r3,2d3f4 <__muldf3+0x23c>
   2d260:	8c400434 	orhi	r17,r17,16
   2d264:	300ed77a 	srli	r7,r6,29
   2d268:	880690fa 	slli	r3,r17,3
   2d26c:	302490fa 	slli	r18,r6,3
   2d270:	10bf0044 	addi	r2,r2,-1023
   2d274:	38e2b03a 	or	r17,r7,r3
   2d278:	000f883a 	mov	r7,zero
   2d27c:	a087883a 	add	r3,r20,r2
   2d280:	010003c4 	movi	r4,15
   2d284:	3d44b03a 	or	r2,r7,r21
   2d288:	e5ccf03a 	xor	r6,fp,r23
   2d28c:	1a000044 	addi	r8,r3,1
   2d290:	20809b36 	bltu	r4,r2,2d500 <__muldf3+0x348>
   2d294:	100490ba 	slli	r2,r2,2
   2d298:	010000f4 	movhi	r4,3
   2d29c:	2134ab04 	addi	r4,r4,-11604
   2d2a0:	1105883a 	add	r2,r2,r4
   2d2a4:	10800017 	ldw	r2,0(r2)
   2d2a8:	1000683a 	jmp	r2
   2d2ac:	0002d500 	call	2d50 <__alt_mem_onchip_memory-0x1d2b0>
   2d2b0:	0002d30c 	andi	zero,zero,2892
   2d2b4:	0002d30c 	andi	zero,zero,2892
   2d2b8:	0002d308 	cmpgei	zero,zero,2892
   2d2bc:	0002d4dc 	xori	zero,zero,2899
   2d2c0:	0002d4dc 	xori	zero,zero,2899
   2d2c4:	0002d4c4 	movi	zero,2899
   2d2c8:	0002d308 	cmpgei	zero,zero,2892
   2d2cc:	0002d4dc 	xori	zero,zero,2899
   2d2d0:	0002d4c4 	movi	zero,2899
   2d2d4:	0002d4dc 	xori	zero,zero,2899
   2d2d8:	0002d308 	cmpgei	zero,zero,2892
   2d2dc:	0002d4ec 	andhi	zero,zero,2899
   2d2e0:	0002d4ec 	andhi	zero,zero,2899
   2d2e4:	0002d4ec 	andhi	zero,zero,2899
   2d2e8:	0002d84c 	andi	zero,zero,2913
   2d2ec:	2404b03a 	or	r2,r4,r16
   2d2f0:	1000711e 	bne	r2,zero,2d4b8 <__muldf3+0x300>
   2d2f4:	05400204 	movi	r21,8
   2d2f8:	0021883a 	mov	r16,zero
   2d2fc:	002d883a 	mov	r22,zero
   2d300:	01400084 	movi	r5,2
   2d304:	003fcb06 	br	2d234 <_gp+0xffff21f4>
   2d308:	500d883a 	mov	r6,r10
   2d30c:	00800084 	movi	r2,2
   2d310:	38805926 	beq	r7,r2,2d478 <__muldf3+0x2c0>
   2d314:	008000c4 	movi	r2,3
   2d318:	3881bb26 	beq	r7,r2,2da08 <__muldf3+0x850>
   2d31c:	00800044 	movi	r2,1
   2d320:	3881961e 	bne	r7,r2,2d97c <__muldf3+0x7c4>
   2d324:	3027883a 	mov	r19,r6
   2d328:	0005883a 	mov	r2,zero
   2d32c:	0021883a 	mov	r16,zero
   2d330:	002d883a 	mov	r22,zero
   2d334:	1004953a 	slli	r2,r2,20
   2d338:	98c03fcc 	andi	r3,r19,255
   2d33c:	04400434 	movhi	r17,16
   2d340:	8c7fffc4 	addi	r17,r17,-1
   2d344:	180697fa 	slli	r3,r3,31
   2d348:	8460703a 	and	r16,r16,r17
   2d34c:	80a0b03a 	or	r16,r16,r2
   2d350:	80c6b03a 	or	r3,r16,r3
   2d354:	b005883a 	mov	r2,r22
   2d358:	dfc01117 	ldw	ra,68(sp)
   2d35c:	df001017 	ldw	fp,64(sp)
   2d360:	ddc00f17 	ldw	r23,60(sp)
   2d364:	dd800e17 	ldw	r22,56(sp)
   2d368:	dd400d17 	ldw	r21,52(sp)
   2d36c:	dd000c17 	ldw	r20,48(sp)
   2d370:	dcc00b17 	ldw	r19,44(sp)
   2d374:	dc800a17 	ldw	r18,40(sp)
   2d378:	dc400917 	ldw	r17,36(sp)
   2d37c:	dc000817 	ldw	r16,32(sp)
   2d380:	dec01204 	addi	sp,sp,72
   2d384:	f800283a 	ret
   2d388:	2404b03a 	or	r2,r4,r16
   2d38c:	202b883a 	mov	r21,r4
   2d390:	10004426 	beq	r2,zero,2d4a4 <__muldf3+0x2ec>
   2d394:	80015126 	beq	r16,zero,2d8dc <__muldf3+0x724>
   2d398:	8009883a 	mov	r4,r16
   2d39c:	d9800715 	stw	r6,28(sp)
   2d3a0:	d9c00215 	stw	r7,8(sp)
   2d3a4:	da400415 	stw	r9,16(sp)
   2d3a8:	002e7340 	call	2e734 <__clzsi2>
   2d3ac:	d9800717 	ldw	r6,28(sp)
   2d3b0:	d9c00217 	ldw	r7,8(sp)
   2d3b4:	da400417 	ldw	r9,16(sp)
   2d3b8:	113ffd44 	addi	r4,r2,-11
   2d3bc:	00c00704 	movi	r3,28
   2d3c0:	19014216 	blt	r3,r4,2d8cc <__muldf3+0x714>
   2d3c4:	00c00744 	movi	r3,29
   2d3c8:	15bffe04 	addi	r22,r2,-8
   2d3cc:	1907c83a 	sub	r3,r3,r4
   2d3d0:	85a0983a 	sll	r16,r16,r22
   2d3d4:	a8c6d83a 	srl	r3,r21,r3
   2d3d8:	adac983a 	sll	r22,r21,r22
   2d3dc:	1c20b03a 	or	r16,r3,r16
   2d3e0:	1080fcc4 	addi	r2,r2,1011
   2d3e4:	00a9c83a 	sub	r20,zero,r2
   2d3e8:	002b883a 	mov	r21,zero
   2d3ec:	000b883a 	mov	r5,zero
   2d3f0:	003f9006 	br	2d234 <_gp+0xffff21f4>
   2d3f4:	3446b03a 	or	r3,r6,r17
   2d3f8:	1800281e 	bne	r3,zero,2d49c <__muldf3+0x2e4>
   2d3fc:	0023883a 	mov	r17,zero
   2d400:	0025883a 	mov	r18,zero
   2d404:	01c00084 	movi	r7,2
   2d408:	003f9c06 	br	2d27c <_gp+0xffff223c>
   2d40c:	3446b03a 	or	r3,r6,r17
   2d410:	18001e26 	beq	r3,zero,2d48c <__muldf3+0x2d4>
   2d414:	88012126 	beq	r17,zero,2d89c <__muldf3+0x6e4>
   2d418:	8809883a 	mov	r4,r17
   2d41c:	d9400215 	stw	r5,8(sp)
   2d420:	d9800715 	stw	r6,28(sp)
   2d424:	da400415 	stw	r9,16(sp)
   2d428:	da800315 	stw	r10,12(sp)
   2d42c:	002e7340 	call	2e734 <__clzsi2>
   2d430:	d9400217 	ldw	r5,8(sp)
   2d434:	d9800717 	ldw	r6,28(sp)
   2d438:	da400417 	ldw	r9,16(sp)
   2d43c:	da800317 	ldw	r10,12(sp)
   2d440:	113ffd44 	addi	r4,r2,-11
   2d444:	00c00704 	movi	r3,28
   2d448:	19011016 	blt	r3,r4,2d88c <__muldf3+0x6d4>
   2d44c:	00c00744 	movi	r3,29
   2d450:	14bffe04 	addi	r18,r2,-8
   2d454:	1907c83a 	sub	r3,r3,r4
   2d458:	8ca2983a 	sll	r17,r17,r18
   2d45c:	30c6d83a 	srl	r3,r6,r3
   2d460:	34a4983a 	sll	r18,r6,r18
   2d464:	1c62b03a 	or	r17,r3,r17
   2d468:	1080fcc4 	addi	r2,r2,1011
   2d46c:	0085c83a 	sub	r2,zero,r2
   2d470:	000f883a 	mov	r7,zero
   2d474:	003f8106 	br	2d27c <_gp+0xffff223c>
   2d478:	3027883a 	mov	r19,r6
   2d47c:	0081ffc4 	movi	r2,2047
   2d480:	0021883a 	mov	r16,zero
   2d484:	002d883a 	mov	r22,zero
   2d488:	003faa06 	br	2d334 <_gp+0xffff22f4>
   2d48c:	0023883a 	mov	r17,zero
   2d490:	0025883a 	mov	r18,zero
   2d494:	01c00044 	movi	r7,1
   2d498:	003f7806 	br	2d27c <_gp+0xffff223c>
   2d49c:	01c000c4 	movi	r7,3
   2d4a0:	003f7606 	br	2d27c <_gp+0xffff223c>
   2d4a4:	05400104 	movi	r21,4
   2d4a8:	0021883a 	mov	r16,zero
   2d4ac:	002d883a 	mov	r22,zero
   2d4b0:	01400044 	movi	r5,1
   2d4b4:	003f5f06 	br	2d234 <_gp+0xffff21f4>
   2d4b8:	05400304 	movi	r21,12
   2d4bc:	014000c4 	movi	r5,3
   2d4c0:	003f5c06 	br	2d234 <_gp+0xffff21f4>
   2d4c4:	04000434 	movhi	r16,16
   2d4c8:	0027883a 	mov	r19,zero
   2d4cc:	843fffc4 	addi	r16,r16,-1
   2d4d0:	05bfffc4 	movi	r22,-1
   2d4d4:	0081ffc4 	movi	r2,2047
   2d4d8:	003f9606 	br	2d334 <_gp+0xffff22f4>
   2d4dc:	8023883a 	mov	r17,r16
   2d4e0:	b025883a 	mov	r18,r22
   2d4e4:	280f883a 	mov	r7,r5
   2d4e8:	003f8806 	br	2d30c <_gp+0xffff22cc>
   2d4ec:	8023883a 	mov	r17,r16
   2d4f0:	b025883a 	mov	r18,r22
   2d4f4:	480d883a 	mov	r6,r9
   2d4f8:	280f883a 	mov	r7,r5
   2d4fc:	003f8306 	br	2d30c <_gp+0xffff22cc>
   2d500:	b026d43a 	srli	r19,r22,16
   2d504:	902ed43a 	srli	r23,r18,16
   2d508:	b5bfffcc 	andi	r22,r22,65535
   2d50c:	94bfffcc 	andi	r18,r18,65535
   2d510:	b00b883a 	mov	r5,r22
   2d514:	9009883a 	mov	r4,r18
   2d518:	d8c00515 	stw	r3,20(sp)
   2d51c:	d9800715 	stw	r6,28(sp)
   2d520:	da000615 	stw	r8,24(sp)
   2d524:	002b35c0 	call	2b35c <__mulsi3>
   2d528:	980b883a 	mov	r5,r19
   2d52c:	9009883a 	mov	r4,r18
   2d530:	1029883a 	mov	r20,r2
   2d534:	002b35c0 	call	2b35c <__mulsi3>
   2d538:	b80b883a 	mov	r5,r23
   2d53c:	9809883a 	mov	r4,r19
   2d540:	102b883a 	mov	r21,r2
   2d544:	002b35c0 	call	2b35c <__mulsi3>
   2d548:	b809883a 	mov	r4,r23
   2d54c:	b00b883a 	mov	r5,r22
   2d550:	1039883a 	mov	fp,r2
   2d554:	002b35c0 	call	2b35c <__mulsi3>
   2d558:	a008d43a 	srli	r4,r20,16
   2d55c:	1545883a 	add	r2,r2,r21
   2d560:	d8c00517 	ldw	r3,20(sp)
   2d564:	2085883a 	add	r2,r4,r2
   2d568:	d9800717 	ldw	r6,28(sp)
   2d56c:	da000617 	ldw	r8,24(sp)
   2d570:	1540022e 	bgeu	r2,r21,2d57c <__muldf3+0x3c4>
   2d574:	01000074 	movhi	r4,1
   2d578:	e139883a 	add	fp,fp,r4
   2d57c:	100e943a 	slli	r7,r2,16
   2d580:	1004d43a 	srli	r2,r2,16
   2d584:	882ad43a 	srli	r21,r17,16
   2d588:	a53fffcc 	andi	r20,r20,65535
   2d58c:	8c7fffcc 	andi	r17,r17,65535
   2d590:	3d29883a 	add	r20,r7,r20
   2d594:	b00b883a 	mov	r5,r22
   2d598:	8809883a 	mov	r4,r17
   2d59c:	d8c00515 	stw	r3,20(sp)
   2d5a0:	d9800715 	stw	r6,28(sp)
   2d5a4:	da000615 	stw	r8,24(sp)
   2d5a8:	dd000115 	stw	r20,4(sp)
   2d5ac:	d8800015 	stw	r2,0(sp)
   2d5b0:	002b35c0 	call	2b35c <__mulsi3>
   2d5b4:	980b883a 	mov	r5,r19
   2d5b8:	8809883a 	mov	r4,r17
   2d5bc:	d8800215 	stw	r2,8(sp)
   2d5c0:	002b35c0 	call	2b35c <__mulsi3>
   2d5c4:	9809883a 	mov	r4,r19
   2d5c8:	a80b883a 	mov	r5,r21
   2d5cc:	1029883a 	mov	r20,r2
   2d5d0:	002b35c0 	call	2b35c <__mulsi3>
   2d5d4:	b00b883a 	mov	r5,r22
   2d5d8:	a809883a 	mov	r4,r21
   2d5dc:	d8800415 	stw	r2,16(sp)
   2d5e0:	002b35c0 	call	2b35c <__mulsi3>
   2d5e4:	d9c00217 	ldw	r7,8(sp)
   2d5e8:	1505883a 	add	r2,r2,r20
   2d5ec:	d8c00517 	ldw	r3,20(sp)
   2d5f0:	3826d43a 	srli	r19,r7,16
   2d5f4:	d9800717 	ldw	r6,28(sp)
   2d5f8:	da000617 	ldw	r8,24(sp)
   2d5fc:	9885883a 	add	r2,r19,r2
   2d600:	da400417 	ldw	r9,16(sp)
   2d604:	1500022e 	bgeu	r2,r20,2d610 <__muldf3+0x458>
   2d608:	01000074 	movhi	r4,1
   2d60c:	4913883a 	add	r9,r9,r4
   2d610:	1028d43a 	srli	r20,r2,16
   2d614:	1004943a 	slli	r2,r2,16
   2d618:	802cd43a 	srli	r22,r16,16
   2d61c:	843fffcc 	andi	r16,r16,65535
   2d620:	3cffffcc 	andi	r19,r7,65535
   2d624:	9009883a 	mov	r4,r18
   2d628:	800b883a 	mov	r5,r16
   2d62c:	a269883a 	add	r20,r20,r9
   2d630:	d8c00515 	stw	r3,20(sp)
   2d634:	d9800715 	stw	r6,28(sp)
   2d638:	da000615 	stw	r8,24(sp)
   2d63c:	14e7883a 	add	r19,r2,r19
   2d640:	002b35c0 	call	2b35c <__mulsi3>
   2d644:	9009883a 	mov	r4,r18
   2d648:	b00b883a 	mov	r5,r22
   2d64c:	d8800315 	stw	r2,12(sp)
   2d650:	002b35c0 	call	2b35c <__mulsi3>
   2d654:	b809883a 	mov	r4,r23
   2d658:	b00b883a 	mov	r5,r22
   2d65c:	d8800215 	stw	r2,8(sp)
   2d660:	002b35c0 	call	2b35c <__mulsi3>
   2d664:	b80b883a 	mov	r5,r23
   2d668:	8009883a 	mov	r4,r16
   2d66c:	d8800415 	stw	r2,16(sp)
   2d670:	002b35c0 	call	2b35c <__mulsi3>
   2d674:	da800317 	ldw	r10,12(sp)
   2d678:	d9c00217 	ldw	r7,8(sp)
   2d67c:	d9000017 	ldw	r4,0(sp)
   2d680:	502ed43a 	srli	r23,r10,16
   2d684:	11c5883a 	add	r2,r2,r7
   2d688:	24e5883a 	add	r18,r4,r19
   2d68c:	b885883a 	add	r2,r23,r2
   2d690:	d8c00517 	ldw	r3,20(sp)
   2d694:	d9800717 	ldw	r6,28(sp)
   2d698:	da000617 	ldw	r8,24(sp)
   2d69c:	da400417 	ldw	r9,16(sp)
   2d6a0:	11c0022e 	bgeu	r2,r7,2d6ac <__muldf3+0x4f4>
   2d6a4:	01000074 	movhi	r4,1
   2d6a8:	4913883a 	add	r9,r9,r4
   2d6ac:	100ed43a 	srli	r7,r2,16
   2d6b0:	1004943a 	slli	r2,r2,16
   2d6b4:	55ffffcc 	andi	r23,r10,65535
   2d6b8:	3a53883a 	add	r9,r7,r9
   2d6bc:	8809883a 	mov	r4,r17
   2d6c0:	800b883a 	mov	r5,r16
   2d6c4:	d8c00515 	stw	r3,20(sp)
   2d6c8:	d9800715 	stw	r6,28(sp)
   2d6cc:	da000615 	stw	r8,24(sp)
   2d6d0:	da400415 	stw	r9,16(sp)
   2d6d4:	15ef883a 	add	r23,r2,r23
   2d6d8:	002b35c0 	call	2b35c <__mulsi3>
   2d6dc:	8809883a 	mov	r4,r17
   2d6e0:	b00b883a 	mov	r5,r22
   2d6e4:	d8800215 	stw	r2,8(sp)
   2d6e8:	002b35c0 	call	2b35c <__mulsi3>
   2d6ec:	b00b883a 	mov	r5,r22
   2d6f0:	a809883a 	mov	r4,r21
   2d6f4:	d8800315 	stw	r2,12(sp)
   2d6f8:	002b35c0 	call	2b35c <__mulsi3>
   2d6fc:	8009883a 	mov	r4,r16
   2d700:	a80b883a 	mov	r5,r21
   2d704:	1023883a 	mov	r17,r2
   2d708:	002b35c0 	call	2b35c <__mulsi3>
   2d70c:	d9c00217 	ldw	r7,8(sp)
   2d710:	da800317 	ldw	r10,12(sp)
   2d714:	d8c00517 	ldw	r3,20(sp)
   2d718:	3808d43a 	srli	r4,r7,16
   2d71c:	1285883a 	add	r2,r2,r10
   2d720:	d9800717 	ldw	r6,28(sp)
   2d724:	2085883a 	add	r2,r4,r2
   2d728:	da000617 	ldw	r8,24(sp)
   2d72c:	da400417 	ldw	r9,16(sp)
   2d730:	1280022e 	bgeu	r2,r10,2d73c <__muldf3+0x584>
   2d734:	01000074 	movhi	r4,1
   2d738:	8923883a 	add	r17,r17,r4
   2d73c:	1008943a 	slli	r4,r2,16
   2d740:	39ffffcc 	andi	r7,r7,65535
   2d744:	e4b9883a 	add	fp,fp,r18
   2d748:	21cf883a 	add	r7,r4,r7
   2d74c:	e4e7803a 	cmpltu	r19,fp,r19
   2d750:	3d0f883a 	add	r7,r7,r20
   2d754:	bf39883a 	add	fp,r23,fp
   2d758:	99c9883a 	add	r4,r19,r7
   2d75c:	e5ef803a 	cmpltu	r23,fp,r23
   2d760:	490b883a 	add	r5,r9,r4
   2d764:	1004d43a 	srli	r2,r2,16
   2d768:	b965883a 	add	r18,r23,r5
   2d76c:	24c9803a 	cmpltu	r4,r4,r19
   2d770:	3d29803a 	cmpltu	r20,r7,r20
   2d774:	a128b03a 	or	r20,r20,r4
   2d778:	95ef803a 	cmpltu	r23,r18,r23
   2d77c:	2a53803a 	cmpltu	r9,r5,r9
   2d780:	a0a9883a 	add	r20,r20,r2
   2d784:	4deeb03a 	or	r23,r9,r23
   2d788:	a5ef883a 	add	r23,r20,r23
   2d78c:	bc63883a 	add	r17,r23,r17
   2d790:	e004927a 	slli	r2,fp,9
   2d794:	d9000117 	ldw	r4,4(sp)
   2d798:	882e927a 	slli	r23,r17,9
   2d79c:	9022d5fa 	srli	r17,r18,23
   2d7a0:	e038d5fa 	srli	fp,fp,23
   2d7a4:	1104b03a 	or	r2,r2,r4
   2d7a8:	9024927a 	slli	r18,r18,9
   2d7ac:	1004c03a 	cmpne	r2,r2,zero
   2d7b0:	bc62b03a 	or	r17,r23,r17
   2d7b4:	1738b03a 	or	fp,r2,fp
   2d7b8:	8880402c 	andhi	r2,r17,256
   2d7bc:	e4a4b03a 	or	r18,fp,r18
   2d7c0:	10000726 	beq	r2,zero,2d7e0 <__muldf3+0x628>
   2d7c4:	9006d07a 	srli	r3,r18,1
   2d7c8:	880497fa 	slli	r2,r17,31
   2d7cc:	9480004c 	andi	r18,r18,1
   2d7d0:	8822d07a 	srli	r17,r17,1
   2d7d4:	1ca4b03a 	or	r18,r3,r18
   2d7d8:	14a4b03a 	or	r18,r2,r18
   2d7dc:	4007883a 	mov	r3,r8
   2d7e0:	1880ffc4 	addi	r2,r3,1023
   2d7e4:	0080460e 	bge	zero,r2,2d900 <__muldf3+0x748>
   2d7e8:	910001cc 	andi	r4,r18,7
   2d7ec:	20000726 	beq	r4,zero,2d80c <__muldf3+0x654>
   2d7f0:	910003cc 	andi	r4,r18,15
   2d7f4:	01400104 	movi	r5,4
   2d7f8:	21400426 	beq	r4,r5,2d80c <__muldf3+0x654>
   2d7fc:	9149883a 	add	r4,r18,r5
   2d800:	24a5803a 	cmpltu	r18,r4,r18
   2d804:	8ca3883a 	add	r17,r17,r18
   2d808:	2025883a 	mov	r18,r4
   2d80c:	8900402c 	andhi	r4,r17,256
   2d810:	20000426 	beq	r4,zero,2d824 <__muldf3+0x66c>
   2d814:	18810004 	addi	r2,r3,1024
   2d818:	00ffc034 	movhi	r3,65280
   2d81c:	18ffffc4 	addi	r3,r3,-1
   2d820:	88e2703a 	and	r17,r17,r3
   2d824:	00c1ff84 	movi	r3,2046
   2d828:	18bf1316 	blt	r3,r2,2d478 <_gp+0xffff2438>
   2d82c:	882c977a 	slli	r22,r17,29
   2d830:	9024d0fa 	srli	r18,r18,3
   2d834:	8822927a 	slli	r17,r17,9
   2d838:	1081ffcc 	andi	r2,r2,2047
   2d83c:	b4acb03a 	or	r22,r22,r18
   2d840:	8820d33a 	srli	r16,r17,12
   2d844:	3027883a 	mov	r19,r6
   2d848:	003eba06 	br	2d334 <_gp+0xffff22f4>
   2d84c:	8080022c 	andhi	r2,r16,8
   2d850:	10000926 	beq	r2,zero,2d878 <__muldf3+0x6c0>
   2d854:	8880022c 	andhi	r2,r17,8
   2d858:	1000071e 	bne	r2,zero,2d878 <__muldf3+0x6c0>
   2d85c:	00800434 	movhi	r2,16
   2d860:	8c000234 	orhi	r16,r17,8
   2d864:	10bfffc4 	addi	r2,r2,-1
   2d868:	e027883a 	mov	r19,fp
   2d86c:	80a0703a 	and	r16,r16,r2
   2d870:	902d883a 	mov	r22,r18
   2d874:	003f1706 	br	2d4d4 <_gp+0xffff2494>
   2d878:	00800434 	movhi	r2,16
   2d87c:	84000234 	orhi	r16,r16,8
   2d880:	10bfffc4 	addi	r2,r2,-1
   2d884:	80a0703a 	and	r16,r16,r2
   2d888:	003f1206 	br	2d4d4 <_gp+0xffff2494>
   2d88c:	147ff604 	addi	r17,r2,-40
   2d890:	3462983a 	sll	r17,r6,r17
   2d894:	0025883a 	mov	r18,zero
   2d898:	003ef306 	br	2d468 <_gp+0xffff2428>
   2d89c:	3009883a 	mov	r4,r6
   2d8a0:	d9400215 	stw	r5,8(sp)
   2d8a4:	d9800715 	stw	r6,28(sp)
   2d8a8:	da400415 	stw	r9,16(sp)
   2d8ac:	da800315 	stw	r10,12(sp)
   2d8b0:	002e7340 	call	2e734 <__clzsi2>
   2d8b4:	10800804 	addi	r2,r2,32
   2d8b8:	da800317 	ldw	r10,12(sp)
   2d8bc:	da400417 	ldw	r9,16(sp)
   2d8c0:	d9800717 	ldw	r6,28(sp)
   2d8c4:	d9400217 	ldw	r5,8(sp)
   2d8c8:	003edd06 	br	2d440 <_gp+0xffff2400>
   2d8cc:	143ff604 	addi	r16,r2,-40
   2d8d0:	ac20983a 	sll	r16,r21,r16
   2d8d4:	002d883a 	mov	r22,zero
   2d8d8:	003ec106 	br	2d3e0 <_gp+0xffff23a0>
   2d8dc:	d9800715 	stw	r6,28(sp)
   2d8e0:	d9c00215 	stw	r7,8(sp)
   2d8e4:	da400415 	stw	r9,16(sp)
   2d8e8:	002e7340 	call	2e734 <__clzsi2>
   2d8ec:	10800804 	addi	r2,r2,32
   2d8f0:	da400417 	ldw	r9,16(sp)
   2d8f4:	d9c00217 	ldw	r7,8(sp)
   2d8f8:	d9800717 	ldw	r6,28(sp)
   2d8fc:	003eae06 	br	2d3b8 <_gp+0xffff2378>
   2d900:	00c00044 	movi	r3,1
   2d904:	1887c83a 	sub	r3,r3,r2
   2d908:	01000e04 	movi	r4,56
   2d90c:	20fe8516 	blt	r4,r3,2d324 <_gp+0xffff22e4>
   2d910:	010007c4 	movi	r4,31
   2d914:	20c01b16 	blt	r4,r3,2d984 <__muldf3+0x7cc>
   2d918:	00800804 	movi	r2,32
   2d91c:	10c5c83a 	sub	r2,r2,r3
   2d920:	888a983a 	sll	r5,r17,r2
   2d924:	90c8d83a 	srl	r4,r18,r3
   2d928:	9084983a 	sll	r2,r18,r2
   2d92c:	88e2d83a 	srl	r17,r17,r3
   2d930:	2906b03a 	or	r3,r5,r4
   2d934:	1004c03a 	cmpne	r2,r2,zero
   2d938:	1886b03a 	or	r3,r3,r2
   2d93c:	188001cc 	andi	r2,r3,7
   2d940:	10000726 	beq	r2,zero,2d960 <__muldf3+0x7a8>
   2d944:	188003cc 	andi	r2,r3,15
   2d948:	01000104 	movi	r4,4
   2d94c:	11000426 	beq	r2,r4,2d960 <__muldf3+0x7a8>
   2d950:	1805883a 	mov	r2,r3
   2d954:	10c00104 	addi	r3,r2,4
   2d958:	1885803a 	cmpltu	r2,r3,r2
   2d95c:	88a3883a 	add	r17,r17,r2
   2d960:	8880202c 	andhi	r2,r17,128
   2d964:	10001c26 	beq	r2,zero,2d9d8 <__muldf3+0x820>
   2d968:	3027883a 	mov	r19,r6
   2d96c:	00800044 	movi	r2,1
   2d970:	0021883a 	mov	r16,zero
   2d974:	002d883a 	mov	r22,zero
   2d978:	003e6e06 	br	2d334 <_gp+0xffff22f4>
   2d97c:	4007883a 	mov	r3,r8
   2d980:	003f9706 	br	2d7e0 <_gp+0xffff27a0>
   2d984:	017ff844 	movi	r5,-31
   2d988:	2885c83a 	sub	r2,r5,r2
   2d98c:	888ad83a 	srl	r5,r17,r2
   2d990:	00800804 	movi	r2,32
   2d994:	18801a26 	beq	r3,r2,2da00 <__muldf3+0x848>
   2d998:	01001004 	movi	r4,64
   2d99c:	20c7c83a 	sub	r3,r4,r3
   2d9a0:	88e2983a 	sll	r17,r17,r3
   2d9a4:	8ca4b03a 	or	r18,r17,r18
   2d9a8:	9004c03a 	cmpne	r2,r18,zero
   2d9ac:	2884b03a 	or	r2,r5,r2
   2d9b0:	144001cc 	andi	r17,r2,7
   2d9b4:	88000d1e 	bne	r17,zero,2d9ec <__muldf3+0x834>
   2d9b8:	0021883a 	mov	r16,zero
   2d9bc:	102cd0fa 	srli	r22,r2,3
   2d9c0:	3027883a 	mov	r19,r6
   2d9c4:	0005883a 	mov	r2,zero
   2d9c8:	b46cb03a 	or	r22,r22,r17
   2d9cc:	003e5906 	br	2d334 <_gp+0xffff22f4>
   2d9d0:	1007883a 	mov	r3,r2
   2d9d4:	0023883a 	mov	r17,zero
   2d9d8:	8820927a 	slli	r16,r17,9
   2d9dc:	1805883a 	mov	r2,r3
   2d9e0:	8822977a 	slli	r17,r17,29
   2d9e4:	8020d33a 	srli	r16,r16,12
   2d9e8:	003ff406 	br	2d9bc <_gp+0xffff297c>
   2d9ec:	10c003cc 	andi	r3,r2,15
   2d9f0:	01000104 	movi	r4,4
   2d9f4:	193ff626 	beq	r3,r4,2d9d0 <_gp+0xffff2990>
   2d9f8:	0023883a 	mov	r17,zero
   2d9fc:	003fd506 	br	2d954 <_gp+0xffff2914>
   2da00:	0023883a 	mov	r17,zero
   2da04:	003fe706 	br	2d9a4 <_gp+0xffff2964>
   2da08:	00800434 	movhi	r2,16
   2da0c:	8c000234 	orhi	r16,r17,8
   2da10:	10bfffc4 	addi	r2,r2,-1
   2da14:	3027883a 	mov	r19,r6
   2da18:	80a0703a 	and	r16,r16,r2
   2da1c:	902d883a 	mov	r22,r18
   2da20:	003eac06 	br	2d4d4 <_gp+0xffff2494>

0002da24 <__subdf3>:
   2da24:	02000434 	movhi	r8,16
   2da28:	423fffc4 	addi	r8,r8,-1
   2da2c:	defffb04 	addi	sp,sp,-20
   2da30:	2a14703a 	and	r10,r5,r8
   2da34:	3812d53a 	srli	r9,r7,20
   2da38:	3a10703a 	and	r8,r7,r8
   2da3c:	2006d77a 	srli	r3,r4,29
   2da40:	3004d77a 	srli	r2,r6,29
   2da44:	dc000015 	stw	r16,0(sp)
   2da48:	501490fa 	slli	r10,r10,3
   2da4c:	2820d53a 	srli	r16,r5,20
   2da50:	401090fa 	slli	r8,r8,3
   2da54:	dc800215 	stw	r18,8(sp)
   2da58:	dc400115 	stw	r17,4(sp)
   2da5c:	dfc00415 	stw	ra,16(sp)
   2da60:	202290fa 	slli	r17,r4,3
   2da64:	dcc00315 	stw	r19,12(sp)
   2da68:	4a41ffcc 	andi	r9,r9,2047
   2da6c:	0101ffc4 	movi	r4,2047
   2da70:	2824d7fa 	srli	r18,r5,31
   2da74:	8401ffcc 	andi	r16,r16,2047
   2da78:	50c6b03a 	or	r3,r10,r3
   2da7c:	380ed7fa 	srli	r7,r7,31
   2da80:	408ab03a 	or	r5,r8,r2
   2da84:	300c90fa 	slli	r6,r6,3
   2da88:	49009626 	beq	r9,r4,2dce4 <__subdf3+0x2c0>
   2da8c:	39c0005c 	xori	r7,r7,1
   2da90:	8245c83a 	sub	r2,r16,r9
   2da94:	3c807426 	beq	r7,r18,2dc68 <__subdf3+0x244>
   2da98:	0080af0e 	bge	zero,r2,2dd58 <__subdf3+0x334>
   2da9c:	48002a1e 	bne	r9,zero,2db48 <__subdf3+0x124>
   2daa0:	2988b03a 	or	r4,r5,r6
   2daa4:	20009a1e 	bne	r4,zero,2dd10 <__subdf3+0x2ec>
   2daa8:	888001cc 	andi	r2,r17,7
   2daac:	10000726 	beq	r2,zero,2dacc <__subdf3+0xa8>
   2dab0:	888003cc 	andi	r2,r17,15
   2dab4:	01000104 	movi	r4,4
   2dab8:	11000426 	beq	r2,r4,2dacc <__subdf3+0xa8>
   2dabc:	890b883a 	add	r5,r17,r4
   2dac0:	2c63803a 	cmpltu	r17,r5,r17
   2dac4:	1c47883a 	add	r3,r3,r17
   2dac8:	2823883a 	mov	r17,r5
   2dacc:	1880202c 	andhi	r2,r3,128
   2dad0:	10005926 	beq	r2,zero,2dc38 <__subdf3+0x214>
   2dad4:	84000044 	addi	r16,r16,1
   2dad8:	0081ffc4 	movi	r2,2047
   2dadc:	8080be26 	beq	r16,r2,2ddd8 <__subdf3+0x3b4>
   2dae0:	017fe034 	movhi	r5,65408
   2dae4:	297fffc4 	addi	r5,r5,-1
   2dae8:	1946703a 	and	r3,r3,r5
   2daec:	1804977a 	slli	r2,r3,29
   2daf0:	1806927a 	slli	r3,r3,9
   2daf4:	8822d0fa 	srli	r17,r17,3
   2daf8:	8401ffcc 	andi	r16,r16,2047
   2dafc:	180ad33a 	srli	r5,r3,12
   2db00:	9100004c 	andi	r4,r18,1
   2db04:	1444b03a 	or	r2,r2,r17
   2db08:	80c1ffcc 	andi	r3,r16,2047
   2db0c:	1820953a 	slli	r16,r3,20
   2db10:	20c03fcc 	andi	r3,r4,255
   2db14:	180897fa 	slli	r4,r3,31
   2db18:	00c00434 	movhi	r3,16
   2db1c:	18ffffc4 	addi	r3,r3,-1
   2db20:	28c6703a 	and	r3,r5,r3
   2db24:	1c06b03a 	or	r3,r3,r16
   2db28:	1906b03a 	or	r3,r3,r4
   2db2c:	dfc00417 	ldw	ra,16(sp)
   2db30:	dcc00317 	ldw	r19,12(sp)
   2db34:	dc800217 	ldw	r18,8(sp)
   2db38:	dc400117 	ldw	r17,4(sp)
   2db3c:	dc000017 	ldw	r16,0(sp)
   2db40:	dec00504 	addi	sp,sp,20
   2db44:	f800283a 	ret
   2db48:	0101ffc4 	movi	r4,2047
   2db4c:	813fd626 	beq	r16,r4,2daa8 <_gp+0xffff2a68>
   2db50:	29402034 	orhi	r5,r5,128
   2db54:	01000e04 	movi	r4,56
   2db58:	2080a316 	blt	r4,r2,2dde8 <__subdf3+0x3c4>
   2db5c:	010007c4 	movi	r4,31
   2db60:	2080c616 	blt	r4,r2,2de7c <__subdf3+0x458>
   2db64:	01000804 	movi	r4,32
   2db68:	2089c83a 	sub	r4,r4,r2
   2db6c:	2910983a 	sll	r8,r5,r4
   2db70:	308ed83a 	srl	r7,r6,r2
   2db74:	3108983a 	sll	r4,r6,r4
   2db78:	2884d83a 	srl	r2,r5,r2
   2db7c:	41ccb03a 	or	r6,r8,r7
   2db80:	2008c03a 	cmpne	r4,r4,zero
   2db84:	310cb03a 	or	r6,r6,r4
   2db88:	898dc83a 	sub	r6,r17,r6
   2db8c:	89a3803a 	cmpltu	r17,r17,r6
   2db90:	1887c83a 	sub	r3,r3,r2
   2db94:	1c47c83a 	sub	r3,r3,r17
   2db98:	3023883a 	mov	r17,r6
   2db9c:	1880202c 	andhi	r2,r3,128
   2dba0:	10002326 	beq	r2,zero,2dc30 <__subdf3+0x20c>
   2dba4:	04c02034 	movhi	r19,128
   2dba8:	9cffffc4 	addi	r19,r19,-1
   2dbac:	1ce6703a 	and	r19,r3,r19
   2dbb0:	98007a26 	beq	r19,zero,2dd9c <__subdf3+0x378>
   2dbb4:	9809883a 	mov	r4,r19
   2dbb8:	002e7340 	call	2e734 <__clzsi2>
   2dbbc:	113ffe04 	addi	r4,r2,-8
   2dbc0:	00c007c4 	movi	r3,31
   2dbc4:	19007b16 	blt	r3,r4,2ddb4 <__subdf3+0x390>
   2dbc8:	00800804 	movi	r2,32
   2dbcc:	1105c83a 	sub	r2,r2,r4
   2dbd0:	8884d83a 	srl	r2,r17,r2
   2dbd4:	9906983a 	sll	r3,r19,r4
   2dbd8:	8922983a 	sll	r17,r17,r4
   2dbdc:	10c4b03a 	or	r2,r2,r3
   2dbe0:	24007816 	blt	r4,r16,2ddc4 <__subdf3+0x3a0>
   2dbe4:	2421c83a 	sub	r16,r4,r16
   2dbe8:	80c00044 	addi	r3,r16,1
   2dbec:	010007c4 	movi	r4,31
   2dbf0:	20c09516 	blt	r4,r3,2de48 <__subdf3+0x424>
   2dbf4:	01400804 	movi	r5,32
   2dbf8:	28cbc83a 	sub	r5,r5,r3
   2dbfc:	88c8d83a 	srl	r4,r17,r3
   2dc00:	8962983a 	sll	r17,r17,r5
   2dc04:	114a983a 	sll	r5,r2,r5
   2dc08:	10c6d83a 	srl	r3,r2,r3
   2dc0c:	8804c03a 	cmpne	r2,r17,zero
   2dc10:	290ab03a 	or	r5,r5,r4
   2dc14:	28a2b03a 	or	r17,r5,r2
   2dc18:	0021883a 	mov	r16,zero
   2dc1c:	003fa206 	br	2daa8 <_gp+0xffff2a68>
   2dc20:	2090b03a 	or	r8,r4,r2
   2dc24:	40018e26 	beq	r8,zero,2e260 <__subdf3+0x83c>
   2dc28:	1007883a 	mov	r3,r2
   2dc2c:	2023883a 	mov	r17,r4
   2dc30:	888001cc 	andi	r2,r17,7
   2dc34:	103f9e1e 	bne	r2,zero,2dab0 <_gp+0xffff2a70>
   2dc38:	1804977a 	slli	r2,r3,29
   2dc3c:	8822d0fa 	srli	r17,r17,3
   2dc40:	1810d0fa 	srli	r8,r3,3
   2dc44:	9100004c 	andi	r4,r18,1
   2dc48:	1444b03a 	or	r2,r2,r17
   2dc4c:	00c1ffc4 	movi	r3,2047
   2dc50:	80c02826 	beq	r16,r3,2dcf4 <__subdf3+0x2d0>
   2dc54:	01400434 	movhi	r5,16
   2dc58:	297fffc4 	addi	r5,r5,-1
   2dc5c:	80e0703a 	and	r16,r16,r3
   2dc60:	414a703a 	and	r5,r8,r5
   2dc64:	003fa806 	br	2db08 <_gp+0xffff2ac8>
   2dc68:	0080630e 	bge	zero,r2,2ddf8 <__subdf3+0x3d4>
   2dc6c:	48003026 	beq	r9,zero,2dd30 <__subdf3+0x30c>
   2dc70:	0101ffc4 	movi	r4,2047
   2dc74:	813f8c26 	beq	r16,r4,2daa8 <_gp+0xffff2a68>
   2dc78:	29402034 	orhi	r5,r5,128
   2dc7c:	01000e04 	movi	r4,56
   2dc80:	2080a90e 	bge	r4,r2,2df28 <__subdf3+0x504>
   2dc84:	298cb03a 	or	r6,r5,r6
   2dc88:	3012c03a 	cmpne	r9,r6,zero
   2dc8c:	0005883a 	mov	r2,zero
   2dc90:	4c53883a 	add	r9,r9,r17
   2dc94:	4c63803a 	cmpltu	r17,r9,r17
   2dc98:	10c7883a 	add	r3,r2,r3
   2dc9c:	88c7883a 	add	r3,r17,r3
   2dca0:	4823883a 	mov	r17,r9
   2dca4:	1880202c 	andhi	r2,r3,128
   2dca8:	1000d026 	beq	r2,zero,2dfec <__subdf3+0x5c8>
   2dcac:	84000044 	addi	r16,r16,1
   2dcb0:	0081ffc4 	movi	r2,2047
   2dcb4:	8080fe26 	beq	r16,r2,2e0b0 <__subdf3+0x68c>
   2dcb8:	00bfe034 	movhi	r2,65408
   2dcbc:	10bfffc4 	addi	r2,r2,-1
   2dcc0:	1886703a 	and	r3,r3,r2
   2dcc4:	880ad07a 	srli	r5,r17,1
   2dcc8:	180497fa 	slli	r2,r3,31
   2dccc:	8900004c 	andi	r4,r17,1
   2dcd0:	2922b03a 	or	r17,r5,r4
   2dcd4:	1806d07a 	srli	r3,r3,1
   2dcd8:	1462b03a 	or	r17,r2,r17
   2dcdc:	3825883a 	mov	r18,r7
   2dce0:	003f7106 	br	2daa8 <_gp+0xffff2a68>
   2dce4:	2984b03a 	or	r2,r5,r6
   2dce8:	103f6826 	beq	r2,zero,2da8c <_gp+0xffff2a4c>
   2dcec:	39c03fcc 	andi	r7,r7,255
   2dcf0:	003f6706 	br	2da90 <_gp+0xffff2a50>
   2dcf4:	4086b03a 	or	r3,r8,r2
   2dcf8:	18015226 	beq	r3,zero,2e244 <__subdf3+0x820>
   2dcfc:	00c00434 	movhi	r3,16
   2dd00:	41400234 	orhi	r5,r8,8
   2dd04:	18ffffc4 	addi	r3,r3,-1
   2dd08:	28ca703a 	and	r5,r5,r3
   2dd0c:	003f7e06 	br	2db08 <_gp+0xffff2ac8>
   2dd10:	10bfffc4 	addi	r2,r2,-1
   2dd14:	1000491e 	bne	r2,zero,2de3c <__subdf3+0x418>
   2dd18:	898fc83a 	sub	r7,r17,r6
   2dd1c:	89e3803a 	cmpltu	r17,r17,r7
   2dd20:	1947c83a 	sub	r3,r3,r5
   2dd24:	1c47c83a 	sub	r3,r3,r17
   2dd28:	3823883a 	mov	r17,r7
   2dd2c:	003f9b06 	br	2db9c <_gp+0xffff2b5c>
   2dd30:	2988b03a 	or	r4,r5,r6
   2dd34:	203f5c26 	beq	r4,zero,2daa8 <_gp+0xffff2a68>
   2dd38:	10bfffc4 	addi	r2,r2,-1
   2dd3c:	1000931e 	bne	r2,zero,2df8c <__subdf3+0x568>
   2dd40:	898d883a 	add	r6,r17,r6
   2dd44:	3463803a 	cmpltu	r17,r6,r17
   2dd48:	1947883a 	add	r3,r3,r5
   2dd4c:	88c7883a 	add	r3,r17,r3
   2dd50:	3023883a 	mov	r17,r6
   2dd54:	003fd306 	br	2dca4 <_gp+0xffff2c64>
   2dd58:	1000541e 	bne	r2,zero,2deac <__subdf3+0x488>
   2dd5c:	80800044 	addi	r2,r16,1
   2dd60:	1081ffcc 	andi	r2,r2,2047
   2dd64:	01000044 	movi	r4,1
   2dd68:	2080a20e 	bge	r4,r2,2dff4 <__subdf3+0x5d0>
   2dd6c:	8989c83a 	sub	r4,r17,r6
   2dd70:	8905803a 	cmpltu	r2,r17,r4
   2dd74:	1967c83a 	sub	r19,r3,r5
   2dd78:	98a7c83a 	sub	r19,r19,r2
   2dd7c:	9880202c 	andhi	r2,r19,128
   2dd80:	10006326 	beq	r2,zero,2df10 <__subdf3+0x4ec>
   2dd84:	3463c83a 	sub	r17,r6,r17
   2dd88:	28c7c83a 	sub	r3,r5,r3
   2dd8c:	344d803a 	cmpltu	r6,r6,r17
   2dd90:	19a7c83a 	sub	r19,r3,r6
   2dd94:	3825883a 	mov	r18,r7
   2dd98:	983f861e 	bne	r19,zero,2dbb4 <_gp+0xffff2b74>
   2dd9c:	8809883a 	mov	r4,r17
   2dda0:	002e7340 	call	2e734 <__clzsi2>
   2dda4:	10800804 	addi	r2,r2,32
   2dda8:	113ffe04 	addi	r4,r2,-8
   2ddac:	00c007c4 	movi	r3,31
   2ddb0:	193f850e 	bge	r3,r4,2dbc8 <_gp+0xffff2b88>
   2ddb4:	10bff604 	addi	r2,r2,-40
   2ddb8:	8884983a 	sll	r2,r17,r2
   2ddbc:	0023883a 	mov	r17,zero
   2ddc0:	243f880e 	bge	r4,r16,2dbe4 <_gp+0xffff2ba4>
   2ddc4:	00ffe034 	movhi	r3,65408
   2ddc8:	18ffffc4 	addi	r3,r3,-1
   2ddcc:	8121c83a 	sub	r16,r16,r4
   2ddd0:	10c6703a 	and	r3,r2,r3
   2ddd4:	003f3406 	br	2daa8 <_gp+0xffff2a68>
   2ddd8:	9100004c 	andi	r4,r18,1
   2dddc:	000b883a 	mov	r5,zero
   2dde0:	0005883a 	mov	r2,zero
   2dde4:	003f4806 	br	2db08 <_gp+0xffff2ac8>
   2dde8:	298cb03a 	or	r6,r5,r6
   2ddec:	300cc03a 	cmpne	r6,r6,zero
   2ddf0:	0005883a 	mov	r2,zero
   2ddf4:	003f6406 	br	2db88 <_gp+0xffff2b48>
   2ddf8:	10009a1e 	bne	r2,zero,2e064 <__subdf3+0x640>
   2ddfc:	82400044 	addi	r9,r16,1
   2de00:	4881ffcc 	andi	r2,r9,2047
   2de04:	02800044 	movi	r10,1
   2de08:	5080670e 	bge	r10,r2,2dfa8 <__subdf3+0x584>
   2de0c:	0081ffc4 	movi	r2,2047
   2de10:	4880af26 	beq	r9,r2,2e0d0 <__subdf3+0x6ac>
   2de14:	898d883a 	add	r6,r17,r6
   2de18:	1945883a 	add	r2,r3,r5
   2de1c:	3447803a 	cmpltu	r3,r6,r17
   2de20:	1887883a 	add	r3,r3,r2
   2de24:	182297fa 	slli	r17,r3,31
   2de28:	300cd07a 	srli	r6,r6,1
   2de2c:	1806d07a 	srli	r3,r3,1
   2de30:	4821883a 	mov	r16,r9
   2de34:	89a2b03a 	or	r17,r17,r6
   2de38:	003f1b06 	br	2daa8 <_gp+0xffff2a68>
   2de3c:	0101ffc4 	movi	r4,2047
   2de40:	813f441e 	bne	r16,r4,2db54 <_gp+0xffff2b14>
   2de44:	003f1806 	br	2daa8 <_gp+0xffff2a68>
   2de48:	843ff844 	addi	r16,r16,-31
   2de4c:	01400804 	movi	r5,32
   2de50:	1408d83a 	srl	r4,r2,r16
   2de54:	19405026 	beq	r3,r5,2df98 <__subdf3+0x574>
   2de58:	01401004 	movi	r5,64
   2de5c:	28c7c83a 	sub	r3,r5,r3
   2de60:	10c4983a 	sll	r2,r2,r3
   2de64:	88a2b03a 	or	r17,r17,r2
   2de68:	8822c03a 	cmpne	r17,r17,zero
   2de6c:	2462b03a 	or	r17,r4,r17
   2de70:	0007883a 	mov	r3,zero
   2de74:	0021883a 	mov	r16,zero
   2de78:	003f6d06 	br	2dc30 <_gp+0xffff2bf0>
   2de7c:	11fff804 	addi	r7,r2,-32
   2de80:	01000804 	movi	r4,32
   2de84:	29ced83a 	srl	r7,r5,r7
   2de88:	11004526 	beq	r2,r4,2dfa0 <__subdf3+0x57c>
   2de8c:	01001004 	movi	r4,64
   2de90:	2089c83a 	sub	r4,r4,r2
   2de94:	2904983a 	sll	r2,r5,r4
   2de98:	118cb03a 	or	r6,r2,r6
   2de9c:	300cc03a 	cmpne	r6,r6,zero
   2dea0:	398cb03a 	or	r6,r7,r6
   2dea4:	0005883a 	mov	r2,zero
   2dea8:	003f3706 	br	2db88 <_gp+0xffff2b48>
   2deac:	80002a26 	beq	r16,zero,2df58 <__subdf3+0x534>
   2deb0:	0101ffc4 	movi	r4,2047
   2deb4:	49006626 	beq	r9,r4,2e050 <__subdf3+0x62c>
   2deb8:	0085c83a 	sub	r2,zero,r2
   2debc:	18c02034 	orhi	r3,r3,128
   2dec0:	01000e04 	movi	r4,56
   2dec4:	20807e16 	blt	r4,r2,2e0c0 <__subdf3+0x69c>
   2dec8:	010007c4 	movi	r4,31
   2decc:	2080e716 	blt	r4,r2,2e26c <__subdf3+0x848>
   2ded0:	01000804 	movi	r4,32
   2ded4:	2089c83a 	sub	r4,r4,r2
   2ded8:	1914983a 	sll	r10,r3,r4
   2dedc:	8890d83a 	srl	r8,r17,r2
   2dee0:	8908983a 	sll	r4,r17,r4
   2dee4:	1884d83a 	srl	r2,r3,r2
   2dee8:	5222b03a 	or	r17,r10,r8
   2deec:	2006c03a 	cmpne	r3,r4,zero
   2def0:	88e2b03a 	or	r17,r17,r3
   2def4:	3463c83a 	sub	r17,r6,r17
   2def8:	2885c83a 	sub	r2,r5,r2
   2defc:	344d803a 	cmpltu	r6,r6,r17
   2df00:	1187c83a 	sub	r3,r2,r6
   2df04:	4821883a 	mov	r16,r9
   2df08:	3825883a 	mov	r18,r7
   2df0c:	003f2306 	br	2db9c <_gp+0xffff2b5c>
   2df10:	24d0b03a 	or	r8,r4,r19
   2df14:	40001b1e 	bne	r8,zero,2df84 <__subdf3+0x560>
   2df18:	0005883a 	mov	r2,zero
   2df1c:	0009883a 	mov	r4,zero
   2df20:	0021883a 	mov	r16,zero
   2df24:	003f4906 	br	2dc4c <_gp+0xffff2c0c>
   2df28:	010007c4 	movi	r4,31
   2df2c:	20803a16 	blt	r4,r2,2e018 <__subdf3+0x5f4>
   2df30:	01000804 	movi	r4,32
   2df34:	2089c83a 	sub	r4,r4,r2
   2df38:	2912983a 	sll	r9,r5,r4
   2df3c:	3090d83a 	srl	r8,r6,r2
   2df40:	3108983a 	sll	r4,r6,r4
   2df44:	2884d83a 	srl	r2,r5,r2
   2df48:	4a12b03a 	or	r9,r9,r8
   2df4c:	2008c03a 	cmpne	r4,r4,zero
   2df50:	4912b03a 	or	r9,r9,r4
   2df54:	003f4e06 	br	2dc90 <_gp+0xffff2c50>
   2df58:	1c48b03a 	or	r4,r3,r17
   2df5c:	20003c26 	beq	r4,zero,2e050 <__subdf3+0x62c>
   2df60:	0084303a 	nor	r2,zero,r2
   2df64:	1000381e 	bne	r2,zero,2e048 <__subdf3+0x624>
   2df68:	3463c83a 	sub	r17,r6,r17
   2df6c:	28c5c83a 	sub	r2,r5,r3
   2df70:	344d803a 	cmpltu	r6,r6,r17
   2df74:	1187c83a 	sub	r3,r2,r6
   2df78:	4821883a 	mov	r16,r9
   2df7c:	3825883a 	mov	r18,r7
   2df80:	003f0606 	br	2db9c <_gp+0xffff2b5c>
   2df84:	2023883a 	mov	r17,r4
   2df88:	003f0906 	br	2dbb0 <_gp+0xffff2b70>
   2df8c:	0101ffc4 	movi	r4,2047
   2df90:	813f3a1e 	bne	r16,r4,2dc7c <_gp+0xffff2c3c>
   2df94:	003ec406 	br	2daa8 <_gp+0xffff2a68>
   2df98:	0005883a 	mov	r2,zero
   2df9c:	003fb106 	br	2de64 <_gp+0xffff2e24>
   2dfa0:	0005883a 	mov	r2,zero
   2dfa4:	003fbc06 	br	2de98 <_gp+0xffff2e58>
   2dfa8:	1c44b03a 	or	r2,r3,r17
   2dfac:	80008e1e 	bne	r16,zero,2e1e8 <__subdf3+0x7c4>
   2dfb0:	1000c826 	beq	r2,zero,2e2d4 <__subdf3+0x8b0>
   2dfb4:	2984b03a 	or	r2,r5,r6
   2dfb8:	103ebb26 	beq	r2,zero,2daa8 <_gp+0xffff2a68>
   2dfbc:	8989883a 	add	r4,r17,r6
   2dfc0:	1945883a 	add	r2,r3,r5
   2dfc4:	2447803a 	cmpltu	r3,r4,r17
   2dfc8:	1887883a 	add	r3,r3,r2
   2dfcc:	1880202c 	andhi	r2,r3,128
   2dfd0:	2023883a 	mov	r17,r4
   2dfd4:	103f1626 	beq	r2,zero,2dc30 <_gp+0xffff2bf0>
   2dfd8:	00bfe034 	movhi	r2,65408
   2dfdc:	10bfffc4 	addi	r2,r2,-1
   2dfe0:	5021883a 	mov	r16,r10
   2dfe4:	1886703a 	and	r3,r3,r2
   2dfe8:	003eaf06 	br	2daa8 <_gp+0xffff2a68>
   2dfec:	3825883a 	mov	r18,r7
   2dff0:	003f0f06 	br	2dc30 <_gp+0xffff2bf0>
   2dff4:	1c44b03a 	or	r2,r3,r17
   2dff8:	8000251e 	bne	r16,zero,2e090 <__subdf3+0x66c>
   2dffc:	1000661e 	bne	r2,zero,2e198 <__subdf3+0x774>
   2e000:	2990b03a 	or	r8,r5,r6
   2e004:	40009626 	beq	r8,zero,2e260 <__subdf3+0x83c>
   2e008:	2807883a 	mov	r3,r5
   2e00c:	3023883a 	mov	r17,r6
   2e010:	3825883a 	mov	r18,r7
   2e014:	003ea406 	br	2daa8 <_gp+0xffff2a68>
   2e018:	127ff804 	addi	r9,r2,-32
   2e01c:	01000804 	movi	r4,32
   2e020:	2a52d83a 	srl	r9,r5,r9
   2e024:	11008c26 	beq	r2,r4,2e258 <__subdf3+0x834>
   2e028:	01001004 	movi	r4,64
   2e02c:	2085c83a 	sub	r2,r4,r2
   2e030:	2884983a 	sll	r2,r5,r2
   2e034:	118cb03a 	or	r6,r2,r6
   2e038:	300cc03a 	cmpne	r6,r6,zero
   2e03c:	4992b03a 	or	r9,r9,r6
   2e040:	0005883a 	mov	r2,zero
   2e044:	003f1206 	br	2dc90 <_gp+0xffff2c50>
   2e048:	0101ffc4 	movi	r4,2047
   2e04c:	493f9c1e 	bne	r9,r4,2dec0 <_gp+0xffff2e80>
   2e050:	2807883a 	mov	r3,r5
   2e054:	3023883a 	mov	r17,r6
   2e058:	4821883a 	mov	r16,r9
   2e05c:	3825883a 	mov	r18,r7
   2e060:	003e9106 	br	2daa8 <_gp+0xffff2a68>
   2e064:	80001f1e 	bne	r16,zero,2e0e4 <__subdf3+0x6c0>
   2e068:	1c48b03a 	or	r4,r3,r17
   2e06c:	20005a26 	beq	r4,zero,2e1d8 <__subdf3+0x7b4>
   2e070:	0084303a 	nor	r2,zero,r2
   2e074:	1000561e 	bne	r2,zero,2e1d0 <__subdf3+0x7ac>
   2e078:	89a3883a 	add	r17,r17,r6
   2e07c:	1945883a 	add	r2,r3,r5
   2e080:	898d803a 	cmpltu	r6,r17,r6
   2e084:	3087883a 	add	r3,r6,r2
   2e088:	4821883a 	mov	r16,r9
   2e08c:	003f0506 	br	2dca4 <_gp+0xffff2c64>
   2e090:	10002b1e 	bne	r2,zero,2e140 <__subdf3+0x71c>
   2e094:	2984b03a 	or	r2,r5,r6
   2e098:	10008026 	beq	r2,zero,2e29c <__subdf3+0x878>
   2e09c:	2807883a 	mov	r3,r5
   2e0a0:	3023883a 	mov	r17,r6
   2e0a4:	3825883a 	mov	r18,r7
   2e0a8:	0401ffc4 	movi	r16,2047
   2e0ac:	003e7e06 	br	2daa8 <_gp+0xffff2a68>
   2e0b0:	3809883a 	mov	r4,r7
   2e0b4:	0011883a 	mov	r8,zero
   2e0b8:	0005883a 	mov	r2,zero
   2e0bc:	003ee306 	br	2dc4c <_gp+0xffff2c0c>
   2e0c0:	1c62b03a 	or	r17,r3,r17
   2e0c4:	8822c03a 	cmpne	r17,r17,zero
   2e0c8:	0005883a 	mov	r2,zero
   2e0cc:	003f8906 	br	2def4 <_gp+0xffff2eb4>
   2e0d0:	3809883a 	mov	r4,r7
   2e0d4:	4821883a 	mov	r16,r9
   2e0d8:	0011883a 	mov	r8,zero
   2e0dc:	0005883a 	mov	r2,zero
   2e0e0:	003eda06 	br	2dc4c <_gp+0xffff2c0c>
   2e0e4:	0101ffc4 	movi	r4,2047
   2e0e8:	49003b26 	beq	r9,r4,2e1d8 <__subdf3+0x7b4>
   2e0ec:	0085c83a 	sub	r2,zero,r2
   2e0f0:	18c02034 	orhi	r3,r3,128
   2e0f4:	01000e04 	movi	r4,56
   2e0f8:	20806e16 	blt	r4,r2,2e2b4 <__subdf3+0x890>
   2e0fc:	010007c4 	movi	r4,31
   2e100:	20807716 	blt	r4,r2,2e2e0 <__subdf3+0x8bc>
   2e104:	01000804 	movi	r4,32
   2e108:	2089c83a 	sub	r4,r4,r2
   2e10c:	1914983a 	sll	r10,r3,r4
   2e110:	8890d83a 	srl	r8,r17,r2
   2e114:	8908983a 	sll	r4,r17,r4
   2e118:	1884d83a 	srl	r2,r3,r2
   2e11c:	5222b03a 	or	r17,r10,r8
   2e120:	2006c03a 	cmpne	r3,r4,zero
   2e124:	88e2b03a 	or	r17,r17,r3
   2e128:	89a3883a 	add	r17,r17,r6
   2e12c:	1145883a 	add	r2,r2,r5
   2e130:	898d803a 	cmpltu	r6,r17,r6
   2e134:	3087883a 	add	r3,r6,r2
   2e138:	4821883a 	mov	r16,r9
   2e13c:	003ed906 	br	2dca4 <_gp+0xffff2c64>
   2e140:	2984b03a 	or	r2,r5,r6
   2e144:	10004226 	beq	r2,zero,2e250 <__subdf3+0x82c>
   2e148:	1808d0fa 	srli	r4,r3,3
   2e14c:	8822d0fa 	srli	r17,r17,3
   2e150:	1806977a 	slli	r3,r3,29
   2e154:	2080022c 	andhi	r2,r4,8
   2e158:	1c62b03a 	or	r17,r3,r17
   2e15c:	10000826 	beq	r2,zero,2e180 <__subdf3+0x75c>
   2e160:	2812d0fa 	srli	r9,r5,3
   2e164:	4880022c 	andhi	r2,r9,8
   2e168:	1000051e 	bne	r2,zero,2e180 <__subdf3+0x75c>
   2e16c:	300cd0fa 	srli	r6,r6,3
   2e170:	2804977a 	slli	r2,r5,29
   2e174:	4809883a 	mov	r4,r9
   2e178:	3825883a 	mov	r18,r7
   2e17c:	11a2b03a 	or	r17,r2,r6
   2e180:	8806d77a 	srli	r3,r17,29
   2e184:	200890fa 	slli	r4,r4,3
   2e188:	882290fa 	slli	r17,r17,3
   2e18c:	0401ffc4 	movi	r16,2047
   2e190:	1906b03a 	or	r3,r3,r4
   2e194:	003e4406 	br	2daa8 <_gp+0xffff2a68>
   2e198:	2984b03a 	or	r2,r5,r6
   2e19c:	103e4226 	beq	r2,zero,2daa8 <_gp+0xffff2a68>
   2e1a0:	8989c83a 	sub	r4,r17,r6
   2e1a4:	8911803a 	cmpltu	r8,r17,r4
   2e1a8:	1945c83a 	sub	r2,r3,r5
   2e1ac:	1205c83a 	sub	r2,r2,r8
   2e1b0:	1200202c 	andhi	r8,r2,128
   2e1b4:	403e9a26 	beq	r8,zero,2dc20 <_gp+0xffff2be0>
   2e1b8:	3463c83a 	sub	r17,r6,r17
   2e1bc:	28c5c83a 	sub	r2,r5,r3
   2e1c0:	344d803a 	cmpltu	r6,r6,r17
   2e1c4:	1187c83a 	sub	r3,r2,r6
   2e1c8:	3825883a 	mov	r18,r7
   2e1cc:	003e3606 	br	2daa8 <_gp+0xffff2a68>
   2e1d0:	0101ffc4 	movi	r4,2047
   2e1d4:	493fc71e 	bne	r9,r4,2e0f4 <_gp+0xffff30b4>
   2e1d8:	2807883a 	mov	r3,r5
   2e1dc:	3023883a 	mov	r17,r6
   2e1e0:	4821883a 	mov	r16,r9
   2e1e4:	003e3006 	br	2daa8 <_gp+0xffff2a68>
   2e1e8:	10003626 	beq	r2,zero,2e2c4 <__subdf3+0x8a0>
   2e1ec:	2984b03a 	or	r2,r5,r6
   2e1f0:	10001726 	beq	r2,zero,2e250 <__subdf3+0x82c>
   2e1f4:	1808d0fa 	srli	r4,r3,3
   2e1f8:	8822d0fa 	srli	r17,r17,3
   2e1fc:	1806977a 	slli	r3,r3,29
   2e200:	2080022c 	andhi	r2,r4,8
   2e204:	1c62b03a 	or	r17,r3,r17
   2e208:	10000726 	beq	r2,zero,2e228 <__subdf3+0x804>
   2e20c:	2812d0fa 	srli	r9,r5,3
   2e210:	4880022c 	andhi	r2,r9,8
   2e214:	1000041e 	bne	r2,zero,2e228 <__subdf3+0x804>
   2e218:	300cd0fa 	srli	r6,r6,3
   2e21c:	2804977a 	slli	r2,r5,29
   2e220:	4809883a 	mov	r4,r9
   2e224:	11a2b03a 	or	r17,r2,r6
   2e228:	8806d77a 	srli	r3,r17,29
   2e22c:	200890fa 	slli	r4,r4,3
   2e230:	882290fa 	slli	r17,r17,3
   2e234:	3825883a 	mov	r18,r7
   2e238:	1906b03a 	or	r3,r3,r4
   2e23c:	0401ffc4 	movi	r16,2047
   2e240:	003e1906 	br	2daa8 <_gp+0xffff2a68>
   2e244:	000b883a 	mov	r5,zero
   2e248:	0005883a 	mov	r2,zero
   2e24c:	003e2e06 	br	2db08 <_gp+0xffff2ac8>
   2e250:	0401ffc4 	movi	r16,2047
   2e254:	003e1406 	br	2daa8 <_gp+0xffff2a68>
   2e258:	0005883a 	mov	r2,zero
   2e25c:	003f7506 	br	2e034 <_gp+0xffff2ff4>
   2e260:	0005883a 	mov	r2,zero
   2e264:	0009883a 	mov	r4,zero
   2e268:	003e7806 	br	2dc4c <_gp+0xffff2c0c>
   2e26c:	123ff804 	addi	r8,r2,-32
   2e270:	01000804 	movi	r4,32
   2e274:	1a10d83a 	srl	r8,r3,r8
   2e278:	11002526 	beq	r2,r4,2e310 <__subdf3+0x8ec>
   2e27c:	01001004 	movi	r4,64
   2e280:	2085c83a 	sub	r2,r4,r2
   2e284:	1884983a 	sll	r2,r3,r2
   2e288:	1444b03a 	or	r2,r2,r17
   2e28c:	1004c03a 	cmpne	r2,r2,zero
   2e290:	40a2b03a 	or	r17,r8,r2
   2e294:	0005883a 	mov	r2,zero
   2e298:	003f1606 	br	2def4 <_gp+0xffff2eb4>
   2e29c:	02000434 	movhi	r8,16
   2e2a0:	0009883a 	mov	r4,zero
   2e2a4:	423fffc4 	addi	r8,r8,-1
   2e2a8:	00bfffc4 	movi	r2,-1
   2e2ac:	0401ffc4 	movi	r16,2047
   2e2b0:	003e6606 	br	2dc4c <_gp+0xffff2c0c>
   2e2b4:	1c62b03a 	or	r17,r3,r17
   2e2b8:	8822c03a 	cmpne	r17,r17,zero
   2e2bc:	0005883a 	mov	r2,zero
   2e2c0:	003f9906 	br	2e128 <_gp+0xffff30e8>
   2e2c4:	2807883a 	mov	r3,r5
   2e2c8:	3023883a 	mov	r17,r6
   2e2cc:	0401ffc4 	movi	r16,2047
   2e2d0:	003df506 	br	2daa8 <_gp+0xffff2a68>
   2e2d4:	2807883a 	mov	r3,r5
   2e2d8:	3023883a 	mov	r17,r6
   2e2dc:	003df206 	br	2daa8 <_gp+0xffff2a68>
   2e2e0:	123ff804 	addi	r8,r2,-32
   2e2e4:	01000804 	movi	r4,32
   2e2e8:	1a10d83a 	srl	r8,r3,r8
   2e2ec:	11000a26 	beq	r2,r4,2e318 <__subdf3+0x8f4>
   2e2f0:	01001004 	movi	r4,64
   2e2f4:	2085c83a 	sub	r2,r4,r2
   2e2f8:	1884983a 	sll	r2,r3,r2
   2e2fc:	1444b03a 	or	r2,r2,r17
   2e300:	1004c03a 	cmpne	r2,r2,zero
   2e304:	40a2b03a 	or	r17,r8,r2
   2e308:	0005883a 	mov	r2,zero
   2e30c:	003f8606 	br	2e128 <_gp+0xffff30e8>
   2e310:	0005883a 	mov	r2,zero
   2e314:	003fdc06 	br	2e288 <_gp+0xffff3248>
   2e318:	0005883a 	mov	r2,zero
   2e31c:	003ff706 	br	2e2fc <_gp+0xffff32bc>

0002e320 <__fixdfsi>:
   2e320:	280cd53a 	srli	r6,r5,20
   2e324:	00c00434 	movhi	r3,16
   2e328:	18ffffc4 	addi	r3,r3,-1
   2e32c:	3181ffcc 	andi	r6,r6,2047
   2e330:	01c0ff84 	movi	r7,1022
   2e334:	28c6703a 	and	r3,r5,r3
   2e338:	280ad7fa 	srli	r5,r5,31
   2e33c:	3980120e 	bge	r7,r6,2e388 <__fixdfsi+0x68>
   2e340:	00810744 	movi	r2,1053
   2e344:	11800c16 	blt	r2,r6,2e378 <__fixdfsi+0x58>
   2e348:	00810cc4 	movi	r2,1075
   2e34c:	1185c83a 	sub	r2,r2,r6
   2e350:	01c007c4 	movi	r7,31
   2e354:	18c00434 	orhi	r3,r3,16
   2e358:	38800d16 	blt	r7,r2,2e390 <__fixdfsi+0x70>
   2e35c:	31befb44 	addi	r6,r6,-1043
   2e360:	2084d83a 	srl	r2,r4,r2
   2e364:	1986983a 	sll	r3,r3,r6
   2e368:	1884b03a 	or	r2,r3,r2
   2e36c:	28000726 	beq	r5,zero,2e38c <__fixdfsi+0x6c>
   2e370:	0085c83a 	sub	r2,zero,r2
   2e374:	f800283a 	ret
   2e378:	00a00034 	movhi	r2,32768
   2e37c:	10bfffc4 	addi	r2,r2,-1
   2e380:	2885883a 	add	r2,r5,r2
   2e384:	f800283a 	ret
   2e388:	0005883a 	mov	r2,zero
   2e38c:	f800283a 	ret
   2e390:	008104c4 	movi	r2,1043
   2e394:	1185c83a 	sub	r2,r2,r6
   2e398:	1884d83a 	srl	r2,r3,r2
   2e39c:	003ff306 	br	2e36c <_gp+0xffff332c>

0002e3a0 <__floatsidf>:
   2e3a0:	defffd04 	addi	sp,sp,-12
   2e3a4:	dfc00215 	stw	ra,8(sp)
   2e3a8:	dc400115 	stw	r17,4(sp)
   2e3ac:	dc000015 	stw	r16,0(sp)
   2e3b0:	20002b26 	beq	r4,zero,2e460 <__floatsidf+0xc0>
   2e3b4:	2023883a 	mov	r17,r4
   2e3b8:	2020d7fa 	srli	r16,r4,31
   2e3bc:	20002d16 	blt	r4,zero,2e474 <__floatsidf+0xd4>
   2e3c0:	8809883a 	mov	r4,r17
   2e3c4:	002e7340 	call	2e734 <__clzsi2>
   2e3c8:	01410784 	movi	r5,1054
   2e3cc:	288bc83a 	sub	r5,r5,r2
   2e3d0:	01010cc4 	movi	r4,1075
   2e3d4:	2149c83a 	sub	r4,r4,r5
   2e3d8:	00c007c4 	movi	r3,31
   2e3dc:	1900160e 	bge	r3,r4,2e438 <__floatsidf+0x98>
   2e3e0:	00c104c4 	movi	r3,1043
   2e3e4:	1947c83a 	sub	r3,r3,r5
   2e3e8:	88c6983a 	sll	r3,r17,r3
   2e3ec:	00800434 	movhi	r2,16
   2e3f0:	10bfffc4 	addi	r2,r2,-1
   2e3f4:	1886703a 	and	r3,r3,r2
   2e3f8:	2941ffcc 	andi	r5,r5,2047
   2e3fc:	800d883a 	mov	r6,r16
   2e400:	0005883a 	mov	r2,zero
   2e404:	280a953a 	slli	r5,r5,20
   2e408:	31803fcc 	andi	r6,r6,255
   2e40c:	01000434 	movhi	r4,16
   2e410:	300c97fa 	slli	r6,r6,31
   2e414:	213fffc4 	addi	r4,r4,-1
   2e418:	1906703a 	and	r3,r3,r4
   2e41c:	1946b03a 	or	r3,r3,r5
   2e420:	1986b03a 	or	r3,r3,r6
   2e424:	dfc00217 	ldw	ra,8(sp)
   2e428:	dc400117 	ldw	r17,4(sp)
   2e42c:	dc000017 	ldw	r16,0(sp)
   2e430:	dec00304 	addi	sp,sp,12
   2e434:	f800283a 	ret
   2e438:	00c002c4 	movi	r3,11
   2e43c:	1887c83a 	sub	r3,r3,r2
   2e440:	88c6d83a 	srl	r3,r17,r3
   2e444:	8904983a 	sll	r2,r17,r4
   2e448:	01000434 	movhi	r4,16
   2e44c:	213fffc4 	addi	r4,r4,-1
   2e450:	2941ffcc 	andi	r5,r5,2047
   2e454:	1906703a 	and	r3,r3,r4
   2e458:	800d883a 	mov	r6,r16
   2e45c:	003fe906 	br	2e404 <_gp+0xffff33c4>
   2e460:	000d883a 	mov	r6,zero
   2e464:	000b883a 	mov	r5,zero
   2e468:	0007883a 	mov	r3,zero
   2e46c:	0005883a 	mov	r2,zero
   2e470:	003fe406 	br	2e404 <_gp+0xffff33c4>
   2e474:	0123c83a 	sub	r17,zero,r4
   2e478:	003fd106 	br	2e3c0 <_gp+0xffff3380>

0002e47c <__extendsfdf2>:
   2e47c:	200ad5fa 	srli	r5,r4,23
   2e480:	defffd04 	addi	sp,sp,-12
   2e484:	dc400115 	stw	r17,4(sp)
   2e488:	29403fcc 	andi	r5,r5,255
   2e48c:	29800044 	addi	r6,r5,1
   2e490:	04402034 	movhi	r17,128
   2e494:	dc000015 	stw	r16,0(sp)
   2e498:	8c7fffc4 	addi	r17,r17,-1
   2e49c:	dfc00215 	stw	ra,8(sp)
   2e4a0:	31803fcc 	andi	r6,r6,255
   2e4a4:	00800044 	movi	r2,1
   2e4a8:	8922703a 	and	r17,r17,r4
   2e4ac:	2020d7fa 	srli	r16,r4,31
   2e4b0:	1180110e 	bge	r2,r6,2e4f8 <__extendsfdf2+0x7c>
   2e4b4:	880cd0fa 	srli	r6,r17,3
   2e4b8:	8822977a 	slli	r17,r17,29
   2e4bc:	2940e004 	addi	r5,r5,896
   2e4c0:	2941ffcc 	andi	r5,r5,2047
   2e4c4:	2804953a 	slli	r2,r5,20
   2e4c8:	01400434 	movhi	r5,16
   2e4cc:	800697fa 	slli	r3,r16,31
   2e4d0:	297fffc4 	addi	r5,r5,-1
   2e4d4:	314a703a 	and	r5,r6,r5
   2e4d8:	288ab03a 	or	r5,r5,r2
   2e4dc:	28c6b03a 	or	r3,r5,r3
   2e4e0:	8805883a 	mov	r2,r17
   2e4e4:	dfc00217 	ldw	ra,8(sp)
   2e4e8:	dc400117 	ldw	r17,4(sp)
   2e4ec:	dc000017 	ldw	r16,0(sp)
   2e4f0:	dec00304 	addi	sp,sp,12
   2e4f4:	f800283a 	ret
   2e4f8:	2800111e 	bne	r5,zero,2e540 <__extendsfdf2+0xc4>
   2e4fc:	88001c26 	beq	r17,zero,2e570 <__extendsfdf2+0xf4>
   2e500:	8809883a 	mov	r4,r17
   2e504:	002e7340 	call	2e734 <__clzsi2>
   2e508:	00c00284 	movi	r3,10
   2e50c:	18801b16 	blt	r3,r2,2e57c <__extendsfdf2+0x100>
   2e510:	018002c4 	movi	r6,11
   2e514:	308dc83a 	sub	r6,r6,r2
   2e518:	11000544 	addi	r4,r2,21
   2e51c:	8986d83a 	srl	r3,r17,r6
   2e520:	8922983a 	sll	r17,r17,r4
   2e524:	0180e244 	movi	r6,905
   2e528:	01400434 	movhi	r5,16
   2e52c:	3085c83a 	sub	r2,r6,r2
   2e530:	297fffc4 	addi	r5,r5,-1
   2e534:	194c703a 	and	r6,r3,r5
   2e538:	1141ffcc 	andi	r5,r2,2047
   2e53c:	003fe006 	br	2e4c0 <_gp+0xffff3480>
   2e540:	88000826 	beq	r17,zero,2e564 <__extendsfdf2+0xe8>
   2e544:	880cd0fa 	srli	r6,r17,3
   2e548:	00800434 	movhi	r2,16
   2e54c:	10bfffc4 	addi	r2,r2,-1
   2e550:	31800234 	orhi	r6,r6,8
   2e554:	8822977a 	slli	r17,r17,29
   2e558:	308c703a 	and	r6,r6,r2
   2e55c:	0141ffc4 	movi	r5,2047
   2e560:	003fd706 	br	2e4c0 <_gp+0xffff3480>
   2e564:	0141ffc4 	movi	r5,2047
   2e568:	000d883a 	mov	r6,zero
   2e56c:	003fd406 	br	2e4c0 <_gp+0xffff3480>
   2e570:	000b883a 	mov	r5,zero
   2e574:	000d883a 	mov	r6,zero
   2e578:	003fd106 	br	2e4c0 <_gp+0xffff3480>
   2e57c:	11bffd44 	addi	r6,r2,-11
   2e580:	8986983a 	sll	r3,r17,r6
   2e584:	0023883a 	mov	r17,zero
   2e588:	003fe606 	br	2e524 <_gp+0xffff34e4>

0002e58c <__truncdfsf2>:
   2e58c:	2810d53a 	srli	r8,r5,20
   2e590:	01c00434 	movhi	r7,16
   2e594:	39ffffc4 	addi	r7,r7,-1
   2e598:	29ce703a 	and	r7,r5,r7
   2e59c:	4201ffcc 	andi	r8,r8,2047
   2e5a0:	380e90fa 	slli	r7,r7,3
   2e5a4:	200cd77a 	srli	r6,r4,29
   2e5a8:	42400044 	addi	r9,r8,1
   2e5ac:	4a41ffcc 	andi	r9,r9,2047
   2e5b0:	00c00044 	movi	r3,1
   2e5b4:	280ad7fa 	srli	r5,r5,31
   2e5b8:	31ceb03a 	or	r7,r6,r7
   2e5bc:	200490fa 	slli	r2,r4,3
   2e5c0:	1a40230e 	bge	r3,r9,2e650 <__truncdfsf2+0xc4>
   2e5c4:	40ff2004 	addi	r3,r8,-896
   2e5c8:	01803f84 	movi	r6,254
   2e5cc:	30c01516 	blt	r6,r3,2e624 <__truncdfsf2+0x98>
   2e5d0:	00c0380e 	bge	zero,r3,2e6b4 <__truncdfsf2+0x128>
   2e5d4:	200c91ba 	slli	r6,r4,6
   2e5d8:	380e90fa 	slli	r7,r7,3
   2e5dc:	1004d77a 	srli	r2,r2,29
   2e5e0:	300cc03a 	cmpne	r6,r6,zero
   2e5e4:	31ccb03a 	or	r6,r6,r7
   2e5e8:	308cb03a 	or	r6,r6,r2
   2e5ec:	308001cc 	andi	r2,r6,7
   2e5f0:	10000426 	beq	r2,zero,2e604 <__truncdfsf2+0x78>
   2e5f4:	308003cc 	andi	r2,r6,15
   2e5f8:	01000104 	movi	r4,4
   2e5fc:	11000126 	beq	r2,r4,2e604 <__truncdfsf2+0x78>
   2e600:	31800104 	addi	r6,r6,4
   2e604:	3081002c 	andhi	r2,r6,1024
   2e608:	10001626 	beq	r2,zero,2e664 <__truncdfsf2+0xd8>
   2e60c:	18c00044 	addi	r3,r3,1
   2e610:	00803fc4 	movi	r2,255
   2e614:	18800326 	beq	r3,r2,2e624 <__truncdfsf2+0x98>
   2e618:	300c91ba 	slli	r6,r6,6
   2e61c:	300cd27a 	srli	r6,r6,9
   2e620:	00000206 	br	2e62c <__truncdfsf2+0xa0>
   2e624:	00ffffc4 	movi	r3,-1
   2e628:	000d883a 	mov	r6,zero
   2e62c:	18c03fcc 	andi	r3,r3,255
   2e630:	180895fa 	slli	r4,r3,23
   2e634:	00c02034 	movhi	r3,128
   2e638:	280a97fa 	slli	r5,r5,31
   2e63c:	18ffffc4 	addi	r3,r3,-1
   2e640:	30c6703a 	and	r3,r6,r3
   2e644:	1906b03a 	or	r3,r3,r4
   2e648:	1944b03a 	or	r2,r3,r5
   2e64c:	f800283a 	ret
   2e650:	40000b1e 	bne	r8,zero,2e680 <__truncdfsf2+0xf4>
   2e654:	388cb03a 	or	r6,r7,r2
   2e658:	0007883a 	mov	r3,zero
   2e65c:	30000426 	beq	r6,zero,2e670 <__truncdfsf2+0xe4>
   2e660:	01800144 	movi	r6,5
   2e664:	00803fc4 	movi	r2,255
   2e668:	300cd0fa 	srli	r6,r6,3
   2e66c:	18800a26 	beq	r3,r2,2e698 <__truncdfsf2+0x10c>
   2e670:	00802034 	movhi	r2,128
   2e674:	10bfffc4 	addi	r2,r2,-1
   2e678:	308c703a 	and	r6,r6,r2
   2e67c:	003feb06 	br	2e62c <_gp+0xffff35ec>
   2e680:	3888b03a 	or	r4,r7,r2
   2e684:	203fe726 	beq	r4,zero,2e624 <_gp+0xffff35e4>
   2e688:	380c90fa 	slli	r6,r7,3
   2e68c:	00c03fc4 	movi	r3,255
   2e690:	31808034 	orhi	r6,r6,512
   2e694:	003fd506 	br	2e5ec <_gp+0xffff35ac>
   2e698:	303fe226 	beq	r6,zero,2e624 <_gp+0xffff35e4>
   2e69c:	00802034 	movhi	r2,128
   2e6a0:	31801034 	orhi	r6,r6,64
   2e6a4:	10bfffc4 	addi	r2,r2,-1
   2e6a8:	00ffffc4 	movi	r3,-1
   2e6ac:	308c703a 	and	r6,r6,r2
   2e6b0:	003fde06 	br	2e62c <_gp+0xffff35ec>
   2e6b4:	013ffa44 	movi	r4,-23
   2e6b8:	19000e16 	blt	r3,r4,2e6f4 <__truncdfsf2+0x168>
   2e6bc:	01000784 	movi	r4,30
   2e6c0:	20c9c83a 	sub	r4,r4,r3
   2e6c4:	018007c4 	movi	r6,31
   2e6c8:	39c02034 	orhi	r7,r7,128
   2e6cc:	31000b16 	blt	r6,r4,2e6fc <__truncdfsf2+0x170>
   2e6d0:	423f2084 	addi	r8,r8,-894
   2e6d4:	120c983a 	sll	r6,r2,r8
   2e6d8:	3a0e983a 	sll	r7,r7,r8
   2e6dc:	1104d83a 	srl	r2,r2,r4
   2e6e0:	300cc03a 	cmpne	r6,r6,zero
   2e6e4:	31ceb03a 	or	r7,r6,r7
   2e6e8:	388cb03a 	or	r6,r7,r2
   2e6ec:	0007883a 	mov	r3,zero
   2e6f0:	003fbe06 	br	2e5ec <_gp+0xffff35ac>
   2e6f4:	0007883a 	mov	r3,zero
   2e6f8:	003fd906 	br	2e660 <_gp+0xffff3620>
   2e6fc:	01bfff84 	movi	r6,-2
   2e700:	30cdc83a 	sub	r6,r6,r3
   2e704:	00c00804 	movi	r3,32
   2e708:	398cd83a 	srl	r6,r7,r6
   2e70c:	20c00726 	beq	r4,r3,2e72c <__truncdfsf2+0x1a0>
   2e710:	423f2884 	addi	r8,r8,-862
   2e714:	3a0e983a 	sll	r7,r7,r8
   2e718:	3884b03a 	or	r2,r7,r2
   2e71c:	1004c03a 	cmpne	r2,r2,zero
   2e720:	118cb03a 	or	r6,r2,r6
   2e724:	0007883a 	mov	r3,zero
   2e728:	003fb006 	br	2e5ec <_gp+0xffff35ac>
   2e72c:	000f883a 	mov	r7,zero
   2e730:	003ff906 	br	2e718 <_gp+0xffff36d8>

0002e734 <__clzsi2>:
   2e734:	00bfffd4 	movui	r2,65535
   2e738:	11000536 	bltu	r2,r4,2e750 <__clzsi2+0x1c>
   2e73c:	00803fc4 	movi	r2,255
   2e740:	11000f36 	bltu	r2,r4,2e780 <__clzsi2+0x4c>
   2e744:	00800804 	movi	r2,32
   2e748:	0007883a 	mov	r3,zero
   2e74c:	00000506 	br	2e764 <__clzsi2+0x30>
   2e750:	00804034 	movhi	r2,256
   2e754:	10bfffc4 	addi	r2,r2,-1
   2e758:	11000c2e 	bgeu	r2,r4,2e78c <__clzsi2+0x58>
   2e75c:	00800204 	movi	r2,8
   2e760:	00c00604 	movi	r3,24
   2e764:	20c8d83a 	srl	r4,r4,r3
   2e768:	00c000f4 	movhi	r3,3
   2e76c:	18ca7544 	addi	r3,r3,10709
   2e770:	1909883a 	add	r4,r3,r4
   2e774:	20c00003 	ldbu	r3,0(r4)
   2e778:	10c5c83a 	sub	r2,r2,r3
   2e77c:	f800283a 	ret
   2e780:	00800604 	movi	r2,24
   2e784:	00c00204 	movi	r3,8
   2e788:	003ff606 	br	2e764 <_gp+0xffff3724>
   2e78c:	00800404 	movi	r2,16
   2e790:	1007883a 	mov	r3,r2
   2e794:	003ff306 	br	2e764 <_gp+0xffff3724>

0002e798 <__errno>:
   2e798:	008000f4 	movhi	r2,3
   2e79c:	108c1404 	addi	r2,r2,12368
   2e7a0:	10800017 	ldw	r2,0(r2)
   2e7a4:	f800283a 	ret

0002e7a8 <malloc>:
   2e7a8:	008000f4 	movhi	r2,3
   2e7ac:	108c1404 	addi	r2,r2,12368
   2e7b0:	200b883a 	mov	r5,r4
   2e7b4:	11000017 	ldw	r4,0(r2)
   2e7b8:	002e8fc1 	jmpi	2e8fc <_malloc_r>

0002e7bc <free>:
   2e7bc:	008000f4 	movhi	r2,3
   2e7c0:	108c1404 	addi	r2,r2,12368
   2e7c4:	200b883a 	mov	r5,r4
   2e7c8:	11000017 	ldw	r4,0(r2)
   2e7cc:	002e8181 	jmpi	2e818 <_free_r>

0002e7d0 <memcpy>:
   2e7d0:	2005883a 	mov	r2,r4
   2e7d4:	2007883a 	mov	r3,r4
   2e7d8:	218d883a 	add	r6,r4,r6
   2e7dc:	19800526 	beq	r3,r6,2e7f4 <memcpy+0x24>
   2e7e0:	29000003 	ldbu	r4,0(r5)
   2e7e4:	18c00044 	addi	r3,r3,1
   2e7e8:	29400044 	addi	r5,r5,1
   2e7ec:	193fffc5 	stb	r4,-1(r3)
   2e7f0:	003ffa06 	br	2e7dc <_gp+0xffff379c>
   2e7f4:	f800283a 	ret

0002e7f8 <memset>:
   2e7f8:	2005883a 	mov	r2,r4
   2e7fc:	2007883a 	mov	r3,r4
   2e800:	218d883a 	add	r6,r4,r6
   2e804:	19800326 	beq	r3,r6,2e814 <memset+0x1c>
   2e808:	19400005 	stb	r5,0(r3)
   2e80c:	18c00044 	addi	r3,r3,1
   2e810:	003ffc06 	br	2e804 <_gp+0xffff37c4>
   2e814:	f800283a 	ret

0002e818 <_free_r>:
   2e818:	28003726 	beq	r5,zero,2e8f8 <_free_r+0xe0>
   2e81c:	28ffff17 	ldw	r3,-4(r5)
   2e820:	28bfff04 	addi	r2,r5,-4
   2e824:	1800010e 	bge	r3,zero,2e82c <_free_r+0x14>
   2e828:	10c5883a 	add	r2,r2,r3
   2e82c:	014000f4 	movhi	r5,3
   2e830:	294ce604 	addi	r5,r5,13208
   2e834:	28c00017 	ldw	r3,0(r5)
   2e838:	280d883a 	mov	r6,r5
   2e83c:	1800031e 	bne	r3,zero,2e84c <_free_r+0x34>
   2e840:	10000115 	stw	zero,4(r2)
   2e844:	28800015 	stw	r2,0(r5)
   2e848:	f800283a 	ret
   2e84c:	10c00c2e 	bgeu	r2,r3,2e880 <_free_r+0x68>
   2e850:	11000017 	ldw	r4,0(r2)
   2e854:	110b883a 	add	r5,r2,r4
   2e858:	1940041e 	bne	r3,r5,2e86c <_free_r+0x54>
   2e85c:	19400017 	ldw	r5,0(r3)
   2e860:	18c00117 	ldw	r3,4(r3)
   2e864:	2909883a 	add	r4,r5,r4
   2e868:	11000015 	stw	r4,0(r2)
   2e86c:	10c00115 	stw	r3,4(r2)
   2e870:	30800015 	stw	r2,0(r6)
   2e874:	f800283a 	ret
   2e878:	11400336 	bltu	r2,r5,2e888 <_free_r+0x70>
   2e87c:	2807883a 	mov	r3,r5
   2e880:	19400117 	ldw	r5,4(r3)
   2e884:	283ffc1e 	bne	r5,zero,2e878 <_gp+0xffff3838>
   2e888:	19c00017 	ldw	r7,0(r3)
   2e88c:	19cd883a 	add	r6,r3,r7
   2e890:	30800a1e 	bne	r6,r2,2e8bc <_free_r+0xa4>
   2e894:	10800017 	ldw	r2,0(r2)
   2e898:	3885883a 	add	r2,r7,r2
   2e89c:	18800015 	stw	r2,0(r3)
   2e8a0:	1889883a 	add	r4,r3,r2
   2e8a4:	2900141e 	bne	r5,r4,2e8f8 <_free_r+0xe0>
   2e8a8:	29000017 	ldw	r4,0(r5)
   2e8ac:	2085883a 	add	r2,r4,r2
   2e8b0:	18800015 	stw	r2,0(r3)
   2e8b4:	28800117 	ldw	r2,4(r5)
   2e8b8:	00000e06 	br	2e8f4 <_free_r+0xdc>
   2e8bc:	1180032e 	bgeu	r2,r6,2e8cc <_free_r+0xb4>
   2e8c0:	00800304 	movi	r2,12
   2e8c4:	20800015 	stw	r2,0(r4)
   2e8c8:	f800283a 	ret
   2e8cc:	11000017 	ldw	r4,0(r2)
   2e8d0:	110d883a 	add	r6,r2,r4
   2e8d4:	2980061e 	bne	r5,r6,2e8f0 <_free_r+0xd8>
   2e8d8:	29800017 	ldw	r6,0(r5)
   2e8dc:	3109883a 	add	r4,r6,r4
   2e8e0:	11000015 	stw	r4,0(r2)
   2e8e4:	29000117 	ldw	r4,4(r5)
   2e8e8:	11000115 	stw	r4,4(r2)
   2e8ec:	00000106 	br	2e8f4 <_free_r+0xdc>
   2e8f0:	11400115 	stw	r5,4(r2)
   2e8f4:	18800115 	stw	r2,4(r3)
   2e8f8:	f800283a 	ret

0002e8fc <_malloc_r>:
   2e8fc:	defffb04 	addi	sp,sp,-20
   2e900:	00bfff04 	movi	r2,-4
   2e904:	dc400115 	stw	r17,4(sp)
   2e908:	2c4000c4 	addi	r17,r5,3
   2e90c:	88a2703a 	and	r17,r17,r2
   2e910:	dc800215 	stw	r18,8(sp)
   2e914:	dfc00415 	stw	ra,16(sp)
   2e918:	dcc00315 	stw	r19,12(sp)
   2e91c:	dc000015 	stw	r16,0(sp)
   2e920:	8c400204 	addi	r17,r17,8
   2e924:	00800304 	movi	r2,12
   2e928:	2025883a 	mov	r18,r4
   2e92c:	8880022e 	bgeu	r17,r2,2e938 <_malloc_r+0x3c>
   2e930:	1023883a 	mov	r17,r2
   2e934:	00000506 	br	2e94c <_malloc_r+0x50>
   2e938:	8800040e 	bge	r17,zero,2e94c <_malloc_r+0x50>
   2e93c:	00800304 	movi	r2,12
   2e940:	90800015 	stw	r2,0(r18)
   2e944:	0005883a 	mov	r2,zero
   2e948:	00003b06 	br	2ea38 <_malloc_r+0x13c>
   2e94c:	897ffb36 	bltu	r17,r5,2e93c <_gp+0xffff38fc>
   2e950:	008000f4 	movhi	r2,3
   2e954:	108ce604 	addi	r2,r2,13208
   2e958:	10c00017 	ldw	r3,0(r2)
   2e95c:	1009883a 	mov	r4,r2
   2e960:	1821883a 	mov	r16,r3
   2e964:	80000926 	beq	r16,zero,2e98c <_malloc_r+0x90>
   2e968:	80800017 	ldw	r2,0(r16)
   2e96c:	1445c83a 	sub	r2,r2,r17
   2e970:	10001516 	blt	r2,zero,2e9c8 <_malloc_r+0xcc>
   2e974:	014002c4 	movi	r5,11
   2e978:	28800d2e 	bgeu	r5,r2,2e9b0 <_malloc_r+0xb4>
   2e97c:	80800015 	stw	r2,0(r16)
   2e980:	80a1883a 	add	r16,r16,r2
   2e984:	84400015 	stw	r17,0(r16)
   2e988:	8000221e 	bne	r16,zero,2ea14 <_malloc_r+0x118>
   2e98c:	040000f4 	movhi	r16,3
   2e990:	840ce504 	addi	r16,r16,13204
   2e994:	80800017 	ldw	r2,0(r16)
   2e998:	10000e1e 	bne	r2,zero,2e9d4 <_malloc_r+0xd8>
   2e99c:	000b883a 	mov	r5,zero
   2e9a0:	9009883a 	mov	r4,r18
   2e9a4:	002ebac0 	call	2ebac <_sbrk_r>
   2e9a8:	80800015 	stw	r2,0(r16)
   2e9ac:	00000906 	br	2e9d4 <_malloc_r+0xd8>
   2e9b0:	80800117 	ldw	r2,4(r16)
   2e9b4:	1c00021e 	bne	r3,r16,2e9c0 <_malloc_r+0xc4>
   2e9b8:	20800015 	stw	r2,0(r4)
   2e9bc:	00001506 	br	2ea14 <_malloc_r+0x118>
   2e9c0:	18800115 	stw	r2,4(r3)
   2e9c4:	00001306 	br	2ea14 <_malloc_r+0x118>
   2e9c8:	8007883a 	mov	r3,r16
   2e9cc:	84000117 	ldw	r16,4(r16)
   2e9d0:	003fe406 	br	2e964 <_gp+0xffff3924>
   2e9d4:	880b883a 	mov	r5,r17
   2e9d8:	9009883a 	mov	r4,r18
   2e9dc:	002ebac0 	call	2ebac <_sbrk_r>
   2e9e0:	04ffffc4 	movi	r19,-1
   2e9e4:	14ffd526 	beq	r2,r19,2e93c <_gp+0xffff38fc>
   2e9e8:	140000c4 	addi	r16,r2,3
   2e9ec:	00ffff04 	movi	r3,-4
   2e9f0:	80e0703a 	and	r16,r16,r3
   2e9f4:	1400021e 	bne	r2,r16,2ea00 <_malloc_r+0x104>
   2e9f8:	84400015 	stw	r17,0(r16)
   2e9fc:	00000506 	br	2ea14 <_malloc_r+0x118>
   2ea00:	808bc83a 	sub	r5,r16,r2
   2ea04:	9009883a 	mov	r4,r18
   2ea08:	002ebac0 	call	2ebac <_sbrk_r>
   2ea0c:	14fffa1e 	bne	r2,r19,2e9f8 <_gp+0xffff39b8>
   2ea10:	003fca06 	br	2e93c <_gp+0xffff38fc>
   2ea14:	810002c4 	addi	r4,r16,11
   2ea18:	00bffe04 	movi	r2,-8
   2ea1c:	80c00104 	addi	r3,r16,4
   2ea20:	2084703a 	and	r2,r4,r2
   2ea24:	10c7c83a 	sub	r3,r2,r3
   2ea28:	18000326 	beq	r3,zero,2ea38 <_malloc_r+0x13c>
   2ea2c:	80e1883a 	add	r16,r16,r3
   2ea30:	00c7c83a 	sub	r3,zero,r3
   2ea34:	80c00015 	stw	r3,0(r16)
   2ea38:	dfc00417 	ldw	ra,16(sp)
   2ea3c:	dcc00317 	ldw	r19,12(sp)
   2ea40:	dc800217 	ldw	r18,8(sp)
   2ea44:	dc400117 	ldw	r17,4(sp)
   2ea48:	dc000017 	ldw	r16,0(sp)
   2ea4c:	dec00504 	addi	sp,sp,20
   2ea50:	f800283a 	ret

0002ea54 <_printf_r>:
   2ea54:	defffd04 	addi	sp,sp,-12
   2ea58:	dfc00015 	stw	ra,0(sp)
   2ea5c:	d9800115 	stw	r6,4(sp)
   2ea60:	d9c00215 	stw	r7,8(sp)
   2ea64:	20c00217 	ldw	r3,8(r4)
   2ea68:	018000f4 	movhi	r6,3
   2ea6c:	31bf1404 	addi	r6,r6,-944
   2ea70:	19800115 	stw	r6,4(r3)
   2ea74:	280d883a 	mov	r6,r5
   2ea78:	21400217 	ldw	r5,8(r4)
   2ea7c:	d9c00104 	addi	r7,sp,4
   2ea80:	002f6180 	call	2f618 <___vfprintf_internal_r>
   2ea84:	dfc00017 	ldw	ra,0(sp)
   2ea88:	dec00304 	addi	sp,sp,12
   2ea8c:	f800283a 	ret

0002ea90 <printf>:
   2ea90:	defffc04 	addi	sp,sp,-16
   2ea94:	dfc00015 	stw	ra,0(sp)
   2ea98:	d9400115 	stw	r5,4(sp)
   2ea9c:	d9800215 	stw	r6,8(sp)
   2eaa0:	d9c00315 	stw	r7,12(sp)
   2eaa4:	008000f4 	movhi	r2,3
   2eaa8:	108c1404 	addi	r2,r2,12368
   2eaac:	10800017 	ldw	r2,0(r2)
   2eab0:	014000f4 	movhi	r5,3
   2eab4:	297f1404 	addi	r5,r5,-944
   2eab8:	10c00217 	ldw	r3,8(r2)
   2eabc:	d9800104 	addi	r6,sp,4
   2eac0:	19400115 	stw	r5,4(r3)
   2eac4:	200b883a 	mov	r5,r4
   2eac8:	11000217 	ldw	r4,8(r2)
   2eacc:	002fb440 	call	2fb44 <__vfprintf_internal>
   2ead0:	dfc00017 	ldw	ra,0(sp)
   2ead4:	dec00404 	addi	sp,sp,16
   2ead8:	f800283a 	ret

0002eadc <_putchar_r>:
   2eadc:	21800217 	ldw	r6,8(r4)
   2eae0:	002ff081 	jmpi	2ff08 <_putc_r>

0002eae4 <putchar>:
   2eae4:	008000f4 	movhi	r2,3
   2eae8:	108c1404 	addi	r2,r2,12368
   2eaec:	10800017 	ldw	r2,0(r2)
   2eaf0:	200b883a 	mov	r5,r4
   2eaf4:	11800217 	ldw	r6,8(r2)
   2eaf8:	1009883a 	mov	r4,r2
   2eafc:	002ff081 	jmpi	2ff08 <_putc_r>

0002eb00 <_puts_r>:
   2eb00:	defffd04 	addi	sp,sp,-12
   2eb04:	dc000015 	stw	r16,0(sp)
   2eb08:	2021883a 	mov	r16,r4
   2eb0c:	2809883a 	mov	r4,r5
   2eb10:	dfc00215 	stw	ra,8(sp)
   2eb14:	dc400115 	stw	r17,4(sp)
   2eb18:	2823883a 	mov	r17,r5
   2eb1c:	002ee980 	call	2ee98 <strlen>
   2eb20:	81400217 	ldw	r5,8(r16)
   2eb24:	010000f4 	movhi	r4,3
   2eb28:	213f1404 	addi	r4,r4,-944
   2eb2c:	29000115 	stw	r4,4(r5)
   2eb30:	100f883a 	mov	r7,r2
   2eb34:	880d883a 	mov	r6,r17
   2eb38:	8009883a 	mov	r4,r16
   2eb3c:	002fc500 	call	2fc50 <__sfvwrite_small_dev>
   2eb40:	00ffffc4 	movi	r3,-1
   2eb44:	10c00926 	beq	r2,r3,2eb6c <_puts_r+0x6c>
   2eb48:	81400217 	ldw	r5,8(r16)
   2eb4c:	018000f4 	movhi	r6,3
   2eb50:	01c00044 	movi	r7,1
   2eb54:	28800117 	ldw	r2,4(r5)
   2eb58:	318ab604 	addi	r6,r6,10968
   2eb5c:	8009883a 	mov	r4,r16
   2eb60:	103ee83a 	callr	r2
   2eb64:	10bfffe0 	cmpeqi	r2,r2,-1
   2eb68:	0085c83a 	sub	r2,zero,r2
   2eb6c:	dfc00217 	ldw	ra,8(sp)
   2eb70:	dc400117 	ldw	r17,4(sp)
   2eb74:	dc000017 	ldw	r16,0(sp)
   2eb78:	dec00304 	addi	sp,sp,12
   2eb7c:	f800283a 	ret

0002eb80 <puts>:
   2eb80:	008000f4 	movhi	r2,3
   2eb84:	108c1404 	addi	r2,r2,12368
   2eb88:	200b883a 	mov	r5,r4
   2eb8c:	11000017 	ldw	r4,0(r2)
   2eb90:	002eb001 	jmpi	2eb00 <_puts_r>

0002eb94 <realloc>:
   2eb94:	008000f4 	movhi	r2,3
   2eb98:	108c1404 	addi	r2,r2,12368
   2eb9c:	280d883a 	mov	r6,r5
   2eba0:	200b883a 	mov	r5,r4
   2eba4:	11000017 	ldw	r4,0(r2)
   2eba8:	002fe101 	jmpi	2fe10 <_realloc_r>

0002ebac <_sbrk_r>:
   2ebac:	defffd04 	addi	sp,sp,-12
   2ebb0:	dc000015 	stw	r16,0(sp)
   2ebb4:	040000f4 	movhi	r16,3
   2ebb8:	dc400115 	stw	r17,4(sp)
   2ebbc:	840ce704 	addi	r16,r16,13212
   2ebc0:	2023883a 	mov	r17,r4
   2ebc4:	2809883a 	mov	r4,r5
   2ebc8:	dfc00215 	stw	ra,8(sp)
   2ebcc:	80000015 	stw	zero,0(r16)
   2ebd0:	003012c0 	call	3012c <sbrk>
   2ebd4:	00ffffc4 	movi	r3,-1
   2ebd8:	10c0031e 	bne	r2,r3,2ebe8 <_sbrk_r+0x3c>
   2ebdc:	80c00017 	ldw	r3,0(r16)
   2ebe0:	18000126 	beq	r3,zero,2ebe8 <_sbrk_r+0x3c>
   2ebe4:	88c00015 	stw	r3,0(r17)
   2ebe8:	dfc00217 	ldw	ra,8(sp)
   2ebec:	dc400117 	ldw	r17,4(sp)
   2ebf0:	dc000017 	ldw	r16,0(sp)
   2ebf4:	dec00304 	addi	sp,sp,12
   2ebf8:	f800283a 	ret

0002ebfc <_snprintf_r>:
   2ebfc:	3000040e 	bge	r6,zero,2ec10 <_snprintf_r+0x14>
   2ec00:	008022c4 	movi	r2,139
   2ec04:	20800015 	stw	r2,0(r4)
   2ec08:	00bfffc4 	movi	r2,-1
   2ec0c:	f800283a 	ret
   2ec10:	defff604 	addi	sp,sp,-40
   2ec14:	00c08204 	movi	r3,520
   2ec18:	dfc00915 	stw	ra,36(sp)
   2ec1c:	dc400815 	stw	r17,32(sp)
   2ec20:	dc000715 	stw	r16,28(sp)
   2ec24:	d8c0000d 	sth	r3,0(sp)
   2ec28:	d9400415 	stw	r5,16(sp)
   2ec2c:	d9400215 	stw	r5,8(sp)
   2ec30:	3005883a 	mov	r2,r6
   2ec34:	30000226 	beq	r6,zero,2ec40 <_snprintf_r+0x44>
   2ec38:	30ffffc4 	addi	r3,r6,-1
   2ec3c:	00000106 	br	2ec44 <_snprintf_r+0x48>
   2ec40:	0007883a 	mov	r3,zero
   2ec44:	1021883a 	mov	r16,r2
   2ec48:	00bfffc4 	movi	r2,-1
   2ec4c:	d880008d 	sth	r2,2(sp)
   2ec50:	008000f4 	movhi	r2,3
   2ec54:	380d883a 	mov	r6,r7
   2ec58:	10bf4204 	addi	r2,r2,-760
   2ec5c:	d9c00a04 	addi	r7,sp,40
   2ec60:	d80b883a 	mov	r5,sp
   2ec64:	d8c00515 	stw	r3,20(sp)
   2ec68:	d8c00315 	stw	r3,12(sp)
   2ec6c:	2023883a 	mov	r17,r4
   2ec70:	d8800115 	stw	r2,4(sp)
   2ec74:	d8000615 	stw	zero,24(sp)
   2ec78:	002f0340 	call	2f034 <___svfprintf_internal_r>
   2ec7c:	00ffffc4 	movi	r3,-1
   2ec80:	10c0020e 	bge	r2,r3,2ec8c <_snprintf_r+0x90>
   2ec84:	00c022c4 	movi	r3,139
   2ec88:	88c00015 	stw	r3,0(r17)
   2ec8c:	80000226 	beq	r16,zero,2ec98 <_snprintf_r+0x9c>
   2ec90:	d8c00417 	ldw	r3,16(sp)
   2ec94:	18000005 	stb	zero,0(r3)
   2ec98:	dfc00917 	ldw	ra,36(sp)
   2ec9c:	dc400817 	ldw	r17,32(sp)
   2eca0:	dc000717 	ldw	r16,28(sp)
   2eca4:	dec00a04 	addi	sp,sp,40
   2eca8:	f800283a 	ret

0002ecac <snprintf>:
   2ecac:	defff504 	addi	sp,sp,-44
   2ecb0:	dfc00915 	stw	ra,36(sp)
   2ecb4:	dc400815 	stw	r17,32(sp)
   2ecb8:	dc000715 	stw	r16,28(sp)
   2ecbc:	d9c00a15 	stw	r7,40(sp)
   2ecc0:	008000f4 	movhi	r2,3
   2ecc4:	108c1404 	addi	r2,r2,12368
   2ecc8:	14400017 	ldw	r17,0(r2)
   2eccc:	2800040e 	bge	r5,zero,2ece0 <snprintf+0x34>
   2ecd0:	008022c4 	movi	r2,139
   2ecd4:	88800015 	stw	r2,0(r17)
   2ecd8:	00bfffc4 	movi	r2,-1
   2ecdc:	00001c06 	br	2ed50 <snprintf+0xa4>
   2ece0:	00c08204 	movi	r3,520
   2ece4:	d8c0000d 	sth	r3,0(sp)
   2ece8:	d9000415 	stw	r4,16(sp)
   2ecec:	d9000215 	stw	r4,8(sp)
   2ecf0:	28000226 	beq	r5,zero,2ecfc <snprintf+0x50>
   2ecf4:	28ffffc4 	addi	r3,r5,-1
   2ecf8:	00000106 	br	2ed00 <snprintf+0x54>
   2ecfc:	0007883a 	mov	r3,zero
   2ed00:	d8c00515 	stw	r3,20(sp)
   2ed04:	d8c00315 	stw	r3,12(sp)
   2ed08:	11000017 	ldw	r4,0(r2)
   2ed0c:	00ffffc4 	movi	r3,-1
   2ed10:	d8c0008d 	sth	r3,2(sp)
   2ed14:	00c000f4 	movhi	r3,3
   2ed18:	18ff4204 	addi	r3,r3,-760
   2ed1c:	2821883a 	mov	r16,r5
   2ed20:	d9c00a04 	addi	r7,sp,40
   2ed24:	d80b883a 	mov	r5,sp
   2ed28:	d8c00115 	stw	r3,4(sp)
   2ed2c:	d8000615 	stw	zero,24(sp)
   2ed30:	002f0340 	call	2f034 <___svfprintf_internal_r>
   2ed34:	00ffffc4 	movi	r3,-1
   2ed38:	10c0020e 	bge	r2,r3,2ed44 <snprintf+0x98>
   2ed3c:	00c022c4 	movi	r3,139
   2ed40:	88c00015 	stw	r3,0(r17)
   2ed44:	80000226 	beq	r16,zero,2ed50 <snprintf+0xa4>
   2ed48:	d8c00417 	ldw	r3,16(sp)
   2ed4c:	18000005 	stb	zero,0(r3)
   2ed50:	dfc00917 	ldw	ra,36(sp)
   2ed54:	dc400817 	ldw	r17,32(sp)
   2ed58:	dc000717 	ldw	r16,28(sp)
   2ed5c:	dec00b04 	addi	sp,sp,44
   2ed60:	f800283a 	ret

0002ed64 <_sprintf_r>:
   2ed64:	defff704 	addi	sp,sp,-36
   2ed68:	dfc00715 	stw	ra,28(sp)
   2ed6c:	d9c00815 	stw	r7,32(sp)
   2ed70:	00808204 	movi	r2,520
   2ed74:	d880000d 	sth	r2,0(sp)
   2ed78:	00a00034 	movhi	r2,32768
   2ed7c:	10bfffc4 	addi	r2,r2,-1
   2ed80:	d8800515 	stw	r2,20(sp)
   2ed84:	d8800315 	stw	r2,12(sp)
   2ed88:	00bfffc4 	movi	r2,-1
   2ed8c:	d880008d 	sth	r2,2(sp)
   2ed90:	008000f4 	movhi	r2,3
   2ed94:	d9400415 	stw	r5,16(sp)
   2ed98:	d9400215 	stw	r5,8(sp)
   2ed9c:	10bf4204 	addi	r2,r2,-760
   2eda0:	d9c00804 	addi	r7,sp,32
   2eda4:	d80b883a 	mov	r5,sp
   2eda8:	d8800115 	stw	r2,4(sp)
   2edac:	d8000615 	stw	zero,24(sp)
   2edb0:	002f0340 	call	2f034 <___svfprintf_internal_r>
   2edb4:	d8c00417 	ldw	r3,16(sp)
   2edb8:	18000005 	stb	zero,0(r3)
   2edbc:	dfc00717 	ldw	ra,28(sp)
   2edc0:	dec00904 	addi	sp,sp,36
   2edc4:	f800283a 	ret

0002edc8 <sprintf>:
   2edc8:	defff604 	addi	sp,sp,-40
   2edcc:	dfc00715 	stw	ra,28(sp)
   2edd0:	d9800815 	stw	r6,32(sp)
   2edd4:	d9c00915 	stw	r7,36(sp)
   2edd8:	00808204 	movi	r2,520
   2eddc:	d880000d 	sth	r2,0(sp)
   2ede0:	00a00034 	movhi	r2,32768
   2ede4:	10bfffc4 	addi	r2,r2,-1
   2ede8:	d8800515 	stw	r2,20(sp)
   2edec:	d8800315 	stw	r2,12(sp)
   2edf0:	00bfffc4 	movi	r2,-1
   2edf4:	d880008d 	sth	r2,2(sp)
   2edf8:	008000f4 	movhi	r2,3
   2edfc:	10bf4204 	addi	r2,r2,-760
   2ee00:	d8800115 	stw	r2,4(sp)
   2ee04:	008000f4 	movhi	r2,3
   2ee08:	108c1404 	addi	r2,r2,12368
   2ee0c:	d9000415 	stw	r4,16(sp)
   2ee10:	d9000215 	stw	r4,8(sp)
   2ee14:	11000017 	ldw	r4,0(r2)
   2ee18:	280d883a 	mov	r6,r5
   2ee1c:	d9c00804 	addi	r7,sp,32
   2ee20:	d80b883a 	mov	r5,sp
   2ee24:	d8000615 	stw	zero,24(sp)
   2ee28:	002f0340 	call	2f034 <___svfprintf_internal_r>
   2ee2c:	d8c00417 	ldw	r3,16(sp)
   2ee30:	18000005 	stb	zero,0(r3)
   2ee34:	dfc00717 	ldw	ra,28(sp)
   2ee38:	dec00a04 	addi	sp,sp,40
   2ee3c:	f800283a 	ret

0002ee40 <strcasecmp>:
   2ee40:	008000f4 	movhi	r2,3
   2ee44:	108c1504 	addi	r2,r2,12372
   2ee48:	11c00017 	ldw	r7,0(r2)
   2ee4c:	02000044 	movi	r8,1
   2ee50:	20800003 	ldbu	r2,0(r4)
   2ee54:	3887883a 	add	r3,r7,r2
   2ee58:	18c00043 	ldbu	r3,1(r3)
   2ee5c:	18c000cc 	andi	r3,r3,3
   2ee60:	1a00011e 	bne	r3,r8,2ee68 <strcasecmp+0x28>
   2ee64:	10800804 	addi	r2,r2,32
   2ee68:	28c00003 	ldbu	r3,0(r5)
   2ee6c:	38cd883a 	add	r6,r7,r3
   2ee70:	31800043 	ldbu	r6,1(r6)
   2ee74:	318000cc 	andi	r6,r6,3
   2ee78:	3200011e 	bne	r6,r8,2ee80 <strcasecmp+0x40>
   2ee7c:	18c00804 	addi	r3,r3,32
   2ee80:	10c5c83a 	sub	r2,r2,r3
   2ee84:	1000031e 	bne	r2,zero,2ee94 <strcasecmp+0x54>
   2ee88:	21000044 	addi	r4,r4,1
   2ee8c:	29400044 	addi	r5,r5,1
   2ee90:	183fef1e 	bne	r3,zero,2ee50 <_gp+0xffff3e10>
   2ee94:	f800283a 	ret

0002ee98 <strlen>:
   2ee98:	2005883a 	mov	r2,r4
   2ee9c:	10c00007 	ldb	r3,0(r2)
   2eea0:	18000226 	beq	r3,zero,2eeac <strlen+0x14>
   2eea4:	10800044 	addi	r2,r2,1
   2eea8:	003ffc06 	br	2ee9c <_gp+0xffff3e5c>
   2eeac:	1105c83a 	sub	r2,r2,r4
   2eeb0:	f800283a 	ret

0002eeb4 <strncat>:
   2eeb4:	2005883a 	mov	r2,r4
   2eeb8:	2007883a 	mov	r3,r4
   2eebc:	19000007 	ldb	r4,0(r3)
   2eec0:	20000226 	beq	r4,zero,2eecc <strncat+0x18>
   2eec4:	18c00044 	addi	r3,r3,1
   2eec8:	003ffc06 	br	2eebc <_gp+0xffff3e7c>
   2eecc:	1811883a 	mov	r8,r3
   2eed0:	31bfffc4 	addi	r6,r6,-1
   2eed4:	013fffc4 	movi	r4,-1
   2eed8:	31000d26 	beq	r6,r4,2ef10 <strncat+0x5c>
   2eedc:	29c00003 	ldbu	r7,0(r5)
   2eee0:	18c00044 	addi	r3,r3,1
   2eee4:	41c00005 	stb	r7,0(r8)
   2eee8:	39c03fcc 	andi	r7,r7,255
   2eeec:	39c0201c 	xori	r7,r7,128
   2eef0:	39ffe004 	addi	r7,r7,-128
   2eef4:	38000626 	beq	r7,zero,2ef10 <strncat+0x5c>
   2eef8:	3000011e 	bne	r6,zero,2ef00 <strncat+0x4c>
   2eefc:	18000005 	stb	zero,0(r3)
   2ef00:	42000044 	addi	r8,r8,1
   2ef04:	29400044 	addi	r5,r5,1
   2ef08:	31bfffc4 	addi	r6,r6,-1
   2ef0c:	003ff206 	br	2eed8 <_gp+0xffff3e98>
   2ef10:	f800283a 	ret

0002ef14 <strncmp>:
   2ef14:	30001526 	beq	r6,zero,2ef6c <strncmp+0x58>
   2ef18:	31bfffc4 	addi	r6,r6,-1
   2ef1c:	218d883a 	add	r6,r4,r6
   2ef20:	20800003 	ldbu	r2,0(r4)
   2ef24:	28c00003 	ldbu	r3,0(r5)
   2ef28:	11c03fcc 	andi	r7,r2,255
   2ef2c:	1a003fcc 	andi	r8,r3,255
   2ef30:	39c0201c 	xori	r7,r7,128
   2ef34:	4200201c 	xori	r8,r8,128
   2ef38:	39ffe004 	addi	r7,r7,-128
   2ef3c:	423fe004 	addi	r8,r8,-128
   2ef40:	3a00061e 	bne	r7,r8,2ef5c <strncmp+0x48>
   2ef44:	21800426 	beq	r4,r6,2ef58 <strncmp+0x44>
   2ef48:	38000326 	beq	r7,zero,2ef58 <strncmp+0x44>
   2ef4c:	21000044 	addi	r4,r4,1
   2ef50:	29400044 	addi	r5,r5,1
   2ef54:	003ff206 	br	2ef20 <_gp+0xffff3ee0>
   2ef58:	1007883a 	mov	r3,r2
   2ef5c:	18c03fcc 	andi	r3,r3,255
   2ef60:	10803fcc 	andi	r2,r2,255
   2ef64:	10c5c83a 	sub	r2,r2,r3
   2ef68:	f800283a 	ret
   2ef6c:	0005883a 	mov	r2,zero
   2ef70:	f800283a 	ret

0002ef74 <strncpy>:
   2ef74:	2005883a 	mov	r2,r4
   2ef78:	200f883a 	mov	r7,r4
   2ef7c:	30000c26 	beq	r6,zero,2efb0 <strncpy+0x3c>
   2ef80:	2a000003 	ldbu	r8,0(r5)
   2ef84:	38c00044 	addi	r3,r7,1
   2ef88:	31bfffc4 	addi	r6,r6,-1
   2ef8c:	3a000005 	stb	r8,0(r7)
   2ef90:	42003fcc 	andi	r8,r8,255
   2ef94:	4200201c 	xori	r8,r8,128
   2ef98:	423fe004 	addi	r8,r8,-128
   2ef9c:	29400044 	addi	r5,r5,1
   2efa0:	180f883a 	mov	r7,r3
   2efa4:	403ff51e 	bne	r8,zero,2ef7c <_gp+0xffff3f3c>
   2efa8:	198d883a 	add	r6,r3,r6
   2efac:	00000106 	br	2efb4 <strncpy+0x40>
   2efb0:	f800283a 	ret
   2efb4:	30c00326 	beq	r6,r3,2efc4 <strncpy+0x50>
   2efb8:	18000005 	stb	zero,0(r3)
   2efbc:	18c00044 	addi	r3,r3,1
   2efc0:	003ffc06 	br	2efb4 <_gp+0xffff3f74>
   2efc4:	f800283a 	ret

0002efc8 <print_repeat>:
   2efc8:	defffb04 	addi	sp,sp,-20
   2efcc:	dc800315 	stw	r18,12(sp)
   2efd0:	dc400215 	stw	r17,8(sp)
   2efd4:	dc000115 	stw	r16,4(sp)
   2efd8:	dfc00415 	stw	ra,16(sp)
   2efdc:	2025883a 	mov	r18,r4
   2efe0:	2823883a 	mov	r17,r5
   2efe4:	d9800005 	stb	r6,0(sp)
   2efe8:	3821883a 	mov	r16,r7
   2efec:	04000a0e 	bge	zero,r16,2f018 <print_repeat+0x50>
   2eff0:	88800117 	ldw	r2,4(r17)
   2eff4:	01c00044 	movi	r7,1
   2eff8:	d80d883a 	mov	r6,sp
   2effc:	880b883a 	mov	r5,r17
   2f000:	9009883a 	mov	r4,r18
   2f004:	103ee83a 	callr	r2
   2f008:	843fffc4 	addi	r16,r16,-1
   2f00c:	103ff726 	beq	r2,zero,2efec <_gp+0xffff3fac>
   2f010:	00bfffc4 	movi	r2,-1
   2f014:	00000106 	br	2f01c <print_repeat+0x54>
   2f018:	0005883a 	mov	r2,zero
   2f01c:	dfc00417 	ldw	ra,16(sp)
   2f020:	dc800317 	ldw	r18,12(sp)
   2f024:	dc400217 	ldw	r17,8(sp)
   2f028:	dc000117 	ldw	r16,4(sp)
   2f02c:	dec00504 	addi	sp,sp,20
   2f030:	f800283a 	ret

0002f034 <___svfprintf_internal_r>:
   2f034:	deffe504 	addi	sp,sp,-108
   2f038:	d8c00804 	addi	r3,sp,32
   2f03c:	ddc01815 	stw	r23,96(sp)
   2f040:	dd801715 	stw	r22,92(sp)
   2f044:	dd401615 	stw	r21,88(sp)
   2f048:	dd001515 	stw	r20,84(sp)
   2f04c:	dcc01415 	stw	r19,80(sp)
   2f050:	dc801315 	stw	r18,76(sp)
   2f054:	dc401215 	stw	r17,72(sp)
   2f058:	dc001115 	stw	r16,68(sp)
   2f05c:	dfc01a15 	stw	ra,104(sp)
   2f060:	df001915 	stw	fp,100(sp)
   2f064:	2029883a 	mov	r20,r4
   2f068:	2823883a 	mov	r17,r5
   2f06c:	382d883a 	mov	r22,r7
   2f070:	d9800f15 	stw	r6,60(sp)
   2f074:	0021883a 	mov	r16,zero
   2f078:	d8000e15 	stw	zero,56(sp)
   2f07c:	d8000a15 	stw	zero,40(sp)
   2f080:	002b883a 	mov	r21,zero
   2f084:	0027883a 	mov	r19,zero
   2f088:	0025883a 	mov	r18,zero
   2f08c:	d8000c15 	stw	zero,48(sp)
   2f090:	d8000b15 	stw	zero,44(sp)
   2f094:	002f883a 	mov	r23,zero
   2f098:	d8c00915 	stw	r3,36(sp)
   2f09c:	d8c00f17 	ldw	r3,60(sp)
   2f0a0:	19000003 	ldbu	r4,0(r3)
   2f0a4:	20803fcc 	andi	r2,r4,255
   2f0a8:	1080201c 	xori	r2,r2,128
   2f0ac:	10bfe004 	addi	r2,r2,-128
   2f0b0:	10011e26 	beq	r2,zero,2f52c <___svfprintf_internal_r+0x4f8>
   2f0b4:	00c00044 	movi	r3,1
   2f0b8:	b8c01426 	beq	r23,r3,2f10c <___svfprintf_internal_r+0xd8>
   2f0bc:	1dc00216 	blt	r3,r23,2f0c8 <___svfprintf_internal_r+0x94>
   2f0c0:	b8000626 	beq	r23,zero,2f0dc <___svfprintf_internal_r+0xa8>
   2f0c4:	00011506 	br	2f51c <___svfprintf_internal_r+0x4e8>
   2f0c8:	01400084 	movi	r5,2
   2f0cc:	b9401d26 	beq	r23,r5,2f144 <___svfprintf_internal_r+0x110>
   2f0d0:	014000c4 	movi	r5,3
   2f0d4:	b9402b26 	beq	r23,r5,2f184 <___svfprintf_internal_r+0x150>
   2f0d8:	00011006 	br	2f51c <___svfprintf_internal_r+0x4e8>
   2f0dc:	01400944 	movi	r5,37
   2f0e0:	1140fc26 	beq	r2,r5,2f4d4 <___svfprintf_internal_r+0x4a0>
   2f0e4:	88800117 	ldw	r2,4(r17)
   2f0e8:	d9000005 	stb	r4,0(sp)
   2f0ec:	01c00044 	movi	r7,1
   2f0f0:	d80d883a 	mov	r6,sp
   2f0f4:	880b883a 	mov	r5,r17
   2f0f8:	a009883a 	mov	r4,r20
   2f0fc:	103ee83a 	callr	r2
   2f100:	1000d81e 	bne	r2,zero,2f464 <___svfprintf_internal_r+0x430>
   2f104:	84000044 	addi	r16,r16,1
   2f108:	00010406 	br	2f51c <___svfprintf_internal_r+0x4e8>
   2f10c:	01400c04 	movi	r5,48
   2f110:	1140fa26 	beq	r2,r5,2f4fc <___svfprintf_internal_r+0x4c8>
   2f114:	01400944 	movi	r5,37
   2f118:	11400a1e 	bne	r2,r5,2f144 <___svfprintf_internal_r+0x110>
   2f11c:	d8800005 	stb	r2,0(sp)
   2f120:	88800117 	ldw	r2,4(r17)
   2f124:	b80f883a 	mov	r7,r23
   2f128:	d80d883a 	mov	r6,sp
   2f12c:	880b883a 	mov	r5,r17
   2f130:	a009883a 	mov	r4,r20
   2f134:	103ee83a 	callr	r2
   2f138:	1000ca1e 	bne	r2,zero,2f464 <___svfprintf_internal_r+0x430>
   2f13c:	84000044 	addi	r16,r16,1
   2f140:	0000f506 	br	2f518 <___svfprintf_internal_r+0x4e4>
   2f144:	25fff404 	addi	r23,r4,-48
   2f148:	bdc03fcc 	andi	r23,r23,255
   2f14c:	00c00244 	movi	r3,9
   2f150:	1dc00936 	bltu	r3,r23,2f178 <___svfprintf_internal_r+0x144>
   2f154:	00bfffc4 	movi	r2,-1
   2f158:	90800426 	beq	r18,r2,2f16c <___svfprintf_internal_r+0x138>
   2f15c:	01400284 	movi	r5,10
   2f160:	9009883a 	mov	r4,r18
   2f164:	002b35c0 	call	2b35c <__mulsi3>
   2f168:	00000106 	br	2f170 <___svfprintf_internal_r+0x13c>
   2f16c:	0005883a 	mov	r2,zero
   2f170:	b8a5883a 	add	r18,r23,r2
   2f174:	0000e206 	br	2f500 <___svfprintf_internal_r+0x4cc>
   2f178:	01400b84 	movi	r5,46
   2f17c:	1140e426 	beq	r2,r5,2f510 <___svfprintf_internal_r+0x4dc>
   2f180:	05c00084 	movi	r23,2
   2f184:	213ff404 	addi	r4,r4,-48
   2f188:	27003fcc 	andi	fp,r4,255
   2f18c:	00c00244 	movi	r3,9
   2f190:	1f000936 	bltu	r3,fp,2f1b8 <___svfprintf_internal_r+0x184>
   2f194:	00bfffc4 	movi	r2,-1
   2f198:	98800426 	beq	r19,r2,2f1ac <___svfprintf_internal_r+0x178>
   2f19c:	01400284 	movi	r5,10
   2f1a0:	9809883a 	mov	r4,r19
   2f1a4:	002b35c0 	call	2b35c <__mulsi3>
   2f1a8:	00000106 	br	2f1b0 <___svfprintf_internal_r+0x17c>
   2f1ac:	0005883a 	mov	r2,zero
   2f1b0:	e0a7883a 	add	r19,fp,r2
   2f1b4:	0000d906 	br	2f51c <___svfprintf_internal_r+0x4e8>
   2f1b8:	00c01b04 	movi	r3,108
   2f1bc:	10c0d226 	beq	r2,r3,2f508 <___svfprintf_internal_r+0x4d4>
   2f1c0:	013fffc4 	movi	r4,-1
   2f1c4:	99000226 	beq	r19,r4,2f1d0 <___svfprintf_internal_r+0x19c>
   2f1c8:	d8000b15 	stw	zero,44(sp)
   2f1cc:	00000106 	br	2f1d4 <___svfprintf_internal_r+0x1a0>
   2f1d0:	04c00044 	movi	r19,1
   2f1d4:	01001a44 	movi	r4,105
   2f1d8:	11001626 	beq	r2,r4,2f234 <___svfprintf_internal_r+0x200>
   2f1dc:	20800916 	blt	r4,r2,2f204 <___svfprintf_internal_r+0x1d0>
   2f1e0:	010018c4 	movi	r4,99
   2f1e4:	11008826 	beq	r2,r4,2f408 <___svfprintf_internal_r+0x3d4>
   2f1e8:	01001904 	movi	r4,100
   2f1ec:	11001126 	beq	r2,r4,2f234 <___svfprintf_internal_r+0x200>
   2f1f0:	01001604 	movi	r4,88
   2f1f4:	1100c81e 	bne	r2,r4,2f518 <___svfprintf_internal_r+0x4e4>
   2f1f8:	00c00044 	movi	r3,1
   2f1fc:	d8c00e15 	stw	r3,56(sp)
   2f200:	00001506 	br	2f258 <___svfprintf_internal_r+0x224>
   2f204:	01001cc4 	movi	r4,115
   2f208:	11009826 	beq	r2,r4,2f46c <___svfprintf_internal_r+0x438>
   2f20c:	20800416 	blt	r4,r2,2f220 <___svfprintf_internal_r+0x1ec>
   2f210:	01001bc4 	movi	r4,111
   2f214:	1100c01e 	bne	r2,r4,2f518 <___svfprintf_internal_r+0x4e4>
   2f218:	05400204 	movi	r21,8
   2f21c:	00000f06 	br	2f25c <___svfprintf_internal_r+0x228>
   2f220:	01001d44 	movi	r4,117
   2f224:	11000d26 	beq	r2,r4,2f25c <___svfprintf_internal_r+0x228>
   2f228:	01001e04 	movi	r4,120
   2f22c:	11000a26 	beq	r2,r4,2f258 <___svfprintf_internal_r+0x224>
   2f230:	0000b906 	br	2f518 <___svfprintf_internal_r+0x4e4>
   2f234:	d8c00a17 	ldw	r3,40(sp)
   2f238:	b7000104 	addi	fp,r22,4
   2f23c:	18000726 	beq	r3,zero,2f25c <___svfprintf_internal_r+0x228>
   2f240:	df000d15 	stw	fp,52(sp)
   2f244:	b5c00017 	ldw	r23,0(r22)
   2f248:	b800080e 	bge	r23,zero,2f26c <___svfprintf_internal_r+0x238>
   2f24c:	05efc83a 	sub	r23,zero,r23
   2f250:	02400044 	movi	r9,1
   2f254:	00000606 	br	2f270 <___svfprintf_internal_r+0x23c>
   2f258:	05400404 	movi	r21,16
   2f25c:	b0c00104 	addi	r3,r22,4
   2f260:	d8c00d15 	stw	r3,52(sp)
   2f264:	b5c00017 	ldw	r23,0(r22)
   2f268:	d8000a15 	stw	zero,40(sp)
   2f26c:	0013883a 	mov	r9,zero
   2f270:	d839883a 	mov	fp,sp
   2f274:	b8001726 	beq	r23,zero,2f2d4 <___svfprintf_internal_r+0x2a0>
   2f278:	a80b883a 	mov	r5,r21
   2f27c:	b809883a 	mov	r4,r23
   2f280:	da401015 	stw	r9,64(sp)
   2f284:	002b2a00 	call	2b2a0 <__udivsi3>
   2f288:	a80b883a 	mov	r5,r21
   2f28c:	1009883a 	mov	r4,r2
   2f290:	102d883a 	mov	r22,r2
   2f294:	002b35c0 	call	2b35c <__mulsi3>
   2f298:	b885c83a 	sub	r2,r23,r2
   2f29c:	00c00244 	movi	r3,9
   2f2a0:	da401017 	ldw	r9,64(sp)
   2f2a4:	18800216 	blt	r3,r2,2f2b0 <___svfprintf_internal_r+0x27c>
   2f2a8:	10800c04 	addi	r2,r2,48
   2f2ac:	00000506 	br	2f2c4 <___svfprintf_internal_r+0x290>
   2f2b0:	d8c00e17 	ldw	r3,56(sp)
   2f2b4:	18000226 	beq	r3,zero,2f2c0 <___svfprintf_internal_r+0x28c>
   2f2b8:	10800dc4 	addi	r2,r2,55
   2f2bc:	00000106 	br	2f2c4 <___svfprintf_internal_r+0x290>
   2f2c0:	108015c4 	addi	r2,r2,87
   2f2c4:	e0800005 	stb	r2,0(fp)
   2f2c8:	b02f883a 	mov	r23,r22
   2f2cc:	e7000044 	addi	fp,fp,1
   2f2d0:	003fe806 	br	2f274 <_gp+0xffff4234>
   2f2d4:	e6efc83a 	sub	r23,fp,sp
   2f2d8:	9dc5c83a 	sub	r2,r19,r23
   2f2dc:	0080090e 	bge	zero,r2,2f304 <___svfprintf_internal_r+0x2d0>
   2f2e0:	e085883a 	add	r2,fp,r2
   2f2e4:	01400c04 	movi	r5,48
   2f2e8:	d8c00917 	ldw	r3,36(sp)
   2f2ec:	e009883a 	mov	r4,fp
   2f2f0:	e0c0032e 	bgeu	fp,r3,2f300 <___svfprintf_internal_r+0x2cc>
   2f2f4:	e7000044 	addi	fp,fp,1
   2f2f8:	21400005 	stb	r5,0(r4)
   2f2fc:	e0bffa1e 	bne	fp,r2,2f2e8 <_gp+0xffff42a8>
   2f300:	e6efc83a 	sub	r23,fp,sp
   2f304:	d8c00b17 	ldw	r3,44(sp)
   2f308:	4dd1883a 	add	r8,r9,r23
   2f30c:	922dc83a 	sub	r22,r18,r8
   2f310:	18001626 	beq	r3,zero,2f36c <___svfprintf_internal_r+0x338>
   2f314:	48000a26 	beq	r9,zero,2f340 <___svfprintf_internal_r+0x30c>
   2f318:	00800b44 	movi	r2,45
   2f31c:	d8800805 	stb	r2,32(sp)
   2f320:	88800117 	ldw	r2,4(r17)
   2f324:	01c00044 	movi	r7,1
   2f328:	d9800804 	addi	r6,sp,32
   2f32c:	880b883a 	mov	r5,r17
   2f330:	a009883a 	mov	r4,r20
   2f334:	103ee83a 	callr	r2
   2f338:	10004a1e 	bne	r2,zero,2f464 <___svfprintf_internal_r+0x430>
   2f33c:	84000044 	addi	r16,r16,1
   2f340:	0580070e 	bge	zero,r22,2f360 <___svfprintf_internal_r+0x32c>
   2f344:	b00f883a 	mov	r7,r22
   2f348:	01800c04 	movi	r6,48
   2f34c:	880b883a 	mov	r5,r17
   2f350:	a009883a 	mov	r4,r20
   2f354:	002efc80 	call	2efc8 <print_repeat>
   2f358:	1000421e 	bne	r2,zero,2f464 <___svfprintf_internal_r+0x430>
   2f35c:	85a1883a 	add	r16,r16,r22
   2f360:	e02d883a 	mov	r22,fp
   2f364:	bf2fc83a 	sub	r23,r23,fp
   2f368:	00002006 	br	2f3ec <___svfprintf_internal_r+0x3b8>
   2f36c:	0580090e 	bge	zero,r22,2f394 <___svfprintf_internal_r+0x360>
   2f370:	b00f883a 	mov	r7,r22
   2f374:	01800804 	movi	r6,32
   2f378:	880b883a 	mov	r5,r17
   2f37c:	a009883a 	mov	r4,r20
   2f380:	da401015 	stw	r9,64(sp)
   2f384:	002efc80 	call	2efc8 <print_repeat>
   2f388:	da401017 	ldw	r9,64(sp)
   2f38c:	1000351e 	bne	r2,zero,2f464 <___svfprintf_internal_r+0x430>
   2f390:	85a1883a 	add	r16,r16,r22
   2f394:	483ff226 	beq	r9,zero,2f360 <_gp+0xffff4320>
   2f398:	00800b44 	movi	r2,45
   2f39c:	d8800805 	stb	r2,32(sp)
   2f3a0:	88800117 	ldw	r2,4(r17)
   2f3a4:	01c00044 	movi	r7,1
   2f3a8:	d9800804 	addi	r6,sp,32
   2f3ac:	880b883a 	mov	r5,r17
   2f3b0:	a009883a 	mov	r4,r20
   2f3b4:	103ee83a 	callr	r2
   2f3b8:	10002a1e 	bne	r2,zero,2f464 <___svfprintf_internal_r+0x430>
   2f3bc:	84000044 	addi	r16,r16,1
   2f3c0:	003fe706 	br	2f360 <_gp+0xffff4320>
   2f3c4:	b5bfffc4 	addi	r22,r22,-1
   2f3c8:	b0800003 	ldbu	r2,0(r22)
   2f3cc:	01c00044 	movi	r7,1
   2f3d0:	d9800804 	addi	r6,sp,32
   2f3d4:	d8800805 	stb	r2,32(sp)
   2f3d8:	88800117 	ldw	r2,4(r17)
   2f3dc:	880b883a 	mov	r5,r17
   2f3e0:	a009883a 	mov	r4,r20
   2f3e4:	103ee83a 	callr	r2
   2f3e8:	10001e1e 	bne	r2,zero,2f464 <___svfprintf_internal_r+0x430>
   2f3ec:	8585c83a 	sub	r2,r16,r22
   2f3f0:	b5c9883a 	add	r4,r22,r23
   2f3f4:	e085883a 	add	r2,fp,r2
   2f3f8:	013ff216 	blt	zero,r4,2f3c4 <_gp+0xffff4384>
   2f3fc:	1021883a 	mov	r16,r2
   2f400:	dd800d17 	ldw	r22,52(sp)
   2f404:	00004406 	br	2f518 <___svfprintf_internal_r+0x4e4>
   2f408:	00800044 	movi	r2,1
   2f40c:	1480080e 	bge	r2,r18,2f430 <___svfprintf_internal_r+0x3fc>
   2f410:	95ffffc4 	addi	r23,r18,-1
   2f414:	b80f883a 	mov	r7,r23
   2f418:	01800804 	movi	r6,32
   2f41c:	880b883a 	mov	r5,r17
   2f420:	a009883a 	mov	r4,r20
   2f424:	002efc80 	call	2efc8 <print_repeat>
   2f428:	10000e1e 	bne	r2,zero,2f464 <___svfprintf_internal_r+0x430>
   2f42c:	85e1883a 	add	r16,r16,r23
   2f430:	b0800017 	ldw	r2,0(r22)
   2f434:	01c00044 	movi	r7,1
   2f438:	d80d883a 	mov	r6,sp
   2f43c:	d8800005 	stb	r2,0(sp)
   2f440:	88800117 	ldw	r2,4(r17)
   2f444:	880b883a 	mov	r5,r17
   2f448:	a009883a 	mov	r4,r20
   2f44c:	b5c00104 	addi	r23,r22,4
   2f450:	103ee83a 	callr	r2
   2f454:	1000031e 	bne	r2,zero,2f464 <___svfprintf_internal_r+0x430>
   2f458:	84000044 	addi	r16,r16,1
   2f45c:	b82d883a 	mov	r22,r23
   2f460:	00002d06 	br	2f518 <___svfprintf_internal_r+0x4e4>
   2f464:	00bfffc4 	movi	r2,-1
   2f468:	00003106 	br	2f530 <___svfprintf_internal_r+0x4fc>
   2f46c:	b5c00017 	ldw	r23,0(r22)
   2f470:	b7000104 	addi	fp,r22,4
   2f474:	b809883a 	mov	r4,r23
   2f478:	002ee980 	call	2ee98 <strlen>
   2f47c:	9091c83a 	sub	r8,r18,r2
   2f480:	102d883a 	mov	r22,r2
   2f484:	0200090e 	bge	zero,r8,2f4ac <___svfprintf_internal_r+0x478>
   2f488:	400f883a 	mov	r7,r8
   2f48c:	01800804 	movi	r6,32
   2f490:	880b883a 	mov	r5,r17
   2f494:	a009883a 	mov	r4,r20
   2f498:	da001015 	stw	r8,64(sp)
   2f49c:	002efc80 	call	2efc8 <print_repeat>
   2f4a0:	da001017 	ldw	r8,64(sp)
   2f4a4:	103fef1e 	bne	r2,zero,2f464 <_gp+0xffff4424>
   2f4a8:	8221883a 	add	r16,r16,r8
   2f4ac:	88800117 	ldw	r2,4(r17)
   2f4b0:	b00f883a 	mov	r7,r22
   2f4b4:	b80d883a 	mov	r6,r23
   2f4b8:	880b883a 	mov	r5,r17
   2f4bc:	a009883a 	mov	r4,r20
   2f4c0:	103ee83a 	callr	r2
   2f4c4:	103fe71e 	bne	r2,zero,2f464 <_gp+0xffff4424>
   2f4c8:	85a1883a 	add	r16,r16,r22
   2f4cc:	e02d883a 	mov	r22,fp
   2f4d0:	00001106 	br	2f518 <___svfprintf_internal_r+0x4e4>
   2f4d4:	00c00044 	movi	r3,1
   2f4d8:	04ffffc4 	movi	r19,-1
   2f4dc:	d8000e15 	stw	zero,56(sp)
   2f4e0:	d8c00a15 	stw	r3,40(sp)
   2f4e4:	05400284 	movi	r21,10
   2f4e8:	9825883a 	mov	r18,r19
   2f4ec:	d8000c15 	stw	zero,48(sp)
   2f4f0:	d8000b15 	stw	zero,44(sp)
   2f4f4:	182f883a 	mov	r23,r3
   2f4f8:	00000806 	br	2f51c <___svfprintf_internal_r+0x4e8>
   2f4fc:	ddc00b15 	stw	r23,44(sp)
   2f500:	05c00084 	movi	r23,2
   2f504:	00000506 	br	2f51c <___svfprintf_internal_r+0x4e8>
   2f508:	00c00044 	movi	r3,1
   2f50c:	d8c00c15 	stw	r3,48(sp)
   2f510:	05c000c4 	movi	r23,3
   2f514:	00000106 	br	2f51c <___svfprintf_internal_r+0x4e8>
   2f518:	002f883a 	mov	r23,zero
   2f51c:	d8c00f17 	ldw	r3,60(sp)
   2f520:	18c00044 	addi	r3,r3,1
   2f524:	d8c00f15 	stw	r3,60(sp)
   2f528:	003edc06 	br	2f09c <_gp+0xffff405c>
   2f52c:	8005883a 	mov	r2,r16
   2f530:	dfc01a17 	ldw	ra,104(sp)
   2f534:	df001917 	ldw	fp,100(sp)
   2f538:	ddc01817 	ldw	r23,96(sp)
   2f53c:	dd801717 	ldw	r22,92(sp)
   2f540:	dd401617 	ldw	r21,88(sp)
   2f544:	dd001517 	ldw	r20,84(sp)
   2f548:	dcc01417 	ldw	r19,80(sp)
   2f54c:	dc801317 	ldw	r18,76(sp)
   2f550:	dc401217 	ldw	r17,72(sp)
   2f554:	dc001117 	ldw	r16,68(sp)
   2f558:	dec01b04 	addi	sp,sp,108
   2f55c:	f800283a 	ret

0002f560 <__vfprintf_internal_unused>:
   2f560:	008000f4 	movhi	r2,3
   2f564:	108c1404 	addi	r2,r2,12368
   2f568:	300f883a 	mov	r7,r6
   2f56c:	280d883a 	mov	r6,r5
   2f570:	200b883a 	mov	r5,r4
   2f574:	11000017 	ldw	r4,0(r2)
   2f578:	002f0341 	jmpi	2f034 <___svfprintf_internal_r>

0002f57c <tolower>:
   2f57c:	008000f4 	movhi	r2,3
   2f580:	108c1504 	addi	r2,r2,12372
   2f584:	10800017 	ldw	r2,0(r2)
   2f588:	00c00044 	movi	r3,1
   2f58c:	1105883a 	add	r2,r2,r4
   2f590:	10800043 	ldbu	r2,1(r2)
   2f594:	108000cc 	andi	r2,r2,3
   2f598:	10c0021e 	bne	r2,r3,2f5a4 <tolower+0x28>
   2f59c:	20800804 	addi	r2,r4,32
   2f5a0:	f800283a 	ret
   2f5a4:	2005883a 	mov	r2,r4
   2f5a8:	f800283a 	ret

0002f5ac <print_repeat>:
   2f5ac:	defffb04 	addi	sp,sp,-20
   2f5b0:	dc800315 	stw	r18,12(sp)
   2f5b4:	dc400215 	stw	r17,8(sp)
   2f5b8:	dc000115 	stw	r16,4(sp)
   2f5bc:	dfc00415 	stw	ra,16(sp)
   2f5c0:	2025883a 	mov	r18,r4
   2f5c4:	2823883a 	mov	r17,r5
   2f5c8:	d9800005 	stb	r6,0(sp)
   2f5cc:	3821883a 	mov	r16,r7
   2f5d0:	04000a0e 	bge	zero,r16,2f5fc <print_repeat+0x50>
   2f5d4:	88800117 	ldw	r2,4(r17)
   2f5d8:	01c00044 	movi	r7,1
   2f5dc:	d80d883a 	mov	r6,sp
   2f5e0:	880b883a 	mov	r5,r17
   2f5e4:	9009883a 	mov	r4,r18
   2f5e8:	103ee83a 	callr	r2
   2f5ec:	843fffc4 	addi	r16,r16,-1
   2f5f0:	103ff726 	beq	r2,zero,2f5d0 <_gp+0xffff4590>
   2f5f4:	00bfffc4 	movi	r2,-1
   2f5f8:	00000106 	br	2f600 <print_repeat+0x54>
   2f5fc:	0005883a 	mov	r2,zero
   2f600:	dfc00417 	ldw	ra,16(sp)
   2f604:	dc800317 	ldw	r18,12(sp)
   2f608:	dc400217 	ldw	r17,8(sp)
   2f60c:	dc000117 	ldw	r16,4(sp)
   2f610:	dec00504 	addi	sp,sp,20
   2f614:	f800283a 	ret

0002f618 <___vfprintf_internal_r>:
   2f618:	deffe504 	addi	sp,sp,-108
   2f61c:	d8c00804 	addi	r3,sp,32
   2f620:	ddc01815 	stw	r23,96(sp)
   2f624:	dd801715 	stw	r22,92(sp)
   2f628:	dd401615 	stw	r21,88(sp)
   2f62c:	dd001515 	stw	r20,84(sp)
   2f630:	dcc01415 	stw	r19,80(sp)
   2f634:	dc801315 	stw	r18,76(sp)
   2f638:	dc401215 	stw	r17,72(sp)
   2f63c:	dc001115 	stw	r16,68(sp)
   2f640:	dfc01a15 	stw	ra,104(sp)
   2f644:	df001915 	stw	fp,100(sp)
   2f648:	2029883a 	mov	r20,r4
   2f64c:	2823883a 	mov	r17,r5
   2f650:	382d883a 	mov	r22,r7
   2f654:	d9800f15 	stw	r6,60(sp)
   2f658:	0021883a 	mov	r16,zero
   2f65c:	d8000e15 	stw	zero,56(sp)
   2f660:	d8000a15 	stw	zero,40(sp)
   2f664:	002b883a 	mov	r21,zero
   2f668:	0027883a 	mov	r19,zero
   2f66c:	0025883a 	mov	r18,zero
   2f670:	d8000c15 	stw	zero,48(sp)
   2f674:	d8000b15 	stw	zero,44(sp)
   2f678:	002f883a 	mov	r23,zero
   2f67c:	d8c00915 	stw	r3,36(sp)
   2f680:	d8c00f17 	ldw	r3,60(sp)
   2f684:	19000003 	ldbu	r4,0(r3)
   2f688:	20803fcc 	andi	r2,r4,255
   2f68c:	1080201c 	xori	r2,r2,128
   2f690:	10bfe004 	addi	r2,r2,-128
   2f694:	10011e26 	beq	r2,zero,2fb10 <___vfprintf_internal_r+0x4f8>
   2f698:	00c00044 	movi	r3,1
   2f69c:	b8c01426 	beq	r23,r3,2f6f0 <___vfprintf_internal_r+0xd8>
   2f6a0:	1dc00216 	blt	r3,r23,2f6ac <___vfprintf_internal_r+0x94>
   2f6a4:	b8000626 	beq	r23,zero,2f6c0 <___vfprintf_internal_r+0xa8>
   2f6a8:	00011506 	br	2fb00 <___vfprintf_internal_r+0x4e8>
   2f6ac:	01400084 	movi	r5,2
   2f6b0:	b9401d26 	beq	r23,r5,2f728 <___vfprintf_internal_r+0x110>
   2f6b4:	014000c4 	movi	r5,3
   2f6b8:	b9402b26 	beq	r23,r5,2f768 <___vfprintf_internal_r+0x150>
   2f6bc:	00011006 	br	2fb00 <___vfprintf_internal_r+0x4e8>
   2f6c0:	01400944 	movi	r5,37
   2f6c4:	1140fc26 	beq	r2,r5,2fab8 <___vfprintf_internal_r+0x4a0>
   2f6c8:	88800117 	ldw	r2,4(r17)
   2f6cc:	d9000005 	stb	r4,0(sp)
   2f6d0:	01c00044 	movi	r7,1
   2f6d4:	d80d883a 	mov	r6,sp
   2f6d8:	880b883a 	mov	r5,r17
   2f6dc:	a009883a 	mov	r4,r20
   2f6e0:	103ee83a 	callr	r2
   2f6e4:	1000d81e 	bne	r2,zero,2fa48 <___vfprintf_internal_r+0x430>
   2f6e8:	84000044 	addi	r16,r16,1
   2f6ec:	00010406 	br	2fb00 <___vfprintf_internal_r+0x4e8>
   2f6f0:	01400c04 	movi	r5,48
   2f6f4:	1140fa26 	beq	r2,r5,2fae0 <___vfprintf_internal_r+0x4c8>
   2f6f8:	01400944 	movi	r5,37
   2f6fc:	11400a1e 	bne	r2,r5,2f728 <___vfprintf_internal_r+0x110>
   2f700:	d8800005 	stb	r2,0(sp)
   2f704:	88800117 	ldw	r2,4(r17)
   2f708:	b80f883a 	mov	r7,r23
   2f70c:	d80d883a 	mov	r6,sp
   2f710:	880b883a 	mov	r5,r17
   2f714:	a009883a 	mov	r4,r20
   2f718:	103ee83a 	callr	r2
   2f71c:	1000ca1e 	bne	r2,zero,2fa48 <___vfprintf_internal_r+0x430>
   2f720:	84000044 	addi	r16,r16,1
   2f724:	0000f506 	br	2fafc <___vfprintf_internal_r+0x4e4>
   2f728:	25fff404 	addi	r23,r4,-48
   2f72c:	bdc03fcc 	andi	r23,r23,255
   2f730:	00c00244 	movi	r3,9
   2f734:	1dc00936 	bltu	r3,r23,2f75c <___vfprintf_internal_r+0x144>
   2f738:	00bfffc4 	movi	r2,-1
   2f73c:	90800426 	beq	r18,r2,2f750 <___vfprintf_internal_r+0x138>
   2f740:	01400284 	movi	r5,10
   2f744:	9009883a 	mov	r4,r18
   2f748:	002b35c0 	call	2b35c <__mulsi3>
   2f74c:	00000106 	br	2f754 <___vfprintf_internal_r+0x13c>
   2f750:	0005883a 	mov	r2,zero
   2f754:	b8a5883a 	add	r18,r23,r2
   2f758:	0000e206 	br	2fae4 <___vfprintf_internal_r+0x4cc>
   2f75c:	01400b84 	movi	r5,46
   2f760:	1140e426 	beq	r2,r5,2faf4 <___vfprintf_internal_r+0x4dc>
   2f764:	05c00084 	movi	r23,2
   2f768:	213ff404 	addi	r4,r4,-48
   2f76c:	27003fcc 	andi	fp,r4,255
   2f770:	00c00244 	movi	r3,9
   2f774:	1f000936 	bltu	r3,fp,2f79c <___vfprintf_internal_r+0x184>
   2f778:	00bfffc4 	movi	r2,-1
   2f77c:	98800426 	beq	r19,r2,2f790 <___vfprintf_internal_r+0x178>
   2f780:	01400284 	movi	r5,10
   2f784:	9809883a 	mov	r4,r19
   2f788:	002b35c0 	call	2b35c <__mulsi3>
   2f78c:	00000106 	br	2f794 <___vfprintf_internal_r+0x17c>
   2f790:	0005883a 	mov	r2,zero
   2f794:	e0a7883a 	add	r19,fp,r2
   2f798:	0000d906 	br	2fb00 <___vfprintf_internal_r+0x4e8>
   2f79c:	00c01b04 	movi	r3,108
   2f7a0:	10c0d226 	beq	r2,r3,2faec <___vfprintf_internal_r+0x4d4>
   2f7a4:	013fffc4 	movi	r4,-1
   2f7a8:	99000226 	beq	r19,r4,2f7b4 <___vfprintf_internal_r+0x19c>
   2f7ac:	d8000b15 	stw	zero,44(sp)
   2f7b0:	00000106 	br	2f7b8 <___vfprintf_internal_r+0x1a0>
   2f7b4:	04c00044 	movi	r19,1
   2f7b8:	01001a44 	movi	r4,105
   2f7bc:	11001626 	beq	r2,r4,2f818 <___vfprintf_internal_r+0x200>
   2f7c0:	20800916 	blt	r4,r2,2f7e8 <___vfprintf_internal_r+0x1d0>
   2f7c4:	010018c4 	movi	r4,99
   2f7c8:	11008826 	beq	r2,r4,2f9ec <___vfprintf_internal_r+0x3d4>
   2f7cc:	01001904 	movi	r4,100
   2f7d0:	11001126 	beq	r2,r4,2f818 <___vfprintf_internal_r+0x200>
   2f7d4:	01001604 	movi	r4,88
   2f7d8:	1100c81e 	bne	r2,r4,2fafc <___vfprintf_internal_r+0x4e4>
   2f7dc:	00c00044 	movi	r3,1
   2f7e0:	d8c00e15 	stw	r3,56(sp)
   2f7e4:	00001506 	br	2f83c <___vfprintf_internal_r+0x224>
   2f7e8:	01001cc4 	movi	r4,115
   2f7ec:	11009826 	beq	r2,r4,2fa50 <___vfprintf_internal_r+0x438>
   2f7f0:	20800416 	blt	r4,r2,2f804 <___vfprintf_internal_r+0x1ec>
   2f7f4:	01001bc4 	movi	r4,111
   2f7f8:	1100c01e 	bne	r2,r4,2fafc <___vfprintf_internal_r+0x4e4>
   2f7fc:	05400204 	movi	r21,8
   2f800:	00000f06 	br	2f840 <___vfprintf_internal_r+0x228>
   2f804:	01001d44 	movi	r4,117
   2f808:	11000d26 	beq	r2,r4,2f840 <___vfprintf_internal_r+0x228>
   2f80c:	01001e04 	movi	r4,120
   2f810:	11000a26 	beq	r2,r4,2f83c <___vfprintf_internal_r+0x224>
   2f814:	0000b906 	br	2fafc <___vfprintf_internal_r+0x4e4>
   2f818:	d8c00a17 	ldw	r3,40(sp)
   2f81c:	b7000104 	addi	fp,r22,4
   2f820:	18000726 	beq	r3,zero,2f840 <___vfprintf_internal_r+0x228>
   2f824:	df000d15 	stw	fp,52(sp)
   2f828:	b5c00017 	ldw	r23,0(r22)
   2f82c:	b800080e 	bge	r23,zero,2f850 <___vfprintf_internal_r+0x238>
   2f830:	05efc83a 	sub	r23,zero,r23
   2f834:	02400044 	movi	r9,1
   2f838:	00000606 	br	2f854 <___vfprintf_internal_r+0x23c>
   2f83c:	05400404 	movi	r21,16
   2f840:	b0c00104 	addi	r3,r22,4
   2f844:	d8c00d15 	stw	r3,52(sp)
   2f848:	b5c00017 	ldw	r23,0(r22)
   2f84c:	d8000a15 	stw	zero,40(sp)
   2f850:	0013883a 	mov	r9,zero
   2f854:	d839883a 	mov	fp,sp
   2f858:	b8001726 	beq	r23,zero,2f8b8 <___vfprintf_internal_r+0x2a0>
   2f85c:	a80b883a 	mov	r5,r21
   2f860:	b809883a 	mov	r4,r23
   2f864:	da401015 	stw	r9,64(sp)
   2f868:	002b2a00 	call	2b2a0 <__udivsi3>
   2f86c:	a80b883a 	mov	r5,r21
   2f870:	1009883a 	mov	r4,r2
   2f874:	102d883a 	mov	r22,r2
   2f878:	002b35c0 	call	2b35c <__mulsi3>
   2f87c:	b885c83a 	sub	r2,r23,r2
   2f880:	00c00244 	movi	r3,9
   2f884:	da401017 	ldw	r9,64(sp)
   2f888:	18800216 	blt	r3,r2,2f894 <___vfprintf_internal_r+0x27c>
   2f88c:	10800c04 	addi	r2,r2,48
   2f890:	00000506 	br	2f8a8 <___vfprintf_internal_r+0x290>
   2f894:	d8c00e17 	ldw	r3,56(sp)
   2f898:	18000226 	beq	r3,zero,2f8a4 <___vfprintf_internal_r+0x28c>
   2f89c:	10800dc4 	addi	r2,r2,55
   2f8a0:	00000106 	br	2f8a8 <___vfprintf_internal_r+0x290>
   2f8a4:	108015c4 	addi	r2,r2,87
   2f8a8:	e0800005 	stb	r2,0(fp)
   2f8ac:	b02f883a 	mov	r23,r22
   2f8b0:	e7000044 	addi	fp,fp,1
   2f8b4:	003fe806 	br	2f858 <_gp+0xffff4818>
   2f8b8:	e6efc83a 	sub	r23,fp,sp
   2f8bc:	9dc5c83a 	sub	r2,r19,r23
   2f8c0:	0080090e 	bge	zero,r2,2f8e8 <___vfprintf_internal_r+0x2d0>
   2f8c4:	e085883a 	add	r2,fp,r2
   2f8c8:	01400c04 	movi	r5,48
   2f8cc:	d8c00917 	ldw	r3,36(sp)
   2f8d0:	e009883a 	mov	r4,fp
   2f8d4:	e0c0032e 	bgeu	fp,r3,2f8e4 <___vfprintf_internal_r+0x2cc>
   2f8d8:	e7000044 	addi	fp,fp,1
   2f8dc:	21400005 	stb	r5,0(r4)
   2f8e0:	e0bffa1e 	bne	fp,r2,2f8cc <_gp+0xffff488c>
   2f8e4:	e6efc83a 	sub	r23,fp,sp
   2f8e8:	d8c00b17 	ldw	r3,44(sp)
   2f8ec:	4dd1883a 	add	r8,r9,r23
   2f8f0:	922dc83a 	sub	r22,r18,r8
   2f8f4:	18001626 	beq	r3,zero,2f950 <___vfprintf_internal_r+0x338>
   2f8f8:	48000a26 	beq	r9,zero,2f924 <___vfprintf_internal_r+0x30c>
   2f8fc:	00800b44 	movi	r2,45
   2f900:	d8800805 	stb	r2,32(sp)
   2f904:	88800117 	ldw	r2,4(r17)
   2f908:	01c00044 	movi	r7,1
   2f90c:	d9800804 	addi	r6,sp,32
   2f910:	880b883a 	mov	r5,r17
   2f914:	a009883a 	mov	r4,r20
   2f918:	103ee83a 	callr	r2
   2f91c:	10004a1e 	bne	r2,zero,2fa48 <___vfprintf_internal_r+0x430>
   2f920:	84000044 	addi	r16,r16,1
   2f924:	0580070e 	bge	zero,r22,2f944 <___vfprintf_internal_r+0x32c>
   2f928:	b00f883a 	mov	r7,r22
   2f92c:	01800c04 	movi	r6,48
   2f930:	880b883a 	mov	r5,r17
   2f934:	a009883a 	mov	r4,r20
   2f938:	002f5ac0 	call	2f5ac <print_repeat>
   2f93c:	1000421e 	bne	r2,zero,2fa48 <___vfprintf_internal_r+0x430>
   2f940:	85a1883a 	add	r16,r16,r22
   2f944:	e02d883a 	mov	r22,fp
   2f948:	bf2fc83a 	sub	r23,r23,fp
   2f94c:	00002006 	br	2f9d0 <___vfprintf_internal_r+0x3b8>
   2f950:	0580090e 	bge	zero,r22,2f978 <___vfprintf_internal_r+0x360>
   2f954:	b00f883a 	mov	r7,r22
   2f958:	01800804 	movi	r6,32
   2f95c:	880b883a 	mov	r5,r17
   2f960:	a009883a 	mov	r4,r20
   2f964:	da401015 	stw	r9,64(sp)
   2f968:	002f5ac0 	call	2f5ac <print_repeat>
   2f96c:	da401017 	ldw	r9,64(sp)
   2f970:	1000351e 	bne	r2,zero,2fa48 <___vfprintf_internal_r+0x430>
   2f974:	85a1883a 	add	r16,r16,r22
   2f978:	483ff226 	beq	r9,zero,2f944 <_gp+0xffff4904>
   2f97c:	00800b44 	movi	r2,45
   2f980:	d8800805 	stb	r2,32(sp)
   2f984:	88800117 	ldw	r2,4(r17)
   2f988:	01c00044 	movi	r7,1
   2f98c:	d9800804 	addi	r6,sp,32
   2f990:	880b883a 	mov	r5,r17
   2f994:	a009883a 	mov	r4,r20
   2f998:	103ee83a 	callr	r2
   2f99c:	10002a1e 	bne	r2,zero,2fa48 <___vfprintf_internal_r+0x430>
   2f9a0:	84000044 	addi	r16,r16,1
   2f9a4:	003fe706 	br	2f944 <_gp+0xffff4904>
   2f9a8:	b5bfffc4 	addi	r22,r22,-1
   2f9ac:	b0800003 	ldbu	r2,0(r22)
   2f9b0:	01c00044 	movi	r7,1
   2f9b4:	d9800804 	addi	r6,sp,32
   2f9b8:	d8800805 	stb	r2,32(sp)
   2f9bc:	88800117 	ldw	r2,4(r17)
   2f9c0:	880b883a 	mov	r5,r17
   2f9c4:	a009883a 	mov	r4,r20
   2f9c8:	103ee83a 	callr	r2
   2f9cc:	10001e1e 	bne	r2,zero,2fa48 <___vfprintf_internal_r+0x430>
   2f9d0:	8585c83a 	sub	r2,r16,r22
   2f9d4:	b5c9883a 	add	r4,r22,r23
   2f9d8:	e085883a 	add	r2,fp,r2
   2f9dc:	013ff216 	blt	zero,r4,2f9a8 <_gp+0xffff4968>
   2f9e0:	1021883a 	mov	r16,r2
   2f9e4:	dd800d17 	ldw	r22,52(sp)
   2f9e8:	00004406 	br	2fafc <___vfprintf_internal_r+0x4e4>
   2f9ec:	00800044 	movi	r2,1
   2f9f0:	1480080e 	bge	r2,r18,2fa14 <___vfprintf_internal_r+0x3fc>
   2f9f4:	95ffffc4 	addi	r23,r18,-1
   2f9f8:	b80f883a 	mov	r7,r23
   2f9fc:	01800804 	movi	r6,32
   2fa00:	880b883a 	mov	r5,r17
   2fa04:	a009883a 	mov	r4,r20
   2fa08:	002f5ac0 	call	2f5ac <print_repeat>
   2fa0c:	10000e1e 	bne	r2,zero,2fa48 <___vfprintf_internal_r+0x430>
   2fa10:	85e1883a 	add	r16,r16,r23
   2fa14:	b0800017 	ldw	r2,0(r22)
   2fa18:	01c00044 	movi	r7,1
   2fa1c:	d80d883a 	mov	r6,sp
   2fa20:	d8800005 	stb	r2,0(sp)
   2fa24:	88800117 	ldw	r2,4(r17)
   2fa28:	880b883a 	mov	r5,r17
   2fa2c:	a009883a 	mov	r4,r20
   2fa30:	b5c00104 	addi	r23,r22,4
   2fa34:	103ee83a 	callr	r2
   2fa38:	1000031e 	bne	r2,zero,2fa48 <___vfprintf_internal_r+0x430>
   2fa3c:	84000044 	addi	r16,r16,1
   2fa40:	b82d883a 	mov	r22,r23
   2fa44:	00002d06 	br	2fafc <___vfprintf_internal_r+0x4e4>
   2fa48:	00bfffc4 	movi	r2,-1
   2fa4c:	00003106 	br	2fb14 <___vfprintf_internal_r+0x4fc>
   2fa50:	b5c00017 	ldw	r23,0(r22)
   2fa54:	b7000104 	addi	fp,r22,4
   2fa58:	b809883a 	mov	r4,r23
   2fa5c:	002ee980 	call	2ee98 <strlen>
   2fa60:	9091c83a 	sub	r8,r18,r2
   2fa64:	102d883a 	mov	r22,r2
   2fa68:	0200090e 	bge	zero,r8,2fa90 <___vfprintf_internal_r+0x478>
   2fa6c:	400f883a 	mov	r7,r8
   2fa70:	01800804 	movi	r6,32
   2fa74:	880b883a 	mov	r5,r17
   2fa78:	a009883a 	mov	r4,r20
   2fa7c:	da001015 	stw	r8,64(sp)
   2fa80:	002f5ac0 	call	2f5ac <print_repeat>
   2fa84:	da001017 	ldw	r8,64(sp)
   2fa88:	103fef1e 	bne	r2,zero,2fa48 <_gp+0xffff4a08>
   2fa8c:	8221883a 	add	r16,r16,r8
   2fa90:	88800117 	ldw	r2,4(r17)
   2fa94:	b00f883a 	mov	r7,r22
   2fa98:	b80d883a 	mov	r6,r23
   2fa9c:	880b883a 	mov	r5,r17
   2faa0:	a009883a 	mov	r4,r20
   2faa4:	103ee83a 	callr	r2
   2faa8:	103fe71e 	bne	r2,zero,2fa48 <_gp+0xffff4a08>
   2faac:	85a1883a 	add	r16,r16,r22
   2fab0:	e02d883a 	mov	r22,fp
   2fab4:	00001106 	br	2fafc <___vfprintf_internal_r+0x4e4>
   2fab8:	00c00044 	movi	r3,1
   2fabc:	04ffffc4 	movi	r19,-1
   2fac0:	d8000e15 	stw	zero,56(sp)
   2fac4:	d8c00a15 	stw	r3,40(sp)
   2fac8:	05400284 	movi	r21,10
   2facc:	9825883a 	mov	r18,r19
   2fad0:	d8000c15 	stw	zero,48(sp)
   2fad4:	d8000b15 	stw	zero,44(sp)
   2fad8:	182f883a 	mov	r23,r3
   2fadc:	00000806 	br	2fb00 <___vfprintf_internal_r+0x4e8>
   2fae0:	ddc00b15 	stw	r23,44(sp)
   2fae4:	05c00084 	movi	r23,2
   2fae8:	00000506 	br	2fb00 <___vfprintf_internal_r+0x4e8>
   2faec:	00c00044 	movi	r3,1
   2faf0:	d8c00c15 	stw	r3,48(sp)
   2faf4:	05c000c4 	movi	r23,3
   2faf8:	00000106 	br	2fb00 <___vfprintf_internal_r+0x4e8>
   2fafc:	002f883a 	mov	r23,zero
   2fb00:	d8c00f17 	ldw	r3,60(sp)
   2fb04:	18c00044 	addi	r3,r3,1
   2fb08:	d8c00f15 	stw	r3,60(sp)
   2fb0c:	003edc06 	br	2f680 <_gp+0xffff4640>
   2fb10:	8005883a 	mov	r2,r16
   2fb14:	dfc01a17 	ldw	ra,104(sp)
   2fb18:	df001917 	ldw	fp,100(sp)
   2fb1c:	ddc01817 	ldw	r23,96(sp)
   2fb20:	dd801717 	ldw	r22,92(sp)
   2fb24:	dd401617 	ldw	r21,88(sp)
   2fb28:	dd001517 	ldw	r20,84(sp)
   2fb2c:	dcc01417 	ldw	r19,80(sp)
   2fb30:	dc801317 	ldw	r18,76(sp)
   2fb34:	dc401217 	ldw	r17,72(sp)
   2fb38:	dc001117 	ldw	r16,68(sp)
   2fb3c:	dec01b04 	addi	sp,sp,108
   2fb40:	f800283a 	ret

0002fb44 <__vfprintf_internal>:
   2fb44:	008000f4 	movhi	r2,3
   2fb48:	108c1404 	addi	r2,r2,12368
   2fb4c:	300f883a 	mov	r7,r6
   2fb50:	280d883a 	mov	r6,r5
   2fb54:	200b883a 	mov	r5,r4
   2fb58:	11000017 	ldw	r4,0(r2)
   2fb5c:	002f6181 	jmpi	2f618 <___vfprintf_internal_r>

0002fb60 <_vsnprintf_r>:
   2fb60:	3000040e 	bge	r6,zero,2fb74 <_vsnprintf_r+0x14>
   2fb64:	008022c4 	movi	r2,139
   2fb68:	20800015 	stw	r2,0(r4)
   2fb6c:	00bfffc4 	movi	r2,-1
   2fb70:	f800283a 	ret
   2fb74:	defff604 	addi	sp,sp,-40
   2fb78:	00c08204 	movi	r3,520
   2fb7c:	dfc00915 	stw	ra,36(sp)
   2fb80:	dc400815 	stw	r17,32(sp)
   2fb84:	dc000715 	stw	r16,28(sp)
   2fb88:	d8c0000d 	sth	r3,0(sp)
   2fb8c:	d9400415 	stw	r5,16(sp)
   2fb90:	d9400215 	stw	r5,8(sp)
   2fb94:	3005883a 	mov	r2,r6
   2fb98:	30000226 	beq	r6,zero,2fba4 <_vsnprintf_r+0x44>
   2fb9c:	30ffffc4 	addi	r3,r6,-1
   2fba0:	00000106 	br	2fba8 <_vsnprintf_r+0x48>
   2fba4:	0007883a 	mov	r3,zero
   2fba8:	1021883a 	mov	r16,r2
   2fbac:	00bfffc4 	movi	r2,-1
   2fbb0:	d880008d 	sth	r2,2(sp)
   2fbb4:	008000f4 	movhi	r2,3
   2fbb8:	10bf4204 	addi	r2,r2,-760
   2fbbc:	d8800115 	stw	r2,4(sp)
   2fbc0:	008000f4 	movhi	r2,3
   2fbc4:	108c1404 	addi	r2,r2,12368
   2fbc8:	380d883a 	mov	r6,r7
   2fbcc:	2023883a 	mov	r17,r4
   2fbd0:	d9c00a17 	ldw	r7,40(sp)
   2fbd4:	11000017 	ldw	r4,0(r2)
   2fbd8:	d80b883a 	mov	r5,sp
   2fbdc:	d8c00515 	stw	r3,20(sp)
   2fbe0:	d8c00315 	stw	r3,12(sp)
   2fbe4:	d8000615 	stw	zero,24(sp)
   2fbe8:	002f0340 	call	2f034 <___svfprintf_internal_r>
   2fbec:	00ffffc4 	movi	r3,-1
   2fbf0:	10c0020e 	bge	r2,r3,2fbfc <_vsnprintf_r+0x9c>
   2fbf4:	00c022c4 	movi	r3,139
   2fbf8:	88c00015 	stw	r3,0(r17)
   2fbfc:	80000226 	beq	r16,zero,2fc08 <_vsnprintf_r+0xa8>
   2fc00:	d8c00417 	ldw	r3,16(sp)
   2fc04:	18000005 	stb	zero,0(r3)
   2fc08:	dfc00917 	ldw	ra,36(sp)
   2fc0c:	dc400817 	ldw	r17,32(sp)
   2fc10:	dc000717 	ldw	r16,28(sp)
   2fc14:	dec00a04 	addi	sp,sp,40
   2fc18:	f800283a 	ret

0002fc1c <vsnprintf>:
   2fc1c:	defffe04 	addi	sp,sp,-8
   2fc20:	008000f4 	movhi	r2,3
   2fc24:	d9c00015 	stw	r7,0(sp)
   2fc28:	108c1404 	addi	r2,r2,12368
   2fc2c:	300f883a 	mov	r7,r6
   2fc30:	280d883a 	mov	r6,r5
   2fc34:	200b883a 	mov	r5,r4
   2fc38:	11000017 	ldw	r4,0(r2)
   2fc3c:	dfc00115 	stw	ra,4(sp)
   2fc40:	002fb600 	call	2fb60 <_vsnprintf_r>
   2fc44:	dfc00117 	ldw	ra,4(sp)
   2fc48:	dec00204 	addi	sp,sp,8
   2fc4c:	f800283a 	ret

0002fc50 <__sfvwrite_small_dev>:
   2fc50:	2880000b 	ldhu	r2,0(r5)
   2fc54:	1080020c 	andi	r2,r2,8
   2fc58:	10002126 	beq	r2,zero,2fce0 <__sfvwrite_small_dev+0x90>
   2fc5c:	2880008f 	ldh	r2,2(r5)
   2fc60:	defffa04 	addi	sp,sp,-24
   2fc64:	dc000015 	stw	r16,0(sp)
   2fc68:	dfc00515 	stw	ra,20(sp)
   2fc6c:	dd000415 	stw	r20,16(sp)
   2fc70:	dcc00315 	stw	r19,12(sp)
   2fc74:	dc800215 	stw	r18,8(sp)
   2fc78:	dc400115 	stw	r17,4(sp)
   2fc7c:	2821883a 	mov	r16,r5
   2fc80:	10001216 	blt	r2,zero,2fccc <__sfvwrite_small_dev+0x7c>
   2fc84:	2027883a 	mov	r19,r4
   2fc88:	3025883a 	mov	r18,r6
   2fc8c:	3823883a 	mov	r17,r7
   2fc90:	05010004 	movi	r20,1024
   2fc94:	04400b0e 	bge	zero,r17,2fcc4 <__sfvwrite_small_dev+0x74>
   2fc98:	880f883a 	mov	r7,r17
   2fc9c:	a440010e 	bge	r20,r17,2fca4 <__sfvwrite_small_dev+0x54>
   2fca0:	01c10004 	movi	r7,1024
   2fca4:	8140008f 	ldh	r5,2(r16)
   2fca8:	900d883a 	mov	r6,r18
   2fcac:	9809883a 	mov	r4,r19
   2fcb0:	002ff600 	call	2ff60 <_write_r>
   2fcb4:	0080050e 	bge	zero,r2,2fccc <__sfvwrite_small_dev+0x7c>
   2fcb8:	88a3c83a 	sub	r17,r17,r2
   2fcbc:	90a5883a 	add	r18,r18,r2
   2fcc0:	003ff406 	br	2fc94 <_gp+0xffff4c54>
   2fcc4:	0005883a 	mov	r2,zero
   2fcc8:	00000706 	br	2fce8 <__sfvwrite_small_dev+0x98>
   2fccc:	8080000b 	ldhu	r2,0(r16)
   2fcd0:	10801014 	ori	r2,r2,64
   2fcd4:	8080000d 	sth	r2,0(r16)
   2fcd8:	00bfffc4 	movi	r2,-1
   2fcdc:	00000206 	br	2fce8 <__sfvwrite_small_dev+0x98>
   2fce0:	00bfffc4 	movi	r2,-1
   2fce4:	f800283a 	ret
   2fce8:	dfc00517 	ldw	ra,20(sp)
   2fcec:	dd000417 	ldw	r20,16(sp)
   2fcf0:	dcc00317 	ldw	r19,12(sp)
   2fcf4:	dc800217 	ldw	r18,8(sp)
   2fcf8:	dc400117 	ldw	r17,4(sp)
   2fcfc:	dc000017 	ldw	r16,0(sp)
   2fd00:	dec00604 	addi	sp,sp,24
   2fd04:	f800283a 	ret

0002fd08 <__sfvwrite_small_str>:
   2fd08:	2880000b 	ldhu	r2,0(r5)
   2fd0c:	10c0020c 	andi	r3,r2,8
   2fd10:	18002026 	beq	r3,zero,2fd94 <__sfvwrite_small_str+0x8c>
   2fd14:	28c0008f 	ldh	r3,2(r5)
   2fd18:	defffd04 	addi	sp,sp,-12
   2fd1c:	dc000015 	stw	r16,0(sp)
   2fd20:	dfc00215 	stw	ra,8(sp)
   2fd24:	dc400115 	stw	r17,4(sp)
   2fd28:	2821883a 	mov	r16,r5
   2fd2c:	1800150e 	bge	r3,zero,2fd84 <__sfvwrite_small_str+0x7c>
   2fd30:	10c0800c 	andi	r3,r2,512
   2fd34:	18001326 	beq	r3,zero,2fd84 <__sfvwrite_small_str+0x7c>
   2fd38:	2c400517 	ldw	r17,20(r5)
   2fd3c:	89c0030e 	bge	r17,r7,2fd4c <__sfvwrite_small_str+0x44>
   2fd40:	10c0200c 	andi	r3,r2,128
   2fd44:	18000326 	beq	r3,zero,2fd54 <__sfvwrite_small_str+0x4c>
   2fd48:	00000e06 	br	2fd84 <__sfvwrite_small_str+0x7c>
   2fd4c:	3c40010e 	bge	r7,r17,2fd54 <__sfvwrite_small_str+0x4c>
   2fd50:	3823883a 	mov	r17,r7
   2fd54:	81000417 	ldw	r4,16(r16)
   2fd58:	300b883a 	mov	r5,r6
   2fd5c:	880d883a 	mov	r6,r17
   2fd60:	002fdb00 	call	2fdb0 <memmove>
   2fd64:	80800517 	ldw	r2,20(r16)
   2fd68:	1445c83a 	sub	r2,r2,r17
   2fd6c:	80800515 	stw	r2,20(r16)
   2fd70:	80800417 	ldw	r2,16(r16)
   2fd74:	1463883a 	add	r17,r2,r17
   2fd78:	84400415 	stw	r17,16(r16)
   2fd7c:	0005883a 	mov	r2,zero
   2fd80:	00000606 	br	2fd9c <__sfvwrite_small_str+0x94>
   2fd84:	10801014 	ori	r2,r2,64
   2fd88:	8080000d 	sth	r2,0(r16)
   2fd8c:	00bfffc4 	movi	r2,-1
   2fd90:	00000206 	br	2fd9c <__sfvwrite_small_str+0x94>
   2fd94:	00bfffc4 	movi	r2,-1
   2fd98:	f800283a 	ret
   2fd9c:	dfc00217 	ldw	ra,8(sp)
   2fda0:	dc400117 	ldw	r17,4(sp)
   2fda4:	dc000017 	ldw	r16,0(sp)
   2fda8:	dec00304 	addi	sp,sp,12
   2fdac:	f800283a 	ret

0002fdb0 <memmove>:
   2fdb0:	2005883a 	mov	r2,r4
   2fdb4:	218f883a 	add	r7,r4,r6
   2fdb8:	29000236 	bltu	r5,r4,2fdc4 <memmove+0x14>
   2fdbc:	1007883a 	mov	r3,r2
   2fdc0:	00000c06 	br	2fdf4 <memmove+0x44>
   2fdc4:	2987883a 	add	r3,r5,r6
   2fdc8:	20fffc2e 	bgeu	r4,r3,2fdbc <_gp+0xffff4d7c>
   2fdcc:	380b883a 	mov	r5,r7
   2fdd0:	30cdc83a 	sub	r6,r6,r3
   2fdd4:	1989883a 	add	r4,r3,r6
   2fdd8:	20000526 	beq	r4,zero,2fdf0 <memmove+0x40>
   2fddc:	18ffffc4 	addi	r3,r3,-1
   2fde0:	19000003 	ldbu	r4,0(r3)
   2fde4:	297fffc4 	addi	r5,r5,-1
   2fde8:	29000005 	stb	r4,0(r5)
   2fdec:	003ff906 	br	2fdd4 <_gp+0xffff4d94>
   2fdf0:	f800283a 	ret
   2fdf4:	19c00526 	beq	r3,r7,2fe0c <memmove+0x5c>
   2fdf8:	29000003 	ldbu	r4,0(r5)
   2fdfc:	18c00044 	addi	r3,r3,1
   2fe00:	29400044 	addi	r5,r5,1
   2fe04:	193fffc5 	stb	r4,-1(r3)
   2fe08:	003ffa06 	br	2fdf4 <_gp+0xffff4db4>
   2fe0c:	f800283a 	ret

0002fe10 <_realloc_r>:
   2fe10:	2800021e 	bne	r5,zero,2fe1c <_realloc_r+0xc>
   2fe14:	300b883a 	mov	r5,r6
   2fe18:	002e8fc1 	jmpi	2e8fc <_malloc_r>
   2fe1c:	defffb04 	addi	sp,sp,-20
   2fe20:	dc400115 	stw	r17,4(sp)
   2fe24:	dc000015 	stw	r16,0(sp)
   2fe28:	dfc00415 	stw	ra,16(sp)
   2fe2c:	dcc00315 	stw	r19,12(sp)
   2fe30:	dc800215 	stw	r18,8(sp)
   2fe34:	3023883a 	mov	r17,r6
   2fe38:	2821883a 	mov	r16,r5
   2fe3c:	3000021e 	bne	r6,zero,2fe48 <_realloc_r+0x38>
   2fe40:	002e8180 	call	2e818 <_free_r>
   2fe44:	00001306 	br	2fe94 <_realloc_r+0x84>
   2fe48:	2025883a 	mov	r18,r4
   2fe4c:	002ffb80 	call	2ffb8 <_malloc_usable_size_r>
   2fe50:	14400e2e 	bgeu	r2,r17,2fe8c <_realloc_r+0x7c>
   2fe54:	880b883a 	mov	r5,r17
   2fe58:	9009883a 	mov	r4,r18
   2fe5c:	002e8fc0 	call	2e8fc <_malloc_r>
   2fe60:	1027883a 	mov	r19,r2
   2fe64:	10000b26 	beq	r2,zero,2fe94 <_realloc_r+0x84>
   2fe68:	880d883a 	mov	r6,r17
   2fe6c:	800b883a 	mov	r5,r16
   2fe70:	1009883a 	mov	r4,r2
   2fe74:	002e7d00 	call	2e7d0 <memcpy>
   2fe78:	800b883a 	mov	r5,r16
   2fe7c:	9009883a 	mov	r4,r18
   2fe80:	002e8180 	call	2e818 <_free_r>
   2fe84:	9805883a 	mov	r2,r19
   2fe88:	00000306 	br	2fe98 <_realloc_r+0x88>
   2fe8c:	8005883a 	mov	r2,r16
   2fe90:	00000106 	br	2fe98 <_realloc_r+0x88>
   2fe94:	0005883a 	mov	r2,zero
   2fe98:	dfc00417 	ldw	ra,16(sp)
   2fe9c:	dcc00317 	ldw	r19,12(sp)
   2fea0:	dc800217 	ldw	r18,8(sp)
   2fea4:	dc400117 	ldw	r17,4(sp)
   2fea8:	dc000017 	ldw	r16,0(sp)
   2feac:	dec00504 	addi	sp,sp,20
   2feb0:	f800283a 	ret

0002feb4 <putc>:
   2feb4:	defffd04 	addi	sp,sp,-12
   2feb8:	008000f4 	movhi	r2,3
   2febc:	dc000115 	stw	r16,4(sp)
   2fec0:	dfc00215 	stw	ra,8(sp)
   2fec4:	10bf1404 	addi	r2,r2,-944
   2fec8:	28800115 	stw	r2,4(r5)
   2fecc:	008000f4 	movhi	r2,3
   2fed0:	108c1404 	addi	r2,r2,12368
   2fed4:	d9000005 	stb	r4,0(sp)
   2fed8:	2021883a 	mov	r16,r4
   2fedc:	11000017 	ldw	r4,0(r2)
   2fee0:	01c00044 	movi	r7,1
   2fee4:	d80d883a 	mov	r6,sp
   2fee8:	002fc500 	call	2fc50 <__sfvwrite_small_dev>
   2feec:	00ffffc4 	movi	r3,-1
   2fef0:	10c00126 	beq	r2,r3,2fef8 <putc+0x44>
   2fef4:	8005883a 	mov	r2,r16
   2fef8:	dfc00217 	ldw	ra,8(sp)
   2fefc:	dc000117 	ldw	r16,4(sp)
   2ff00:	dec00304 	addi	sp,sp,12
   2ff04:	f800283a 	ret

0002ff08 <_putc_r>:
   2ff08:	defffd04 	addi	sp,sp,-12
   2ff0c:	008000f4 	movhi	r2,3
   2ff10:	dc000115 	stw	r16,4(sp)
   2ff14:	dfc00215 	stw	ra,8(sp)
   2ff18:	10bf1404 	addi	r2,r2,-944
   2ff1c:	30800115 	stw	r2,4(r6)
   2ff20:	008000f4 	movhi	r2,3
   2ff24:	108c1404 	addi	r2,r2,12368
   2ff28:	11000017 	ldw	r4,0(r2)
   2ff2c:	2821883a 	mov	r16,r5
   2ff30:	01c00044 	movi	r7,1
   2ff34:	300b883a 	mov	r5,r6
   2ff38:	d80d883a 	mov	r6,sp
   2ff3c:	dc000005 	stb	r16,0(sp)
   2ff40:	002fc500 	call	2fc50 <__sfvwrite_small_dev>
   2ff44:	00ffffc4 	movi	r3,-1
   2ff48:	10c00126 	beq	r2,r3,2ff50 <_putc_r+0x48>
   2ff4c:	8005883a 	mov	r2,r16
   2ff50:	dfc00217 	ldw	ra,8(sp)
   2ff54:	dc000117 	ldw	r16,4(sp)
   2ff58:	dec00304 	addi	sp,sp,12
   2ff5c:	f800283a 	ret

0002ff60 <_write_r>:
   2ff60:	defffd04 	addi	sp,sp,-12
   2ff64:	dc000015 	stw	r16,0(sp)
   2ff68:	040000f4 	movhi	r16,3
   2ff6c:	dc400115 	stw	r17,4(sp)
   2ff70:	840ce704 	addi	r16,r16,13212
   2ff74:	2023883a 	mov	r17,r4
   2ff78:	2809883a 	mov	r4,r5
   2ff7c:	300b883a 	mov	r5,r6
   2ff80:	380d883a 	mov	r6,r7
   2ff84:	dfc00215 	stw	ra,8(sp)
   2ff88:	80000015 	stw	zero,0(r16)
   2ff8c:	00303ec0 	call	303ec <write>
   2ff90:	00ffffc4 	movi	r3,-1
   2ff94:	10c0031e 	bne	r2,r3,2ffa4 <_write_r+0x44>
   2ff98:	80c00017 	ldw	r3,0(r16)
   2ff9c:	18000126 	beq	r3,zero,2ffa4 <_write_r+0x44>
   2ffa0:	88c00015 	stw	r3,0(r17)
   2ffa4:	dfc00217 	ldw	ra,8(sp)
   2ffa8:	dc400117 	ldw	r17,4(sp)
   2ffac:	dc000017 	ldw	r16,0(sp)
   2ffb0:	dec00304 	addi	sp,sp,12
   2ffb4:	f800283a 	ret

0002ffb8 <_malloc_usable_size_r>:
   2ffb8:	28bfff17 	ldw	r2,-4(r5)
   2ffbc:	1000030e 	bge	r2,zero,2ffcc <_malloc_usable_size_r+0x14>
   2ffc0:	288b883a 	add	r5,r5,r2
   2ffc4:	28ffff17 	ldw	r3,-4(r5)
   2ffc8:	10c5883a 	add	r2,r2,r3
   2ffcc:	10bfff04 	addi	r2,r2,-4
   2ffd0:	f800283a 	ret

0002ffd4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2ffd4:	defffc04 	addi	sp,sp,-16
   2ffd8:	df000315 	stw	fp,12(sp)
   2ffdc:	df000304 	addi	fp,sp,12
   2ffe0:	e13ffd15 	stw	r4,-12(fp)
   2ffe4:	e17ffe15 	stw	r5,-8(fp)
   2ffe8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2ffec:	e0fffe17 	ldw	r3,-8(fp)
   2fff0:	e0bffd17 	ldw	r2,-12(fp)
   2fff4:	18800c26 	beq	r3,r2,30028 <alt_load_section+0x54>
  {
    while( to != end )
   2fff8:	00000806 	br	3001c <alt_load_section+0x48>
    {
      *to++ = *from++;
   2fffc:	e0bffe17 	ldw	r2,-8(fp)
   30000:	10c00104 	addi	r3,r2,4
   30004:	e0fffe15 	stw	r3,-8(fp)
   30008:	e0fffd17 	ldw	r3,-12(fp)
   3000c:	19000104 	addi	r4,r3,4
   30010:	e13ffd15 	stw	r4,-12(fp)
   30014:	18c00017 	ldw	r3,0(r3)
   30018:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   3001c:	e0fffe17 	ldw	r3,-8(fp)
   30020:	e0bfff17 	ldw	r2,-4(fp)
   30024:	18bff51e 	bne	r3,r2,2fffc <_gp+0xffff4fbc>
    {
      *to++ = *from++;
    }
  }
}
   30028:	0001883a 	nop
   3002c:	e037883a 	mov	sp,fp
   30030:	df000017 	ldw	fp,0(sp)
   30034:	dec00104 	addi	sp,sp,4
   30038:	f800283a 	ret

0003003c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   3003c:	defffe04 	addi	sp,sp,-8
   30040:	dfc00115 	stw	ra,4(sp)
   30044:	df000015 	stw	fp,0(sp)
   30048:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   3004c:	018000f4 	movhi	r6,3
   30050:	318c2004 	addi	r6,r6,12416
   30054:	014000f4 	movhi	r5,3
   30058:	294b6304 	addi	r5,r5,11660
   3005c:	010000f4 	movhi	r4,3
   30060:	210c2004 	addi	r4,r4,12416
   30064:	002ffd40 	call	2ffd4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   30068:	018000b4 	movhi	r6,2
   3006c:	31808c04 	addi	r6,r6,560
   30070:	014000b4 	movhi	r5,2
   30074:	29400804 	addi	r5,r5,32
   30078:	010000b4 	movhi	r4,2
   3007c:	21000804 	addi	r4,r4,32
   30080:	002ffd40 	call	2ffd4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   30084:	018000f4 	movhi	r6,3
   30088:	318b6304 	addi	r6,r6,11660
   3008c:	014000f4 	movhi	r5,3
   30090:	29463204 	addi	r5,r5,6344
   30094:	010000f4 	movhi	r4,3
   30098:	21063204 	addi	r4,r4,6344
   3009c:	002ffd40 	call	2ffd4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   300a0:	0030b440 	call	30b44 <alt_dcache_flush_all>
  alt_icache_flush_all();
   300a4:	0030c700 	call	30c70 <alt_icache_flush_all>
}
   300a8:	0001883a 	nop
   300ac:	e037883a 	mov	sp,fp
   300b0:	dfc00117 	ldw	ra,4(sp)
   300b4:	df000017 	ldw	fp,0(sp)
   300b8:	dec00204 	addi	sp,sp,8
   300bc:	f800283a 	ret

000300c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   300c0:	defffd04 	addi	sp,sp,-12
   300c4:	dfc00215 	stw	ra,8(sp)
   300c8:	df000115 	stw	fp,4(sp)
   300cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   300d0:	0009883a 	mov	r4,zero
   300d4:	00305200 	call	30520 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   300d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   300dc:	00305580 	call	30558 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   300e0:	018000f4 	movhi	r6,3
   300e4:	318b5804 	addi	r6,r6,11616
   300e8:	014000f4 	movhi	r5,3
   300ec:	294b5804 	addi	r5,r5,11616
   300f0:	010000f4 	movhi	r4,3
   300f4:	210b5804 	addi	r4,r4,11616
   300f8:	00310140 	call	31014 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   300fc:	d0a0d817 	ldw	r2,-31904(gp)
   30100:	d0e0d917 	ldw	r3,-31900(gp)
   30104:	d120da17 	ldw	r4,-31896(gp)
   30108:	200d883a 	mov	r6,r4
   3010c:	180b883a 	mov	r5,r3
   30110:	1009883a 	mov	r4,r2
   30114:	00295bc0 	call	295bc <main>
   30118:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   3011c:	01000044 	movi	r4,1
   30120:	0030a6c0 	call	30a6c <close>
  exit (result);
   30124:	e13fff17 	ldw	r4,-4(fp)
   30128:	00316b40 	call	316b4 <exit>

0003012c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   3012c:	defff904 	addi	sp,sp,-28
   30130:	df000615 	stw	fp,24(sp)
   30134:	df000604 	addi	fp,sp,24
   30138:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3013c:	0005303a 	rdctl	r2,status
   30140:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30144:	e0fffe17 	ldw	r3,-8(fp)
   30148:	00bfff84 	movi	r2,-2
   3014c:	1884703a 	and	r2,r3,r2
   30150:	1001703a 	wrctl	status,r2
  
  return context;
   30154:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   30158:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   3015c:	d0a00617 	ldw	r2,-32744(gp)
   30160:	10c000c4 	addi	r3,r2,3
   30164:	00bfff04 	movi	r2,-4
   30168:	1884703a 	and	r2,r3,r2
   3016c:	d0a00615 	stw	r2,-32744(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   30170:	d0e00617 	ldw	r3,-32744(gp)
   30174:	e0bfff17 	ldw	r2,-4(fp)
   30178:	1887883a 	add	r3,r3,r2
   3017c:	00800134 	movhi	r2,4
   30180:	10a00004 	addi	r2,r2,-32768
   30184:	10c0062e 	bgeu	r2,r3,301a0 <sbrk+0x74>
   30188:	e0bffb17 	ldw	r2,-20(fp)
   3018c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30190:	e0bffa17 	ldw	r2,-24(fp)
   30194:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   30198:	00bfffc4 	movi	r2,-1
   3019c:	00000b06 	br	301cc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   301a0:	d0a00617 	ldw	r2,-32744(gp)
   301a4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   301a8:	d0e00617 	ldw	r3,-32744(gp)
   301ac:	e0bfff17 	ldw	r2,-4(fp)
   301b0:	1885883a 	add	r2,r3,r2
   301b4:	d0a00615 	stw	r2,-32744(gp)
   301b8:	e0bffb17 	ldw	r2,-20(fp)
   301bc:	e0bffc15 	stw	r2,-16(fp)
   301c0:	e0bffc17 	ldw	r2,-16(fp)
   301c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   301c8:	e0bffd17 	ldw	r2,-12(fp)
} 
   301cc:	e037883a 	mov	sp,fp
   301d0:	df000017 	ldw	fp,0(sp)
   301d4:	dec00104 	addi	sp,sp,4
   301d8:	f800283a 	ret

000301dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   301dc:	defffa04 	addi	sp,sp,-24
   301e0:	df000515 	stw	fp,20(sp)
   301e4:	df000504 	addi	fp,sp,20
   301e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   301ec:	0005303a 	rdctl	r2,status
   301f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   301f4:	e0fffc17 	ldw	r3,-16(fp)
   301f8:	00bfff84 	movi	r2,-2
   301fc:	1884703a 	and	r2,r3,r2
   30200:	1001703a 	wrctl	status,r2
  
  return context;
   30204:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   30208:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   3020c:	e0bfff17 	ldw	r2,-4(fp)
   30210:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   30214:	e0bffd17 	ldw	r2,-12(fp)
   30218:	10800017 	ldw	r2,0(r2)
   3021c:	e0fffd17 	ldw	r3,-12(fp)
   30220:	18c00117 	ldw	r3,4(r3)
   30224:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   30228:	e0bffd17 	ldw	r2,-12(fp)
   3022c:	10800117 	ldw	r2,4(r2)
   30230:	e0fffd17 	ldw	r3,-12(fp)
   30234:	18c00017 	ldw	r3,0(r3)
   30238:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3023c:	e0bffd17 	ldw	r2,-12(fp)
   30240:	e0fffd17 	ldw	r3,-12(fp)
   30244:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   30248:	e0bffd17 	ldw	r2,-12(fp)
   3024c:	e0fffd17 	ldw	r3,-12(fp)
   30250:	10c00015 	stw	r3,0(r2)
   30254:	e0bffb17 	ldw	r2,-20(fp)
   30258:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3025c:	e0bffe17 	ldw	r2,-8(fp)
   30260:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   30264:	0001883a 	nop
   30268:	e037883a 	mov	sp,fp
   3026c:	df000017 	ldw	fp,0(sp)
   30270:	dec00104 	addi	sp,sp,4
   30274:	f800283a 	ret

00030278 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   30278:	defffb04 	addi	sp,sp,-20
   3027c:	dfc00415 	stw	ra,16(sp)
   30280:	df000315 	stw	fp,12(sp)
   30284:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   30288:	d0a00717 	ldw	r2,-32740(gp)
   3028c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   30290:	d0a0dc17 	ldw	r2,-31888(gp)
   30294:	10800044 	addi	r2,r2,1
   30298:	d0a0dc15 	stw	r2,-31888(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3029c:	00002e06 	br	30358 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   302a0:	e0bffd17 	ldw	r2,-12(fp)
   302a4:	10800017 	ldw	r2,0(r2)
   302a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   302ac:	e0bffd17 	ldw	r2,-12(fp)
   302b0:	10800403 	ldbu	r2,16(r2)
   302b4:	10803fcc 	andi	r2,r2,255
   302b8:	10000426 	beq	r2,zero,302cc <alt_tick+0x54>
   302bc:	d0a0dc17 	ldw	r2,-31888(gp)
   302c0:	1000021e 	bne	r2,zero,302cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   302c4:	e0bffd17 	ldw	r2,-12(fp)
   302c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   302cc:	e0bffd17 	ldw	r2,-12(fp)
   302d0:	10800217 	ldw	r2,8(r2)
   302d4:	d0e0dc17 	ldw	r3,-31888(gp)
   302d8:	18801d36 	bltu	r3,r2,30350 <alt_tick+0xd8>
   302dc:	e0bffd17 	ldw	r2,-12(fp)
   302e0:	10800403 	ldbu	r2,16(r2)
   302e4:	10803fcc 	andi	r2,r2,255
   302e8:	1000191e 	bne	r2,zero,30350 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   302ec:	e0bffd17 	ldw	r2,-12(fp)
   302f0:	10800317 	ldw	r2,12(r2)
   302f4:	e0fffd17 	ldw	r3,-12(fp)
   302f8:	18c00517 	ldw	r3,20(r3)
   302fc:	1809883a 	mov	r4,r3
   30300:	103ee83a 	callr	r2
   30304:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   30308:	e0bfff17 	ldw	r2,-4(fp)
   3030c:	1000031e 	bne	r2,zero,3031c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   30310:	e13ffd17 	ldw	r4,-12(fp)
   30314:	00301dc0 	call	301dc <alt_alarm_stop>
   30318:	00000d06 	br	30350 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   3031c:	e0bffd17 	ldw	r2,-12(fp)
   30320:	10c00217 	ldw	r3,8(r2)
   30324:	e0bfff17 	ldw	r2,-4(fp)
   30328:	1887883a 	add	r3,r3,r2
   3032c:	e0bffd17 	ldw	r2,-12(fp)
   30330:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   30334:	e0bffd17 	ldw	r2,-12(fp)
   30338:	10c00217 	ldw	r3,8(r2)
   3033c:	d0a0dc17 	ldw	r2,-31888(gp)
   30340:	1880032e 	bgeu	r3,r2,30350 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   30344:	e0bffd17 	ldw	r2,-12(fp)
   30348:	00c00044 	movi	r3,1
   3034c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   30350:	e0bffe17 	ldw	r2,-8(fp)
   30354:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   30358:	e0fffd17 	ldw	r3,-12(fp)
   3035c:	d0a00704 	addi	r2,gp,-32740
   30360:	18bfcf1e 	bne	r3,r2,302a0 <_gp+0xffff5260>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   30364:	0001883a 	nop
}
   30368:	0001883a 	nop
   3036c:	e037883a 	mov	sp,fp
   30370:	dfc00117 	ldw	ra,4(sp)
   30374:	df000017 	ldw	fp,0(sp)
   30378:	dec00204 	addi	sp,sp,8
   3037c:	f800283a 	ret

00030380 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   30380:	defffd04 	addi	sp,sp,-12
   30384:	dfc00215 	stw	ra,8(sp)
   30388:	df000115 	stw	fp,4(sp)
   3038c:	df000104 	addi	fp,sp,4
   30390:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   30394:	e13fff17 	ldw	r4,-4(fp)
   30398:	00308d80 	call	308d8 <alt_busy_sleep>
}
   3039c:	e037883a 	mov	sp,fp
   303a0:	dfc00117 	ldw	ra,4(sp)
   303a4:	df000017 	ldw	fp,0(sp)
   303a8:	dec00204 	addi	sp,sp,8
   303ac:	f800283a 	ret

000303b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   303b0:	defffe04 	addi	sp,sp,-8
   303b4:	dfc00115 	stw	ra,4(sp)
   303b8:	df000015 	stw	fp,0(sp)
   303bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   303c0:	d0a00e17 	ldw	r2,-32712(gp)
   303c4:	10000326 	beq	r2,zero,303d4 <alt_get_errno+0x24>
   303c8:	d0a00e17 	ldw	r2,-32712(gp)
   303cc:	103ee83a 	callr	r2
   303d0:	00000106 	br	303d8 <alt_get_errno+0x28>
   303d4:	d0a0d704 	addi	r2,gp,-31908
}
   303d8:	e037883a 	mov	sp,fp
   303dc:	dfc00117 	ldw	ra,4(sp)
   303e0:	df000017 	ldw	fp,0(sp)
   303e4:	dec00204 	addi	sp,sp,8
   303e8:	f800283a 	ret

000303ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   303ec:	defff904 	addi	sp,sp,-28
   303f0:	dfc00615 	stw	ra,24(sp)
   303f4:	df000515 	stw	fp,20(sp)
   303f8:	df000504 	addi	fp,sp,20
   303fc:	e13ffd15 	stw	r4,-12(fp)
   30400:	e17ffe15 	stw	r5,-8(fp)
   30404:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30408:	e0bffd17 	ldw	r2,-12(fp)
   3040c:	10000816 	blt	r2,zero,30430 <write+0x44>
   30410:	01400304 	movi	r5,12
   30414:	e13ffd17 	ldw	r4,-12(fp)
   30418:	002b35c0 	call	2b35c <__mulsi3>
   3041c:	1007883a 	mov	r3,r2
   30420:	008000f4 	movhi	r2,3
   30424:	108bb004 	addi	r2,r2,11968
   30428:	1885883a 	add	r2,r3,r2
   3042c:	00000106 	br	30434 <write+0x48>
   30430:	0005883a 	mov	r2,zero
   30434:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   30438:	e0bffb17 	ldw	r2,-20(fp)
   3043c:	10002126 	beq	r2,zero,304c4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   30440:	e0bffb17 	ldw	r2,-20(fp)
   30444:	10800217 	ldw	r2,8(r2)
   30448:	108000cc 	andi	r2,r2,3
   3044c:	10001826 	beq	r2,zero,304b0 <write+0xc4>
   30450:	e0bffb17 	ldw	r2,-20(fp)
   30454:	10800017 	ldw	r2,0(r2)
   30458:	10800617 	ldw	r2,24(r2)
   3045c:	10001426 	beq	r2,zero,304b0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   30460:	e0bffb17 	ldw	r2,-20(fp)
   30464:	10800017 	ldw	r2,0(r2)
   30468:	10800617 	ldw	r2,24(r2)
   3046c:	e0ffff17 	ldw	r3,-4(fp)
   30470:	180d883a 	mov	r6,r3
   30474:	e17ffe17 	ldw	r5,-8(fp)
   30478:	e13ffb17 	ldw	r4,-20(fp)
   3047c:	103ee83a 	callr	r2
   30480:	e0bffc15 	stw	r2,-16(fp)
   30484:	e0bffc17 	ldw	r2,-16(fp)
   30488:	1000070e 	bge	r2,zero,304a8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   3048c:	00303b00 	call	303b0 <alt_get_errno>
   30490:	1007883a 	mov	r3,r2
   30494:	e0bffc17 	ldw	r2,-16(fp)
   30498:	0085c83a 	sub	r2,zero,r2
   3049c:	18800015 	stw	r2,0(r3)
        return -1;
   304a0:	00bfffc4 	movi	r2,-1
   304a4:	00000c06 	br	304d8 <write+0xec>
      }
      return rval;
   304a8:	e0bffc17 	ldw	r2,-16(fp)
   304ac:	00000a06 	br	304d8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   304b0:	00303b00 	call	303b0 <alt_get_errno>
   304b4:	1007883a 	mov	r3,r2
   304b8:	00800344 	movi	r2,13
   304bc:	18800015 	stw	r2,0(r3)
   304c0:	00000406 	br	304d4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   304c4:	00303b00 	call	303b0 <alt_get_errno>
   304c8:	1007883a 	mov	r3,r2
   304cc:	00801444 	movi	r2,81
   304d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   304d4:	00bfffc4 	movi	r2,-1
}
   304d8:	e037883a 	mov	sp,fp
   304dc:	dfc00117 	ldw	ra,4(sp)
   304e0:	df000017 	ldw	fp,0(sp)
   304e4:	dec00204 	addi	sp,sp,8
   304e8:	f800283a 	ret

000304ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   304ec:	defffd04 	addi	sp,sp,-12
   304f0:	dfc00215 	stw	ra,8(sp)
   304f4:	df000115 	stw	fp,4(sp)
   304f8:	df000104 	addi	fp,sp,4
   304fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   30500:	d1600b04 	addi	r5,gp,-32724
   30504:	e13fff17 	ldw	r4,-4(fp)
   30508:	0030bcc0 	call	30bcc <alt_dev_llist_insert>
}
   3050c:	e037883a 	mov	sp,fp
   30510:	dfc00117 	ldw	ra,4(sp)
   30514:	df000017 	ldw	fp,0(sp)
   30518:	dec00204 	addi	sp,sp,8
   3051c:	f800283a 	ret

00030520 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   30520:	defffd04 	addi	sp,sp,-12
   30524:	dfc00215 	stw	ra,8(sp)
   30528:	df000115 	stw	fp,4(sp)
   3052c:	df000104 	addi	fp,sp,4
   30530:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   30534:	00313980 	call	31398 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   30538:	00800044 	movi	r2,1
   3053c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   30540:	0001883a 	nop
   30544:	e037883a 	mov	sp,fp
   30548:	dfc00117 	ldw	ra,4(sp)
   3054c:	df000017 	ldw	fp,0(sp)
   30550:	dec00204 	addi	sp,sp,8
   30554:	f800283a 	ret

00030558 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   30558:	defffe04 	addi	sp,sp,-8
   3055c:	dfc00115 	stw	ra,4(sp)
   30560:	df000015 	stw	fp,0(sp)
   30564:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   30568:	01c0fa04 	movi	r7,1000
   3056c:	000d883a 	mov	r6,zero
   30570:	000b883a 	mov	r5,zero
   30574:	01000134 	movhi	r4,4
   30578:	21040004 	addi	r4,r4,4096
   3057c:	003085c0 	call	3085c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   30580:	010000f4 	movhi	r4,3
   30584:	210b9b04 	addi	r4,r4,11884
   30588:	00304ec0 	call	304ec <alt_dev_reg>
}
   3058c:	0001883a 	nop
   30590:	e037883a 	mov	sp,fp
   30594:	dfc00117 	ldw	ra,4(sp)
   30598:	df000017 	ldw	fp,0(sp)
   3059c:	dec00204 	addi	sp,sp,8
   305a0:	f800283a 	ret

000305a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   305a4:	defffa04 	addi	sp,sp,-24
   305a8:	dfc00515 	stw	ra,20(sp)
   305ac:	df000415 	stw	fp,16(sp)
   305b0:	df000404 	addi	fp,sp,16
   305b4:	e13ffd15 	stw	r4,-12(fp)
   305b8:	e17ffe15 	stw	r5,-8(fp)
   305bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   305c0:	e0bffd17 	ldw	r2,-12(fp)
   305c4:	10800017 	ldw	r2,0(r2)
   305c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   305cc:	e0bffc17 	ldw	r2,-16(fp)
   305d0:	10c00a04 	addi	r3,r2,40
   305d4:	e0bffd17 	ldw	r2,-12(fp)
   305d8:	10800217 	ldw	r2,8(r2)
   305dc:	100f883a 	mov	r7,r2
   305e0:	e1bfff17 	ldw	r6,-4(fp)
   305e4:	e17ffe17 	ldw	r5,-8(fp)
   305e8:	1809883a 	mov	r4,r3
   305ec:	00306640 	call	30664 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   305f0:	e037883a 	mov	sp,fp
   305f4:	dfc00117 	ldw	ra,4(sp)
   305f8:	df000017 	ldw	fp,0(sp)
   305fc:	dec00204 	addi	sp,sp,8
   30600:	f800283a 	ret

00030604 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   30604:	defffa04 	addi	sp,sp,-24
   30608:	dfc00515 	stw	ra,20(sp)
   3060c:	df000415 	stw	fp,16(sp)
   30610:	df000404 	addi	fp,sp,16
   30614:	e13ffd15 	stw	r4,-12(fp)
   30618:	e17ffe15 	stw	r5,-8(fp)
   3061c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   30620:	e0bffd17 	ldw	r2,-12(fp)
   30624:	10800017 	ldw	r2,0(r2)
   30628:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3062c:	e0bffc17 	ldw	r2,-16(fp)
   30630:	10c00a04 	addi	r3,r2,40
   30634:	e0bffd17 	ldw	r2,-12(fp)
   30638:	10800217 	ldw	r2,8(r2)
   3063c:	100f883a 	mov	r7,r2
   30640:	e1bfff17 	ldw	r6,-4(fp)
   30644:	e17ffe17 	ldw	r5,-8(fp)
   30648:	1809883a 	mov	r4,r3
   3064c:	00307500 	call	30750 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   30650:	e037883a 	mov	sp,fp
   30654:	dfc00117 	ldw	ra,4(sp)
   30658:	df000017 	ldw	fp,0(sp)
   3065c:	dec00204 	addi	sp,sp,8
   30660:	f800283a 	ret

00030664 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   30664:	defff704 	addi	sp,sp,-36
   30668:	df000815 	stw	fp,32(sp)
   3066c:	df000804 	addi	fp,sp,32
   30670:	e13ffc15 	stw	r4,-16(fp)
   30674:	e17ffd15 	stw	r5,-12(fp)
   30678:	e1bffe15 	stw	r6,-8(fp)
   3067c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   30680:	e0bffc17 	ldw	r2,-16(fp)
   30684:	10800017 	ldw	r2,0(r2)
   30688:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   3068c:	e0bffd17 	ldw	r2,-12(fp)
   30690:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   30694:	e0bffe17 	ldw	r2,-8(fp)
   30698:	e0fffd17 	ldw	r3,-12(fp)
   3069c:	1885883a 	add	r2,r3,r2
   306a0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   306a4:	00001206 	br	306f0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   306a8:	e0bff917 	ldw	r2,-28(fp)
   306ac:	10800037 	ldwio	r2,0(r2)
   306b0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   306b4:	e0bffb17 	ldw	r2,-20(fp)
   306b8:	10a0000c 	andi	r2,r2,32768
   306bc:	10000626 	beq	r2,zero,306d8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   306c0:	e0bff817 	ldw	r2,-32(fp)
   306c4:	10c00044 	addi	r3,r2,1
   306c8:	e0fff815 	stw	r3,-32(fp)
   306cc:	e0fffb17 	ldw	r3,-20(fp)
   306d0:	10c00005 	stb	r3,0(r2)
   306d4:	00000606 	br	306f0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   306d8:	e0fff817 	ldw	r3,-32(fp)
   306dc:	e0bffd17 	ldw	r2,-12(fp)
   306e0:	1880071e 	bne	r3,r2,30700 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   306e4:	e0bfff17 	ldw	r2,-4(fp)
   306e8:	1090000c 	andi	r2,r2,16384
   306ec:	1000061e 	bne	r2,zero,30708 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   306f0:	e0fff817 	ldw	r3,-32(fp)
   306f4:	e0bffa17 	ldw	r2,-24(fp)
   306f8:	18bfeb36 	bltu	r3,r2,306a8 <_gp+0xffff5668>
   306fc:	00000306 	br	3070c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   30700:	0001883a 	nop
   30704:	00000106 	br	3070c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   30708:	0001883a 	nop
    
  }

  if (ptr != buffer)
   3070c:	e0fff817 	ldw	r3,-32(fp)
   30710:	e0bffd17 	ldw	r2,-12(fp)
   30714:	18800426 	beq	r3,r2,30728 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   30718:	e0fff817 	ldw	r3,-32(fp)
   3071c:	e0bffd17 	ldw	r2,-12(fp)
   30720:	1885c83a 	sub	r2,r3,r2
   30724:	00000606 	br	30740 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   30728:	e0bfff17 	ldw	r2,-4(fp)
   3072c:	1090000c 	andi	r2,r2,16384
   30730:	10000226 	beq	r2,zero,3073c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   30734:	00bffd44 	movi	r2,-11
   30738:	00000106 	br	30740 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   3073c:	00bffec4 	movi	r2,-5
}
   30740:	e037883a 	mov	sp,fp
   30744:	df000017 	ldw	fp,0(sp)
   30748:	dec00104 	addi	sp,sp,4
   3074c:	f800283a 	ret

00030750 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   30750:	defff904 	addi	sp,sp,-28
   30754:	df000615 	stw	fp,24(sp)
   30758:	df000604 	addi	fp,sp,24
   3075c:	e13ffc15 	stw	r4,-16(fp)
   30760:	e17ffd15 	stw	r5,-12(fp)
   30764:	e1bffe15 	stw	r6,-8(fp)
   30768:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   3076c:	e0bffc17 	ldw	r2,-16(fp)
   30770:	10800017 	ldw	r2,0(r2)
   30774:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   30778:	e0bffe17 	ldw	r2,-8(fp)
   3077c:	e0fffd17 	ldw	r3,-12(fp)
   30780:	1885883a 	add	r2,r3,r2
   30784:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   30788:	00000e06 	br	307c4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   3078c:	e0bffa17 	ldw	r2,-24(fp)
   30790:	10800104 	addi	r2,r2,4
   30794:	10800037 	ldwio	r2,0(r2)
   30798:	10bfffec 	andhi	r2,r2,65535
   3079c:	10000926 	beq	r2,zero,307c4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   307a0:	e0fffa17 	ldw	r3,-24(fp)
   307a4:	e0bffd17 	ldw	r2,-12(fp)
   307a8:	11000044 	addi	r4,r2,1
   307ac:	e13ffd15 	stw	r4,-12(fp)
   307b0:	10800003 	ldbu	r2,0(r2)
   307b4:	10803fcc 	andi	r2,r2,255
   307b8:	1080201c 	xori	r2,r2,128
   307bc:	10bfe004 	addi	r2,r2,-128
   307c0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   307c4:	e0fffd17 	ldw	r3,-12(fp)
   307c8:	e0bffb17 	ldw	r2,-20(fp)
   307cc:	18bfef36 	bltu	r3,r2,3078c <_gp+0xffff574c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   307d0:	e0bffe17 	ldw	r2,-8(fp)
}
   307d4:	e037883a 	mov	sp,fp
   307d8:	df000017 	ldw	fp,0(sp)
   307dc:	dec00104 	addi	sp,sp,4
   307e0:	f800283a 	ret

000307e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   307e4:	defffa04 	addi	sp,sp,-24
   307e8:	dfc00515 	stw	ra,20(sp)
   307ec:	df000415 	stw	fp,16(sp)
   307f0:	df000404 	addi	fp,sp,16
   307f4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   307f8:	0007883a 	mov	r3,zero
   307fc:	e0bfff17 	ldw	r2,-4(fp)
   30800:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   30804:	e0bfff17 	ldw	r2,-4(fp)
   30808:	10800104 	addi	r2,r2,4
   3080c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30810:	0005303a 	rdctl	r2,status
   30814:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30818:	e0fffd17 	ldw	r3,-12(fp)
   3081c:	00bfff84 	movi	r2,-2
   30820:	1884703a 	and	r2,r3,r2
   30824:	1001703a 	wrctl	status,r2
  
  return context;
   30828:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   3082c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   30830:	00302780 	call	30278 <alt_tick>
   30834:	e0bffc17 	ldw	r2,-16(fp)
   30838:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3083c:	e0bffe17 	ldw	r2,-8(fp)
   30840:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   30844:	0001883a 	nop
   30848:	e037883a 	mov	sp,fp
   3084c:	dfc00117 	ldw	ra,4(sp)
   30850:	df000017 	ldw	fp,0(sp)
   30854:	dec00204 	addi	sp,sp,8
   30858:	f800283a 	ret

0003085c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   3085c:	defff804 	addi	sp,sp,-32
   30860:	dfc00715 	stw	ra,28(sp)
   30864:	df000615 	stw	fp,24(sp)
   30868:	df000604 	addi	fp,sp,24
   3086c:	e13ffc15 	stw	r4,-16(fp)
   30870:	e17ffd15 	stw	r5,-12(fp)
   30874:	e1bffe15 	stw	r6,-8(fp)
   30878:	e1ffff15 	stw	r7,-4(fp)
   3087c:	e0bfff17 	ldw	r2,-4(fp)
   30880:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   30884:	d0a0db17 	ldw	r2,-31892(gp)
   30888:	1000021e 	bne	r2,zero,30894 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   3088c:	e0bffb17 	ldw	r2,-20(fp)
   30890:	d0a0db15 	stw	r2,-31892(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   30894:	e0bffc17 	ldw	r2,-16(fp)
   30898:	10800104 	addi	r2,r2,4
   3089c:	00c001c4 	movi	r3,7
   308a0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   308a4:	d8000015 	stw	zero,0(sp)
   308a8:	e1fffc17 	ldw	r7,-16(fp)
   308ac:	018000f4 	movhi	r6,3
   308b0:	3181f904 	addi	r6,r6,2020
   308b4:	e17ffe17 	ldw	r5,-8(fp)
   308b8:	e13ffd17 	ldw	r4,-12(fp)
   308bc:	0030c900 	call	30c90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   308c0:	0001883a 	nop
   308c4:	e037883a 	mov	sp,fp
   308c8:	dfc00117 	ldw	ra,4(sp)
   308cc:	df000017 	ldw	fp,0(sp)
   308d0:	dec00204 	addi	sp,sp,8
   308d4:	f800283a 	ret

000308d8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   308d8:	defffa04 	addi	sp,sp,-24
   308dc:	dfc00515 	stw	ra,20(sp)
   308e0:	df000415 	stw	fp,16(sp)
   308e4:	df000404 	addi	fp,sp,16
   308e8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   308ec:	00800244 	movi	r2,9
   308f0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   308f4:	014003f4 	movhi	r5,15
   308f8:	29509004 	addi	r5,r5,16960
   308fc:	e13ffd17 	ldw	r4,-12(fp)
   30900:	002b35c0 	call	2b35c <__mulsi3>
   30904:	100b883a 	mov	r5,r2
   30908:	0100bef4 	movhi	r4,763
   3090c:	213c2004 	addi	r4,r4,-3968
   30910:	002b2a00 	call	2b2a0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   30914:	100b883a 	mov	r5,r2
   30918:	01200034 	movhi	r4,32768
   3091c:	213fffc4 	addi	r4,r4,-1
   30920:	002b2a00 	call	2b2a0 <__udivsi3>
   30924:	100b883a 	mov	r5,r2
   30928:	e13fff17 	ldw	r4,-4(fp)
   3092c:	002b2a00 	call	2b2a0 <__udivsi3>
   30930:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   30934:	e0bffe17 	ldw	r2,-8(fp)
   30938:	10002a26 	beq	r2,zero,309e4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   3093c:	e03ffc15 	stw	zero,-16(fp)
   30940:	00001706 	br	309a0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   30944:	00a00034 	movhi	r2,32768
   30948:	10bfffc4 	addi	r2,r2,-1
   3094c:	10bfffc4 	addi	r2,r2,-1
   30950:	103ffe1e 	bne	r2,zero,3094c <_gp+0xffff590c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   30954:	014003f4 	movhi	r5,15
   30958:	29509004 	addi	r5,r5,16960
   3095c:	e13ffd17 	ldw	r4,-12(fp)
   30960:	002b35c0 	call	2b35c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   30964:	100b883a 	mov	r5,r2
   30968:	0100bef4 	movhi	r4,763
   3096c:	213c2004 	addi	r4,r4,-3968
   30970:	002b2a00 	call	2b2a0 <__udivsi3>
   30974:	100b883a 	mov	r5,r2
   30978:	01200034 	movhi	r4,32768
   3097c:	213fffc4 	addi	r4,r4,-1
   30980:	002b2a00 	call	2b2a0 <__udivsi3>
   30984:	1007883a 	mov	r3,r2
   30988:	e0bfff17 	ldw	r2,-4(fp)
   3098c:	10c5c83a 	sub	r2,r2,r3
   30990:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   30994:	e0bffc17 	ldw	r2,-16(fp)
   30998:	10800044 	addi	r2,r2,1
   3099c:	e0bffc15 	stw	r2,-16(fp)
   309a0:	e0fffc17 	ldw	r3,-16(fp)
   309a4:	e0bffe17 	ldw	r2,-8(fp)
   309a8:	18bfe616 	blt	r3,r2,30944 <_gp+0xffff5904>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   309ac:	014003f4 	movhi	r5,15
   309b0:	29509004 	addi	r5,r5,16960
   309b4:	e13ffd17 	ldw	r4,-12(fp)
   309b8:	002b35c0 	call	2b35c <__mulsi3>
   309bc:	100b883a 	mov	r5,r2
   309c0:	0100bef4 	movhi	r4,763
   309c4:	213c2004 	addi	r4,r4,-3968
   309c8:	002b2a00 	call	2b2a0 <__udivsi3>
   309cc:	e17fff17 	ldw	r5,-4(fp)
   309d0:	1009883a 	mov	r4,r2
   309d4:	002b35c0 	call	2b35c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   309d8:	10bfffc4 	addi	r2,r2,-1
   309dc:	103ffe1e 	bne	r2,zero,309d8 <_gp+0xffff5998>
   309e0:	00000d06 	br	30a18 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   309e4:	014003f4 	movhi	r5,15
   309e8:	29509004 	addi	r5,r5,16960
   309ec:	e13ffd17 	ldw	r4,-12(fp)
   309f0:	002b35c0 	call	2b35c <__mulsi3>
   309f4:	100b883a 	mov	r5,r2
   309f8:	0100bef4 	movhi	r4,763
   309fc:	213c2004 	addi	r4,r4,-3968
   30a00:	002b2a00 	call	2b2a0 <__udivsi3>
   30a04:	e17fff17 	ldw	r5,-4(fp)
   30a08:	1009883a 	mov	r4,r2
   30a0c:	002b35c0 	call	2b35c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   30a10:	10bfffc4 	addi	r2,r2,-1
   30a14:	00bffe16 	blt	zero,r2,30a10 <_gp+0xffff59d0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   30a18:	0005883a 	mov	r2,zero
}
   30a1c:	e037883a 	mov	sp,fp
   30a20:	dfc00117 	ldw	ra,4(sp)
   30a24:	df000017 	ldw	fp,0(sp)
   30a28:	dec00204 	addi	sp,sp,8
   30a2c:	f800283a 	ret

00030a30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30a30:	defffe04 	addi	sp,sp,-8
   30a34:	dfc00115 	stw	ra,4(sp)
   30a38:	df000015 	stw	fp,0(sp)
   30a3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30a40:	d0a00e17 	ldw	r2,-32712(gp)
   30a44:	10000326 	beq	r2,zero,30a54 <alt_get_errno+0x24>
   30a48:	d0a00e17 	ldw	r2,-32712(gp)
   30a4c:	103ee83a 	callr	r2
   30a50:	00000106 	br	30a58 <alt_get_errno+0x28>
   30a54:	d0a0d704 	addi	r2,gp,-31908
}
   30a58:	e037883a 	mov	sp,fp
   30a5c:	dfc00117 	ldw	ra,4(sp)
   30a60:	df000017 	ldw	fp,0(sp)
   30a64:	dec00204 	addi	sp,sp,8
   30a68:	f800283a 	ret

00030a6c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   30a6c:	defffb04 	addi	sp,sp,-20
   30a70:	dfc00415 	stw	ra,16(sp)
   30a74:	df000315 	stw	fp,12(sp)
   30a78:	df000304 	addi	fp,sp,12
   30a7c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   30a80:	e0bfff17 	ldw	r2,-4(fp)
   30a84:	10000816 	blt	r2,zero,30aa8 <close+0x3c>
   30a88:	01400304 	movi	r5,12
   30a8c:	e13fff17 	ldw	r4,-4(fp)
   30a90:	002b35c0 	call	2b35c <__mulsi3>
   30a94:	1007883a 	mov	r3,r2
   30a98:	008000f4 	movhi	r2,3
   30a9c:	108bb004 	addi	r2,r2,11968
   30aa0:	1885883a 	add	r2,r3,r2
   30aa4:	00000106 	br	30aac <close+0x40>
   30aa8:	0005883a 	mov	r2,zero
   30aac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   30ab0:	e0bffd17 	ldw	r2,-12(fp)
   30ab4:	10001926 	beq	r2,zero,30b1c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   30ab8:	e0bffd17 	ldw	r2,-12(fp)
   30abc:	10800017 	ldw	r2,0(r2)
   30ac0:	10800417 	ldw	r2,16(r2)
   30ac4:	10000626 	beq	r2,zero,30ae0 <close+0x74>
   30ac8:	e0bffd17 	ldw	r2,-12(fp)
   30acc:	10800017 	ldw	r2,0(r2)
   30ad0:	10800417 	ldw	r2,16(r2)
   30ad4:	e13ffd17 	ldw	r4,-12(fp)
   30ad8:	103ee83a 	callr	r2
   30adc:	00000106 	br	30ae4 <close+0x78>
   30ae0:	0005883a 	mov	r2,zero
   30ae4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   30ae8:	e13fff17 	ldw	r4,-4(fp)
   30aec:	00313140 	call	31314 <alt_release_fd>
    if (rval < 0)
   30af0:	e0bffe17 	ldw	r2,-8(fp)
   30af4:	1000070e 	bge	r2,zero,30b14 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   30af8:	0030a300 	call	30a30 <alt_get_errno>
   30afc:	1007883a 	mov	r3,r2
   30b00:	e0bffe17 	ldw	r2,-8(fp)
   30b04:	0085c83a 	sub	r2,zero,r2
   30b08:	18800015 	stw	r2,0(r3)
      return -1;
   30b0c:	00bfffc4 	movi	r2,-1
   30b10:	00000706 	br	30b30 <close+0xc4>
    }
    return 0;
   30b14:	0005883a 	mov	r2,zero
   30b18:	00000506 	br	30b30 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   30b1c:	0030a300 	call	30a30 <alt_get_errno>
   30b20:	1007883a 	mov	r3,r2
   30b24:	00801444 	movi	r2,81
   30b28:	18800015 	stw	r2,0(r3)
    return -1;
   30b2c:	00bfffc4 	movi	r2,-1
  }
}
   30b30:	e037883a 	mov	sp,fp
   30b34:	dfc00117 	ldw	ra,4(sp)
   30b38:	df000017 	ldw	fp,0(sp)
   30b3c:	dec00204 	addi	sp,sp,8
   30b40:	f800283a 	ret

00030b44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   30b44:	deffff04 	addi	sp,sp,-4
   30b48:	df000015 	stw	fp,0(sp)
   30b4c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   30b50:	0001883a 	nop
   30b54:	e037883a 	mov	sp,fp
   30b58:	df000017 	ldw	fp,0(sp)
   30b5c:	dec00104 	addi	sp,sp,4
   30b60:	f800283a 	ret

00030b64 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   30b64:	defffc04 	addi	sp,sp,-16
   30b68:	df000315 	stw	fp,12(sp)
   30b6c:	df000304 	addi	fp,sp,12
   30b70:	e13ffd15 	stw	r4,-12(fp)
   30b74:	e17ffe15 	stw	r5,-8(fp)
   30b78:	e1bfff15 	stw	r6,-4(fp)
  return len;
   30b7c:	e0bfff17 	ldw	r2,-4(fp)
}
   30b80:	e037883a 	mov	sp,fp
   30b84:	df000017 	ldw	fp,0(sp)
   30b88:	dec00104 	addi	sp,sp,4
   30b8c:	f800283a 	ret

00030b90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30b90:	defffe04 	addi	sp,sp,-8
   30b94:	dfc00115 	stw	ra,4(sp)
   30b98:	df000015 	stw	fp,0(sp)
   30b9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30ba0:	d0a00e17 	ldw	r2,-32712(gp)
   30ba4:	10000326 	beq	r2,zero,30bb4 <alt_get_errno+0x24>
   30ba8:	d0a00e17 	ldw	r2,-32712(gp)
   30bac:	103ee83a 	callr	r2
   30bb0:	00000106 	br	30bb8 <alt_get_errno+0x28>
   30bb4:	d0a0d704 	addi	r2,gp,-31908
}
   30bb8:	e037883a 	mov	sp,fp
   30bbc:	dfc00117 	ldw	ra,4(sp)
   30bc0:	df000017 	ldw	fp,0(sp)
   30bc4:	dec00204 	addi	sp,sp,8
   30bc8:	f800283a 	ret

00030bcc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   30bcc:	defffa04 	addi	sp,sp,-24
   30bd0:	dfc00515 	stw	ra,20(sp)
   30bd4:	df000415 	stw	fp,16(sp)
   30bd8:	df000404 	addi	fp,sp,16
   30bdc:	e13ffe15 	stw	r4,-8(fp)
   30be0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   30be4:	e0bffe17 	ldw	r2,-8(fp)
   30be8:	10000326 	beq	r2,zero,30bf8 <alt_dev_llist_insert+0x2c>
   30bec:	e0bffe17 	ldw	r2,-8(fp)
   30bf0:	10800217 	ldw	r2,8(r2)
   30bf4:	1000061e 	bne	r2,zero,30c10 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   30bf8:	0030b900 	call	30b90 <alt_get_errno>
   30bfc:	1007883a 	mov	r3,r2
   30c00:	00800584 	movi	r2,22
   30c04:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   30c08:	00bffa84 	movi	r2,-22
   30c0c:	00001306 	br	30c5c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   30c10:	e0bffe17 	ldw	r2,-8(fp)
   30c14:	e0ffff17 	ldw	r3,-4(fp)
   30c18:	e0fffc15 	stw	r3,-16(fp)
   30c1c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   30c20:	e0bffd17 	ldw	r2,-12(fp)
   30c24:	e0fffc17 	ldw	r3,-16(fp)
   30c28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   30c2c:	e0bffc17 	ldw	r2,-16(fp)
   30c30:	10c00017 	ldw	r3,0(r2)
   30c34:	e0bffd17 	ldw	r2,-12(fp)
   30c38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   30c3c:	e0bffc17 	ldw	r2,-16(fp)
   30c40:	10800017 	ldw	r2,0(r2)
   30c44:	e0fffd17 	ldw	r3,-12(fp)
   30c48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   30c4c:	e0bffc17 	ldw	r2,-16(fp)
   30c50:	e0fffd17 	ldw	r3,-12(fp)
   30c54:	10c00015 	stw	r3,0(r2)

  return 0;  
   30c58:	0005883a 	mov	r2,zero
}
   30c5c:	e037883a 	mov	sp,fp
   30c60:	dfc00117 	ldw	ra,4(sp)
   30c64:	df000017 	ldw	fp,0(sp)
   30c68:	dec00204 	addi	sp,sp,8
   30c6c:	f800283a 	ret

00030c70 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   30c70:	deffff04 	addi	sp,sp,-4
   30c74:	df000015 	stw	fp,0(sp)
   30c78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   30c7c:	0001883a 	nop
   30c80:	e037883a 	mov	sp,fp
   30c84:	df000017 	ldw	fp,0(sp)
   30c88:	dec00104 	addi	sp,sp,4
   30c8c:	f800283a 	ret

00030c90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   30c90:	defff904 	addi	sp,sp,-28
   30c94:	dfc00615 	stw	ra,24(sp)
   30c98:	df000515 	stw	fp,20(sp)
   30c9c:	df000504 	addi	fp,sp,20
   30ca0:	e13ffc15 	stw	r4,-16(fp)
   30ca4:	e17ffd15 	stw	r5,-12(fp)
   30ca8:	e1bffe15 	stw	r6,-8(fp)
   30cac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   30cb0:	e0800217 	ldw	r2,8(fp)
   30cb4:	d8800015 	stw	r2,0(sp)
   30cb8:	e1ffff17 	ldw	r7,-4(fp)
   30cbc:	e1bffe17 	ldw	r6,-8(fp)
   30cc0:	e17ffd17 	ldw	r5,-12(fp)
   30cc4:	e13ffc17 	ldw	r4,-16(fp)
   30cc8:	0030e400 	call	30e40 <alt_iic_isr_register>
}  
   30ccc:	e037883a 	mov	sp,fp
   30cd0:	dfc00117 	ldw	ra,4(sp)
   30cd4:	df000017 	ldw	fp,0(sp)
   30cd8:	dec00204 	addi	sp,sp,8
   30cdc:	f800283a 	ret

00030ce0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   30ce0:	defff904 	addi	sp,sp,-28
   30ce4:	df000615 	stw	fp,24(sp)
   30ce8:	df000604 	addi	fp,sp,24
   30cec:	e13ffe15 	stw	r4,-8(fp)
   30cf0:	e17fff15 	stw	r5,-4(fp)
   30cf4:	e0bfff17 	ldw	r2,-4(fp)
   30cf8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30cfc:	0005303a 	rdctl	r2,status
   30d00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30d04:	e0fffb17 	ldw	r3,-20(fp)
   30d08:	00bfff84 	movi	r2,-2
   30d0c:	1884703a 	and	r2,r3,r2
   30d10:	1001703a 	wrctl	status,r2
  
  return context;
   30d14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   30d18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   30d1c:	00c00044 	movi	r3,1
   30d20:	e0bffa17 	ldw	r2,-24(fp)
   30d24:	1884983a 	sll	r2,r3,r2
   30d28:	1007883a 	mov	r3,r2
   30d2c:	d0a0dd17 	ldw	r2,-31884(gp)
   30d30:	1884b03a 	or	r2,r3,r2
   30d34:	d0a0dd15 	stw	r2,-31884(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   30d38:	d0a0dd17 	ldw	r2,-31884(gp)
   30d3c:	100170fa 	wrctl	ienable,r2
   30d40:	e0bffc17 	ldw	r2,-16(fp)
   30d44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30d48:	e0bffd17 	ldw	r2,-12(fp)
   30d4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   30d50:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   30d54:	0001883a 	nop
}
   30d58:	e037883a 	mov	sp,fp
   30d5c:	df000017 	ldw	fp,0(sp)
   30d60:	dec00104 	addi	sp,sp,4
   30d64:	f800283a 	ret

00030d68 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   30d68:	defff904 	addi	sp,sp,-28
   30d6c:	df000615 	stw	fp,24(sp)
   30d70:	df000604 	addi	fp,sp,24
   30d74:	e13ffe15 	stw	r4,-8(fp)
   30d78:	e17fff15 	stw	r5,-4(fp)
   30d7c:	e0bfff17 	ldw	r2,-4(fp)
   30d80:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30d84:	0005303a 	rdctl	r2,status
   30d88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30d8c:	e0fffb17 	ldw	r3,-20(fp)
   30d90:	00bfff84 	movi	r2,-2
   30d94:	1884703a 	and	r2,r3,r2
   30d98:	1001703a 	wrctl	status,r2
  
  return context;
   30d9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   30da0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   30da4:	00c00044 	movi	r3,1
   30da8:	e0bffa17 	ldw	r2,-24(fp)
   30dac:	1884983a 	sll	r2,r3,r2
   30db0:	0084303a 	nor	r2,zero,r2
   30db4:	1007883a 	mov	r3,r2
   30db8:	d0a0dd17 	ldw	r2,-31884(gp)
   30dbc:	1884703a 	and	r2,r3,r2
   30dc0:	d0a0dd15 	stw	r2,-31884(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   30dc4:	d0a0dd17 	ldw	r2,-31884(gp)
   30dc8:	100170fa 	wrctl	ienable,r2
   30dcc:	e0bffc17 	ldw	r2,-16(fp)
   30dd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30dd4:	e0bffd17 	ldw	r2,-12(fp)
   30dd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   30ddc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   30de0:	0001883a 	nop
}
   30de4:	e037883a 	mov	sp,fp
   30de8:	df000017 	ldw	fp,0(sp)
   30dec:	dec00104 	addi	sp,sp,4
   30df0:	f800283a 	ret

00030df4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   30df4:	defffc04 	addi	sp,sp,-16
   30df8:	df000315 	stw	fp,12(sp)
   30dfc:	df000304 	addi	fp,sp,12
   30e00:	e13ffe15 	stw	r4,-8(fp)
   30e04:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   30e08:	000530fa 	rdctl	r2,ienable
   30e0c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   30e10:	00c00044 	movi	r3,1
   30e14:	e0bfff17 	ldw	r2,-4(fp)
   30e18:	1884983a 	sll	r2,r3,r2
   30e1c:	1007883a 	mov	r3,r2
   30e20:	e0bffd17 	ldw	r2,-12(fp)
   30e24:	1884703a 	and	r2,r3,r2
   30e28:	1004c03a 	cmpne	r2,r2,zero
   30e2c:	10803fcc 	andi	r2,r2,255
}
   30e30:	e037883a 	mov	sp,fp
   30e34:	df000017 	ldw	fp,0(sp)
   30e38:	dec00104 	addi	sp,sp,4
   30e3c:	f800283a 	ret

00030e40 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   30e40:	defff504 	addi	sp,sp,-44
   30e44:	dfc00a15 	stw	ra,40(sp)
   30e48:	df000915 	stw	fp,36(sp)
   30e4c:	df000904 	addi	fp,sp,36
   30e50:	e13ffc15 	stw	r4,-16(fp)
   30e54:	e17ffd15 	stw	r5,-12(fp)
   30e58:	e1bffe15 	stw	r6,-8(fp)
   30e5c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   30e60:	00bffa84 	movi	r2,-22
   30e64:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   30e68:	e0bffd17 	ldw	r2,-12(fp)
   30e6c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   30e70:	e0bff817 	ldw	r2,-32(fp)
   30e74:	10800808 	cmpgei	r2,r2,32
   30e78:	1000271e 	bne	r2,zero,30f18 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30e7c:	0005303a 	rdctl	r2,status
   30e80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30e84:	e0fffb17 	ldw	r3,-20(fp)
   30e88:	00bfff84 	movi	r2,-2
   30e8c:	1884703a 	and	r2,r3,r2
   30e90:	1001703a 	wrctl	status,r2
  
  return context;
   30e94:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   30e98:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   30e9c:	008000f4 	movhi	r2,3
   30ea0:	108cfd04 	addi	r2,r2,13300
   30ea4:	e0fff817 	ldw	r3,-32(fp)
   30ea8:	180690fa 	slli	r3,r3,3
   30eac:	10c5883a 	add	r2,r2,r3
   30eb0:	e0fffe17 	ldw	r3,-8(fp)
   30eb4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   30eb8:	008000f4 	movhi	r2,3
   30ebc:	108cfd04 	addi	r2,r2,13300
   30ec0:	e0fff817 	ldw	r3,-32(fp)
   30ec4:	180690fa 	slli	r3,r3,3
   30ec8:	10c5883a 	add	r2,r2,r3
   30ecc:	10800104 	addi	r2,r2,4
   30ed0:	e0ffff17 	ldw	r3,-4(fp)
   30ed4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   30ed8:	e0bffe17 	ldw	r2,-8(fp)
   30edc:	10000526 	beq	r2,zero,30ef4 <alt_iic_isr_register+0xb4>
   30ee0:	e0bff817 	ldw	r2,-32(fp)
   30ee4:	100b883a 	mov	r5,r2
   30ee8:	e13ffc17 	ldw	r4,-16(fp)
   30eec:	0030ce00 	call	30ce0 <alt_ic_irq_enable>
   30ef0:	00000406 	br	30f04 <alt_iic_isr_register+0xc4>
   30ef4:	e0bff817 	ldw	r2,-32(fp)
   30ef8:	100b883a 	mov	r5,r2
   30efc:	e13ffc17 	ldw	r4,-16(fp)
   30f00:	0030d680 	call	30d68 <alt_ic_irq_disable>
   30f04:	e0bff715 	stw	r2,-36(fp)
   30f08:	e0bffa17 	ldw	r2,-24(fp)
   30f0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30f10:	e0bff917 	ldw	r2,-28(fp)
   30f14:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   30f18:	e0bff717 	ldw	r2,-36(fp)
}
   30f1c:	e037883a 	mov	sp,fp
   30f20:	dfc00117 	ldw	ra,4(sp)
   30f24:	df000017 	ldw	fp,0(sp)
   30f28:	dec00204 	addi	sp,sp,8
   30f2c:	f800283a 	ret

00030f30 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   30f30:	defff804 	addi	sp,sp,-32
   30f34:	dfc00715 	stw	ra,28(sp)
   30f38:	df000615 	stw	fp,24(sp)
   30f3c:	dc000515 	stw	r16,20(sp)
   30f40:	df000604 	addi	fp,sp,24
   30f44:	e13ffb15 	stw	r4,-20(fp)
   30f48:	e17ffc15 	stw	r5,-16(fp)
   30f4c:	e1bffd15 	stw	r6,-12(fp)
   30f50:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   30f54:	e1bffe17 	ldw	r6,-8(fp)
   30f58:	e17ffd17 	ldw	r5,-12(fp)
   30f5c:	e13ffc17 	ldw	r4,-16(fp)
   30f60:	00311b80 	call	311b8 <open>
   30f64:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   30f68:	e0bffa17 	ldw	r2,-24(fp)
   30f6c:	10002216 	blt	r2,zero,30ff8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   30f70:	040000f4 	movhi	r16,3
   30f74:	840bb004 	addi	r16,r16,11968
   30f78:	e0bffa17 	ldw	r2,-24(fp)
   30f7c:	01400304 	movi	r5,12
   30f80:	1009883a 	mov	r4,r2
   30f84:	002b35c0 	call	2b35c <__mulsi3>
   30f88:	8085883a 	add	r2,r16,r2
   30f8c:	10c00017 	ldw	r3,0(r2)
   30f90:	e0bffb17 	ldw	r2,-20(fp)
   30f94:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   30f98:	040000f4 	movhi	r16,3
   30f9c:	840bb004 	addi	r16,r16,11968
   30fa0:	e0bffa17 	ldw	r2,-24(fp)
   30fa4:	01400304 	movi	r5,12
   30fa8:	1009883a 	mov	r4,r2
   30fac:	002b35c0 	call	2b35c <__mulsi3>
   30fb0:	8085883a 	add	r2,r16,r2
   30fb4:	10800104 	addi	r2,r2,4
   30fb8:	10c00017 	ldw	r3,0(r2)
   30fbc:	e0bffb17 	ldw	r2,-20(fp)
   30fc0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   30fc4:	040000f4 	movhi	r16,3
   30fc8:	840bb004 	addi	r16,r16,11968
   30fcc:	e0bffa17 	ldw	r2,-24(fp)
   30fd0:	01400304 	movi	r5,12
   30fd4:	1009883a 	mov	r4,r2
   30fd8:	002b35c0 	call	2b35c <__mulsi3>
   30fdc:	8085883a 	add	r2,r16,r2
   30fe0:	10800204 	addi	r2,r2,8
   30fe4:	10c00017 	ldw	r3,0(r2)
   30fe8:	e0bffb17 	ldw	r2,-20(fp)
   30fec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   30ff0:	e13ffa17 	ldw	r4,-24(fp)
   30ff4:	00313140 	call	31314 <alt_release_fd>
  }
} 
   30ff8:	0001883a 	nop
   30ffc:	e6ffff04 	addi	sp,fp,-4
   31000:	dfc00217 	ldw	ra,8(sp)
   31004:	df000117 	ldw	fp,4(sp)
   31008:	dc000017 	ldw	r16,0(sp)
   3100c:	dec00304 	addi	sp,sp,12
   31010:	f800283a 	ret

00031014 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   31014:	defffb04 	addi	sp,sp,-20
   31018:	dfc00415 	stw	ra,16(sp)
   3101c:	df000315 	stw	fp,12(sp)
   31020:	df000304 	addi	fp,sp,12
   31024:	e13ffd15 	stw	r4,-12(fp)
   31028:	e17ffe15 	stw	r5,-8(fp)
   3102c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   31030:	01c07fc4 	movi	r7,511
   31034:	01800044 	movi	r6,1
   31038:	e17ffd17 	ldw	r5,-12(fp)
   3103c:	010000f4 	movhi	r4,3
   31040:	210bb304 	addi	r4,r4,11980
   31044:	0030f300 	call	30f30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   31048:	01c07fc4 	movi	r7,511
   3104c:	000d883a 	mov	r6,zero
   31050:	e17ffe17 	ldw	r5,-8(fp)
   31054:	010000f4 	movhi	r4,3
   31058:	210bb004 	addi	r4,r4,11968
   3105c:	0030f300 	call	30f30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   31060:	01c07fc4 	movi	r7,511
   31064:	01800044 	movi	r6,1
   31068:	e17fff17 	ldw	r5,-4(fp)
   3106c:	010000f4 	movhi	r4,3
   31070:	210bb604 	addi	r4,r4,11992
   31074:	0030f300 	call	30f30 <alt_open_fd>
}  
   31078:	0001883a 	nop
   3107c:	e037883a 	mov	sp,fp
   31080:	dfc00117 	ldw	ra,4(sp)
   31084:	df000017 	ldw	fp,0(sp)
   31088:	dec00204 	addi	sp,sp,8
   3108c:	f800283a 	ret

00031090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31090:	defffe04 	addi	sp,sp,-8
   31094:	dfc00115 	stw	ra,4(sp)
   31098:	df000015 	stw	fp,0(sp)
   3109c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   310a0:	d0a00e17 	ldw	r2,-32712(gp)
   310a4:	10000326 	beq	r2,zero,310b4 <alt_get_errno+0x24>
   310a8:	d0a00e17 	ldw	r2,-32712(gp)
   310ac:	103ee83a 	callr	r2
   310b0:	00000106 	br	310b8 <alt_get_errno+0x28>
   310b4:	d0a0d704 	addi	r2,gp,-31908
}
   310b8:	e037883a 	mov	sp,fp
   310bc:	dfc00117 	ldw	ra,4(sp)
   310c0:	df000017 	ldw	fp,0(sp)
   310c4:	dec00204 	addi	sp,sp,8
   310c8:	f800283a 	ret

000310cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   310cc:	defffb04 	addi	sp,sp,-20
   310d0:	dfc00415 	stw	ra,16(sp)
   310d4:	df000315 	stw	fp,12(sp)
   310d8:	dc000215 	stw	r16,8(sp)
   310dc:	df000304 	addi	fp,sp,12
   310e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   310e4:	e0bffe17 	ldw	r2,-8(fp)
   310e8:	10800217 	ldw	r2,8(r2)
   310ec:	10d00034 	orhi	r3,r2,16384
   310f0:	e0bffe17 	ldw	r2,-8(fp)
   310f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   310f8:	e03ffd15 	stw	zero,-12(fp)
   310fc:	00002306 	br	3118c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   31100:	040000f4 	movhi	r16,3
   31104:	840bb004 	addi	r16,r16,11968
   31108:	e0bffd17 	ldw	r2,-12(fp)
   3110c:	01400304 	movi	r5,12
   31110:	1009883a 	mov	r4,r2
   31114:	002b35c0 	call	2b35c <__mulsi3>
   31118:	8085883a 	add	r2,r16,r2
   3111c:	10c00017 	ldw	r3,0(r2)
   31120:	e0bffe17 	ldw	r2,-8(fp)
   31124:	10800017 	ldw	r2,0(r2)
   31128:	1880151e 	bne	r3,r2,31180 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3112c:	040000f4 	movhi	r16,3
   31130:	840bb004 	addi	r16,r16,11968
   31134:	e0bffd17 	ldw	r2,-12(fp)
   31138:	01400304 	movi	r5,12
   3113c:	1009883a 	mov	r4,r2
   31140:	002b35c0 	call	2b35c <__mulsi3>
   31144:	8085883a 	add	r2,r16,r2
   31148:	10800204 	addi	r2,r2,8
   3114c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   31150:	10000b0e 	bge	r2,zero,31180 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   31154:	01400304 	movi	r5,12
   31158:	e13ffd17 	ldw	r4,-12(fp)
   3115c:	002b35c0 	call	2b35c <__mulsi3>
   31160:	1007883a 	mov	r3,r2
   31164:	008000f4 	movhi	r2,3
   31168:	108bb004 	addi	r2,r2,11968
   3116c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   31170:	e0bffe17 	ldw	r2,-8(fp)
   31174:	18800226 	beq	r3,r2,31180 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   31178:	00bffcc4 	movi	r2,-13
   3117c:	00000806 	br	311a0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   31180:	e0bffd17 	ldw	r2,-12(fp)
   31184:	10800044 	addi	r2,r2,1
   31188:	e0bffd15 	stw	r2,-12(fp)
   3118c:	d0a00d17 	ldw	r2,-32716(gp)
   31190:	1007883a 	mov	r3,r2
   31194:	e0bffd17 	ldw	r2,-12(fp)
   31198:	18bfd92e 	bgeu	r3,r2,31100 <_gp+0xffff60c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   3119c:	0005883a 	mov	r2,zero
}
   311a0:	e6ffff04 	addi	sp,fp,-4
   311a4:	dfc00217 	ldw	ra,8(sp)
   311a8:	df000117 	ldw	fp,4(sp)
   311ac:	dc000017 	ldw	r16,0(sp)
   311b0:	dec00304 	addi	sp,sp,12
   311b4:	f800283a 	ret

000311b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   311b8:	defff604 	addi	sp,sp,-40
   311bc:	dfc00915 	stw	ra,36(sp)
   311c0:	df000815 	stw	fp,32(sp)
   311c4:	df000804 	addi	fp,sp,32
   311c8:	e13ffd15 	stw	r4,-12(fp)
   311cc:	e17ffe15 	stw	r5,-8(fp)
   311d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   311d4:	00bfffc4 	movi	r2,-1
   311d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   311dc:	00bffb44 	movi	r2,-19
   311e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   311e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   311e8:	d1600b04 	addi	r5,gp,-32724
   311ec:	e13ffd17 	ldw	r4,-12(fp)
   311f0:	00313bc0 	call	313bc <alt_find_dev>
   311f4:	e0bff815 	stw	r2,-32(fp)
   311f8:	e0bff817 	ldw	r2,-32(fp)
   311fc:	1000051e 	bne	r2,zero,31214 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   31200:	e13ffd17 	ldw	r4,-12(fp)
   31204:	003144c0 	call	3144c <alt_find_file>
   31208:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   3120c:	00800044 	movi	r2,1
   31210:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   31214:	e0bff817 	ldw	r2,-32(fp)
   31218:	10002b26 	beq	r2,zero,312c8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   3121c:	e13ff817 	ldw	r4,-32(fp)
   31220:	00315540 	call	31554 <alt_get_fd>
   31224:	e0bff915 	stw	r2,-28(fp)
   31228:	e0bff917 	ldw	r2,-28(fp)
   3122c:	1000030e 	bge	r2,zero,3123c <open+0x84>
    {
      status = index;
   31230:	e0bff917 	ldw	r2,-28(fp)
   31234:	e0bffa15 	stw	r2,-24(fp)
   31238:	00002506 	br	312d0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   3123c:	01400304 	movi	r5,12
   31240:	e13ff917 	ldw	r4,-28(fp)
   31244:	002b35c0 	call	2b35c <__mulsi3>
   31248:	1007883a 	mov	r3,r2
   3124c:	008000f4 	movhi	r2,3
   31250:	108bb004 	addi	r2,r2,11968
   31254:	1885883a 	add	r2,r3,r2
   31258:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3125c:	e0fffe17 	ldw	r3,-8(fp)
   31260:	00900034 	movhi	r2,16384
   31264:	10bfffc4 	addi	r2,r2,-1
   31268:	1886703a 	and	r3,r3,r2
   3126c:	e0bffc17 	ldw	r2,-16(fp)
   31270:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   31274:	e0bffb17 	ldw	r2,-20(fp)
   31278:	1000051e 	bne	r2,zero,31290 <open+0xd8>
   3127c:	e13ffc17 	ldw	r4,-16(fp)
   31280:	00310cc0 	call	310cc <alt_file_locked>
   31284:	e0bffa15 	stw	r2,-24(fp)
   31288:	e0bffa17 	ldw	r2,-24(fp)
   3128c:	10001016 	blt	r2,zero,312d0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   31290:	e0bff817 	ldw	r2,-32(fp)
   31294:	10800317 	ldw	r2,12(r2)
   31298:	10000826 	beq	r2,zero,312bc <open+0x104>
   3129c:	e0bff817 	ldw	r2,-32(fp)
   312a0:	10800317 	ldw	r2,12(r2)
   312a4:	e1ffff17 	ldw	r7,-4(fp)
   312a8:	e1bffe17 	ldw	r6,-8(fp)
   312ac:	e17ffd17 	ldw	r5,-12(fp)
   312b0:	e13ffc17 	ldw	r4,-16(fp)
   312b4:	103ee83a 	callr	r2
   312b8:	00000106 	br	312c0 <open+0x108>
   312bc:	0005883a 	mov	r2,zero
   312c0:	e0bffa15 	stw	r2,-24(fp)
   312c4:	00000206 	br	312d0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   312c8:	00bffb44 	movi	r2,-19
   312cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   312d0:	e0bffa17 	ldw	r2,-24(fp)
   312d4:	1000090e 	bge	r2,zero,312fc <open+0x144>
  {
    alt_release_fd (index);  
   312d8:	e13ff917 	ldw	r4,-28(fp)
   312dc:	00313140 	call	31314 <alt_release_fd>
    ALT_ERRNO = -status;
   312e0:	00310900 	call	31090 <alt_get_errno>
   312e4:	1007883a 	mov	r3,r2
   312e8:	e0bffa17 	ldw	r2,-24(fp)
   312ec:	0085c83a 	sub	r2,zero,r2
   312f0:	18800015 	stw	r2,0(r3)
    return -1;
   312f4:	00bfffc4 	movi	r2,-1
   312f8:	00000106 	br	31300 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   312fc:	e0bff917 	ldw	r2,-28(fp)
}
   31300:	e037883a 	mov	sp,fp
   31304:	dfc00117 	ldw	ra,4(sp)
   31308:	df000017 	ldw	fp,0(sp)
   3130c:	dec00204 	addi	sp,sp,8
   31310:	f800283a 	ret

00031314 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   31314:	defffc04 	addi	sp,sp,-16
   31318:	dfc00315 	stw	ra,12(sp)
   3131c:	df000215 	stw	fp,8(sp)
   31320:	dc000115 	stw	r16,4(sp)
   31324:	df000204 	addi	fp,sp,8
   31328:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   3132c:	e0bffe17 	ldw	r2,-8(fp)
   31330:	108000d0 	cmplti	r2,r2,3
   31334:	1000111e 	bne	r2,zero,3137c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   31338:	040000f4 	movhi	r16,3
   3133c:	840bb004 	addi	r16,r16,11968
   31340:	e0bffe17 	ldw	r2,-8(fp)
   31344:	01400304 	movi	r5,12
   31348:	1009883a 	mov	r4,r2
   3134c:	002b35c0 	call	2b35c <__mulsi3>
   31350:	8085883a 	add	r2,r16,r2
   31354:	10800204 	addi	r2,r2,8
   31358:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   3135c:	040000f4 	movhi	r16,3
   31360:	840bb004 	addi	r16,r16,11968
   31364:	e0bffe17 	ldw	r2,-8(fp)
   31368:	01400304 	movi	r5,12
   3136c:	1009883a 	mov	r4,r2
   31370:	002b35c0 	call	2b35c <__mulsi3>
   31374:	8085883a 	add	r2,r16,r2
   31378:	10000015 	stw	zero,0(r2)
  }
}
   3137c:	0001883a 	nop
   31380:	e6ffff04 	addi	sp,fp,-4
   31384:	dfc00217 	ldw	ra,8(sp)
   31388:	df000117 	ldw	fp,4(sp)
   3138c:	dc000017 	ldw	r16,0(sp)
   31390:	dec00304 	addi	sp,sp,12
   31394:	f800283a 	ret

00031398 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   31398:	deffff04 	addi	sp,sp,-4
   3139c:	df000015 	stw	fp,0(sp)
   313a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   313a4:	000170fa 	wrctl	ienable,zero
}
   313a8:	0001883a 	nop
   313ac:	e037883a 	mov	sp,fp
   313b0:	df000017 	ldw	fp,0(sp)
   313b4:	dec00104 	addi	sp,sp,4
   313b8:	f800283a 	ret

000313bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   313bc:	defffa04 	addi	sp,sp,-24
   313c0:	dfc00515 	stw	ra,20(sp)
   313c4:	df000415 	stw	fp,16(sp)
   313c8:	df000404 	addi	fp,sp,16
   313cc:	e13ffe15 	stw	r4,-8(fp)
   313d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   313d4:	e0bfff17 	ldw	r2,-4(fp)
   313d8:	10800017 	ldw	r2,0(r2)
   313dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   313e0:	e13ffe17 	ldw	r4,-8(fp)
   313e4:	002ee980 	call	2ee98 <strlen>
   313e8:	10800044 	addi	r2,r2,1
   313ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   313f0:	00000d06 	br	31428 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   313f4:	e0bffc17 	ldw	r2,-16(fp)
   313f8:	10800217 	ldw	r2,8(r2)
   313fc:	e0fffd17 	ldw	r3,-12(fp)
   31400:	180d883a 	mov	r6,r3
   31404:	e17ffe17 	ldw	r5,-8(fp)
   31408:	1009883a 	mov	r4,r2
   3140c:	00316d40 	call	316d4 <memcmp>
   31410:	1000021e 	bne	r2,zero,3141c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   31414:	e0bffc17 	ldw	r2,-16(fp)
   31418:	00000706 	br	31438 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3141c:	e0bffc17 	ldw	r2,-16(fp)
   31420:	10800017 	ldw	r2,0(r2)
   31424:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   31428:	e0fffc17 	ldw	r3,-16(fp)
   3142c:	e0bfff17 	ldw	r2,-4(fp)
   31430:	18bff01e 	bne	r3,r2,313f4 <_gp+0xffff63b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   31434:	0005883a 	mov	r2,zero
}
   31438:	e037883a 	mov	sp,fp
   3143c:	dfc00117 	ldw	ra,4(sp)
   31440:	df000017 	ldw	fp,0(sp)
   31444:	dec00204 	addi	sp,sp,8
   31448:	f800283a 	ret

0003144c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   3144c:	defffb04 	addi	sp,sp,-20
   31450:	dfc00415 	stw	ra,16(sp)
   31454:	df000315 	stw	fp,12(sp)
   31458:	df000304 	addi	fp,sp,12
   3145c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   31460:	d0a00917 	ldw	r2,-32732(gp)
   31464:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   31468:	00003106 	br	31530 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   3146c:	e0bffd17 	ldw	r2,-12(fp)
   31470:	10800217 	ldw	r2,8(r2)
   31474:	1009883a 	mov	r4,r2
   31478:	002ee980 	call	2ee98 <strlen>
   3147c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   31480:	e0bffd17 	ldw	r2,-12(fp)
   31484:	10c00217 	ldw	r3,8(r2)
   31488:	e0bffe17 	ldw	r2,-8(fp)
   3148c:	10bfffc4 	addi	r2,r2,-1
   31490:	1885883a 	add	r2,r3,r2
   31494:	10800003 	ldbu	r2,0(r2)
   31498:	10803fcc 	andi	r2,r2,255
   3149c:	1080201c 	xori	r2,r2,128
   314a0:	10bfe004 	addi	r2,r2,-128
   314a4:	10800bd8 	cmpnei	r2,r2,47
   314a8:	1000031e 	bne	r2,zero,314b8 <alt_find_file+0x6c>
    {
      len -= 1;
   314ac:	e0bffe17 	ldw	r2,-8(fp)
   314b0:	10bfffc4 	addi	r2,r2,-1
   314b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   314b8:	e0bffe17 	ldw	r2,-8(fp)
   314bc:	e0ffff17 	ldw	r3,-4(fp)
   314c0:	1885883a 	add	r2,r3,r2
   314c4:	10800003 	ldbu	r2,0(r2)
   314c8:	10803fcc 	andi	r2,r2,255
   314cc:	1080201c 	xori	r2,r2,128
   314d0:	10bfe004 	addi	r2,r2,-128
   314d4:	10800be0 	cmpeqi	r2,r2,47
   314d8:	1000081e 	bne	r2,zero,314fc <alt_find_file+0xb0>
   314dc:	e0bffe17 	ldw	r2,-8(fp)
   314e0:	e0ffff17 	ldw	r3,-4(fp)
   314e4:	1885883a 	add	r2,r3,r2
   314e8:	10800003 	ldbu	r2,0(r2)
   314ec:	10803fcc 	andi	r2,r2,255
   314f0:	1080201c 	xori	r2,r2,128
   314f4:	10bfe004 	addi	r2,r2,-128
   314f8:	10000a1e 	bne	r2,zero,31524 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   314fc:	e0bffd17 	ldw	r2,-12(fp)
   31500:	10800217 	ldw	r2,8(r2)
   31504:	e0fffe17 	ldw	r3,-8(fp)
   31508:	180d883a 	mov	r6,r3
   3150c:	e17fff17 	ldw	r5,-4(fp)
   31510:	1009883a 	mov	r4,r2
   31514:	00316d40 	call	316d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   31518:	1000021e 	bne	r2,zero,31524 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   3151c:	e0bffd17 	ldw	r2,-12(fp)
   31520:	00000706 	br	31540 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   31524:	e0bffd17 	ldw	r2,-12(fp)
   31528:	10800017 	ldw	r2,0(r2)
   3152c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   31530:	e0fffd17 	ldw	r3,-12(fp)
   31534:	d0a00904 	addi	r2,gp,-32732
   31538:	18bfcc1e 	bne	r3,r2,3146c <_gp+0xffff642c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   3153c:	0005883a 	mov	r2,zero
}
   31540:	e037883a 	mov	sp,fp
   31544:	dfc00117 	ldw	ra,4(sp)
   31548:	df000017 	ldw	fp,0(sp)
   3154c:	dec00204 	addi	sp,sp,8
   31550:	f800283a 	ret

00031554 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   31554:	defffa04 	addi	sp,sp,-24
   31558:	dfc00515 	stw	ra,20(sp)
   3155c:	df000415 	stw	fp,16(sp)
   31560:	dc000315 	stw	r16,12(sp)
   31564:	df000404 	addi	fp,sp,16
   31568:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   3156c:	00bffa04 	movi	r2,-24
   31570:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   31574:	e03ffc15 	stw	zero,-16(fp)
   31578:	00001d06 	br	315f0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   3157c:	040000f4 	movhi	r16,3
   31580:	840bb004 	addi	r16,r16,11968
   31584:	e0bffc17 	ldw	r2,-16(fp)
   31588:	01400304 	movi	r5,12
   3158c:	1009883a 	mov	r4,r2
   31590:	002b35c0 	call	2b35c <__mulsi3>
   31594:	8085883a 	add	r2,r16,r2
   31598:	10800017 	ldw	r2,0(r2)
   3159c:	1000111e 	bne	r2,zero,315e4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   315a0:	040000f4 	movhi	r16,3
   315a4:	840bb004 	addi	r16,r16,11968
   315a8:	e0bffc17 	ldw	r2,-16(fp)
   315ac:	01400304 	movi	r5,12
   315b0:	1009883a 	mov	r4,r2
   315b4:	002b35c0 	call	2b35c <__mulsi3>
   315b8:	8085883a 	add	r2,r16,r2
   315bc:	e0fffe17 	ldw	r3,-8(fp)
   315c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   315c4:	d0e00d17 	ldw	r3,-32716(gp)
   315c8:	e0bffc17 	ldw	r2,-16(fp)
   315cc:	1880020e 	bge	r3,r2,315d8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   315d0:	e0bffc17 	ldw	r2,-16(fp)
   315d4:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
   315d8:	e0bffc17 	ldw	r2,-16(fp)
   315dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   315e0:	00000606 	br	315fc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   315e4:	e0bffc17 	ldw	r2,-16(fp)
   315e8:	10800044 	addi	r2,r2,1
   315ec:	e0bffc15 	stw	r2,-16(fp)
   315f0:	e0bffc17 	ldw	r2,-16(fp)
   315f4:	10800810 	cmplti	r2,r2,32
   315f8:	103fe01e 	bne	r2,zero,3157c <_gp+0xffff653c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   315fc:	e0bffd17 	ldw	r2,-12(fp)
}
   31600:	e6ffff04 	addi	sp,fp,-4
   31604:	dfc00217 	ldw	ra,8(sp)
   31608:	df000117 	ldw	fp,4(sp)
   3160c:	dc000017 	ldw	r16,0(sp)
   31610:	dec00304 	addi	sp,sp,12
   31614:	f800283a 	ret

00031618 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   31618:	defffe04 	addi	sp,sp,-8
   3161c:	df000115 	stw	fp,4(sp)
   31620:	df000104 	addi	fp,sp,4
   31624:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   31628:	e0bfff17 	ldw	r2,-4(fp)
   3162c:	10bffe84 	addi	r2,r2,-6
   31630:	10c00428 	cmpgeui	r3,r2,16
   31634:	18001a1e 	bne	r3,zero,316a0 <alt_exception_cause_generated_bad_addr+0x88>
   31638:	100690ba 	slli	r3,r2,2
   3163c:	008000f4 	movhi	r2,3
   31640:	10859404 	addi	r2,r2,5712
   31644:	1885883a 	add	r2,r3,r2
   31648:	10800017 	ldw	r2,0(r2)
   3164c:	1000683a 	jmp	r2
   31650:	00031690 	cmplti	zero,zero,3162
   31654:	00031690 	cmplti	zero,zero,3162
   31658:	000316a0 	cmpeqi	zero,zero,3162
   3165c:	000316a0 	cmpeqi	zero,zero,3162
   31660:	000316a0 	cmpeqi	zero,zero,3162
   31664:	00031690 	cmplti	zero,zero,3162
   31668:	00031698 	cmpnei	zero,zero,3162
   3166c:	000316a0 	cmpeqi	zero,zero,3162
   31670:	00031690 	cmplti	zero,zero,3162
   31674:	00031690 	cmplti	zero,zero,3162
   31678:	000316a0 	cmpeqi	zero,zero,3162
   3167c:	00031690 	cmplti	zero,zero,3162
   31680:	00031698 	cmpnei	zero,zero,3162
   31684:	000316a0 	cmpeqi	zero,zero,3162
   31688:	000316a0 	cmpeqi	zero,zero,3162
   3168c:	00031690 	cmplti	zero,zero,3162
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   31690:	00800044 	movi	r2,1
   31694:	00000306 	br	316a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   31698:	0005883a 	mov	r2,zero
   3169c:	00000106 	br	316a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   316a0:	0005883a 	mov	r2,zero
  }
}
   316a4:	e037883a 	mov	sp,fp
   316a8:	df000017 	ldw	fp,0(sp)
   316ac:	dec00104 	addi	sp,sp,4
   316b0:	f800283a 	ret

000316b4 <exit>:
   316b4:	defffe04 	addi	sp,sp,-8
   316b8:	000b883a 	mov	r5,zero
   316bc:	dc000015 	stw	r16,0(sp)
   316c0:	dfc00115 	stw	ra,4(sp)
   316c4:	2021883a 	mov	r16,r4
   316c8:	00317040 	call	31704 <__call_exitprocs>
   316cc:	8009883a 	mov	r4,r16
   316d0:	00318940 	call	31894 <_exit>

000316d4 <memcmp>:
   316d4:	218d883a 	add	r6,r4,r6
   316d8:	21800826 	beq	r4,r6,316fc <memcmp+0x28>
   316dc:	20800003 	ldbu	r2,0(r4)
   316e0:	28c00003 	ldbu	r3,0(r5)
   316e4:	10c00226 	beq	r2,r3,316f0 <memcmp+0x1c>
   316e8:	10c5c83a 	sub	r2,r2,r3
   316ec:	f800283a 	ret
   316f0:	21000044 	addi	r4,r4,1
   316f4:	29400044 	addi	r5,r5,1
   316f8:	003ff706 	br	316d8 <_gp+0xffff6698>
   316fc:	0005883a 	mov	r2,zero
   31700:	f800283a 	ret

00031704 <__call_exitprocs>:
   31704:	defff504 	addi	sp,sp,-44
   31708:	dd000515 	stw	r20,20(sp)
   3170c:	050000f4 	movhi	r20,3
   31710:	dc800315 	stw	r18,12(sp)
   31714:	dfc00a15 	stw	ra,40(sp)
   31718:	df000915 	stw	fp,36(sp)
   3171c:	ddc00815 	stw	r23,32(sp)
   31720:	dd800715 	stw	r22,28(sp)
   31724:	dd400615 	stw	r21,24(sp)
   31728:	dcc00415 	stw	r19,16(sp)
   3172c:	dc400215 	stw	r17,8(sp)
   31730:	dc000115 	stw	r16,4(sp)
   31734:	d9000015 	stw	r4,0(sp)
   31738:	2825883a 	mov	r18,r5
   3173c:	a50c1304 	addi	r20,r20,12364
   31740:	a4400017 	ldw	r17,0(r20)
   31744:	8cc00c17 	ldw	r19,48(r17)
   31748:	8c400c04 	addi	r17,r17,48
   3174c:	98004526 	beq	r19,zero,31864 <__call_exitprocs+0x160>
   31750:	9c000117 	ldw	r16,4(r19)
   31754:	00900034 	movhi	r2,16384
   31758:	10bfffc4 	addi	r2,r2,-1
   3175c:	9d402217 	ldw	r21,136(r19)
   31760:	85bfffc4 	addi	r22,r16,-1
   31764:	80a1883a 	add	r16,r16,r2
   31768:	8421883a 	add	r16,r16,r16
   3176c:	8421883a 	add	r16,r16,r16
   31770:	ac2f883a 	add	r23,r21,r16
   31774:	84000204 	addi	r16,r16,8
   31778:	9c21883a 	add	r16,r19,r16
   3177c:	b0002716 	blt	r22,zero,3181c <__call_exitprocs+0x118>
   31780:	90000726 	beq	r18,zero,317a0 <__call_exitprocs+0x9c>
   31784:	a800041e 	bne	r21,zero,31798 <__call_exitprocs+0x94>
   31788:	b5bfffc4 	addi	r22,r22,-1
   3178c:	bdffff04 	addi	r23,r23,-4
   31790:	843fff04 	addi	r16,r16,-4
   31794:	003ff906 	br	3177c <_gp+0xffff673c>
   31798:	b9002017 	ldw	r4,128(r23)
   3179c:	913ffa1e 	bne	r18,r4,31788 <_gp+0xffff6748>
   317a0:	99000117 	ldw	r4,4(r19)
   317a4:	82000017 	ldw	r8,0(r16)
   317a8:	213fffc4 	addi	r4,r4,-1
   317ac:	b100021e 	bne	r22,r4,317b8 <__call_exitprocs+0xb4>
   317b0:	9d800115 	stw	r22,4(r19)
   317b4:	00000106 	br	317bc <__call_exitprocs+0xb8>
   317b8:	80000015 	stw	zero,0(r16)
   317bc:	403ff226 	beq	r8,zero,31788 <_gp+0xffff6748>
   317c0:	9f000117 	ldw	fp,4(r19)
   317c4:	a8000526 	beq	r21,zero,317dc <__call_exitprocs+0xd8>
   317c8:	00800044 	movi	r2,1
   317cc:	1592983a 	sll	r9,r2,r22
   317d0:	a9404017 	ldw	r5,256(r21)
   317d4:	494a703a 	and	r5,r9,r5
   317d8:	2800021e 	bne	r5,zero,317e4 <__call_exitprocs+0xe0>
   317dc:	403ee83a 	callr	r8
   317e0:	00000906 	br	31808 <__call_exitprocs+0x104>
   317e4:	a9004117 	ldw	r4,260(r21)
   317e8:	4908703a 	and	r4,r9,r4
   317ec:	2000041e 	bne	r4,zero,31800 <__call_exitprocs+0xfc>
   317f0:	b9400017 	ldw	r5,0(r23)
   317f4:	d9000017 	ldw	r4,0(sp)
   317f8:	403ee83a 	callr	r8
   317fc:	00000206 	br	31808 <__call_exitprocs+0x104>
   31800:	b9000017 	ldw	r4,0(r23)
   31804:	403ee83a 	callr	r8
   31808:	99000117 	ldw	r4,4(r19)
   3180c:	e13fcc1e 	bne	fp,r4,31740 <_gp+0xffff6700>
   31810:	89000017 	ldw	r4,0(r17)
   31814:	993fdc26 	beq	r19,r4,31788 <_gp+0xffff6748>
   31818:	003fc906 	br	31740 <_gp+0xffff6700>
   3181c:	008000f4 	movhi	r2,3
   31820:	10b9ef04 	addi	r2,r2,-6212
   31824:	10000f26 	beq	r2,zero,31864 <__call_exitprocs+0x160>
   31828:	99400117 	ldw	r5,4(r19)
   3182c:	99000017 	ldw	r4,0(r19)
   31830:	2800091e 	bne	r5,zero,31858 <__call_exitprocs+0x154>
   31834:	20000826 	beq	r4,zero,31858 <__call_exitprocs+0x154>
   31838:	89000015 	stw	r4,0(r17)
   3183c:	a8000226 	beq	r21,zero,31848 <__call_exitprocs+0x144>
   31840:	a809883a 	mov	r4,r21
   31844:	002e7bc0 	call	2e7bc <free>
   31848:	9809883a 	mov	r4,r19
   3184c:	002e7bc0 	call	2e7bc <free>
   31850:	8cc00017 	ldw	r19,0(r17)
   31854:	003fbd06 	br	3174c <_gp+0xffff670c>
   31858:	9823883a 	mov	r17,r19
   3185c:	2027883a 	mov	r19,r4
   31860:	003fba06 	br	3174c <_gp+0xffff670c>
   31864:	dfc00a17 	ldw	ra,40(sp)
   31868:	df000917 	ldw	fp,36(sp)
   3186c:	ddc00817 	ldw	r23,32(sp)
   31870:	dd800717 	ldw	r22,28(sp)
   31874:	dd400617 	ldw	r21,24(sp)
   31878:	dd000517 	ldw	r20,20(sp)
   3187c:	dcc00417 	ldw	r19,16(sp)
   31880:	dc800317 	ldw	r18,12(sp)
   31884:	dc400217 	ldw	r17,8(sp)
   31888:	dc000117 	ldw	r16,4(sp)
   3188c:	dec00b04 	addi	sp,sp,44
   31890:	f800283a 	ret

00031894 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   31894:	defffd04 	addi	sp,sp,-12
   31898:	df000215 	stw	fp,8(sp)
   3189c:	df000204 	addi	fp,sp,8
   318a0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   318a4:	0001883a 	nop
   318a8:	e0bfff17 	ldw	r2,-4(fp)
   318ac:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   318b0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   318b4:	10000226 	beq	r2,zero,318c0 <_exit+0x2c>
    ALT_SIM_FAIL();
   318b8:	002af070 	cmpltui	zero,zero,43969
   318bc:	00000106 	br	318c4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   318c0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   318c4:	003fff06 	br	318c4 <_gp+0xffff6884>

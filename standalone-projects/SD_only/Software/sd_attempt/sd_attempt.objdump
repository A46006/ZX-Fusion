
sd_attempt.elf:     file format elf32-littlenios2
sd_attempt.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000a098 memsz 0x0000a098 flags r-x
    LOAD off    0x0000b0b8 vaddr 0x0004a0b8 paddr 0x0004a3a0 align 2**12
         filesz 0x000002e8 memsz 0x000002e8 flags rw-
    LOAD off    0x0000b688 vaddr 0x0004a688 paddr 0x0004a688 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009620  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000868  00049850  00049850  0000a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e8  0004a0b8  0004a3a0  0000b0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0004a688  0004a688  0000b688  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0004a7e8  0004a7e8  0000b3a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000b3a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a40  00000000  00000000  0000b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00011391  00000000  00000000  0000be08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000056e7  00000000  00000000  0001d199  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000694b  00000000  00000000  00022880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c00  00000000  00000000  000291cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000036b7  00000000  00000000  0002adcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005db3  00000000  00000000  0002e483  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00034238  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000780  00000000  00000000  00034278  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000373ea  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000373ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000373f0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000373f1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000373f2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000373f6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000373fa  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000373fe  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00037407  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00037410  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000010  00000000  00000000  00037419  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003e  00000000  00000000  00037429  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ec6  00000000  00000000  00037467  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00058119  00000000  00000000  0003c32d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00049850 l    d  .rodata	00000000 .rodata
0004a0b8 l    d  .rwdata	00000000 .rwdata
0004a688 l    d  .bss	00000000 .bss
0004a7e8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sd_attempt_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
00000000 l    df *ABS*	00000000 FatInternal.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 crc16.c
000499e8 l     O .rodata	00000200 crc16tab
00000000 l    df *ABS*	00000000 crc7.c
00049be8 l     O .rodata	00000100 crc7_syndrome_table
00000000 l    df *ABS*	00000000 sd_hal.c
00000000 l    df *ABS*	00000000 sd_lib.c
0004a6b0 l     O .bss	00000038 gSdInfo
00000000 l    df *ABS*	00000000 sd_protocol.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004703c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
000475f0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 ctype_.c
00049f09 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0004a0b8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_load.c
00047f58 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004a378 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00048334 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00048470 l     F .text	00000034 alt_dev_reg
0004a198 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004876c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000489b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00048aec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00048b18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00048eb8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00049018 l     F .text	0000003c alt_get_errno
00049054 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0004a6ac g     O .bss	00000004 alt_instruction_exception_handler
00046dec g     F .text	0000001c putchar
00048044 g     F .text	0000006c alt_main
00046e08 g     F .text	00000080 _puts_r
000406dc g     F .text	0000006c Fat_FileBrowseBegin
0004a6e8 g     O .bss	00000100 alt_irq
0004a3a0 g       *ABS*	00000000 __flash_rwdata_start
00043b5c g     F .text	00000080 SDLIB_WriteBlock512
0004a7e8 g       *ABS*	00000000 __alt_heap_start
00046d98 g     F .text	0000004c printf
00044fec g     F .text	000001a8 SD_CMD24
00040748 g     F .text	0000042c Fat_FileBrowseNext
00045464 g     F .text	00000440 .hidden __divsf3
00042c98 g     F .text	0000002c SDHAL_IsSupport4Bits
00042bd8 g     F .text	00000050 crc7_byte
00041f64 g     F .text	000000ac fatIsValidDir
00047df4 g     F .text	00000060 memmove
00049320 g     F .text	00000024 altera_nios2_gen2_irq_init
00047d4c g     F .text	000000a8 __sfvwrite_small_str
00040000 g     F .entry	0000000c __reset
00042e2c g     F .text	00000214 SDHAL_GetResponse
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004a690 g     O .bss	00000004 errno
00041960 g     F .text	00000180 fatNextCluster
0004a698 g     O .bss	00000004 alt_argv
0005236c g       *ABS*	00000000 _gp
00048304 g     F .text	00000030 usleep
0004a1ec g     O .rwdata	00000180 alt_fd_list
00046de4 g     F .text	00000008 _putchar_r
00049344 g     F .text	00000090 alt_find_dev
00046ad8 g     F .text	00000028 memcpy
00048f9c g     F .text	0000007c alt_io_redirect
00040e28 g     F .text	000000b0 Fat_FileExist
00046e88 g     F .text	00000014 puts
000495a0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044164 g     F .text	00000198 SD_CMD2
000485ec g     F .text	000000ec altera_avalon_jtag_uart_read
00046ab0 g     F .text	00000014 malloc
00046d5c g     F .text	0000003c _printf_r
00045380 g     F .text	00000064 .hidden __udivsi3
00044cc4 g     F .text	00000180 SD_ACMD42
00047c60 g     F .text	00000034 vsnprintf
00044818 g     F .text	00000180 SD_CMD7
00046e9c g     F .text	00000050 _sbrk_r
00044998 g     F .text	000001a0 SD_CMD16
00045214 g     F .text	00000074 ArrayToU32
0004a394 g     O .rwdata	00000004 alt_max_fd
000424d8 g     F .text	00000338 fatMount
00046794 g     F .text	00000110 .hidden __extendsfdf2
00042010 g     F .text	00000048 fatIsUnusedDir
0004a370 g     O .rwdata	00000004 _global_impure_ptr
0004a7e8 g       *ABS*	00000000 __bss_end
00048dc8 g     F .text	000000f0 alt_iic_isr_register
000481fc g     F .text	00000108 alt_tick
00042810 g     F .text	0000003c SD_ReadBlock512
00048d7c g     F .text	0000004c alt_ic_irq_enabled
00040ed8 g     F .text	0000012c Fat_FileOpen
00048160 g     F .text	0000009c alt_alarm_stop
0004a6a8 g     O .bss	00000004 alt_irq_active
00041c68 g     F .text	000001f8 fatDelClusterList
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400fc g     F .exceptions	000000d4 alt_irq_handler
0004a1c4 g     O .rwdata	00000028 alt_dev_null
00042d34 g     F .text	000000f8 SDHAL_SendCmd
00048acc g     F .text	00000020 alt_dcache_flush_all
00043040 g     F .text	000004c8 SDHAL_ReadData
0004a3a0 g       *ABS*	00000000 __ram_rwdata_end
0004a38c g     O .rwdata	00000008 alt_dev_list
000405dc g     F .text	00000044 Fat_Mount
00048370 g     F .text	00000100 write
00047ea8 g     F .text	00000058 _putc_r
0004a0b8 g       *ABS*	00000000 __ram_rodata_end
000429b0 g     F .text	0000006c myprintf
000453e4 g     F .text	00000058 .hidden __umodsi3
0004a7e8 g       *ABS*	00000000 end
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00050000 g       *ABS*	00000000 __alt_stack_pointer
000487e4 g     F .text	0000007c alt_avalon_timer_sc_init
00046a4c g     F .text	00000064 .hidden __clzsi2
000486d8 g     F .text	00000094 altera_avalon_jtag_uart_write
000415cc g     F .text	00000048 Fat_FileClose
00040b74 g     F .text	0000006c Fat_FileCount
0004765c g     F .text	0000052c ___vfprintf_internal_r
00046eec g     F .text	00000064 _sprintf_r
00046b20 g     F .text	000000e4 _free_r
0004968c g     F .text	00000190 __call_exitprocs
00040230 g     F .text	0000003c _start
0004a6a0 g     O .bss	00000004 _alt_tick_rate
0004a6a4 g     O .bss	00000004 _alt_nticks
00043c30 g     F .text	0000008c SD_CMD0
000484dc g     F .text	00000050 alt_sys_init
000436e8 g     F .text	00000064 SDHAL_DummyClock
00041004 g     F .text	00000044 Fat_FileSize
00042b34 g     F .text	000000a4 crc16
00043bdc g     F .text	0000002c SD_Init
0004543c g     F .text	00000028 .hidden __mulsi3
0004a0b8 g       *ABS*	00000000 __ram_rwdata_start
00049850 g       *ABS*	00000000 __ram_rodata_start
00046fc8 g     F .text	00000058 strcasecmp
0004852c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000494dc g     F .text	000000c4 alt_get_fd
00048860 g     F .text	00000158 alt_busy_sleep
00041048 g     F .text	00000484 Fat_FileRead
0004965c g     F .text	00000030 memcmp
0004a7e8 g       *ABS*	00000000 __alt_stack_base
000423c8 g     F .text	00000110 fatFindUnusedDirectory
00042cc4 g     F .text	00000070 SDHAL_Init
00045dc4 g     F .text	000009d0 .hidden __divdf3
00047ba4 g     F .text	000000bc _vsnprintf_r
00041614 g     F .text	000001d0 Fat_SpeedTest
000493d4 g     F .text	00000108 alt_find_file
00048b54 g     F .text	000000a4 alt_dev_llist_insert
000480b0 g     F .text	000000b0 sbrk
000470a8 g     F .text	0000052c ___svfprintf_internal_r
00047c94 g     F .text	000000b8 __sfvwrite_small_dev
0004231c g     F .text	000000ac fatFindDirectory
0004a688 g       *ABS*	00000000 __bss_start
00046b00 g     F .text	00000020 memset
0004051c g     F .text	000000c0 main
0004228c g     F .text	00000090 fatReadSecter
0004a69c g     O .bss	00000004 alt_envp
00042a1c g     F .text	00000088 myprintf_hexarray
0004858c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00042058 g     F .text	000001ac fatDump
00050000 g       *ABS*	00000000 __alt_heap_limit
000468a4 g     F .text	000001a8 .hidden __truncdfsf2
00046c04 g     F .text	00000158 _malloc_r
000451d4 g     F .text	00000040 SD_WriteData
0004a398 g     O .rwdata	00000004 alt_errno
00041e60 g     F .text	00000060 fatDumpDate
00042c28 g     F .text	00000070 crc7
00047e54 g     F .text	00000054 putc
000414cc g     F .text	00000100 Fat_FileSeek
00045288 g     F .text	00000084 .hidden __divsi3
00044b38 g     F .text	0000018c SD_ACMD6
000458a4 g     F .text	00000430 .hidden __mulsf3
0004284c g     F .text	0000003c SD_WriteBlock512
00049850 g       *ABS*	00000000 __flash_rodata_start
00042204 g     F .text	00000088 fatArray2Value
00043c08 g     F .text	00000028 SD_IsSupport4Bits
00041894 g     F .text	000000cc fat32ClusterType
000484a4 g     F .text	00000038 alt_irq_init
0004929c g     F .text	00000084 alt_release_fd
00046f50 g     F .text	00000078 sprintf
00049d04 g     O .rodata	00000100 .hidden __clz_tab
0004297c g     F .text	00000034 debug_output
00043fc8 g     F .text	0000019c SD_ACMD41
00047f00 g     F .text	00000058 _write_r
00043cbc g     F .text	0000018c SD_CMD8
00040c74 g     F .text	000001b4 fatComposeShortFilename
0004a374 g     O .rwdata	00000004 _impure_ptr
0004a694 g     O .bss	00000004 alt_argc
00040670 g     F .text	0000006c Fat_Type
00042aa4 g     F .text	00000090 myprintf_dwordarray
00040020 g       .exceptions	00000000 alt_irq_entry
0004026c g     F .text	000002b0 Fat_Test
000417e4 g     F .text	000000b0 fat16ClusterType
0004a384 g     O .rwdata	00000008 alt_fs_list
00043e48 g     F .text	00000180 SD_CMD55
000475d4 g     F .text	0000001c __vfprintf_internal_unused
00044658 g     F .text	000001c0 SD_CMD10
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040be0 g     F .text	00000094 fatSameLongFilename
00048c18 g     F .text	00000050 alt_ic_isr_register
0004a3a0 g       *ABS*	00000000 _edata
00041ec0 g     F .text	00000060 fatDumpTime
0004a7e8 g       *ABS*	00000000 _end
00044498 g     F .text	000001c0 SD_CMD9
00040230 g       *ABS*	00000000 __ram_exceptions_end
00048cf0 g     F .text	0000008c alt_ic_irq_disable
0004963c g     F .text	00000020 exit
00042888 g     F .text	000000f4 fatMountSdcard
00045cd4 g     F .text	000000f0 .hidden __floatunsisf
0004530c g     F .text	00000074 .hidden __modsi3
0004a36c g     O .rwdata	00000004 __ctype_ptr__
00050000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004374c g     F .text	0000031c SDLIB_Init
00049e08 g     O .rodata	00000101 _ctype_
00044e44 g     F .text	000001a8 SD_CMD17
0004981c g     F .text	00000034 _exit
00047020 g     F .text	0000001c strlen
00049140 g     F .text	0000015c open
0004a688 g     O .bss	00000004 __malloc_sbrk_start
00048bf8 g     F .text	00000020 alt_icache_flush_all
0004a39c g     O .rwdata	00000004 alt_priority_mask
0004a68c g     O .bss	00000004 __malloc_free_list
00048c68 g     F .text	00000088 alt_ic_irq_enable
00043508 g     F .text	000001e0 SDHAL_WriteData
00047b88 g     F .text	0000001c __vfprintf_internal
00041ae0 g     F .text	00000188 fatFindUnusedCluster
0004a37c g     O .rwdata	00000008 alt_alarm_list
00045194 g     F .text	00000040 SD_ReadData
000489f4 g     F .text	000000d8 close
00040620 g     F .text	00000050 Fat_Unmount
00047fc0 g     F .text	00000084 alt_load
00046ac4 g     F .text	00000014 free
00041f20 g     F .text	00000044 fatIsLastDir
000442fc g     F .text	0000019c SD_CMD3
00043a68 g     F .text	000000f4 SDLIB_ReadBlock512



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a9ba04 	addi	r2,r2,-22808
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a9ba04 	addi	r2,r2,-22808
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <_gp+0xfffeddc0>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <_gp+0xfffeddb4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a0d017 	ldw	r2,-31936(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a0d017 	ldw	r2,-31936(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   40238:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   4023c:	d688db14 	ori	gp,gp,9068
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40244:	10a9a214 	ori	r2,r2,42632

    movhi r3, %hi(__bss_end)
   40248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4024c:	18e9fa14 	ori	r3,r3,42984

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <_gp+0xfffedee8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	0047fc00 	call	47fc0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00480440 	call	48044 <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <_gp+0xfffedefc>

0004026c <Fat_Test>:
#include <stdio.h>
#include ".\terasic_lib\terasic_includes.h"
#include ".\terasic_fat\FatFileSystem.h"


bool Fat_Test(FAT_HANDLE hFat, char *pDumpFile){
   4026c:	deff6704 	addi	sp,sp,-612
   40270:	dfc09815 	stw	ra,608(sp)
   40274:	df009715 	stw	fp,604(sp)
   40278:	df009704 	addi	fp,sp,604
   4027c:	e13ffe15 	stw	r4,-8(fp)
   40280:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    int nCount = 0;
   40284:	e03f6a15 	stw	zero,-600(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;

    bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
   40288:	e0bf7204 	addi	r2,fp,-568
   4028c:	100b883a 	mov	r5,r2
   40290:	e13ffe17 	ldw	r4,-8(fp)
   40294:	00406dc0 	call	406dc <Fat_FileBrowseBegin>
   40298:	e0bf6915 	stw	r2,-604(fp)
    if (bSuccess){
   4029c:	e0bf6917 	ldw	r2,-604(fp)
   402a0:	10003d26 	beq	r2,zero,40398 <Fat_Test+0x12c>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext)){
   402a4:	00003606 	br	40380 <Fat_Test+0x114>
            if (FileContext.bLongFilename){
   402a8:	e0bfb417 	ldw	r2,-304(fp)
   402ac:	10002b26 	beq	r2,zero,4035c <Fat_Test+0xf0>
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
   402b0:	e0bf7404 	addi	r2,fp,-560
   402b4:	e0bf6b15 	stw	r2,-596(fp)
                pData8 = FileContext.szName;
   402b8:	e0bf7404 	addi	r2,fp,-560
   402bc:	e0bf6c15 	stw	r2,-592(fp)
                printf("[%d]", nCount);
   402c0:	e17f6a17 	ldw	r5,-600(fp)
   402c4:	01000174 	movhi	r4,5
   402c8:	21261404 	addi	r4,r4,-26544
   402cc:	0046d980 	call	46d98 <printf>
                while(*pData16){
   402d0:	00001b06 	br	40340 <Fat_Test+0xd4>
                    if (*pData8)
   402d4:	e0bf6c17 	ldw	r2,-592(fp)
   402d8:	10800003 	ldbu	r2,0(r2)
   402dc:	10803fcc 	andi	r2,r2,255
   402e0:	10000526 	beq	r2,zero,402f8 <Fat_Test+0x8c>
                        printf("%c", *pData8);
   402e4:	e0bf6c17 	ldw	r2,-592(fp)
   402e8:	10800003 	ldbu	r2,0(r2)
   402ec:	10803fcc 	andi	r2,r2,255
   402f0:	1009883a 	mov	r4,r2
   402f4:	0046dec0 	call	46dec <putchar>
                    pData8++;
   402f8:	e0bf6c17 	ldw	r2,-592(fp)
   402fc:	10800044 	addi	r2,r2,1
   40300:	e0bf6c15 	stw	r2,-592(fp)
                    if (*pData8)
   40304:	e0bf6c17 	ldw	r2,-592(fp)
   40308:	10800003 	ldbu	r2,0(r2)
   4030c:	10803fcc 	andi	r2,r2,255
   40310:	10000526 	beq	r2,zero,40328 <Fat_Test+0xbc>
                        printf("%c", *pData8);
   40314:	e0bf6c17 	ldw	r2,-592(fp)
   40318:	10800003 	ldbu	r2,0(r2)
   4031c:	10803fcc 	andi	r2,r2,255
   40320:	1009883a 	mov	r4,r2
   40324:	0046dec0 	call	46dec <putchar>
                    pData8++;
   40328:	e0bf6c17 	ldw	r2,-592(fp)
   4032c:	10800044 	addi	r2,r2,1
   40330:	e0bf6c15 	stw	r2,-592(fp)
                    //
                    pData16++;
   40334:	e0bf6b17 	ldw	r2,-596(fp)
   40338:	10800084 	addi	r2,r2,2
   4033c:	e0bf6b15 	stw	r2,-596(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                printf("[%d]", nCount);
                while(*pData16){
   40340:	e0bf6b17 	ldw	r2,-596(fp)
   40344:	1080000b 	ldhu	r2,0(r2)
   40348:	10bfffcc 	andi	r2,r2,65535
   4034c:	103fe11e 	bne	r2,zero,402d4 <_gp+0xfffedf68>
                        printf("%c", *pData8);
                    pData8++;
                    //
                    pData16++;
                }
                printf("\n");
   40350:	01000284 	movi	r4,10
   40354:	0046dec0 	call	46dec <putchar>
   40358:	00000606 	br	40374 <Fat_Test+0x108>
            }else{
                printf("[%d]%s\n", nCount, FileContext.szName);
   4035c:	e0bf7404 	addi	r2,fp,-560
   40360:	100d883a 	mov	r6,r2
   40364:	e17f6a17 	ldw	r5,-600(fp)
   40368:	01000174 	movhi	r4,5
   4036c:	21261604 	addi	r4,r4,-26536
   40370:	0046d980 	call	46d98 <printf>
            }
            nCount++;
   40374:	e0bf6a17 	ldw	r2,-600(fp)
   40378:	10800044 	addi	r2,r2,1
   4037c:	e0bf6a15 	stw	r2,-600(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;

    bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
    if (bSuccess){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext)){
   40380:	e0ff7404 	addi	r3,fp,-560
   40384:	e0bf7204 	addi	r2,fp,-568
   40388:	180b883a 	mov	r5,r3
   4038c:	1009883a 	mov	r4,r2
   40390:	00407480 	call	40748 <Fat_FileBrowseNext>
   40394:	103fc41e 	bne	r2,zero,402a8 <_gp+0xfffedf3c>
                printf("[%d]%s\n", nCount, FileContext.szName);
            }
            nCount++;
        }
    }
    if (bSuccess && pDumpFile && strlen(pDumpFile)){
   40398:	e0bf6917 	ldw	r2,-604(fp)
   4039c:	10005926 	beq	r2,zero,40504 <Fat_Test+0x298>
   403a0:	e0bfff17 	ldw	r2,-4(fp)
   403a4:	10005726 	beq	r2,zero,40504 <Fat_Test+0x298>
   403a8:	e0bfff17 	ldw	r2,-4(fp)
   403ac:	10800003 	ldbu	r2,0(r2)
   403b0:	10803fcc 	andi	r2,r2,255
   403b4:	1080201c 	xori	r2,r2,128
   403b8:	10bfe004 	addi	r2,r2,-128
   403bc:	10005126 	beq	r2,zero,40504 <Fat_Test+0x298>
        FAT_FILE_HANDLE hFile;
        hFile =  Fat_FileOpen(hFat, pDumpFile);
   403c0:	e17fff17 	ldw	r5,-4(fp)
   403c4:	e13ffe17 	ldw	r4,-8(fp)
   403c8:	0040ed80 	call	40ed8 <Fat_FileOpen>
   403cc:	e0bf7015 	stw	r2,-576(fp)
        if (hFile){
   403d0:	e0bf7017 	ldw	r2,-576(fp)
   403d4:	10004626 	beq	r2,zero,404f0 <Fat_Test+0x284>
            char szRead[256];
            int nReadSize, nFileSize, nTotalReadSize=0;
   403d8:	e03f6e15 	stw	zero,-584(fp)
            nFileSize = Fat_FileSize(hFile);
   403dc:	e13f7017 	ldw	r4,-576(fp)
   403e0:	00410040 	call	41004 <Fat_FileSize>
   403e4:	e0bf7115 	stw	r2,-572(fp)
            if (nReadSize > sizeof(szRead))
   403e8:	e0bf6d17 	ldw	r2,-588(fp)
   403ec:	10804070 	cmpltui	r2,r2,257
   403f0:	1000021e 	bne	r2,zero,403fc <Fat_Test+0x190>
                nReadSize = sizeof(szRead);
   403f4:	00804004 	movi	r2,256
   403f8:	e0bf6d15 	stw	r2,-588(fp)
            printf("%s dump:\n", pDumpFile);
   403fc:	e17fff17 	ldw	r5,-4(fp)
   40400:	01000174 	movhi	r4,5
   40404:	21261804 	addi	r4,r4,-26528
   40408:	0046d980 	call	46d98 <printf>
            while(bSuccess && nTotalReadSize < nFileSize){
   4040c:	00002c06 	br	404c0 <Fat_Test+0x254>
                nReadSize = sizeof(szRead);
   40410:	00804004 	movi	r2,256
   40414:	e0bf6d15 	stw	r2,-588(fp)
                if (nReadSize > (nFileSize - nTotalReadSize))
   40418:	e0ff7117 	ldw	r3,-572(fp)
   4041c:	e0bf6e17 	ldw	r2,-584(fp)
   40420:	1887c83a 	sub	r3,r3,r2
   40424:	e0bf6d17 	ldw	r2,-588(fp)
   40428:	1880040e 	bge	r3,r2,4043c <Fat_Test+0x1d0>
                    nReadSize = (nFileSize - nTotalReadSize);
   4042c:	e0ff7117 	ldw	r3,-572(fp)
   40430:	e0bf6e17 	ldw	r2,-584(fp)
   40434:	1885c83a 	sub	r2,r3,r2
   40438:	e0bf6d15 	stw	r2,-588(fp)
                //
                if (Fat_FileRead(hFile, szRead, nReadSize)){
   4043c:	e0bfbe04 	addi	r2,fp,-264
   40440:	e1bf6d17 	ldw	r6,-588(fp)
   40444:	100b883a 	mov	r5,r2
   40448:	e13f7017 	ldw	r4,-576(fp)
   4044c:	00410480 	call	41048 <Fat_FileRead>
   40450:	10001626 	beq	r2,zero,404ac <Fat_Test+0x240>
                    int i;
                    for(i=0;i<nReadSize;i++){
   40454:	e03f6f15 	stw	zero,-580(fp)
   40458:	00000c06 	br	4048c <Fat_Test+0x220>
                        printf("%c", szRead[i]);
   4045c:	e0ffbe04 	addi	r3,fp,-264
   40460:	e0bf6f17 	ldw	r2,-580(fp)
   40464:	1885883a 	add	r2,r3,r2
   40468:	10800003 	ldbu	r2,0(r2)
   4046c:	10803fcc 	andi	r2,r2,255
   40470:	1080201c 	xori	r2,r2,128
   40474:	10bfe004 	addi	r2,r2,-128
   40478:	1009883a 	mov	r4,r2
   4047c:	0046dec0 	call	46dec <putchar>
                if (nReadSize > (nFileSize - nTotalReadSize))
                    nReadSize = (nFileSize - nTotalReadSize);
                //
                if (Fat_FileRead(hFile, szRead, nReadSize)){
                    int i;
                    for(i=0;i<nReadSize;i++){
   40480:	e0bf6f17 	ldw	r2,-580(fp)
   40484:	10800044 	addi	r2,r2,1
   40488:	e0bf6f15 	stw	r2,-580(fp)
   4048c:	e0ff6f17 	ldw	r3,-580(fp)
   40490:	e0bf6d17 	ldw	r2,-588(fp)
   40494:	18bff116 	blt	r3,r2,4045c <_gp+0xfffee0f0>
                        printf("%c", szRead[i]);
                    }
                    nTotalReadSize += nReadSize;
   40498:	e0ff6e17 	ldw	r3,-584(fp)
   4049c:	e0bf6d17 	ldw	r2,-588(fp)
   404a0:	1885883a 	add	r2,r3,r2
   404a4:	e0bf6e15 	stw	r2,-584(fp)
   404a8:	00000506 	br	404c0 <Fat_Test+0x254>
                }else{
                    bSuccess = FALSE;
   404ac:	e03f6915 	stw	zero,-604(fp)
                    printf("\nFaied to read the file \"%s\"\n", pDumpFile);
   404b0:	e17fff17 	ldw	r5,-4(fp)
   404b4:	01000174 	movhi	r4,5
   404b8:	21261b04 	addi	r4,r4,-26516
   404bc:	0046d980 	call	46d98 <printf>
            int nReadSize, nFileSize, nTotalReadSize=0;
            nFileSize = Fat_FileSize(hFile);
            if (nReadSize > sizeof(szRead))
                nReadSize = sizeof(szRead);
            printf("%s dump:\n", pDumpFile);
            while(bSuccess && nTotalReadSize < nFileSize){
   404c0:	e0bf6917 	ldw	r2,-604(fp)
   404c4:	10000326 	beq	r2,zero,404d4 <Fat_Test+0x268>
   404c8:	e0ff6e17 	ldw	r3,-584(fp)
   404cc:	e0bf7117 	ldw	r2,-572(fp)
   404d0:	18bfcf16 	blt	r3,r2,40410 <_gp+0xfffee0a4>
                }else{
                    bSuccess = FALSE;
                    printf("\nFaied to read the file \"%s\"\n", pDumpFile);
                }
            } // while
            if (bSuccess)
   404d4:	e0bf6917 	ldw	r2,-604(fp)
   404d8:	10000226 	beq	r2,zero,404e4 <Fat_Test+0x278>
                printf("\n");
   404dc:	01000284 	movi	r4,10
   404e0:	0046dec0 	call	46dec <putchar>
            Fat_FileClose(hFile);
   404e4:	e13f7017 	ldw	r4,-576(fp)
   404e8:	00415cc0 	call	415cc <Fat_FileClose>
   404ec:	00000506 	br	40504 <Fat_Test+0x298>
        }else{
            bSuccess = FALSE;
   404f0:	e03f6915 	stw	zero,-604(fp)
            printf("Cannot find the file \"%s\"\n", pDumpFile);
   404f4:	e17fff17 	ldw	r5,-4(fp)
   404f8:	01000174 	movhi	r4,5
   404fc:	21262304 	addi	r4,r4,-26484
   40500:	0046d980 	call	46d98 <printf>
        }
    }

    return bSuccess;
   40504:	e0bf6917 	ldw	r2,-604(fp)
}
   40508:	e037883a 	mov	sp,fp
   4050c:	dfc00117 	ldw	ra,4(sp)
   40510:	df000017 	ldw	fp,0(sp)
   40514:	dec00204 	addi	sp,sp,8
   40518:	f800283a 	ret

0004051c <main>:


int main()
{
   4051c:	defffd04 	addi	sp,sp,-12
   40520:	dfc00215 	stw	ra,8(sp)
   40524:	df000115 	stw	fp,4(sp)
   40528:	df000104 	addi	fp,sp,4
    FAT_HANDLE hFat;

    printf("========== DE2-115 SDCARD Demo ==========\n");
   4052c:	01000174 	movhi	r4,5
   40530:	21262a04 	addi	r4,r4,-26456
   40534:	0046e880 	call	46e88 <puts>

    while(1){
        printf("Processing...\r\n");
   40538:	01000174 	movhi	r4,5
   4053c:	21263504 	addi	r4,r4,-26412
   40540:	0046e880 	call	46e88 <puts>
        hFat = Fat_Mount(FAT_SD_CARD, 0);
   40544:	000b883a 	mov	r5,zero
   40548:	0009883a 	mov	r4,zero
   4054c:	00405dc0 	call	405dc <Fat_Mount>
   40550:	e0bfff15 	stw	r2,-4(fp)
        if (hFat){
   40554:	e0bfff17 	ldw	r2,-4(fp)
   40558:	10001326 	beq	r2,zero,405a8 <main+0x8c>
            printf("sdcard mount success!\n");
   4055c:	01000174 	movhi	r4,5
   40560:	21263904 	addi	r4,r4,-26396
   40564:	0046e880 	call	46e88 <puts>
            printf("Root Directory Item Count:%d\n", Fat_FileCount(hFat));
   40568:	e13fff17 	ldw	r4,-4(fp)
   4056c:	0040b740 	call	40b74 <Fat_FileCount>
   40570:	100b883a 	mov	r5,r2
   40574:	01000174 	movhi	r4,5
   40578:	21263f04 	addi	r4,r4,-26372
   4057c:	0046d980 	call	46d98 <printf>
            Fat_Test(hFat, "text.txt");
   40580:	01400174 	movhi	r5,5
   40584:	29664704 	addi	r5,r5,-26340
   40588:	e13fff17 	ldw	r4,-4(fp)
   4058c:	004026c0 	call	4026c <Fat_Test>
            Fat_Unmount(hFat);
   40590:	e13fff17 	ldw	r4,-4(fp)
   40594:	00406200 	call	40620 <Fat_Unmount>

            printf("===== Test Done =====\r\nPress KEY3 to test again.\r\n");
   40598:	01000174 	movhi	r4,5
   4059c:	21264a04 	addi	r4,r4,-26328
   405a0:	0046e880 	call	46e88 <puts>
   405a4:	00000306 	br	405b4 <main+0x98>
        }else{
            printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE2-115 board and press KEY3.\r\n");
   405a8:	01000174 	movhi	r4,5
   405ac:	21265704 	addi	r4,r4,-26276
   405b0:	0046e880 	call	46e88 <puts>
        }
        // wait users to press BUTTON3
        while ((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x08) == 0x08);
   405b4:	0001883a 	nop
   405b8:	00800234 	movhi	r2,8
   405bc:	10841004 	addi	r2,r2,4160
   405c0:	10800037 	ldwio	r2,0(r2)
   405c4:	1080020c 	andi	r2,r2,8
   405c8:	103ffb1e 	bne	r2,zero,405b8 <_gp+0xfffee24c>
        usleep(400*1000); // debounce
   405cc:	010001b4 	movhi	r4,6
   405d0:	2106a004 	addi	r4,r4,6784
   405d4:	00483040 	call	48304 <usleep>
    } // while
   405d8:	003fd706 	br	40538 <_gp+0xfffee1cc>

000405dc <Fat_Mount>:
bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2);




FAT_HANDLE Fat_Mount(FAT_DEVICE FatDevice, DEVICE_HANDLE hUsbDisk){
   405dc:	defffb04 	addi	sp,sp,-20
   405e0:	dfc00415 	stw	ra,16(sp)
   405e4:	df000315 	stw	fp,12(sp)
   405e8:	df000304 	addi	fp,sp,12
   405ec:	e13ffe15 	stw	r4,-8(fp)
   405f0:	e17fff15 	stw	r5,-4(fp)
    
    //Fat_Unmount();
    FAT_HANDLE hFat = 0;
   405f4:	e03ffd15 	stw	zero,-12(fp)
    
    if (FatDevice == FAT_SD_CARD){
   405f8:	e0bffe17 	ldw	r2,-8(fp)
   405fc:	1000021e 	bne	r2,zero,40608 <Fat_Mount+0x2c>
        #ifdef SUPPORT_SD_CARD
        hFat = fatMountSdcard();
   40600:	00428880 	call	42888 <fatMountSdcard>
   40604:	e0bffd15 	stw	r2,-12(fp)
    }else if (FatDevice == FAT_USB_DISK){
        #ifdef SUPPORT_USB_DISK
        hFat = fatMountUsbDisk(hUsbDisk);
        #endif
    }  
    return hFat;      
   40608:	e0bffd17 	ldw	r2,-12(fp)
        
}
   4060c:	e037883a 	mov	sp,fp
   40610:	dfc00117 	ldw	ra,4(sp)
   40614:	df000017 	ldw	fp,0(sp)
   40618:	dec00204 	addi	sp,sp,8
   4061c:	f800283a 	ret

00040620 <Fat_Unmount>:

void Fat_Unmount(FAT_HANDLE Fat){
   40620:	defffc04 	addi	sp,sp,-16
   40624:	dfc00315 	stw	ra,12(sp)
   40628:	df000215 	stw	fp,8(sp)
   4062c:	df000204 	addi	fp,sp,8
   40630:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
   40634:	e0bfff17 	ldw	r2,-4(fp)
   40638:	e0bffe15 	stw	r2,-8(fp)
    if (!pVol)
   4063c:	e0bffe17 	ldw	r2,-8(fp)
   40640:	10000526 	beq	r2,zero,40658 <Fat_Unmount+0x38>
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
   40644:	e0bffe17 	ldw	r2,-8(fp)
   40648:	10000415 	stw	zero,16(r2)
    
    free(pVol);  
   4064c:	e13ffe17 	ldw	r4,-8(fp)
   40650:	0046ac40 	call	46ac4 <free>
   40654:	00000106 	br	4065c <Fat_Unmount+0x3c>
}

void Fat_Unmount(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    if (!pVol)
        return;
   40658:	0001883a 	nop
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
    
    free(pVol);  
}   
   4065c:	e037883a 	mov	sp,fp
   40660:	dfc00117 	ldw	ra,4(sp)
   40664:	df000017 	ldw	fp,0(sp)
   40668:	dec00204 	addi	sp,sp,8
   4066c:	f800283a 	ret

00040670 <Fat_Type>:

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
   40670:	defffc04 	addi	sp,sp,-16
   40674:	df000315 	stw	fp,12(sp)
   40678:	df000304 	addi	fp,sp,12
   4067c:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
   40680:	e0bfff17 	ldw	r2,-4(fp)
   40684:	e0bffe15 	stw	r2,-8(fp)
    FAT_TYPE Type = FAT_UNKNOWN;
   40688:	e03ffd15 	stw	zero,-12(fp)
    if (pVol){
   4068c:	e0bffe17 	ldw	r2,-8(fp)
   40690:	10000d26 	beq	r2,zero,406c8 <Fat_Type+0x58>
        if (pVol->Partition_Type == PARTITION_FAT16)
   40694:	e0bffe17 	ldw	r2,-8(fp)
   40698:	10800317 	ldw	r2,12(r2)
   4069c:	10800198 	cmpnei	r2,r2,6
   406a0:	1000031e 	bne	r2,zero,406b0 <Fat_Type+0x40>
            Type = FAT_FAT16;
   406a4:	00800044 	movi	r2,1
   406a8:	e0bffd15 	stw	r2,-12(fp)
   406ac:	00000606 	br	406c8 <Fat_Type+0x58>
        else if (pVol->Partition_Type == PARTITION_FAT32)
   406b0:	e0bffe17 	ldw	r2,-8(fp)
   406b4:	10800317 	ldw	r2,12(r2)
   406b8:	10800318 	cmpnei	r2,r2,12
   406bc:	1000021e 	bne	r2,zero,406c8 <Fat_Type+0x58>
            Type = FAT_FAT32;
   406c0:	00800084 	movi	r2,2
   406c4:	e0bffd15 	stw	r2,-12(fp)
    }
    return Type;        
   406c8:	e0bffd17 	ldw	r2,-12(fp)
}
   406cc:	e037883a 	mov	sp,fp
   406d0:	df000017 	ldw	fp,0(sp)
   406d4:	dec00104 	addi	sp,sp,4
   406d8:	f800283a 	ret

000406dc <Fat_FileBrowseBegin>:

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
   406dc:	defffc04 	addi	sp,sp,-16
   406e0:	df000315 	stw	fp,12(sp)
   406e4:	df000304 	addi	fp,sp,12
   406e8:	e13ffe15 	stw	r4,-8(fp)
   406ec:	e17fff15 	stw	r5,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
   406f0:	e0bffe17 	ldw	r2,-8(fp)
   406f4:	e0bffd15 	stw	r2,-12(fp)
    if (!pVol)
   406f8:	e0bffd17 	ldw	r2,-12(fp)
   406fc:	1000021e 	bne	r2,zero,40708 <Fat_FileBrowseBegin+0x2c>
        return FALSE;
   40700:	0005883a 	mov	r2,zero
   40704:	00000c06 	br	40738 <Fat_FileBrowseBegin+0x5c>
    if (!pVol->bMount)
   40708:	e0bffd17 	ldw	r2,-12(fp)
   4070c:	10800417 	ldw	r2,16(r2)
   40710:	1000021e 	bne	r2,zero,4071c <Fat_FileBrowseBegin+0x40>
        return FALSE;
   40714:	0005883a 	mov	r2,zero
   40718:	00000706 	br	40738 <Fat_FileBrowseBegin+0x5c>
    pFatBrowseHandle->DirectoryIndex = -1;
   4071c:	e0bfff17 	ldw	r2,-4(fp)
   40720:	00ffffc4 	movi	r3,-1
   40724:	10c00015 	stw	r3,0(r2)
    pFatBrowseHandle->hFat = hFat;
   40728:	e0bfff17 	ldw	r2,-4(fp)
   4072c:	e0fffe17 	ldw	r3,-8(fp)
   40730:	10c00115 	stw	r3,4(r2)
    return TRUE;
   40734:	00800044 	movi	r2,1
}
   40738:	e037883a 	mov	sp,fp
   4073c:	df000017 	ldw	fp,0(sp)
   40740:	dec00104 	addi	sp,sp,4
   40744:	f800283a 	ret

00040748 <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
   40748:	defff404 	addi	sp,sp,-48
   4074c:	dfc00b15 	stw	ra,44(sp)
   40750:	df000a15 	stw	fp,40(sp)
   40754:	df000a04 	addi	fp,sp,40
   40758:	e13ffe15 	stw	r4,-8(fp)
   4075c:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
   40760:	e03ff615 	stw	zero,-40(fp)
   40764:	e03ff715 	stw	zero,-36(fp)
   40768:	e03ff815 	stw	zero,-32(fp)
    int OrderValue = 0;
   4076c:	e03ff915 	stw	zero,-28(fp)
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
   40770:	e0bffe17 	ldw	r2,-8(fp)
   40774:	10800117 	ldw	r2,4(r2)
   40778:	e0bffa15 	stw	r2,-24(fp)
    
    if (!pVol)
   4077c:	e0bffa17 	ldw	r2,-24(fp)
   40780:	1000021e 	bne	r2,zero,4078c <Fat_FileBrowseNext+0x44>
        return FALSE;    
   40784:	0005883a 	mov	r2,zero
   40788:	0000f506 	br	40b60 <Fat_FileBrowseNext+0x418>
    
    if (!pVol->bMount)
   4078c:	e0bffa17 	ldw	r2,-24(fp)
   40790:	10800417 	ldw	r2,16(r2)
   40794:	1000021e 	bne	r2,zero,407a0 <Fat_FileBrowseNext+0x58>
        return FALSE;
   40798:	0005883a 	mov	r2,zero
   4079c:	0000f006 	br	40b60 <Fat_FileBrowseNext+0x418>
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
   407a0:	e0bffe17 	ldw	r2,-8(fp)
   407a4:	10800017 	ldw	r2,0(r2)
   407a8:	10c00044 	addi	r3,r2,1
   407ac:	e0bffe17 	ldw	r2,-8(fp)
   407b0:	10c00015 	stw	r3,0(r2)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
   407b4:	e0bffe17 	ldw	r2,-8(fp)
   407b8:	10800017 	ldw	r2,0(r2)
   407bc:	100b883a 	mov	r5,r2
   407c0:	e13ffa17 	ldw	r4,-24(fp)
   407c4:	004231c0 	call	4231c <fatFindDirectory>
   407c8:	e0bffb15 	stw	r2,-20(fp)
        if (!pDir)
   407cc:	e0bffb17 	ldw	r2,-20(fp)
   407d0:	1000021e 	bne	r2,zero,407dc <Fat_FileBrowseNext+0x94>
            bError = TRUE;
   407d4:	00800044 	movi	r2,1
   407d8:	e0bff715 	stw	r2,-36(fp)
            
        if (!bError){                        
   407dc:	e0bff717 	ldw	r2,-36(fp)
   407e0:	1000d71e 	bne	r2,zero,40b40 <Fat_FileBrowseNext+0x3f8>
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
   407e4:	e13ffb17 	ldw	r4,-20(fp)
   407e8:	0041f640 	call	41f64 <fatIsValidDir>
   407ec:	1000d426 	beq	r2,zero,40b40 <Fat_FileBrowseNext+0x3f8>
   407f0:	e13ffb17 	ldw	r4,-20(fp)
   407f4:	00420100 	call	42010 <fatIsUnusedDir>
   407f8:	1000d11e 	bne	r2,zero,40b40 <Fat_FileBrowseNext+0x3f8>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
   407fc:	e0bffb17 	ldw	r2,-20(fp)
   40800:	108002c3 	ldbu	r2,11(r2)
   40804:	10803fcc 	andi	r2,r2,255
   40808:	108003cc 	andi	r2,r2,15
   4080c:	108003d8 	cmpnei	r2,r2,15
   40810:	1000521e 	bne	r2,zero,4095c <Fat_FileBrowseNext+0x214>
                    FAT_LONG_DIRECTORY *pLDIR = (FAT_LONG_DIRECTORY *)pDir;
   40814:	e0bffb17 	ldw	r2,-20(fp)
   40818:	e0bffc15 	stw	r2,-16(fp)
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
   4081c:	e0bffc17 	ldw	r2,-16(fp)
   40820:	108002c3 	ldbu	r2,11(r2)
   40824:	10803fcc 	andi	r2,r2,255
   40828:	108003cc 	andi	r2,r2,15
   4082c:	108003e0 	cmpeqi	r2,r2,15
   40830:	1000031e 	bne	r2,zero,40840 <Fat_FileBrowseNext+0xf8>
                        bError = TRUE;
   40834:	00800044 	movi	r2,1
   40838:	e0bff715 	stw	r2,-36(fp)
   4083c:	00001e06 	br	408b8 <Fat_FileBrowseNext+0x170>
                    }else{                        
                        // check order
                        if (OrderValue == 0){
   40840:	e0bff917 	ldw	r2,-28(fp)
   40844:	1000141e 	bne	r2,zero,40898 <Fat_FileBrowseNext+0x150>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
   40848:	e0bff817 	ldw	r2,-32(fp)
   4084c:	1000041e 	bne	r2,zero,40860 <Fat_FileBrowseNext+0x118>
   40850:	e0bff917 	ldw	r2,-28(fp)
   40854:	10c0100c 	andi	r3,r2,64
   40858:	e0bff917 	ldw	r2,-28(fp)
   4085c:	18800326 	beq	r3,r2,4086c <Fat_FileBrowseNext+0x124>
                                bError = TRUE;
   40860:	00800044 	movi	r2,1
   40864:	e0bff715 	stw	r2,-36(fp)
   40868:	00000506 	br	40880 <Fat_FileBrowseNext+0x138>
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
   4086c:	e0bffc17 	ldw	r2,-16(fp)
   40870:	10800003 	ldbu	r2,0(r2)
   40874:	10803fcc 	andi	r2,r2,255
   40878:	10800fcc 	andi	r2,r2,63
   4087c:	e0bff915 	stw	r2,-28(fp)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
   40880:	e0bfff17 	ldw	r2,-4(fp)
   40884:	01804004 	movi	r6,256
   40888:	000b883a 	mov	r5,zero
   4088c:	1009883a 	mov	r4,r2
   40890:	0046b000 	call	46b00 <memset>
   40894:	00000806 	br	408b8 <Fat_FileBrowseNext+0x170>
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
   40898:	e0bffc17 	ldw	r2,-16(fp)
   4089c:	10800003 	ldbu	r2,0(r2)
   408a0:	10803fcc 	andi	r2,r2,255
   408a4:	10c00fcc 	andi	r3,r2,63
   408a8:	e0bff917 	ldw	r2,-28(fp)
   408ac:	18800226 	beq	r3,r2,408b8 <Fat_FileBrowseNext+0x170>
                                bError = TRUE;
   408b0:	00800044 	movi	r2,1
   408b4:	e0bff715 	stw	r2,-36(fp)
                        }
                    }
                    
                    //                        
                    if (!bError){
   408b8:	e0bff717 	ldw	r2,-36(fp)
   408bc:	1000a01e 	bne	r2,zero,40b40 <Fat_FileBrowseNext+0x3f8>
                        int BaseOffset;
                        bLongFilename = TRUE;
   408c0:	00800044 	movi	r2,1
   408c4:	e0bff815 	stw	r2,-32(fp)
                        OrderValue--;
   408c8:	e0bff917 	ldw	r2,-28(fp)
   408cc:	10bfffc4 	addi	r2,r2,-1
   408d0:	e0bff915 	stw	r2,-28(fp)
                        BaseOffset = OrderValue * 26;
   408d4:	01400684 	movi	r5,26
   408d8:	e13ff917 	ldw	r4,-28(fp)
   408dc:	004543c0 	call	4543c <__mulsi3>
   408e0:	e0bffd15 	stw	r2,-12(fp)
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
   408e4:	e0ffff17 	ldw	r3,-4(fp)
   408e8:	e0bffd17 	ldw	r2,-12(fp)
   408ec:	1887883a 	add	r3,r3,r2
   408f0:	e0bffc17 	ldw	r2,-16(fp)
   408f4:	10800044 	addi	r2,r2,1
   408f8:	01800284 	movi	r6,10
   408fc:	100b883a 	mov	r5,r2
   40900:	1809883a 	mov	r4,r3
   40904:	0046ad80 	call	46ad8 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
   40908:	e0ffff17 	ldw	r3,-4(fp)
   4090c:	e0bffd17 	ldw	r2,-12(fp)
   40910:	10800284 	addi	r2,r2,10
   40914:	1887883a 	add	r3,r3,r2
   40918:	e0bffc17 	ldw	r2,-16(fp)
   4091c:	10800384 	addi	r2,r2,14
   40920:	01800304 	movi	r6,12
   40924:	100b883a 	mov	r5,r2
   40928:	1809883a 	mov	r4,r3
   4092c:	0046ad80 	call	46ad8 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
   40930:	e0ffff17 	ldw	r3,-4(fp)
   40934:	e0bffd17 	ldw	r2,-12(fp)
   40938:	10800584 	addi	r2,r2,22
   4093c:	1887883a 	add	r3,r3,r2
   40940:	e0bffc17 	ldw	r2,-16(fp)
   40944:	10800704 	addi	r2,r2,28
   40948:	01800104 	movi	r6,4
   4094c:	100b883a 	mov	r5,r2
   40950:	1809883a 	mov	r4,r3
   40954:	0046ad80 	call	46ad8 <memcpy>
   40958:	00007906 	br	40b40 <Fat_FileBrowseNext+0x3f8>
                    }                        
                }else{
                    if (bLongFilename){
   4095c:	e0bff817 	ldw	r2,-32(fp)
   40960:	10000e26 	beq	r2,zero,4099c <Fat_FileBrowseNext+0x254>
                        pFileContext->Attribute = ATTR_LONG_NAME;
   40964:	e0bfff17 	ldw	r2,-4(fp)
   40968:	00c003c4 	movi	r3,15
   4096c:	10c04505 	stb	r3,276(r2)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
   40970:	e0bffb17 	ldw	r2,-20(fp)
   40974:	108002c3 	ldbu	r2,11(r2)
   40978:	10803fcc 	andi	r2,r2,255
   4097c:	10800c0c 	andi	r2,r2,48
   40980:	1000031e 	bne	r2,zero,40990 <Fat_FileBrowseNext+0x248>
                            bError = TRUE;
   40984:	00800044 	movi	r2,1
   40988:	e0bff715 	stw	r2,-36(fp)
   4098c:	00000906 	br	409b4 <Fat_FileBrowseNext+0x26c>
                        else    
                            bFind = TRUE;
   40990:	00800044 	movi	r2,1
   40994:	e0bff615 	stw	r2,-40(fp)
   40998:	00000606 	br	409b4 <Fat_FileBrowseNext+0x26c>
                    }else{
                        fatComposeShortFilename(pDir, pFileContext->szName);
   4099c:	e0bfff17 	ldw	r2,-4(fp)
   409a0:	100b883a 	mov	r5,r2
   409a4:	e13ffb17 	ldw	r4,-20(fp)
   409a8:	0040c740 	call	40c74 <fatComposeShortFilename>
                        bFind = TRUE;
   409ac:	00800044 	movi	r2,1
   409b0:	e0bff615 	stw	r2,-40(fp)
                    }
                    
                    if (bFind){
   409b4:	e0bff617 	ldw	r2,-40(fp)
   409b8:	10006126 	beq	r2,zero,40b40 <Fat_FileBrowseNext+0x3f8>
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
   409bc:	e0bfff17 	ldw	r2,-4(fp)
   409c0:	e0fff817 	ldw	r3,-32(fp)
   409c4:	10c04015 	stw	r3,256(r2)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
   409c8:	e0bffb17 	ldw	r2,-20(fp)
   409cc:	108002c3 	ldbu	r2,11(r2)
   409d0:	10803fcc 	andi	r2,r2,255
   409d4:	1080080c 	andi	r2,r2,32
   409d8:	1004c03a 	cmpne	r2,r2,zero
   409dc:	10c03fcc 	andi	r3,r2,255
   409e0:	e0bfff17 	ldw	r2,-4(fp)
   409e4:	10c04115 	stw	r3,260(r2)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
   409e8:	e0bffb17 	ldw	r2,-20(fp)
   409ec:	108002c3 	ldbu	r2,11(r2)
   409f0:	10803fcc 	andi	r2,r2,255
   409f4:	1080040c 	andi	r2,r2,16
   409f8:	1004c03a 	cmpne	r2,r2,zero
   409fc:	10c03fcc 	andi	r3,r2,255
   40a00:	e0bfff17 	ldw	r2,-4(fp)
   40a04:	10c04215 	stw	r3,264(r2)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
   40a08:	e0bffb17 	ldw	r2,-20(fp)
   40a0c:	108002c3 	ldbu	r2,11(r2)
   40a10:	10803fcc 	andi	r2,r2,255
   40a14:	1080020c 	andi	r2,r2,8
   40a18:	1004c03a 	cmpne	r2,r2,zero
   40a1c:	10c03fcc 	andi	r3,r2,255
   40a20:	e0bfff17 	ldw	r2,-4(fp)
   40a24:	10c04315 	stw	r3,268(r2)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
   40a28:	e0bffe17 	ldw	r2,-8(fp)
   40a2c:	10c00017 	ldw	r3,0(r2)
   40a30:	e0bfff17 	ldw	r2,-4(fp)
   40a34:	10c04415 	stw	r3,272(r2)
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
   40a38:	e0bffb17 	ldw	r2,-20(fp)
   40a3c:	10c002c3 	ldbu	r3,11(r2)
   40a40:	e0bfff17 	ldw	r2,-4(fp)
   40a44:	10c04505 	stb	r3,276(r2)
                        pFileContext->CreateTime = pDir->CreateTime;
   40a48:	e0bffb17 	ldw	r2,-20(fp)
   40a4c:	10c00383 	ldbu	r3,14(r2)
   40a50:	108003c3 	ldbu	r2,15(r2)
   40a54:	1004923a 	slli	r2,r2,8
   40a58:	10c4b03a 	or	r2,r2,r3
   40a5c:	1007883a 	mov	r3,r2
   40a60:	e0bfff17 	ldw	r2,-4(fp)
   40a64:	10c0458d 	sth	r3,278(r2)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
   40a68:	e0bffb17 	ldw	r2,-20(fp)
   40a6c:	10c00483 	ldbu	r3,18(r2)
   40a70:	108004c3 	ldbu	r2,19(r2)
   40a74:	1004923a 	slli	r2,r2,8
   40a78:	10c4b03a 	or	r2,r2,r3
   40a7c:	1007883a 	mov	r3,r2
   40a80:	e0bfff17 	ldw	r2,-4(fp)
   40a84:	10c0468d 	sth	r3,282(r2)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
   40a88:	e0bffb17 	ldw	r2,-20(fp)
   40a8c:	10c00503 	ldbu	r3,20(r2)
   40a90:	10800543 	ldbu	r2,21(r2)
   40a94:	1004923a 	slli	r2,r2,8
   40a98:	10c4b03a 	or	r2,r2,r3
   40a9c:	1007883a 	mov	r3,r2
   40aa0:	e0bfff17 	ldw	r2,-4(fp)
   40aa4:	10c0470d 	sth	r3,284(r2)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
   40aa8:	e0bffb17 	ldw	r2,-20(fp)
   40aac:	10c00583 	ldbu	r3,22(r2)
   40ab0:	108005c3 	ldbu	r2,23(r2)
   40ab4:	1004923a 	slli	r2,r2,8
   40ab8:	10c4b03a 	or	r2,r2,r3
   40abc:	1007883a 	mov	r3,r2
   40ac0:	e0bfff17 	ldw	r2,-4(fp)
   40ac4:	10c0478d 	sth	r3,286(r2)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
   40ac8:	e0bffb17 	ldw	r2,-20(fp)
   40acc:	10c00603 	ldbu	r3,24(r2)
   40ad0:	10800643 	ldbu	r2,25(r2)
   40ad4:	1004923a 	slli	r2,r2,8
   40ad8:	10c4b03a 	or	r2,r2,r3
   40adc:	1007883a 	mov	r3,r2
   40ae0:	e0bfff17 	ldw	r2,-4(fp)
   40ae4:	10c0480d 	sth	r3,288(r2)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
   40ae8:	e0bffb17 	ldw	r2,-20(fp)
   40aec:	10c00683 	ldbu	r3,26(r2)
   40af0:	108006c3 	ldbu	r2,27(r2)
   40af4:	1004923a 	slli	r2,r2,8
   40af8:	10c4b03a 	or	r2,r2,r3
   40afc:	1007883a 	mov	r3,r2
   40b00:	e0bfff17 	ldw	r2,-4(fp)
   40b04:	10c0488d 	sth	r3,290(r2)
                        pFileContext->FileSize = pDir->FileSize;
   40b08:	e0bffb17 	ldw	r2,-20(fp)
   40b0c:	10c00703 	ldbu	r3,28(r2)
   40b10:	11000743 	ldbu	r4,29(r2)
   40b14:	2008923a 	slli	r4,r4,8
   40b18:	20c6b03a 	or	r3,r4,r3
   40b1c:	11000783 	ldbu	r4,30(r2)
   40b20:	2008943a 	slli	r4,r4,16
   40b24:	20c6b03a 	or	r3,r4,r3
   40b28:	108007c3 	ldbu	r2,31(r2)
   40b2c:	1004963a 	slli	r2,r2,24
   40b30:	10c4b03a 	or	r2,r2,r3
   40b34:	1007883a 	mov	r3,r2
   40b38:	e0bfff17 	ldw	r2,-4(fp)
   40b3c:	10c04915 	stw	r3,292(r2)
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
   40b40:	e0bff617 	ldw	r2,-40(fp)
   40b44:	1000051e 	bne	r2,zero,40b5c <Fat_FileBrowseNext+0x414>
   40b48:	e13ffb17 	ldw	r4,-20(fp)
   40b4c:	0041f200 	call	41f20 <fatIsLastDir>
   40b50:	1000021e 	bne	r2,zero,40b5c <Fat_FileBrowseNext+0x414>
   40b54:	e0bff717 	ldw	r2,-36(fp)
   40b58:	103f1126 	beq	r2,zero,407a0 <_gp+0xfffee434>
    
    return bFind;
   40b5c:	e0bff617 	ldw	r2,-40(fp)
    
}
   40b60:	e037883a 	mov	sp,fp
   40b64:	dfc00117 	ldw	ra,4(sp)
   40b68:	df000017 	ldw	fp,0(sp)
   40b6c:	dec00204 	addi	sp,sp,8
   40b70:	f800283a 	ret

00040b74 <Fat_FileCount>:


unsigned int Fat_FileCount(FAT_HANDLE Fat){
   40b74:	deffb004 	addi	sp,sp,-320
   40b78:	dfc04f15 	stw	ra,316(sp)
   40b7c:	df004e15 	stw	fp,312(sp)
   40b80:	df004e04 	addi	fp,sp,312
   40b84:	e13fff15 	stw	r4,-4(fp)
    unsigned int nCount = 0;
   40b88:	e03fb215 	stw	zero,-312(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
   40b8c:	e0bfb304 	addi	r2,fp,-308
   40b90:	100b883a 	mov	r5,r2
   40b94:	e13fff17 	ldw	r4,-4(fp)
   40b98:	00406dc0 	call	406dc <Fat_FileBrowseBegin>
   40b9c:	10000a26 	beq	r2,zero,40bc8 <Fat_FileCount+0x54>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
   40ba0:	00000306 	br	40bb0 <Fat_FileCount+0x3c>
            nCount++;
   40ba4:	e0bfb217 	ldw	r2,-312(fp)
   40ba8:	10800044 	addi	r2,r2,1
   40bac:	e0bfb215 	stw	r2,-312(fp)
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
   40bb0:	e0ffb504 	addi	r3,fp,-300
   40bb4:	e0bfb304 	addi	r2,fp,-308
   40bb8:	180b883a 	mov	r5,r3
   40bbc:	1009883a 	mov	r4,r2
   40bc0:	00407480 	call	40748 <Fat_FileBrowseNext>
   40bc4:	103ff71e 	bne	r2,zero,40ba4 <_gp+0xfffee838>
            nCount++;
    }
    
    return nCount;
   40bc8:	e0bfb217 	ldw	r2,-312(fp)
}
   40bcc:	e037883a 	mov	sp,fp
   40bd0:	dfc00117 	ldw	ra,4(sp)
   40bd4:	df000017 	ldw	fp,0(sp)
   40bd8:	dec00204 	addi	sp,sp,8
   40bdc:	f800283a 	ret

00040be0 <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
   40be0:	defffc04 	addi	sp,sp,-16
   40be4:	df000315 	stw	fp,12(sp)
   40be8:	df000304 	addi	fp,sp,12
   40bec:	e13ffe15 	stw	r4,-8(fp)
   40bf0:	e17fff15 	stw	r5,-4(fp)
    bool bSame = TRUE;
   40bf4:	00800044 	movi	r2,1
   40bf8:	e0bffd15 	stw	r2,-12(fp)
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
   40bfc:	00000e06 	br	40c38 <fatSameLongFilename+0x58>
        if (*p1 != *p2){
   40c00:	e0bffe17 	ldw	r2,-8(fp)
   40c04:	10c0000b 	ldhu	r3,0(r2)
   40c08:	e0bfff17 	ldw	r2,-4(fp)
   40c0c:	1080000b 	ldhu	r2,0(r2)
   40c10:	18ffffcc 	andi	r3,r3,65535
   40c14:	10bfffcc 	andi	r2,r2,65535
   40c18:	18800126 	beq	r3,r2,40c20 <fatSameLongFilename+0x40>
            bSame = FALSE;
   40c1c:	e03ffd15 	stw	zero,-12(fp)
        }
        p1++;
   40c20:	e0bffe17 	ldw	r2,-8(fp)
   40c24:	10800084 	addi	r2,r2,2
   40c28:	e0bffe15 	stw	r2,-8(fp)
        p2++;
   40c2c:	e0bfff17 	ldw	r2,-4(fp)
   40c30:	10800084 	addi	r2,r2,2
   40c34:	e0bfff15 	stw	r2,-4(fp)
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
   40c38:	e0bffd17 	ldw	r2,-12(fp)
   40c3c:	10000826 	beq	r2,zero,40c60 <fatSameLongFilename+0x80>
   40c40:	e0bffe17 	ldw	r2,-8(fp)
   40c44:	1080000b 	ldhu	r2,0(r2)
   40c48:	10bfffcc 	andi	r2,r2,65535
   40c4c:	103fec1e 	bne	r2,zero,40c00 <_gp+0xfffee894>
   40c50:	e0bfff17 	ldw	r2,-4(fp)
   40c54:	1080000b 	ldhu	r2,0(r2)
   40c58:	10bfffcc 	andi	r2,r2,65535
   40c5c:	103fe81e 	bne	r2,zero,40c00 <_gp+0xfffee894>
        p1++;
        p2++;
        
    }
    
    return bSame;
   40c60:	e0bffd17 	ldw	r2,-12(fp)
}
   40c64:	e037883a 	mov	sp,fp
   40c68:	df000017 	ldw	fp,0(sp)
   40c6c:	dec00104 	addi	sp,sp,4
   40c70:	f800283a 	ret

00040c74 <fatComposeShortFilename>:


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
   40c74:	defffb04 	addi	sp,sp,-20
   40c78:	df000415 	stw	fp,16(sp)
   40c7c:	df000404 	addi	fp,sp,16
   40c80:	e13ffe15 	stw	r4,-8(fp)
   40c84:	e17fff15 	stw	r5,-4(fp)
    int i,nPos=0;
   40c88:	e03ffd15 	stw	zero,-12(fp)
    
    i=0;
   40c8c:	e03ffc15 	stw	zero,-16(fp)
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
   40c90:	00000d06 	br	40cc8 <fatComposeShortFilename+0x54>
        szFilename[nPos++] = pDir->Name[i++];
   40c94:	e0bffd17 	ldw	r2,-12(fp)
   40c98:	10c00044 	addi	r3,r2,1
   40c9c:	e0fffd15 	stw	r3,-12(fp)
   40ca0:	1007883a 	mov	r3,r2
   40ca4:	e0bfff17 	ldw	r2,-4(fp)
   40ca8:	10c7883a 	add	r3,r2,r3
   40cac:	e0bffc17 	ldw	r2,-16(fp)
   40cb0:	11000044 	addi	r4,r2,1
   40cb4:	e13ffc15 	stw	r4,-16(fp)
   40cb8:	e13ffe17 	ldw	r4,-8(fp)
   40cbc:	2085883a 	add	r2,r4,r2
   40cc0:	10800003 	ldbu	r2,0(r2)
   40cc4:	18800005 	stb	r2,0(r3)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
   40cc8:	e0bffc17 	ldw	r2,-16(fp)
   40ccc:	10800208 	cmpgei	r2,r2,8
   40cd0:	1000111e 	bne	r2,zero,40d18 <fatComposeShortFilename+0xa4>
   40cd4:	e0fffe17 	ldw	r3,-8(fp)
   40cd8:	e0bffc17 	ldw	r2,-16(fp)
   40cdc:	1885883a 	add	r2,r3,r2
   40ce0:	10800003 	ldbu	r2,0(r2)
   40ce4:	10803fcc 	andi	r2,r2,255
   40ce8:	1080201c 	xori	r2,r2,128
   40cec:	10bfe004 	addi	r2,r2,-128
   40cf0:	10000926 	beq	r2,zero,40d18 <fatComposeShortFilename+0xa4>
   40cf4:	e0fffe17 	ldw	r3,-8(fp)
   40cf8:	e0bffc17 	ldw	r2,-16(fp)
   40cfc:	1885883a 	add	r2,r3,r2
   40d00:	10800003 	ldbu	r2,0(r2)
   40d04:	10803fcc 	andi	r2,r2,255
   40d08:	1080201c 	xori	r2,r2,128
   40d0c:	10bfe004 	addi	r2,r2,-128
   40d10:	10800818 	cmpnei	r2,r2,32
   40d14:	103fdf1e 	bne	r2,zero,40c94 <_gp+0xfffee928>
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
   40d18:	e0bffe17 	ldw	r2,-8(fp)
   40d1c:	108002c3 	ldbu	r2,11(r2)
   40d20:	10803fcc 	andi	r2,r2,255
   40d24:	10800c0c 	andi	r2,r2,48
   40d28:	10003326 	beq	r2,zero,40df8 <fatComposeShortFilename+0x184>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
   40d2c:	e0bffe17 	ldw	r2,-8(fp)
   40d30:	108002c3 	ldbu	r2,11(r2)
   40d34:	10803fcc 	andi	r2,r2,255
   40d38:	10800c0c 	andi	r2,r2,48
   40d3c:	10000826 	beq	r2,zero,40d60 <fatComposeShortFilename+0xec>
            szFilename[nPos++] = '.';   
   40d40:	e0bffd17 	ldw	r2,-12(fp)
   40d44:	10c00044 	addi	r3,r2,1
   40d48:	e0fffd15 	stw	r3,-12(fp)
   40d4c:	1007883a 	mov	r3,r2
   40d50:	e0bfff17 	ldw	r2,-4(fp)
   40d54:	10c5883a 	add	r2,r2,r3
   40d58:	00c00b84 	movi	r3,46
   40d5c:	10c00005 	stb	r3,0(r2)
        i=0;
   40d60:	e03ffc15 	stw	zero,-16(fp)
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
   40d64:	00000e06 	br	40da0 <fatComposeShortFilename+0x12c>
            szFilename[nPos++] = pDir->Extension[i++];
   40d68:	e0bffd17 	ldw	r2,-12(fp)
   40d6c:	10c00044 	addi	r3,r2,1
   40d70:	e0fffd15 	stw	r3,-12(fp)
   40d74:	1007883a 	mov	r3,r2
   40d78:	e0bfff17 	ldw	r2,-4(fp)
   40d7c:	10c7883a 	add	r3,r2,r3
   40d80:	e0bffc17 	ldw	r2,-16(fp)
   40d84:	11000044 	addi	r4,r2,1
   40d88:	e13ffc15 	stw	r4,-16(fp)
   40d8c:	e13ffe17 	ldw	r4,-8(fp)
   40d90:	2085883a 	add	r2,r4,r2
   40d94:	10800204 	addi	r2,r2,8
   40d98:	10800003 	ldbu	r2,0(r2)
   40d9c:	18800005 	stb	r2,0(r3)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
   40da0:	e0bffc17 	ldw	r2,-16(fp)
   40da4:	108000c8 	cmpgei	r2,r2,3
   40da8:	1000131e 	bne	r2,zero,40df8 <fatComposeShortFilename+0x184>
   40dac:	e0fffe17 	ldw	r3,-8(fp)
   40db0:	e0bffc17 	ldw	r2,-16(fp)
   40db4:	1885883a 	add	r2,r3,r2
   40db8:	10800204 	addi	r2,r2,8
   40dbc:	10800003 	ldbu	r2,0(r2)
   40dc0:	10803fcc 	andi	r2,r2,255
   40dc4:	1080201c 	xori	r2,r2,128
   40dc8:	10bfe004 	addi	r2,r2,-128
   40dcc:	10000a26 	beq	r2,zero,40df8 <fatComposeShortFilename+0x184>
   40dd0:	e0fffe17 	ldw	r3,-8(fp)
   40dd4:	e0bffc17 	ldw	r2,-16(fp)
   40dd8:	1885883a 	add	r2,r3,r2
   40ddc:	10800204 	addi	r2,r2,8
   40de0:	10800003 	ldbu	r2,0(r2)
   40de4:	10803fcc 	andi	r2,r2,255
   40de8:	1080201c 	xori	r2,r2,128
   40dec:	10bfe004 	addi	r2,r2,-128
   40df0:	10800818 	cmpnei	r2,r2,32
   40df4:	103fdc1e 	bne	r2,zero,40d68 <_gp+0xfffee9fc>
            szFilename[nPos++] = pDir->Extension[i++];
    }            
    szFilename[nPos++] = 0;
   40df8:	e0bffd17 	ldw	r2,-12(fp)
   40dfc:	10c00044 	addi	r3,r2,1
   40e00:	e0fffd15 	stw	r3,-12(fp)
   40e04:	1007883a 	mov	r3,r2
   40e08:	e0bfff17 	ldw	r2,-4(fp)
   40e0c:	10c5883a 	add	r2,r2,r3
   40e10:	10000005 	stb	zero,0(r2)
}
   40e14:	0001883a 	nop
   40e18:	e037883a 	mov	sp,fp
   40e1c:	df000017 	ldw	fp,0(sp)
   40e20:	dec00104 	addi	sp,sp,4
   40e24:	f800283a 	ret

00040e28 <Fat_FileExist>:





bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
   40e28:	deffaf04 	addi	sp,sp,-324
   40e2c:	dfc05015 	stw	ra,320(sp)
   40e30:	df004f15 	stw	fp,316(sp)
   40e34:	df004f04 	addi	fp,sp,316
   40e38:	e13ffe15 	stw	r4,-8(fp)
   40e3c:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
   40e40:	e03fb115 	stw	zero,-316(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
   40e44:	e0bfb204 	addi	r2,fp,-312
   40e48:	100b883a 	mov	r5,r2
   40e4c:	e13ffe17 	ldw	r4,-8(fp)
   40e50:	00406dc0 	call	406dc <Fat_FileBrowseBegin>
   40e54:	10001a26 	beq	r2,zero,40ec0 <Fat_FileExist+0x98>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   40e58:	00000f06 	br	40e98 <Fat_FileExist+0x70>
            if (FileContext.bLongFilename){
   40e5c:	e0bff417 	ldw	r2,-48(fp)
   40e60:	10000626 	beq	r2,zero,40e7c <Fat_FileExist+0x54>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
   40e64:	e0bfb404 	addi	r2,fp,-304
   40e68:	e17fff17 	ldw	r5,-4(fp)
   40e6c:	1009883a 	mov	r4,r2
   40e70:	0040be00 	call	40be0 <fatSameLongFilename>
   40e74:	e0bfb115 	stw	r2,-316(fp)
   40e78:	00000706 	br	40e98 <Fat_FileExist+0x70>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
   40e7c:	e0bfb404 	addi	r2,fp,-304
   40e80:	e17fff17 	ldw	r5,-4(fp)
   40e84:	1009883a 	mov	r4,r2
   40e88:	0046fc80 	call	46fc8 <strcasecmp>
   40e8c:	1000021e 	bne	r2,zero,40e98 <Fat_FileExist+0x70>
                    bFind = TRUE;
   40e90:	00800044 	movi	r2,1
   40e94:	e0bfb115 	stw	r2,-316(fp)
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   40e98:	e0bfb117 	ldw	r2,-316(fp)
   40e9c:	1000061e 	bne	r2,zero,40eb8 <Fat_FileExist+0x90>
   40ea0:	e0ffb404 	addi	r3,fp,-304
   40ea4:	e0bfb204 	addi	r2,fp,-312
   40ea8:	180b883a 	mov	r5,r3
   40eac:	1009883a 	mov	r4,r2
   40eb0:	00407480 	call	40748 <Fat_FileBrowseNext>
   40eb4:	103fe91e 	bne	r2,zero,40e5c <_gp+0xfffeeaf0>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        Fat_FileClose(Fat); 
   40eb8:	e13ffe17 	ldw	r4,-8(fp)
   40ebc:	00415cc0 	call	415cc <Fat_FileClose>
    }
    return bFind;            
   40ec0:	e0bfb117 	ldw	r2,-316(fp)
}    
   40ec4:	e037883a 	mov	sp,fp
   40ec8:	dfc00117 	ldw	ra,4(sp)
   40ecc:	df000017 	ldw	fp,0(sp)
   40ed0:	dec00204 	addi	sp,sp,8
   40ed4:	f800283a 	ret

00040ed8 <Fat_FileOpen>:
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
   40ed8:	deffae04 	addi	sp,sp,-328
   40edc:	dfc05115 	stw	ra,324(sp)
   40ee0:	df005015 	stw	fp,320(sp)
   40ee4:	df005004 	addi	fp,sp,320
   40ee8:	e13ffe15 	stw	r4,-8(fp)
   40eec:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
   40ef0:	e03fb015 	stw	zero,-320(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
   40ef4:	e03fb115 	stw	zero,-316(fp)
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
   40ef8:	e0bfb204 	addi	r2,fp,-312
   40efc:	100b883a 	mov	r5,r2
   40f00:	e13ffe17 	ldw	r4,-8(fp)
   40f04:	00406dc0 	call	406dc <Fat_FileBrowseBegin>
   40f08:	10003826 	beq	r2,zero,40fec <Fat_FileOpen+0x114>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   40f0c:	00000f06 	br	40f4c <Fat_FileOpen+0x74>
            if (FileContext.bLongFilename){
   40f10:	e0bff417 	ldw	r2,-48(fp)
   40f14:	10000626 	beq	r2,zero,40f30 <Fat_FileOpen+0x58>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
   40f18:	e0bfb404 	addi	r2,fp,-304
   40f1c:	e17fff17 	ldw	r5,-4(fp)
   40f20:	1009883a 	mov	r4,r2
   40f24:	0040be00 	call	40be0 <fatSameLongFilename>
   40f28:	e0bfb015 	stw	r2,-320(fp)
   40f2c:	00000706 	br	40f4c <Fat_FileOpen+0x74>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
   40f30:	e0bfb404 	addi	r2,fp,-304
   40f34:	e17fff17 	ldw	r5,-4(fp)
   40f38:	1009883a 	mov	r4,r2
   40f3c:	0046fc80 	call	46fc8 <strcasecmp>
   40f40:	1000021e 	bne	r2,zero,40f4c <Fat_FileOpen+0x74>
                    bFind = TRUE;
   40f44:	00800044 	movi	r2,1
   40f48:	e0bfb015 	stw	r2,-320(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   40f4c:	e0bfb017 	ldw	r2,-320(fp)
   40f50:	1000061e 	bne	r2,zero,40f6c <Fat_FileOpen+0x94>
   40f54:	e0ffb404 	addi	r3,fp,-304
   40f58:	e0bfb204 	addi	r2,fp,-312
   40f5c:	180b883a 	mov	r5,r3
   40f60:	1009883a 	mov	r4,r2
   40f64:	00407480 	call	40748 <Fat_FileBrowseNext>
   40f68:	103fe91e 	bne	r2,zero,40f10 <_gp+0xfffeeba4>
                if (strcmpi(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        
        if (bFind){
   40f6c:	e0bfb017 	ldw	r2,-320(fp)
   40f70:	10001e26 	beq	r2,zero,40fec <Fat_FileOpen+0x114>
            pFile = malloc(sizeof(FAT_FILE_INFO));
   40f74:	01005004 	movi	r4,320
   40f78:	0046ab00 	call	46ab0 <malloc>
   40f7c:	e0bfb115 	stw	r2,-316(fp)
            if (pFile){
   40f80:	e0bfb117 	ldw	r2,-316(fp)
   40f84:	10001926 	beq	r2,zero,40fec <Fat_FileOpen+0x114>
                pFile->OpenAttribute = FILE_OPEN_READ; 
   40f88:	e0bfb117 	ldw	r2,-316(fp)
   40f8c:	00c00044 	movi	r3,1
   40f90:	10c00115 	stw	r3,4(r2)
                pFile->SeekPos = 0;
   40f94:	e0bfb117 	ldw	r2,-316(fp)
   40f98:	10000215 	stw	zero,8(r2)
                pFile->Directory = FileContext;
   40f9c:	e0bfb117 	ldw	r2,-316(fp)
   40fa0:	10800504 	addi	r2,r2,20
   40fa4:	e0ffb404 	addi	r3,fp,-304
   40fa8:	01004a04 	movi	r4,296
   40fac:	200d883a 	mov	r6,r4
   40fb0:	180b883a 	mov	r5,r3
   40fb4:	1009883a 	mov	r4,r2
   40fb8:	0046ad80 	call	46ad8 <memcpy>
                pFile->IsOpened = TRUE;
   40fbc:	e0bfb117 	ldw	r2,-316(fp)
   40fc0:	00c00044 	movi	r3,1
   40fc4:	10c00015 	stw	r3,0(r2)
                pFile->Cluster = FileContext.FirstLogicalCluster;
   40fc8:	e0bffc8b 	ldhu	r2,-14(fp)
   40fcc:	10ffffcc 	andi	r3,r2,65535
   40fd0:	e0bfb117 	ldw	r2,-316(fp)
   40fd4:	10c00315 	stw	r3,12(r2)
                pFile->ClusterSeq = 0;
   40fd8:	e0bfb117 	ldw	r2,-316(fp)
   40fdc:	10000415 	stw	zero,16(r2)
                pFile->Fat = Fat;
   40fe0:	e0bfb117 	ldw	r2,-316(fp)
   40fe4:	e0fffe17 	ldw	r3,-8(fp)
   40fe8:	10c04f15 	stw	r3,316(r2)
            }    
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
   40fec:	e0bfb117 	ldw	r2,-316(fp)
}
   40ff0:	e037883a 	mov	sp,fp
   40ff4:	dfc00117 	ldw	ra,4(sp)
   40ff8:	df000017 	ldw	fp,0(sp)
   40ffc:	dec00204 	addi	sp,sp,8
   41000:	f800283a 	ret

00041004 <Fat_FileSize>:


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
   41004:	defffd04 	addi	sp,sp,-12
   41008:	df000215 	stw	fp,8(sp)
   4100c:	df000204 	addi	fp,sp,8
   41010:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   41014:	e0bfff17 	ldw	r2,-4(fp)
   41018:	e0bffe15 	stw	r2,-8(fp)
    if (f->IsOpened)
   4101c:	e0bffe17 	ldw	r2,-8(fp)
   41020:	10800017 	ldw	r2,0(r2)
   41024:	10000326 	beq	r2,zero,41034 <Fat_FileSize+0x30>
        return f->Directory.FileSize;
   41028:	e0bffe17 	ldw	r2,-8(fp)
   4102c:	10804e17 	ldw	r2,312(r2)
   41030:	00000106 	br	41038 <Fat_FileSize+0x34>
    return 0;        
   41034:	0005883a 	mov	r2,zero
}
   41038:	e037883a 	mov	sp,fp
   4103c:	df000017 	ldw	fp,0(sp)
   41040:	dec00104 	addi	sp,sp,4
   41044:	f800283a 	ret

00041048 <Fat_FileRead>:


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
   41048:	deffef04 	addi	sp,sp,-68
   4104c:	dfc01015 	stw	ra,64(sp)
   41050:	df000f15 	stw	fp,60(sp)
   41054:	df000f04 	addi	fp,sp,60
   41058:	e13ffd15 	stw	r4,-12(fp)
   4105c:	e17ffe15 	stw	r5,-8(fp)
   41060:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   41064:	e0bffd17 	ldw	r2,-12(fp)
   41068:	e0bff915 	stw	r2,-28(fp)
    VOLUME_INFO *pVol;
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
   4106c:	e03ff415 	stw	zero,-48(fp)
    int s;
    bool bSuccess= TRUE;
   41070:	00800044 	movi	r2,1
   41074:	e0bff715 	stw	r2,-36(fp)
    
    if (!f || !f->Fat)
   41078:	e0bff917 	ldw	r2,-28(fp)
   4107c:	10000326 	beq	r2,zero,4108c <Fat_FileRead+0x44>
   41080:	e0bff917 	ldw	r2,-28(fp)
   41084:	10804f17 	ldw	r2,316(r2)
   41088:	1000021e 	bne	r2,zero,41094 <Fat_FileRead+0x4c>
        return FALSE;
   4108c:	0005883a 	mov	r2,zero
   41090:	00010906 	br	414b8 <Fat_FileRead+0x470>
    pVol = (VOLUME_INFO *)f->Fat;        
   41094:	e0bff917 	ldw	r2,-28(fp)
   41098:	10804f17 	ldw	r2,316(r2)
   4109c:	e0bffa15 	stw	r2,-24(fp)
    
    if (!f->IsOpened){
   410a0:	e0bff917 	ldw	r2,-28(fp)
   410a4:	10800017 	ldw	r2,0(r2)
   410a8:	1000021e 	bne	r2,zero,410b4 <Fat_FileRead+0x6c>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
   410ac:	e0bff717 	ldw	r2,-36(fp)
   410b0:	00010106 	br	414b8 <Fat_FileRead+0x470>
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
   410b4:	e0bffa17 	ldw	r2,-24(fp)
   410b8:	10800c17 	ldw	r2,48(r2)
   410bc:	e0bffb15 	stw	r2,-20(fp)
    Pos = f->SeekPos;
   410c0:	e0bff917 	ldw	r2,-28(fp)
   410c4:	10800217 	ldw	r2,8(r2)
   410c8:	e0bff115 	stw	r2,-60(fp)
    if (BytesPerCluster == 32768){
   410cc:	e0fffb17 	ldw	r3,-20(fp)
   410d0:	00a00014 	movui	r2,32768
   410d4:	18800a1e 	bne	r3,r2,41100 <Fat_FileRead+0xb8>
        nClusterSeq = Pos >> 15;
   410d8:	e0bff117 	ldw	r2,-60(fp)
   410dc:	1004d3fa 	srli	r2,r2,15
   410e0:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 15);
   410e4:	e0bff917 	ldw	r2,-28(fp)
   410e8:	10800417 	ldw	r2,16(r2)
   410ec:	100493fa 	slli	r2,r2,15
   410f0:	e0fff117 	ldw	r3,-60(fp)
   410f4:	1885c83a 	sub	r2,r3,r2
   410f8:	e0bff115 	stw	r2,-60(fp)
   410fc:	00002706 	br	4119c <Fat_FileRead+0x154>
    }else if (BytesPerCluster == 16384){
   41100:	e0bffb17 	ldw	r2,-20(fp)
   41104:	10900018 	cmpnei	r2,r2,16384
   41108:	10000a1e 	bne	r2,zero,41134 <Fat_FileRead+0xec>
        nClusterSeq = Pos >> 14;
   4110c:	e0bff117 	ldw	r2,-60(fp)
   41110:	1004d3ba 	srli	r2,r2,14
   41114:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 14);
   41118:	e0bff917 	ldw	r2,-28(fp)
   4111c:	10800417 	ldw	r2,16(r2)
   41120:	100493ba 	slli	r2,r2,14
   41124:	e0fff117 	ldw	r3,-60(fp)
   41128:	1885c83a 	sub	r2,r3,r2
   4112c:	e0bff115 	stw	r2,-60(fp)
   41130:	00001a06 	br	4119c <Fat_FileRead+0x154>
    }else if (BytesPerCluster == 2048){
   41134:	e0bffb17 	ldw	r2,-20(fp)
   41138:	10820018 	cmpnei	r2,r2,2048
   4113c:	10000a1e 	bne	r2,zero,41168 <Fat_FileRead+0x120>
        nClusterSeq = Pos >> 11;
   41140:	e0bff117 	ldw	r2,-60(fp)
   41144:	1004d2fa 	srli	r2,r2,11
   41148:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 11);
   4114c:	e0bff917 	ldw	r2,-28(fp)
   41150:	10800417 	ldw	r2,16(r2)
   41154:	100492fa 	slli	r2,r2,11
   41158:	e0fff117 	ldw	r3,-60(fp)
   4115c:	1885c83a 	sub	r2,r3,r2
   41160:	e0bff115 	stw	r2,-60(fp)
   41164:	00000d06 	br	4119c <Fat_FileRead+0x154>
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
   41168:	e17ffb17 	ldw	r5,-20(fp)
   4116c:	e13ff117 	ldw	r4,-60(fp)
   41170:	00453800 	call	45380 <__udivsi3>
   41174:	e0bff515 	stw	r2,-44(fp)
        Pos -= f->ClusterSeq*BytesPerCluster;
   41178:	e0bff917 	ldw	r2,-28(fp)
   4117c:	10800417 	ldw	r2,16(r2)
   41180:	e17ffb17 	ldw	r5,-20(fp)
   41184:	1009883a 	mov	r4,r2
   41188:	004543c0 	call	4543c <__mulsi3>
   4118c:	1007883a 	mov	r3,r2
   41190:	e0bff117 	ldw	r2,-60(fp)
   41194:	10c5c83a 	sub	r2,r2,r3
   41198:	e0bff115 	stw	r2,-60(fp)
    }    
        
       
    Cluster = f->Cluster;
   4119c:	e0bff917 	ldw	r2,-28(fp)
   411a0:	10800317 	ldw	r2,12(r2)
   411a4:	e0bff315 	stw	r2,-52(fp)
    if (nClusterSeq != f->ClusterSeq){
   411a8:	e0bff917 	ldw	r2,-28(fp)
   411ac:	10c00417 	ldw	r3,16(r2)
   411b0:	e0bff517 	ldw	r2,-44(fp)
   411b4:	1880b226 	beq	r3,r2,41480 <Fat_FileRead+0x438>
        Cluster = f->Cluster;  //11/20/2007, richard
   411b8:	e0bff917 	ldw	r2,-28(fp)
   411bc:	10800317 	ldw	r2,12(r2)
   411c0:	e0bff315 	stw	r2,-52(fp)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
   411c4:	00001606 	br	41220 <Fat_FileRead+0x1d8>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
   411c8:	e17ff317 	ldw	r5,-52(fp)
   411cc:	e13ffa17 	ldw	r4,-24(fp)
   411d0:	00419600 	call	41960 <fatNextCluster>
   411d4:	e0bffc15 	stw	r2,-16(fp)
            if (NextCluster == 0){
   411d8:	e0bffc17 	ldw	r2,-16(fp)
   411dc:	1000021e 	bne	r2,zero,411e8 <Fat_FileRead+0x1a0>
                bSuccess = FALSE;
   411e0:	e03ff715 	stw	zero,-36(fp)
   411e4:	00000206 	br	411f0 <Fat_FileRead+0x1a8>
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
   411e8:	e0bffc17 	ldw	r2,-16(fp)
   411ec:	e0bff315 	stw	r2,-52(fp)
            }        
            Pos -= BytesPerCluster;
   411f0:	e0fff117 	ldw	r3,-60(fp)
   411f4:	e0bffb17 	ldw	r2,-20(fp)
   411f8:	1885c83a 	sub	r2,r3,r2
   411fc:	e0bff115 	stw	r2,-60(fp)
            f->Cluster = Cluster;
   41200:	e0bff917 	ldw	r2,-28(fp)
   41204:	e0fff317 	ldw	r3,-52(fp)
   41208:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
   4120c:	e0bff917 	ldw	r2,-28(fp)
   41210:	10800417 	ldw	r2,16(r2)
   41214:	10c00044 	addi	r3,r2,1
   41218:	e0bff917 	ldw	r2,-28(fp)
   4121c:	10c00415 	stw	r3,16(r2)
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
   41220:	e0fff117 	ldw	r3,-60(fp)
   41224:	e0bffb17 	ldw	r2,-20(fp)
   41228:	18809536 	bltu	r3,r2,41480 <Fat_FileRead+0x438>
   4122c:	e0bff717 	ldw	r2,-36(fp)
   41230:	103fe51e 	bne	r2,zero,411c8 <_gp+0xfffeee5c>
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
   41234:	00009206 	br	41480 <Fat_FileRead+0x438>
        if (pVol->BPB_SecPerCluster == 32)
   41238:	e0bffa17 	ldw	r2,-24(fp)
   4123c:	10800717 	ldw	r2,28(r2)
   41240:	10800818 	cmpnei	r2,r2,32
   41244:	1000081e 	bne	r2,zero,41268 <Fat_FileRead+0x220>
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
   41248:	e0bff317 	ldw	r2,-52(fp)
   4124c:	10bfff84 	addi	r2,r2,-2
   41250:	1006917a 	slli	r3,r2,5
   41254:	e0bffa17 	ldw	r2,-24(fp)
   41258:	10800f17 	ldw	r2,60(r2)
   4125c:	1885883a 	add	r2,r3,r2
   41260:	e0bff215 	stw	r2,-56(fp)
   41264:	00001806 	br	412c8 <Fat_FileRead+0x280>
        else if (pVol->BPB_SecPerCluster == 64)
   41268:	e0bffa17 	ldw	r2,-24(fp)
   4126c:	10800717 	ldw	r2,28(r2)
   41270:	10801018 	cmpnei	r2,r2,64
   41274:	1000081e 	bne	r2,zero,41298 <Fat_FileRead+0x250>
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
   41278:	e0bff317 	ldw	r2,-52(fp)
   4127c:	10bfff84 	addi	r2,r2,-2
   41280:	100691ba 	slli	r3,r2,6
   41284:	e0bffa17 	ldw	r2,-24(fp)
   41288:	10800f17 	ldw	r2,60(r2)
   4128c:	1885883a 	add	r2,r3,r2
   41290:	e0bff215 	stw	r2,-56(fp)
   41294:	00000c06 	br	412c8 <Fat_FileRead+0x280>
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
   41298:	e0bff317 	ldw	r2,-52(fp)
   4129c:	10ffff84 	addi	r3,r2,-2
   412a0:	e0bffa17 	ldw	r2,-24(fp)
   412a4:	10800717 	ldw	r2,28(r2)
   412a8:	100b883a 	mov	r5,r2
   412ac:	1809883a 	mov	r4,r3
   412b0:	004543c0 	call	4543c <__mulsi3>
   412b4:	1007883a 	mov	r3,r2
   412b8:	e0bffa17 	ldw	r2,-24(fp)
   412bc:	10800f17 	ldw	r2,60(r2)
   412c0:	1885883a 	add	r2,r3,r2
   412c4:	e0bff215 	stw	r2,-56(fp)
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
   412c8:	e03ff615 	stw	zero,-40(fp)
   412cc:	00004e06 	br	41408 <Fat_FileRead+0x3c0>
            if (Pos >= pVol->BPB_BytsPerSec){
   412d0:	e0bffa17 	ldw	r2,-24(fp)
   412d4:	10800617 	ldw	r2,24(r2)
   412d8:	e0fff117 	ldw	r3,-60(fp)
   412dc:	18800636 	bltu	r3,r2,412f8 <Fat_FileRead+0x2b0>
                Pos -= pVol->BPB_BytsPerSec;
   412e0:	e0bffa17 	ldw	r2,-24(fp)
   412e4:	10800617 	ldw	r2,24(r2)
   412e8:	e0fff117 	ldw	r3,-60(fp)
   412ec:	1885c83a 	sub	r2,r3,r2
   412f0:	e0bff115 	stw	r2,-60(fp)
   412f4:	00003e06 	br	413f0 <Fat_FileRead+0x3a8>
            }else{
                // read secter data
                bSuccess = fatReadSecter(pVol, PhysicalSecter);
   412f8:	e17ff217 	ldw	r5,-56(fp)
   412fc:	e13ffa17 	ldw	r4,-24(fp)
   41300:	004228c0 	call	4228c <fatReadSecter>
   41304:	e0bff715 	stw	r2,-36(fp)
                
                if (bSuccess){
   41308:	e0bff717 	ldw	r2,-36(fp)
   4130c:	10003826 	beq	r2,zero,413f0 <Fat_FileRead+0x3a8>
                    // copy data to user buffer
                
                    int nCopyCount;
                    nCopyCount = pVol->BPB_BytsPerSec;
   41310:	e0bffa17 	ldw	r2,-24(fp)
   41314:	10800617 	ldw	r2,24(r2)
   41318:	e0bff815 	stw	r2,-32(fp)
                    if (Pos)
   4131c:	e0bff117 	ldw	r2,-60(fp)
   41320:	10000426 	beq	r2,zero,41334 <Fat_FileRead+0x2ec>
                        nCopyCount -= Pos;
   41324:	e0fff817 	ldw	r3,-32(fp)
   41328:	e0bff117 	ldw	r2,-60(fp)
   4132c:	1885c83a 	sub	r2,r3,r2
   41330:	e0bff815 	stw	r2,-32(fp)
                    if (nCopyCount > (nBufferSize-nReadCount))
   41334:	e0ffff17 	ldw	r3,-4(fp)
   41338:	e0bff417 	ldw	r2,-48(fp)
   4133c:	1887c83a 	sub	r3,r3,r2
   41340:	e0bff817 	ldw	r2,-32(fp)
   41344:	1880042e 	bgeu	r3,r2,41358 <Fat_FileRead+0x310>
                        nCopyCount = nBufferSize-nReadCount;
   41348:	e0ffff17 	ldw	r3,-4(fp)
   4134c:	e0bff417 	ldw	r2,-48(fp)
   41350:	1885c83a 	sub	r2,r3,r2
   41354:	e0bff815 	stw	r2,-32(fp)
                    if (nCopyCount == 512){
   41358:	e0bff817 	ldw	r2,-32(fp)
   4135c:	10808018 	cmpnei	r2,r2,512
   41360:	1000111e 	bne	r2,zero,413a8 <Fat_FileRead+0x360>
                        memcpy((char *)pBuffer+nReadCount, pVol->Secter_Data, 512);
   41364:	e0fffe17 	ldw	r3,-8(fp)
   41368:	e0bff417 	ldw	r2,-48(fp)
   4136c:	1887883a 	add	r3,r3,r2
   41370:	e0bffa17 	ldw	r2,-24(fp)
   41374:	10801004 	addi	r2,r2,64
   41378:	01808004 	movi	r6,512
   4137c:	100b883a 	mov	r5,r2
   41380:	1809883a 	mov	r4,r3
   41384:	0046ad80 	call	46ad8 <memcpy>
                        nReadCount += nCopyCount;
   41388:	e0bff817 	ldw	r2,-32(fp)
   4138c:	e0fff417 	ldw	r3,-48(fp)
   41390:	1885883a 	add	r2,r3,r2
   41394:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
   41398:	e0bff117 	ldw	r2,-60(fp)
   4139c:	10001426 	beq	r2,zero,413f0 <Fat_FileRead+0x3a8>
                            Pos = 0;
   413a0:	e03ff115 	stw	zero,-60(fp)
   413a4:	00001206 	br	413f0 <Fat_FileRead+0x3a8>
                    }else{
                        memcpy((void *)((char *)pBuffer+nReadCount), pVol->Secter_Data+Pos,nCopyCount);
   413a8:	e0fffe17 	ldw	r3,-8(fp)
   413ac:	e0bff417 	ldw	r2,-48(fp)
   413b0:	1889883a 	add	r4,r3,r2
   413b4:	e0bffa17 	ldw	r2,-24(fp)
   413b8:	10c01004 	addi	r3,r2,64
   413bc:	e0bff117 	ldw	r2,-60(fp)
   413c0:	1885883a 	add	r2,r3,r2
   413c4:	e0fff817 	ldw	r3,-32(fp)
   413c8:	180d883a 	mov	r6,r3
   413cc:	100b883a 	mov	r5,r2
   413d0:	0046ad80 	call	46ad8 <memcpy>
                        nReadCount += nCopyCount;
   413d4:	e0bff817 	ldw	r2,-32(fp)
   413d8:	e0fff417 	ldw	r3,-48(fp)
   413dc:	1885883a 	add	r2,r3,r2
   413e0:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
   413e4:	e0bff117 	ldw	r2,-60(fp)
   413e8:	10000126 	beq	r2,zero,413f0 <Fat_FileRead+0x3a8>
                            Pos = 0;
   413ec:	e03ff115 	stw	zero,-60(fp)
                    }         
                }    // if bSuccess
                    
            }
            PhysicalSecter++;
   413f0:	e0bff217 	ldw	r2,-56(fp)
   413f4:	10800044 	addi	r2,r2,1
   413f8:	e0bff215 	stw	r2,-56(fp)
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else if (pVol->BPB_SecPerCluster == 64)
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
   413fc:	e0bff617 	ldw	r2,-40(fp)
   41400:	10800044 	addi	r2,r2,1
   41404:	e0bff615 	stw	r2,-40(fp)
   41408:	e0bffa17 	ldw	r2,-24(fp)
   4140c:	10800717 	ldw	r2,28(r2)
   41410:	e0fff617 	ldw	r3,-40(fp)
   41414:	1880052e 	bgeu	r3,r2,4142c <Fat_FileRead+0x3e4>
   41418:	e0bfff17 	ldw	r2,-4(fp)
   4141c:	e0fff417 	ldw	r3,-48(fp)
   41420:	1880022e 	bgeu	r3,r2,4142c <Fat_FileRead+0x3e4>
   41424:	e0bff717 	ldw	r2,-36(fp)
   41428:	103fa91e 	bne	r2,zero,412d0 <_gp+0xfffeef64>
            }
            PhysicalSecter++;
        }    
            
        // next cluster
        if (nReadCount < nBufferSize){
   4142c:	e0bfff17 	ldw	r2,-4(fp)
   41430:	e0fff417 	ldw	r3,-48(fp)
   41434:	1880122e 	bgeu	r3,r2,41480 <Fat_FileRead+0x438>
            NextCluster = fatNextCluster(pVol, Cluster); 
   41438:	e17ff317 	ldw	r5,-52(fp)
   4143c:	e13ffa17 	ldw	r4,-24(fp)
   41440:	00419600 	call	41960 <fatNextCluster>
   41444:	e0bffc15 	stw	r2,-16(fp)
            if (NextCluster == 0){
   41448:	e0bffc17 	ldw	r2,-16(fp)
   4144c:	1000021e 	bne	r2,zero,41458 <Fat_FileRead+0x410>
                bSuccess = FALSE;
   41450:	e03ff715 	stw	zero,-36(fp)
   41454:	00000206 	br	41460 <Fat_FileRead+0x418>
                FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
            }else{
                Cluster = NextCluster;
   41458:	e0bffc17 	ldw	r2,-16(fp)
   4145c:	e0bff315 	stw	r2,-52(fp)
            }    
            //    
            f->ClusterSeq++; 
   41460:	e0bff917 	ldw	r2,-28(fp)
   41464:	10800417 	ldw	r2,16(r2)
   41468:	10c00044 	addi	r3,r2,1
   4146c:	e0bff917 	ldw	r2,-28(fp)
   41470:	10c00415 	stw	r3,16(r2)
            f->Cluster = Cluster;
   41474:	e0bff917 	ldw	r2,-28(fp)
   41478:	e0fff317 	ldw	r3,-52(fp)
   4147c:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
   41480:	e0bfff17 	ldw	r2,-4(fp)
   41484:	e0fff417 	ldw	r3,-48(fp)
   41488:	1880022e 	bgeu	r3,r2,41494 <Fat_FileRead+0x44c>
   4148c:	e0bff717 	ldw	r2,-36(fp)
   41490:	103f691e 	bne	r2,zero,41238 <_gp+0xfffeeecc>
            f->ClusterSeq++; 
            f->Cluster = Cluster;
        }                    
    }
    
    if (bSuccess){
   41494:	e0bff717 	ldw	r2,-36(fp)
   41498:	10000626 	beq	r2,zero,414b4 <Fat_FileRead+0x46c>
        f->SeekPos += nBufferSize;
   4149c:	e0bff917 	ldw	r2,-28(fp)
   414a0:	10c00217 	ldw	r3,8(r2)
   414a4:	e0bfff17 	ldw	r2,-4(fp)
   414a8:	1887883a 	add	r3,r3,r2
   414ac:	e0bff917 	ldw	r2,-28(fp)
   414b0:	10c00215 	stw	r3,8(r2)
    }        
        
    
    return bSuccess;
   414b4:	e0bff717 	ldw	r2,-36(fp)
}
   414b8:	e037883a 	mov	sp,fp
   414bc:	dfc00117 	ldw	ra,4(sp)
   414c0:	df000017 	ldw	fp,0(sp)
   414c4:	dec00204 	addi	sp,sp,8
   414c8:	f800283a 	ret

000414cc <Fat_FileSeek>:


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
   414cc:	defff904 	addi	sp,sp,-28
   414d0:	df000615 	stw	fp,24(sp)
   414d4:	df000604 	addi	fp,sp,24
   414d8:	e13ffd15 	stw	r4,-12(fp)
   414dc:	e17ffe15 	stw	r5,-8(fp)
   414e0:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   414e4:	e0bffd17 	ldw	r2,-12(fp)
   414e8:	e0bffb15 	stw	r2,-20(fp)
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
   414ec:	00800044 	movi	r2,1
   414f0:	e0bffa15 	stw	r2,-24(fp)

    if (!f || !f->Fat)
   414f4:	e0bffb17 	ldw	r2,-20(fp)
   414f8:	10000326 	beq	r2,zero,41508 <Fat_FileSeek+0x3c>
   414fc:	e0bffb17 	ldw	r2,-20(fp)
   41500:	10804f17 	ldw	r2,316(r2)
   41504:	1000021e 	bne	r2,zero,41510 <Fat_FileSeek+0x44>
        return FALSE;
   41508:	0005883a 	mov	r2,zero
   4150c:	00002b06 	br	415bc <Fat_FileSeek+0xf0>
    pVol = (VOLUME_INFO *)f->Fat;        
   41510:	e0bffb17 	ldw	r2,-20(fp)
   41514:	10804f17 	ldw	r2,316(r2)
   41518:	e0bffc15 	stw	r2,-16(fp)
    
    if (!f->IsOpened)
   4151c:	e0bffb17 	ldw	r2,-20(fp)
   41520:	10800017 	ldw	r2,0(r2)
   41524:	1000021e 	bne	r2,zero,41530 <Fat_FileSeek+0x64>
        return FALSE;
   41528:	0005883a 	mov	r2,zero
   4152c:	00002306 	br	415bc <Fat_FileSeek+0xf0>
        
    switch(SeekPos){
   41530:	e0bffe17 	ldw	r2,-8(fp)
   41534:	10c00060 	cmpeqi	r3,r2,1
   41538:	1800081e 	bne	r3,zero,4155c <Fat_FileSeek+0x90>
   4153c:	0080032e 	bgeu	zero,r2,4154c <Fat_FileSeek+0x80>
   41540:	108000a0 	cmpeqi	r2,r2,2
   41544:	10000c1e 	bne	r2,zero,41578 <Fat_FileSeek+0xac>
   41548:	00001206 	br	41594 <Fat_FileSeek+0xc8>
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
   4154c:	e0ffff17 	ldw	r3,-4(fp)
   41550:	e0bffb17 	ldw	r2,-20(fp)
   41554:	10c00215 	stw	r3,8(r2)
            break;
   41558:	00001006 	br	4159c <Fat_FileSeek+0xd0>
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
   4155c:	e0bffb17 	ldw	r2,-20(fp)
   41560:	10c00217 	ldw	r3,8(r2)
   41564:	e0bfff17 	ldw	r2,-4(fp)
   41568:	1887883a 	add	r3,r3,r2
   4156c:	e0bffb17 	ldw	r2,-20(fp)
   41570:	10c00215 	stw	r3,8(r2)
            break;
   41574:	00000906 	br	4159c <Fat_FileSeek+0xd0>
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
   41578:	e0bffb17 	ldw	r2,-20(fp)
   4157c:	10c04e17 	ldw	r3,312(r2)
   41580:	e0bfff17 	ldw	r2,-4(fp)
   41584:	1887883a 	add	r3,r3,r2
   41588:	e0bffb17 	ldw	r2,-20(fp)
   4158c:	10c00215 	stw	r3,8(r2)
            break;
   41590:	00000206 	br	4159c <Fat_FileSeek+0xd0>
        default:
            bSuccess = FALSE;
   41594:	e03ffa15 	stw	zero,-24(fp)
            break;    
   41598:	0001883a 	nop
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
   4159c:	e0bffb17 	ldw	r2,-20(fp)
   415a0:	10804d8b 	ldhu	r2,310(r2)
   415a4:	10ffffcc 	andi	r3,r2,65535
   415a8:	e0bffb17 	ldw	r2,-20(fp)
   415ac:	10c00315 	stw	r3,12(r2)
    f->ClusterSeq = 0;
   415b0:	e0bffb17 	ldw	r2,-20(fp)
   415b4:	10000415 	stw	zero,16(r2)
    
    return bSuccess;
   415b8:	e0bffa17 	ldw	r2,-24(fp)
    
}
   415bc:	e037883a 	mov	sp,fp
   415c0:	df000017 	ldw	fp,0(sp)
   415c4:	dec00104 	addi	sp,sp,4
   415c8:	f800283a 	ret

000415cc <Fat_FileClose>:

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
   415cc:	defffc04 	addi	sp,sp,-16
   415d0:	dfc00315 	stw	ra,12(sp)
   415d4:	df000215 	stw	fp,8(sp)
   415d8:	df000204 	addi	fp,sp,8
   415dc:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   415e0:	e0bfff17 	ldw	r2,-4(fp)
   415e4:	e0bffe15 	stw	r2,-8(fp)
    if (!f)
   415e8:	e0bffe17 	ldw	r2,-8(fp)
   415ec:	10000326 	beq	r2,zero,415fc <Fat_FileClose+0x30>
        return;
        
    free(f);        
   415f0:	e13ffe17 	ldw	r4,-8(fp)
   415f4:	0046ac40 	call	46ac4 <free>
   415f8:	00000106 	br	41600 <Fat_FileClose+0x34>
}

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    if (!f)
        return;
   415fc:	0001883a 	nop
        
    free(f);        
}
   41600:	e037883a 	mov	sp,fp
   41604:	dfc00117 	ldw	ra,4(sp)
   41608:	df000017 	ldw	fp,0(sp)
   4160c:	dec00204 	addi	sp,sp,8
   41610:	f800283a 	ret

00041614 <Fat_SpeedTest>:



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
   41614:	deff7304 	addi	sp,sp,-564
   41618:	dfc08c15 	stw	ra,560(sp)
   4161c:	df008b15 	stw	fp,556(sp)
   41620:	dc008a15 	stw	r16,552(sp)
   41624:	df008b04 	addi	fp,sp,556
   41628:	e13ffd15 	stw	r4,-12(fp)
   4162c:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = TRUE;
   41630:	00800044 	movi	r2,1
   41634:	e0bf7515 	stw	r2,-556(fp)
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
   41638:	e03f7615 	stw	zero,-552(fp)
    int nSecter = 0;
   4163c:	e03f7715 	stw	zero,-548(fp)
    float fMegaBytePerSec = 0;
   41640:	e03f7815 	stw	zero,-544(fp)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
   41644:	e0bffd17 	ldw	r2,-12(fp)
   41648:	e0bf7915 	stw	r2,-540(fp)
    if (!pVol)
   4164c:	e0bf7917 	ldw	r2,-540(fp)
   41650:	1000021e 	bne	r2,zero,4165c <Fat_SpeedTest+0x48>
        return 0;
   41654:	0005883a 	mov	r2,zero
   41658:	00005a06 	br	417c4 <Fat_SpeedTest+0x1b0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4165c:	d0a0ce17 	ldw	r2,-31944(gp)
    time_start = alt_nticks();
   41660:	e0bf7a15 	stw	r2,-536(fp)
   41664:	d420ce17 	ldw	r16,-31944(gp)
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
   41668:	0140fa04 	movi	r5,1000
   4166c:	e13ffe17 	ldw	r4,-8(fp)
   41670:	004543c0 	call	4543c <__mulsi3>
   41674:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   41678:	d0a0cd17 	ldw	r2,-31948(gp)
   4167c:	100b883a 	mov	r5,r2
   41680:	1809883a 	mov	r4,r3
   41684:	00453800 	call	45380 <__udivsi3>
   41688:	8085883a 	add	r2,r16,r2
   4168c:	e0bf7b15 	stw	r2,-532(fp)
    while(alt_nticks() < time_finish && bSuccess){
   41690:	00001106 	br	416d8 <Fat_SpeedTest+0xc4>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
   41694:	e0bf7917 	ldw	r2,-540(fp)
   41698:	10800117 	ldw	r2,4(r2)
   4169c:	e0ff7917 	ldw	r3,-540(fp)
   416a0:	18c00017 	ldw	r3,0(r3)
   416a4:	e13f7717 	ldw	r4,-548(fp)
   416a8:	e17f7d04 	addi	r5,fp,-524
   416ac:	280d883a 	mov	r6,r5
   416b0:	200b883a 	mov	r5,r4
   416b4:	1809883a 	mov	r4,r3
   416b8:	103ee83a 	callr	r2
   416bc:	e0bf7515 	stw	r2,-556(fp)
        nSecter++;
   416c0:	e0bf7717 	ldw	r2,-548(fp)
   416c4:	10800044 	addi	r2,r2,1
   416c8:	e0bf7715 	stw	r2,-548(fp)
        TotalReadBytes += sizeof(szBlock);
   416cc:	e0bf7617 	ldw	r2,-552(fp)
   416d0:	10808004 	addi	r2,r2,512
   416d4:	e0bf7615 	stw	r2,-552(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   416d8:	d0e0ce17 	ldw	r3,-31944(gp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
   416dc:	e0bf7b17 	ldw	r2,-532(fp)
   416e0:	1880022e 	bgeu	r3,r2,416ec <Fat_SpeedTest+0xd8>
   416e4:	e0bf7517 	ldw	r2,-556(fp)
   416e8:	103fea1e 	bne	r2,zero,41694 <_gp+0xfffef328>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
        nSecter++;
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
   416ec:	e0bf7517 	ldw	r2,-556(fp)
   416f0:	10003326 	beq	r2,zero,417c0 <Fat_SpeedTest+0x1ac>
   416f4:	d0e0ce17 	ldw	r3,-31944(gp)
        time_elapsed = alt_nticks() - time_start;
   416f8:	e0bf7a17 	ldw	r2,-536(fp)
   416fc:	1885c83a 	sub	r2,r3,r2
   41700:	e0bf7c15 	stw	r2,-528(fp)
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
   41704:	e13f7617 	ldw	r4,-552(fp)
   41708:	0045cd40 	call	45cd4 <__floatunsisf>
   4170c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   41710:	d0a0cd17 	ldw	r2,-31948(gp)
   41714:	1009883a 	mov	r4,r2
   41718:	0045cd40 	call	45cd4 <__floatunsisf>
   4171c:	1007883a 	mov	r3,r2
   41720:	180b883a 	mov	r5,r3
   41724:	8009883a 	mov	r4,r16
   41728:	00458a40 	call	458a4 <__mulsf3>
   4172c:	1007883a 	mov	r3,r2
   41730:	1821883a 	mov	r16,r3
   41734:	e13f7c17 	ldw	r4,-528(fp)
   41738:	0045cd40 	call	45cd4 <__floatunsisf>
   4173c:	1007883a 	mov	r3,r2
   41740:	180b883a 	mov	r5,r3
   41744:	8009883a 	mov	r4,r16
   41748:	00454640 	call	45464 <__divsf3>
   4174c:	1007883a 	mov	r3,r2
   41750:	1805883a 	mov	r2,r3
   41754:	1009883a 	mov	r4,r2
   41758:	00467940 	call	46794 <__extendsfdf2>
   4175c:	1011883a 	mov	r8,r2
   41760:	1813883a 	mov	r9,r3
   41764:	000d883a 	mov	r6,zero
   41768:	01d02434 	movhi	r7,16528
   4176c:	4009883a 	mov	r4,r8
   41770:	480b883a 	mov	r5,r9
   41774:	0045dc40 	call	45dc4 <__divdf3>
   41778:	1009883a 	mov	r4,r2
   4177c:	180b883a 	mov	r5,r3
   41780:	2005883a 	mov	r2,r4
   41784:	2807883a 	mov	r3,r5
   41788:	000d883a 	mov	r6,zero
   4178c:	01d02434 	movhi	r7,16528
   41790:	1009883a 	mov	r4,r2
   41794:	180b883a 	mov	r5,r3
   41798:	0045dc40 	call	45dc4 <__divdf3>
   4179c:	1009883a 	mov	r4,r2
   417a0:	180b883a 	mov	r5,r3
   417a4:	2005883a 	mov	r2,r4
   417a8:	2807883a 	mov	r3,r5
   417ac:	1009883a 	mov	r4,r2
   417b0:	180b883a 	mov	r5,r3
   417b4:	00468a40 	call	468a4 <__truncdfsf2>
   417b8:	1007883a 	mov	r3,r2
   417bc:	e0ff7815 	stw	r3,-544(fp)
    }        
    return fMegaBytePerSec;
   417c0:	e0bf7817 	ldw	r2,-544(fp)
   417c4:	1007883a 	mov	r3,r2
    
   
}
   417c8:	1805883a 	mov	r2,r3
   417cc:	e6ffff04 	addi	sp,fp,-4
   417d0:	dfc00217 	ldw	ra,8(sp)
   417d4:	df000117 	ldw	fp,4(sp)
   417d8:	dc000017 	ldw	r16,0(sp)
   417dc:	dec00304 	addi	sp,sp,12
   417e0:	f800283a 	ret

000417e4 <fat16ClusterType>:
//extern VOLUME_INFO gVolumeInfo;




CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
   417e4:	defffd04 	addi	sp,sp,-12
   417e8:	df000215 	stw	fp,8(sp)
   417ec:	df000204 	addi	fp,sp,8
   417f0:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
   417f4:	e0bfff17 	ldw	r2,-4(fp)
   417f8:	10bfffcc 	andi	r2,r2,65535
   417fc:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFF0)
   41800:	e0bfff17 	ldw	r2,-4(fp)
   41804:	10000626 	beq	r2,zero,41820 <fat16ClusterType+0x3c>
   41808:	e0bfff17 	ldw	r2,-4(fp)
   4180c:	10bffc28 	cmpgeui	r2,r2,65520
   41810:	1000031e 	bne	r2,zero,41820 <fat16ClusterType+0x3c>
        Type = CLUSTER_NEXT_INFILE;
   41814:	00800104 	movi	r2,4
   41818:	e0bffe15 	stw	r2,-8(fp)
   4181c:	00001806 	br	41880 <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
   41820:	e0bfff17 	ldw	r2,-4(fp)
   41824:	10bffe30 	cmpltui	r2,r2,65528
   41828:	1000031e 	bne	r2,zero,41838 <fat16ClusterType+0x54>
        Type = CLUSTER_LAST_INFILE;
   4182c:	008000c4 	movi	r2,3
   41830:	e0bffe15 	stw	r2,-8(fp)
   41834:	00001206 	br	41880 <fat16ClusterType+0x9c>
    else if (Fat == (alt_u16)0x00)
   41838:	e0bfff17 	ldw	r2,-4(fp)
   4183c:	1000021e 	bne	r2,zero,41848 <fat16ClusterType+0x64>
        Type = CLUSTER_UNUSED;
   41840:	e03ffe15 	stw	zero,-8(fp)
   41844:	00000e06 	br	41880 <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
   41848:	e0bfff17 	ldw	r2,-4(fp)
   4184c:	10bffc30 	cmpltui	r2,r2,65520
   41850:	1000061e 	bne	r2,zero,4186c <fat16ClusterType+0x88>
   41854:	e0bfff17 	ldw	r2,-4(fp)
   41858:	10bffde8 	cmpgeui	r2,r2,65527
   4185c:	1000031e 	bne	r2,zero,4186c <fat16ClusterType+0x88>
        Type = CLUSTER_RESERVED;
   41860:	00800044 	movi	r2,1
   41864:	e0bffe15 	stw	r2,-8(fp)
   41868:	00000506 	br	41880 <fat16ClusterType+0x9c>
    else if (Fat == 0xFFF7)
   4186c:	e0ffff17 	ldw	r3,-4(fp)
   41870:	00bffdd4 	movui	r2,65527
   41874:	1880021e 	bne	r3,r2,41880 <fat16ClusterType+0x9c>
        Type = CLUSTER_BAD;
   41878:	00800084 	movi	r2,2
   4187c:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
   41880:	e0bffe17 	ldw	r2,-8(fp)
         
}
   41884:	e037883a 	mov	sp,fp
   41888:	df000017 	ldw	fp,0(sp)
   4188c:	dec00104 	addi	sp,sp,4
   41890:	f800283a 	ret

00041894 <fat32ClusterType>:

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
   41894:	defffd04 	addi	sp,sp,-12
   41898:	df000215 	stw	fp,8(sp)
   4189c:	df000204 	addi	fp,sp,8
   418a0:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
   418a4:	e0ffff17 	ldw	r3,-4(fp)
   418a8:	00840034 	movhi	r2,4096
   418ac:	10bfffc4 	addi	r2,r2,-1
   418b0:	1884703a 	and	r2,r3,r2
   418b4:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
   418b8:	e0bfff17 	ldw	r2,-4(fp)
   418bc:	10000726 	beq	r2,zero,418dc <fat32ClusterType+0x48>
   418c0:	e0ffff17 	ldw	r3,-4(fp)
   418c4:	00840034 	movhi	r2,4096
   418c8:	10bffbc4 	addi	r2,r2,-17
   418cc:	10c00336 	bltu	r2,r3,418dc <fat32ClusterType+0x48>
        Type = CLUSTER_NEXT_INFILE;
   418d0:	00800104 	movi	r2,4
   418d4:	e0bffe15 	stw	r2,-8(fp)
   418d8:	00001c06 	br	4194c <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
   418dc:	e0ffff17 	ldw	r3,-4(fp)
   418e0:	00840034 	movhi	r2,4096
   418e4:	10bffdc4 	addi	r2,r2,-9
   418e8:	10c0032e 	bgeu	r2,r3,418f8 <fat32ClusterType+0x64>
        Type = CLUSTER_LAST_INFILE;
   418ec:	008000c4 	movi	r2,3
   418f0:	e0bffe15 	stw	r2,-8(fp)
   418f4:	00001506 	br	4194c <fat32ClusterType+0xb8>
    else if (Fat == (alt_u32)0x00)
   418f8:	e0bfff17 	ldw	r2,-4(fp)
   418fc:	1000021e 	bne	r2,zero,41908 <fat32ClusterType+0x74>
        Type = CLUSTER_UNUSED;
   41900:	e03ffe15 	stw	zero,-8(fp)
   41904:	00001106 	br	4194c <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
   41908:	e0ffff17 	ldw	r3,-4(fp)
   4190c:	00840034 	movhi	r2,4096
   41910:	10bffbc4 	addi	r2,r2,-17
   41914:	10c0072e 	bgeu	r2,r3,41934 <fat32ClusterType+0xa0>
   41918:	e0ffff17 	ldw	r3,-4(fp)
   4191c:	00840034 	movhi	r2,4096
   41920:	10bffd84 	addi	r2,r2,-10
   41924:	10c00336 	bltu	r2,r3,41934 <fat32ClusterType+0xa0>
        Type = CLUSTER_RESERVED;
   41928:	00800044 	movi	r2,1
   4192c:	e0bffe15 	stw	r2,-8(fp)
   41930:	00000606 	br	4194c <fat32ClusterType+0xb8>
    else if (Fat == 0xFFFFFF7)
   41934:	e0ffff17 	ldw	r3,-4(fp)
   41938:	00840034 	movhi	r2,4096
   4193c:	10bffdc4 	addi	r2,r2,-9
   41940:	1880021e 	bne	r3,r2,4194c <fat32ClusterType+0xb8>
        Type = CLUSTER_BAD;
   41944:	00800084 	movi	r2,2
   41948:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
   4194c:	e0bffe17 	ldw	r2,-8(fp)
         
}
   41950:	e037883a 	mov	sp,fp
   41954:	df000017 	ldw	fp,0(sp)
   41958:	dec00104 	addi	sp,sp,4
   4195c:	f800283a 	ret

00041960 <fatNextCluster>:

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
   41960:	defff604 	addi	sp,sp,-40
   41964:	dfc00915 	stw	ra,36(sp)
   41968:	df000815 	stw	fp,32(sp)
   4196c:	dc000715 	stw	r16,28(sp)
   41970:	df000804 	addi	fp,sp,32
   41974:	e13ffd15 	stw	r4,-12(fp)
   41978:	e17ffe15 	stw	r5,-8(fp)
    if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
        NextCluster = 0;  // invalid cluster
    }        
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
   4197c:	e0bffd17 	ldw	r2,-12(fp)
   41980:	10800317 	ldw	r2,12(r2)
   41984:	10800318 	cmpnei	r2,r2,12
   41988:	1000021e 	bne	r2,zero,41994 <fatNextCluster+0x34>
   4198c:	00800104 	movi	r2,4
   41990:	00000106 	br	41998 <fatNextCluster+0x38>
   41994:	00800084 	movi	r2,2
   41998:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
   4199c:	e0bffd17 	ldw	r2,-12(fp)
   419a0:	10800617 	ldw	r2,24(r2)
   419a4:	e0fffa17 	ldw	r3,-24(fp)
   419a8:	180b883a 	mov	r5,r3
   419ac:	1009883a 	mov	r4,r2
   419b0:	00453800 	call	45380 <__udivsi3>
   419b4:	e0bffb15 	stw	r2,-20(fp)
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
   419b8:	e0bffd17 	ldw	r2,-12(fp)
   419bc:	14000d17 	ldw	r16,52(r2)
   419c0:	e0bffa17 	ldw	r2,-24(fp)
   419c4:	e17ffe17 	ldw	r5,-8(fp)
   419c8:	1009883a 	mov	r4,r2
   419cc:	004543c0 	call	4543c <__mulsi3>
   419d0:	1007883a 	mov	r3,r2
   419d4:	e0bffd17 	ldw	r2,-12(fp)
   419d8:	10800617 	ldw	r2,24(r2)
   419dc:	100b883a 	mov	r5,r2
   419e0:	1809883a 	mov	r4,r3
   419e4:	00453800 	call	45380 <__udivsi3>
   419e8:	8085883a 	add	r2,r16,r2
   419ec:	e0bffc15 	stw	r2,-16(fp)
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
   419f0:	e17ffc17 	ldw	r5,-16(fp)
   419f4:	e13ffd17 	ldw	r4,-12(fp)
   419f8:	004228c0 	call	4228c <fatReadSecter>
   419fc:	10003126 	beq	r2,zero,41ac4 <fatNextCluster+0x164>
        if (pVol->Partition_Type == PARTITION_FAT32){
   41a00:	e0bffd17 	ldw	r2,-12(fp)
   41a04:	10800317 	ldw	r2,12(r2)
   41a08:	10800318 	cmpnei	r2,r2,12
   41a0c:	1000131e 	bne	r2,zero,41a5c <fatNextCluster+0xfc>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
   41a10:	e0bffd17 	ldw	r2,-12(fp)
   41a14:	14001004 	addi	r16,r2,64
   41a18:	e0fffb17 	ldw	r3,-20(fp)
   41a1c:	e0bffe17 	ldw	r2,-8(fp)
   41a20:	180b883a 	mov	r5,r3
   41a24:	1009883a 	mov	r4,r2
   41a28:	00453e40 	call	453e4 <__umodsi3>
   41a2c:	1007883a 	mov	r3,r2
   41a30:	e0bffa17 	ldw	r2,-24(fp)
   41a34:	100b883a 	mov	r5,r2
   41a38:	1809883a 	mov	r4,r3
   41a3c:	004543c0 	call	4543c <__mulsi3>
   41a40:	8085883a 	add	r2,r16,r2
   41a44:	10800017 	ldw	r2,0(r2)
   41a48:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat32ClusterType(NextCluster);
   41a4c:	e13ff917 	ldw	r4,-28(fp)
   41a50:	00418940 	call	41894 <fat32ClusterType>
   41a54:	e0bff815 	stw	r2,-32(fp)
   41a58:	00001306 	br	41aa8 <fatNextCluster+0x148>
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
   41a5c:	e0bffd17 	ldw	r2,-12(fp)
   41a60:	14001004 	addi	r16,r2,64
   41a64:	e0fffb17 	ldw	r3,-20(fp)
   41a68:	e0bffe17 	ldw	r2,-8(fp)
   41a6c:	180b883a 	mov	r5,r3
   41a70:	1009883a 	mov	r4,r2
   41a74:	00453e40 	call	453e4 <__umodsi3>
   41a78:	1007883a 	mov	r3,r2
   41a7c:	e0bffa17 	ldw	r2,-24(fp)
   41a80:	100b883a 	mov	r5,r2
   41a84:	1809883a 	mov	r4,r3
   41a88:	004543c0 	call	4543c <__mulsi3>
   41a8c:	8085883a 	add	r2,r16,r2
   41a90:	1080000b 	ldhu	r2,0(r2)
   41a94:	10bfffcc 	andi	r2,r2,65535
   41a98:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat16ClusterType(NextCluster);
   41a9c:	e13ff917 	ldw	r4,-28(fp)
   41aa0:	00417e40 	call	417e4 <fat16ClusterType>
   41aa4:	e0bff815 	stw	r2,-32(fp)
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
   41aa8:	e0bff817 	ldw	r2,-32(fp)
   41aac:	10800120 	cmpeqi	r2,r2,4
   41ab0:	1000041e 	bne	r2,zero,41ac4 <fatNextCluster+0x164>
   41ab4:	e0bff817 	ldw	r2,-32(fp)
   41ab8:	108000e0 	cmpeqi	r2,r2,3
   41abc:	1000011e 	bne	r2,zero,41ac4 <fatNextCluster+0x164>
            NextCluster = 0;  // invalid cluster
   41ac0:	e03ff915 	stw	zero,-28(fp)
    }                
    
    
    return NextCluster;
   41ac4:	e0bff917 	ldw	r2,-28(fp)

#endif    
    
    return NextCluster;
}
   41ac8:	e6ffff04 	addi	sp,fp,-4
   41acc:	dfc00217 	ldw	ra,8(sp)
   41ad0:	df000117 	ldw	fp,4(sp)
   41ad4:	dc000017 	ldw	r16,0(sp)
   41ad8:	dec00304 	addi	sp,sp,12
   41adc:	f800283a 	ret

00041ae0 <fatFindUnusedCluster>:

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
   41ae0:	defff304 	addi	sp,sp,-52
   41ae4:	dfc00c15 	stw	ra,48(sp)
   41ae8:	df000b15 	stw	fp,44(sp)
   41aec:	dc000a15 	stw	r16,40(sp)
   41af0:	df000b04 	addi	fp,sp,44
   41af4:	e13ffe15 	stw	r4,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
   41af8:	00bfffc4 	movi	r2,-1
   41afc:	e0bff615 	stw	r2,-40(fp)
   41b00:	00800084 	movi	r2,2
   41b04:	e0bff715 	stw	r2,-36(fp)
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
   41b08:	e0bffe17 	ldw	r2,-8(fp)
   41b0c:	10800317 	ldw	r2,12(r2)
   41b10:	10800318 	cmpnei	r2,r2,12
   41b14:	1000021e 	bne	r2,zero,41b20 <fatFindUnusedCluster+0x40>
   41b18:	00800104 	movi	r2,4
   41b1c:	00000106 	br	41b24 <fatFindUnusedCluster+0x44>
   41b20:	00800084 	movi	r2,2
   41b24:	e0bff915 	stw	r2,-28(fp)
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
   41b28:	e0bffe17 	ldw	r2,-8(fp)
   41b2c:	10800617 	ldw	r2,24(r2)
   41b30:	e0fff917 	ldw	r3,-28(fp)
   41b34:	180b883a 	mov	r5,r3
   41b38:	1009883a 	mov	r4,r2
   41b3c:	00453800 	call	45380 <__udivsi3>
   41b40:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
    bool bDone = FALSE;
   41b44:	e03ff815 	stw	zero,-32(fp)

    while(!bDone){     
   41b48:	00003e06 	br	41c44 <fatFindUnusedCluster+0x164>
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
   41b4c:	e0bffe17 	ldw	r2,-8(fp)
   41b50:	14000d17 	ldw	r16,52(r2)
   41b54:	e0bff917 	ldw	r2,-28(fp)
   41b58:	e17ff717 	ldw	r5,-36(fp)
   41b5c:	1009883a 	mov	r4,r2
   41b60:	004543c0 	call	4543c <__mulsi3>
   41b64:	1007883a 	mov	r3,r2
   41b68:	e0bffe17 	ldw	r2,-8(fp)
   41b6c:	10800617 	ldw	r2,24(r2)
   41b70:	100b883a 	mov	r5,r2
   41b74:	1809883a 	mov	r4,r3
   41b78:	00453800 	call	45380 <__udivsi3>
   41b7c:	8085883a 	add	r2,r16,r2
   41b80:	e0bffb15 	stw	r2,-20(fp)
        if (fatReadSecter(pVol, Secter)){
   41b84:	e17ffb17 	ldw	r5,-20(fp)
   41b88:	e13ffe17 	ldw	r4,-8(fp)
   41b8c:	004228c0 	call	4228c <fatReadSecter>
   41b90:	10002726 	beq	r2,zero,41c30 <fatFindUnusedCluster+0x150>
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
   41b94:	e0bffe17 	ldw	r2,-8(fp)
   41b98:	14001004 	addi	r16,r2,64
   41b9c:	e0fffa17 	ldw	r3,-24(fp)
   41ba0:	e0bff717 	ldw	r2,-36(fp)
   41ba4:	180b883a 	mov	r5,r3
   41ba8:	1009883a 	mov	r4,r2
   41bac:	00453e40 	call	453e4 <__umodsi3>
   41bb0:	1007883a 	mov	r3,r2
   41bb4:	e0bff917 	ldw	r2,-28(fp)
   41bb8:	100b883a 	mov	r5,r2
   41bbc:	1809883a 	mov	r4,r3
   41bc0:	004543c0 	call	4543c <__mulsi3>
   41bc4:	8085883a 	add	r2,r16,r2
   41bc8:	e0bffc15 	stw	r2,-16(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
   41bcc:	e0bffe17 	ldw	r2,-8(fp)
   41bd0:	10800317 	ldw	r2,12(r2)
   41bd4:	10800318 	cmpnei	r2,r2,12
   41bd8:	1000071e 	bne	r2,zero,41bf8 <fatFindUnusedCluster+0x118>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
   41bdc:	e0bffc17 	ldw	r2,-16(fp)
   41be0:	10800017 	ldw	r2,0(r2)
   41be4:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
   41be8:	e13ffd17 	ldw	r4,-12(fp)
   41bec:	00418940 	call	41894 <fat32ClusterType>
   41bf0:	e0bff515 	stw	r2,-44(fp)
   41bf4:	00000706 	br	41c14 <fatFindUnusedCluster+0x134>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
   41bf8:	e0bffc17 	ldw	r2,-16(fp)
   41bfc:	1080000b 	ldhu	r2,0(r2)
   41c00:	10bfffcc 	andi	r2,r2,65535
   41c04:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
   41c08:	e13ffd17 	ldw	r4,-12(fp)
   41c0c:	00417e40 	call	417e4 <fat16ClusterType>
   41c10:	e0bff515 	stw	r2,-44(fp)
            }    
            if (ClusterType == CLUSTER_UNUSED){
   41c14:	e0bff517 	ldw	r2,-44(fp)
   41c18:	1000071e 	bne	r2,zero,41c38 <fatFindUnusedCluster+0x158>
                UnusedCluster = ThisCluster;  // invalid cluster
   41c1c:	e0bff717 	ldw	r2,-36(fp)
   41c20:	e0bff615 	stw	r2,-40(fp)
                bDone = TRUE;
   41c24:	00800044 	movi	r2,1
   41c28:	e0bff815 	stw	r2,-32(fp)
   41c2c:	00000206 	br	41c38 <fatFindUnusedCluster+0x158>
            }    
        }else{
            bDone = TRUE;
   41c30:	00800044 	movi	r2,1
   41c34:	e0bff815 	stw	r2,-32(fp)
        }     
        ThisCluster++;           
   41c38:	e0bff717 	ldw	r2,-36(fp)
   41c3c:	10800044 	addi	r2,r2,1
   41c40:	e0bff715 	stw	r2,-36(fp)
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
   41c44:	e0bff817 	ldw	r2,-32(fp)
   41c48:	103fc026 	beq	r2,zero,41b4c <_gp+0xfffef7e0>
            bDone = TRUE;
        }     
        ThisCluster++;           
    }                
    
    return UnusedCluster;
   41c4c:	e0bff617 	ldw	r2,-40(fp)

}
   41c50:	e6ffff04 	addi	sp,fp,-4
   41c54:	dfc00217 	ldw	ra,8(sp)
   41c58:	df000117 	ldw	fp,4(sp)
   41c5c:	dc000017 	ldw	r16,0(sp)
   41c60:	dec00304 	addi	sp,sp,12
   41c64:	f800283a 	ret

00041c68 <fatDelClusterList>:


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
   41c68:	defff204 	addi	sp,sp,-56
   41c6c:	dfc00d15 	stw	ra,52(sp)
   41c70:	df000c15 	stw	fp,48(sp)
   41c74:	dc000b15 	stw	r16,44(sp)
   41c78:	df000c04 	addi	fp,sp,48
   41c7c:	e13ffd15 	stw	r4,-12(fp)
   41c80:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
   41c84:	00800044 	movi	r2,1
   41c88:	e0bff515 	stw	r2,-44(fp)
    bool bDone = FALSE;
   41c8c:	e03ff615 	stw	zero,-40(fp)
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
   41c90:	e0bffd17 	ldw	r2,-12(fp)
   41c94:	10800317 	ldw	r2,12(r2)
   41c98:	10800318 	cmpnei	r2,r2,12
   41c9c:	1000021e 	bne	r2,zero,41ca8 <fatDelClusterList+0x40>
   41ca0:	00800104 	movi	r2,4
   41ca4:	00000106 	br	41cac <fatDelClusterList+0x44>
   41ca8:	00800084 	movi	r2,2
   41cac:	e0bff715 	stw	r2,-36(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
   41cb0:	e0bffd17 	ldw	r2,-12(fp)
   41cb4:	10800617 	ldw	r2,24(r2)
   41cb8:	e0fff717 	ldw	r3,-36(fp)
   41cbc:	180b883a 	mov	r5,r3
   41cc0:	1009883a 	mov	r4,r2
   41cc4:	00453800 	call	45380 <__udivsi3>
   41cc8:	e0bff815 	stw	r2,-32(fp)
     
    ClusterIndex = StartCluster;
   41ccc:	e0bffe17 	ldw	r2,-8(fp)
   41cd0:	e0bff915 	stw	r2,-28(fp)
    while(bSuccess && !bDone){
   41cd4:	00005706 	br	41e34 <fatDelClusterList+0x1cc>
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
   41cd8:	e0bffd17 	ldw	r2,-12(fp)
   41cdc:	14000d17 	ldw	r16,52(r2)
   41ce0:	e0bff717 	ldw	r2,-36(fp)
   41ce4:	e17ff917 	ldw	r5,-28(fp)
   41ce8:	1009883a 	mov	r4,r2
   41cec:	004543c0 	call	4543c <__mulsi3>
   41cf0:	1007883a 	mov	r3,r2
   41cf4:	e0bffd17 	ldw	r2,-12(fp)
   41cf8:	10800617 	ldw	r2,24(r2)
   41cfc:	100b883a 	mov	r5,r2
   41d00:	1809883a 	mov	r4,r3
   41d04:	00453800 	call	45380 <__udivsi3>
   41d08:	8085883a 	add	r2,r16,r2
   41d0c:	e0bffa15 	stw	r2,-24(fp)
        bSuccess = fatReadSecter(pVol, Secter);
   41d10:	e17ffa17 	ldw	r5,-24(fp)
   41d14:	e13ffd17 	ldw	r4,-12(fp)
   41d18:	004228c0 	call	4228c <fatReadSecter>
   41d1c:	e0bff515 	stw	r2,-44(fp)
        if (bSuccess){
   41d20:	e0bff517 	ldw	r2,-44(fp)
   41d24:	10004326 	beq	r2,zero,41e34 <fatDelClusterList+0x1cc>
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
   41d28:	e0bffd17 	ldw	r2,-12(fp)
   41d2c:	14001004 	addi	r16,r2,64
   41d30:	e0fff817 	ldw	r3,-32(fp)
   41d34:	e0bff917 	ldw	r2,-28(fp)
   41d38:	180b883a 	mov	r5,r3
   41d3c:	1009883a 	mov	r4,r2
   41d40:	00453e40 	call	453e4 <__umodsi3>
   41d44:	1007883a 	mov	r3,r2
   41d48:	e0bff717 	ldw	r2,-36(fp)
   41d4c:	100b883a 	mov	r5,r2
   41d50:	1809883a 	mov	r4,r3
   41d54:	004543c0 	call	4543c <__mulsi3>
   41d58:	8085883a 	add	r2,r16,r2
   41d5c:	e0bffb15 	stw	r2,-20(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
   41d60:	e0bffd17 	ldw	r2,-12(fp)
   41d64:	10800317 	ldw	r2,12(r2)
   41d68:	10800318 	cmpnei	r2,r2,12
   41d6c:	1000071e 	bne	r2,zero,41d8c <fatDelClusterList+0x124>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
   41d70:	e0bffb17 	ldw	r2,-20(fp)
   41d74:	10800017 	ldw	r2,0(r2)
   41d78:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
   41d7c:	e13ffc17 	ldw	r4,-16(fp)
   41d80:	00418940 	call	41894 <fat32ClusterType>
   41d84:	e0bff415 	stw	r2,-48(fp)
   41d88:	00000706 	br	41da8 <fatDelClusterList+0x140>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
   41d8c:	e0bffb17 	ldw	r2,-20(fp)
   41d90:	1080000b 	ldhu	r2,0(r2)
   41d94:	10bfffcc 	andi	r2,r2,65535
   41d98:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
   41d9c:	e13ffc17 	ldw	r4,-16(fp)
   41da0:	00417e40 	call	417e4 <fat16ClusterType>
   41da4:	e0bff415 	stw	r2,-48(fp)
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
   41da8:	e0bff417 	ldw	r2,-48(fp)
   41dac:	10800120 	cmpeqi	r2,r2,4
   41db0:	1000071e 	bne	r2,zero,41dd0 <fatDelClusterList+0x168>
   41db4:	e0bff417 	ldw	r2,-48(fp)
   41db8:	108000e0 	cmpeqi	r2,r2,3
   41dbc:	1000041e 	bne	r2,zero,41dd0 <fatDelClusterList+0x168>
                bDone = TRUE;
   41dc0:	00800044 	movi	r2,1
   41dc4:	e0bff615 	stw	r2,-40(fp)
                bSuccess = FALSE;
   41dc8:	e03ff515 	stw	zero,-44(fp)
   41dcc:	00001906 	br	41e34 <fatDelClusterList+0x1cc>
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
   41dd0:	e0bff417 	ldw	r2,-48(fp)
   41dd4:	108000d8 	cmpnei	r2,r2,3
   41dd8:	1000021e 	bne	r2,zero,41de4 <fatDelClusterList+0x17c>
                    bDone = TRUE; // the last cluster
   41ddc:	00800044 	movi	r2,1
   41de0:	e0bff615 	stw	r2,-40(fp)
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
   41de4:	e0bffd17 	ldw	r2,-12(fp)
   41de8:	10800317 	ldw	r2,12(r2)
   41dec:	10800318 	cmpnei	r2,r2,12
   41df0:	1000031e 	bne	r2,zero,41e00 <fatDelClusterList+0x198>
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
   41df4:	e0bffb17 	ldw	r2,-20(fp)
   41df8:	10000015 	stw	zero,0(r2)
   41dfc:	00000206 	br	41e08 <fatDelClusterList+0x1a0>
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
   41e00:	e0bffb17 	ldw	r2,-20(fp)
   41e04:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
   41e08:	e0bffd17 	ldw	r2,-12(fp)
   41e0c:	10800217 	ldw	r2,8(r2)
   41e10:	e0fffd17 	ldw	r3,-12(fp)
   41e14:	19000017 	ldw	r4,0(r3)
   41e18:	e0fffd17 	ldw	r3,-12(fp)
   41e1c:	19409017 	ldw	r5,576(r3)
   41e20:	e0fffd17 	ldw	r3,-12(fp)
   41e24:	18c01004 	addi	r3,r3,64
   41e28:	180d883a 	mov	r6,r3
   41e2c:	103ee83a 	callr	r2
   41e30:	e0bff515 	stw	r2,-44(fp)
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
   41e34:	e0bff517 	ldw	r2,-44(fp)
   41e38:	10000226 	beq	r2,zero,41e44 <fatDelClusterList+0x1dc>
   41e3c:	e0bff617 	ldw	r2,-40(fp)
   41e40:	103fa526 	beq	r2,zero,41cd8 <_gp+0xfffef96c>
            }    
        }                
    }  // while                
    
    
    return bSuccess;
   41e44:	e0bff517 	ldw	r2,-44(fp)

}
   41e48:	e6ffff04 	addi	sp,fp,-4
   41e4c:	dfc00217 	ldw	ra,8(sp)
   41e50:	df000117 	ldw	fp,4(sp)
   41e54:	dc000017 	ldw	r16,0(sp)
   41e58:	dec00304 	addi	sp,sp,12
   41e5c:	f800283a 	ret

00041e60 <fatDumpDate>:


void fatDumpDate(unsigned short Date){
   41e60:	defffb04 	addi	sp,sp,-20
   41e64:	df000415 	stw	fp,16(sp)
   41e68:	df000404 	addi	fp,sp,16
   41e6c:	2005883a 	mov	r2,r4
   41e70:	e0bfff0d 	sth	r2,-4(fp)
    int Year, Month, Day;
    Year = ((Date >> 9) & 0x1F) + 1980;
   41e74:	e0bfff0b 	ldhu	r2,-4(fp)
   41e78:	1004d27a 	srli	r2,r2,9
   41e7c:	10bfffcc 	andi	r2,r2,65535
   41e80:	108007cc 	andi	r2,r2,31
   41e84:	1081ef04 	addi	r2,r2,1980
   41e88:	e0bffc15 	stw	r2,-16(fp)
    Month = ((Date >> 5) & 0xF);
   41e8c:	e0bfff0b 	ldhu	r2,-4(fp)
   41e90:	1004d17a 	srli	r2,r2,5
   41e94:	10bfffcc 	andi	r2,r2,65535
   41e98:	108003cc 	andi	r2,r2,15
   41e9c:	e0bffd15 	stw	r2,-12(fp)
    Day = ((Date >> 0) & 0x1F);
   41ea0:	e0bfff0b 	ldhu	r2,-4(fp)
   41ea4:	108007cc 	andi	r2,r2,31
   41ea8:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
}
   41eac:	0001883a 	nop
   41eb0:	e037883a 	mov	sp,fp
   41eb4:	df000017 	ldw	fp,0(sp)
   41eb8:	dec00104 	addi	sp,sp,4
   41ebc:	f800283a 	ret

00041ec0 <fatDumpTime>:

void fatDumpTime(unsigned short Date){
   41ec0:	defffb04 	addi	sp,sp,-20
   41ec4:	df000415 	stw	fp,16(sp)
   41ec8:	df000404 	addi	fp,sp,16
   41ecc:	2005883a 	mov	r2,r4
   41ed0:	e0bfff0d 	sth	r2,-4(fp)
    int H,M,S;
    H = ((Date >> 9) & 0x1F);
   41ed4:	e0bfff0b 	ldhu	r2,-4(fp)
   41ed8:	1004d27a 	srli	r2,r2,9
   41edc:	10bfffcc 	andi	r2,r2,65535
   41ee0:	108007cc 	andi	r2,r2,31
   41ee4:	e0bffc15 	stw	r2,-16(fp)
    M = ((Date >> 5) & 0x3F);
   41ee8:	e0bfff0b 	ldhu	r2,-4(fp)
   41eec:	1004d17a 	srli	r2,r2,5
   41ef0:	10bfffcc 	andi	r2,r2,65535
   41ef4:	10800fcc 	andi	r2,r2,63
   41ef8:	e0bffd15 	stw	r2,-12(fp)
    S = ((Date >> 0) & 0x1F)*2;
   41efc:	e0bfff0b 	ldhu	r2,-4(fp)
   41f00:	108007cc 	andi	r2,r2,31
   41f04:	1085883a 	add	r2,r2,r2
   41f08:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}
   41f0c:	0001883a 	nop
   41f10:	e037883a 	mov	sp,fp
   41f14:	df000017 	ldw	fp,0(sp)
   41f18:	dec00104 	addi	sp,sp,4
   41f1c:	f800283a 	ret

00041f20 <fatIsLastDir>:

bool fatIsLastDir(FAT_DIRECTORY *pDir){
   41f20:	defffe04 	addi	sp,sp,-8
   41f24:	df000115 	stw	fp,4(sp)
   41f28:	df000104 	addi	fp,sp,4
   41f2c:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
   41f30:	e0bfff17 	ldw	r2,-4(fp)
   41f34:	10800003 	ldbu	r2,0(r2)
   41f38:	10803fcc 	andi	r2,r2,255
   41f3c:	1080201c 	xori	r2,r2,128
   41f40:	10bfe004 	addi	r2,r2,-128
   41f44:	1000021e 	bne	r2,zero,41f50 <fatIsLastDir+0x30>
        return TRUE;
   41f48:	00800044 	movi	r2,1
   41f4c:	00000106 	br	41f54 <fatIsLastDir+0x34>
    return FALSE;        
   41f50:	0005883a 	mov	r2,zero
}
   41f54:	e037883a 	mov	sp,fp
   41f58:	df000017 	ldw	fp,0(sp)
   41f5c:	dec00104 	addi	sp,sp,4
   41f60:	f800283a 	ret

00041f64 <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
   41f64:	defff704 	addi	sp,sp,-36
   41f68:	dfc00815 	stw	ra,32(sp)
   41f6c:	df000715 	stw	fp,28(sp)
   41f70:	df000704 	addi	fp,sp,28
   41f74:	e13fff15 	stw	r4,-4(fp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
   41f78:	00800174 	movhi	r2,5
   41f7c:	10a66d84 	addi	r2,r2,-26186
   41f80:	e0fffa04 	addi	r3,fp,-24
   41f84:	1009883a 	mov	r4,r2
   41f88:	00800444 	movi	r2,17
   41f8c:	100d883a 	mov	r6,r2
   41f90:	200b883a 	mov	r5,r4
   41f94:	1809883a 	mov	r4,r3
   41f98:	0046ad80 	call	46ad8 <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
   41f9c:	e03ff915 	stw	zero,-28(fp)
   41fa0:	00001206 	br	41fec <fatIsValidDir+0x88>
        if (pDir->Name[0] == szTest[i]){
   41fa4:	e0bfff17 	ldw	r2,-4(fp)
   41fa8:	11000003 	ldbu	r4,0(r2)
   41fac:	e0fffa04 	addi	r3,fp,-24
   41fb0:	e0bff917 	ldw	r2,-28(fp)
   41fb4:	1885883a 	add	r2,r3,r2
   41fb8:	10800003 	ldbu	r2,0(r2)
   41fbc:	20c03fcc 	andi	r3,r4,255
   41fc0:	18c0201c 	xori	r3,r3,128
   41fc4:	18ffe004 	addi	r3,r3,-128
   41fc8:	10803fcc 	andi	r2,r2,255
   41fcc:	1080201c 	xori	r2,r2,128
   41fd0:	10bfe004 	addi	r2,r2,-128
   41fd4:	1880021e 	bne	r3,r2,41fe0 <fatIsValidDir+0x7c>
            return FALSE;
   41fd8:	0005883a 	mov	r2,zero
   41fdc:	00000706 	br	41ffc <fatIsValidDir+0x98>

bool fatIsValidDir(FAT_DIRECTORY *pDir){
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
   41fe0:	e0bff917 	ldw	r2,-28(fp)
   41fe4:	10800044 	addi	r2,r2,1
   41fe8:	e0bff915 	stw	r2,-28(fp)
   41fec:	e0bff917 	ldw	r2,-28(fp)
   41ff0:	10800470 	cmpltui	r2,r2,17
   41ff4:	103feb1e 	bne	r2,zero,41fa4 <_gp+0xfffefc38>
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
        }
    }    
    return TRUE;
   41ff8:	00800044 	movi	r2,1
    
}
   41ffc:	e037883a 	mov	sp,fp
   42000:	dfc00117 	ldw	ra,4(sp)
   42004:	df000017 	ldw	fp,0(sp)
   42008:	dec00204 	addi	sp,sp,8
   4200c:	f800283a 	ret

00042010 <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
   42010:	defffe04 	addi	sp,sp,-8
   42014:	df000115 	stw	fp,4(sp)
   42018:	df000104 	addi	fp,sp,4
   4201c:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
   42020:	e0bfff17 	ldw	r2,-4(fp)
   42024:	10800003 	ldbu	r2,0(r2)
   42028:	10803fcc 	andi	r2,r2,255
   4202c:	1080201c 	xori	r2,r2,128
   42030:	10bfe004 	addi	r2,r2,-128
   42034:	10bff958 	cmpnei	r2,r2,-27
   42038:	1000021e 	bne	r2,zero,42044 <fatIsUnusedDir+0x34>
        return TRUE;
   4203c:	00800044 	movi	r2,1
   42040:	00000106 	br	42048 <fatIsUnusedDir+0x38>
    return FALSE; 
   42044:	0005883a 	mov	r2,zero
}
   42048:	e037883a 	mov	sp,fp
   4204c:	df000017 	ldw	fp,0(sp)
   42050:	dec00104 	addi	sp,sp,4
   42054:	f800283a 	ret

00042058 <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
   42058:	defff804 	addi	sp,sp,-32
   4205c:	dfc00715 	stw	ra,28(sp)
   42060:	df000615 	stw	fp,24(sp)
   42064:	df000604 	addi	fp,sp,24
   42068:	e13fff15 	stw	r4,-4(fp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
   4206c:	00800174 	movhi	r2,5
   42070:	10a671c4 	addi	r2,r2,-26169
   42074:	e0fffb04 	addi	r3,fp,-20
   42078:	1009883a 	mov	r4,r2
   4207c:	008003c4 	movi	r2,15
   42080:	100d883a 	mov	r6,r2
   42084:	200b883a 	mov	r5,r4
   42088:	1809883a 	mov	r4,r3
   4208c:	0046ad80 	call	46ad8 <memcpy>
    int i;
    if (pDir->Name[0] == (char)0xE5){
   42090:	e0bfff17 	ldw	r2,-4(fp)
   42094:	10800003 	ldbu	r2,0(r2)
   42098:	10803fcc 	andi	r2,r2,255
   4209c:	1080201c 	xori	r2,r2,128
   420a0:	10bfe004 	addi	r2,r2,-128
   420a4:	10bff958 	cmpnei	r2,r2,-27
   420a8:	10004a26 	beq	r2,zero,421d4 <fatDump+0x17c>
        FAT_DEBUG(("the directory entry is free.\n"));
        return;
    }
    if (pDir->Name[0] == 0x00){
   420ac:	e0bfff17 	ldw	r2,-4(fp)
   420b0:	10800003 	ldbu	r2,0(r2)
   420b4:	10803fcc 	andi	r2,r2,255
   420b8:	1080201c 	xori	r2,r2,128
   420bc:	10bfe004 	addi	r2,r2,-128
   420c0:	10004626 	beq	r2,zero,421dc <fatDump+0x184>
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
        return;
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
   420c4:	e0bfff17 	ldw	r2,-4(fp)
   420c8:	10800003 	ldbu	r2,0(r2)
   420cc:	10803fcc 	andi	r2,r2,255
   420d0:	1080201c 	xori	r2,r2,128
   420d4:	10bfe004 	addi	r2,r2,-128
   420d8:	10800848 	cmpgei	r2,r2,33
   420dc:	1000071e 	bne	r2,zero,420fc <fatDump+0xa4>
   420e0:	e0bfff17 	ldw	r2,-4(fp)
   420e4:	10800003 	ldbu	r2,0(r2)
   420e8:	10803fcc 	andi	r2,r2,255
   420ec:	1080201c 	xori	r2,r2,128
   420f0:	10bfe004 	addi	r2,r2,-128
   420f4:	10800160 	cmpeqi	r2,r2,5
   420f8:	10003a26 	beq	r2,zero,421e4 <fatDump+0x18c>
        FAT_DEBUG(("Invalid file name.\n"));
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
   420fc:	e03ffa15 	stw	zero,-24(fp)
   42100:	00001006 	br	42144 <fatDump+0xec>
        if (pDir->Name[0] == szInvalidName[i]){
   42104:	e0bfff17 	ldw	r2,-4(fp)
   42108:	11000003 	ldbu	r4,0(r2)
   4210c:	e0fffb04 	addi	r3,fp,-20
   42110:	e0bffa17 	ldw	r2,-24(fp)
   42114:	1885883a 	add	r2,r3,r2
   42118:	10800003 	ldbu	r2,0(r2)
   4211c:	20c03fcc 	andi	r3,r4,255
   42120:	18c0201c 	xori	r3,r3,128
   42124:	18ffe004 	addi	r3,r3,-128
   42128:	10803fcc 	andi	r2,r2,255
   4212c:	1080201c 	xori	r2,r2,128
   42130:	10bfe004 	addi	r2,r2,-128
   42134:	18802d26 	beq	r3,r2,421ec <fatDump+0x194>
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
        FAT_DEBUG(("Invalid file name.\n"));
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
   42138:	e0bffa17 	ldw	r2,-24(fp)
   4213c:	10800044 	addi	r2,r2,1
   42140:	e0bffa15 	stw	r2,-24(fp)
   42144:	e0bffa17 	ldw	r2,-24(fp)
   42148:	108003f0 	cmpltui	r2,r2,15
   4214c:	103fed1e 	bne	r2,zero,42104 <_gp+0xfffefd98>
        FAT_DEBUG(("  Directory\n"));
    if (pDir->Attribute & ATTR_ARCHIVE)
        FAT_DEBUG(("  Archive\n"));
    if (pDir->Attribute & ATTR_LONG_NAME)
        FAT_DEBUG(("  Long Name\n"));
    FAT_DEBUG(("CreateTime:")); fatDumpTime(pDir->CreateTime);FAT_DEBUG(("\n"));
   42150:	e0bfff17 	ldw	r2,-4(fp)
   42154:	10c00383 	ldbu	r3,14(r2)
   42158:	108003c3 	ldbu	r2,15(r2)
   4215c:	1004923a 	slli	r2,r2,8
   42160:	10c4b03a 	or	r2,r2,r3
   42164:	10bfffcc 	andi	r2,r2,65535
   42168:	1009883a 	mov	r4,r2
   4216c:	0041ec00 	call	41ec0 <fatDumpTime>
    FAT_DEBUG(("CreateDate:")); fatDumpDate(pDir->LastAccessDate);FAT_DEBUG(("\n"));
   42170:	e0bfff17 	ldw	r2,-4(fp)
   42174:	10c00483 	ldbu	r3,18(r2)
   42178:	108004c3 	ldbu	r2,19(r2)
   4217c:	1004923a 	slli	r2,r2,8
   42180:	10c4b03a 	or	r2,r2,r3
   42184:	10bfffcc 	andi	r2,r2,65535
   42188:	1009883a 	mov	r4,r2
   4218c:	0041e600 	call	41e60 <fatDumpDate>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
   42190:	e0bfff17 	ldw	r2,-4(fp)
   42194:	10c00583 	ldbu	r3,22(r2)
   42198:	108005c3 	ldbu	r2,23(r2)
   4219c:	1004923a 	slli	r2,r2,8
   421a0:	10c4b03a 	or	r2,r2,r3
   421a4:	10bfffcc 	andi	r2,r2,65535
   421a8:	1009883a 	mov	r4,r2
   421ac:	0041ec00 	call	41ec0 <fatDumpTime>
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
   421b0:	e0bfff17 	ldw	r2,-4(fp)
   421b4:	10c00603 	ldbu	r3,24(r2)
   421b8:	10800643 	ldbu	r2,25(r2)
   421bc:	1004923a 	slli	r2,r2,8
   421c0:	10c4b03a 	or	r2,r2,r3
   421c4:	10bfffcc 	andi	r2,r2,65535
   421c8:	1009883a 	mov	r4,r2
   421cc:	0041e600 	call	41e60 <fatDumpDate>
   421d0:	00000706 	br	421f0 <fatDump+0x198>
void fatDump(FAT_DIRECTORY *pDir){
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    if (pDir->Name[0] == (char)0xE5){
        FAT_DEBUG(("the directory entry is free.\n"));
        return;
   421d4:	0001883a 	nop
   421d8:	00000506 	br	421f0 <fatDump+0x198>
    }
    if (pDir->Name[0] == 0x00){
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
        return;
   421dc:	0001883a 	nop
   421e0:	00000306 	br	421f0 <fatDump+0x198>
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
        FAT_DEBUG(("Invalid file name.\n"));
        return;
   421e4:	0001883a 	nop
   421e8:	00000106 	br	421f0 <fatDump+0x198>
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
        if (pDir->Name[0] == szInvalidName[i]){
            FAT_DEBUG(("Invalid file name.\n"));
            return;
   421ec:	0001883a 	nop
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
}
   421f0:	e037883a 	mov	sp,fp
   421f4:	dfc00117 	ldw	ra,4(sp)
   421f8:	df000017 	ldw	fp,0(sp)
   421fc:	dec00204 	addi	sp,sp,8
   42200:	f800283a 	ret

00042204 <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
   42204:	defffa04 	addi	sp,sp,-24
   42208:	df000515 	stw	fp,20(sp)
   4220c:	df000504 	addi	fp,sp,20
   42210:	e13ffe15 	stw	r4,-8(fp)
   42214:	e17fff15 	stw	r5,-4(fp)
    alt_u8 *pMSB = (pValue + nNum - 1);
   42218:	e0bfff17 	ldw	r2,-4(fp)
   4221c:	10bfffc4 	addi	r2,r2,-1
   42220:	e0fffe17 	ldw	r3,-8(fp)
   42224:	1885883a 	add	r2,r3,r2
   42228:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
   4222c:	e03ffd15 	stw	zero,-12(fp)
   42230:	00000e06 	br	4226c <fatArray2Value+0x68>
        nValue <<= 8;
   42234:	e0bffc17 	ldw	r2,-16(fp)
   42238:	1004923a 	slli	r2,r2,8
   4223c:	e0bffc15 	stw	r2,-16(fp)
        nValue |= *pMSB--;
   42240:	e0bffb17 	ldw	r2,-20(fp)
   42244:	10ffffc4 	addi	r3,r2,-1
   42248:	e0fffb15 	stw	r3,-20(fp)
   4224c:	10800003 	ldbu	r2,0(r2)
   42250:	10803fcc 	andi	r2,r2,255
   42254:	e0fffc17 	ldw	r3,-16(fp)
   42258:	1884b03a 	or	r2,r3,r2
   4225c:	e0bffc15 	stw	r2,-16(fp)

unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
   42260:	e0bffd17 	ldw	r2,-12(fp)
   42264:	10800044 	addi	r2,r2,1
   42268:	e0bffd15 	stw	r2,-12(fp)
   4226c:	e0fffd17 	ldw	r3,-12(fp)
   42270:	e0bfff17 	ldw	r2,-4(fp)
   42274:	18bfef36 	bltu	r3,r2,42234 <_gp+0xfffefec8>
        nValue <<= 8;
        nValue |= *pMSB--;
        
    }
    
    return nValue;
   42278:	e0bffc17 	ldw	r2,-16(fp)
}
   4227c:	e037883a 	mov	sp,fp
   42280:	df000017 	ldw	fp,0(sp)
   42284:	dec00104 	addi	sp,sp,4
   42288:	f800283a 	ret

0004228c <fatReadSecter>:

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
   4228c:	defffb04 	addi	sp,sp,-20
   42290:	dfc00415 	stw	ra,16(sp)
   42294:	df000315 	stw	fp,12(sp)
   42298:	df000304 	addi	fp,sp,12
   4229c:	e13ffe15 	stw	r4,-8(fp)
   422a0:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
   422a4:	00800044 	movi	r2,1
   422a8:	e0bffd15 	stw	r2,-12(fp)
    if (nSecter != pVol->Secter_Index){
   422ac:	e0bffe17 	ldw	r2,-8(fp)
   422b0:	10c09017 	ldw	r3,576(r2)
   422b4:	e0bfff17 	ldw	r2,-4(fp)
   422b8:	18801226 	beq	r3,r2,42304 <fatReadSecter+0x78>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
   422bc:	e0bffe17 	ldw	r2,-8(fp)
   422c0:	10800117 	ldw	r2,4(r2)
   422c4:	e0fffe17 	ldw	r3,-8(fp)
   422c8:	19000017 	ldw	r4,0(r3)
   422cc:	e0fffe17 	ldw	r3,-8(fp)
   422d0:	18c01004 	addi	r3,r3,64
   422d4:	180d883a 	mov	r6,r3
   422d8:	e17fff17 	ldw	r5,-4(fp)
   422dc:	103ee83a 	callr	r2
   422e0:	1000051e 	bne	r2,zero,422f8 <fatReadSecter+0x6c>
            pVol->Secter_Index = -1;
   422e4:	e0bffe17 	ldw	r2,-8(fp)
   422e8:	00ffffc4 	movi	r3,-1
   422ec:	10c09015 	stw	r3,576(r2)
            bSuccess = FALSE;
   422f0:	e03ffd15 	stw	zero,-12(fp)
   422f4:	00000306 	br	42304 <fatReadSecter+0x78>
        }else{
            pVol->Secter_Index = nSecter;
   422f8:	e0bffe17 	ldw	r2,-8(fp)
   422fc:	e0ffff17 	ldw	r3,-4(fp)
   42300:	10c09015 	stw	r3,576(r2)
        }
    }
    return bSuccess;          
   42304:	e0bffd17 	ldw	r2,-12(fp)
}     
   42308:	e037883a 	mov	sp,fp
   4230c:	dfc00117 	ldw	ra,4(sp)
   42310:	df000017 	ldw	fp,0(sp)
   42314:	dec00204 	addi	sp,sp,8
   42318:	f800283a 	ret

0004231c <fatFindDirectory>:

//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
   4231c:	defff804 	addi	sp,sp,-32
   42320:	dfc00715 	stw	ra,28(sp)
   42324:	df000615 	stw	fp,24(sp)
   42328:	df000604 	addi	fp,sp,24
   4232c:	e13ffe15 	stw	r4,-8(fp)
   42330:	e17fff15 	stw	r5,-4(fp)
    FAT_DIRECTORY *pDir=NULL;
   42334:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
   42338:	e0bfff17 	ldw	r2,-4(fp)
   4233c:	1006917a 	slli	r3,r2,5
   42340:	e0bffe17 	ldw	r2,-8(fp)
   42344:	10800617 	ldw	r2,24(r2)
   42348:	100b883a 	mov	r5,r2
   4234c:	1809883a 	mov	r4,r3
   42350:	00453800 	call	45380 <__udivsi3>
   42354:	e0bffb15 	stw	r2,-20(fp)
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
   42358:	e0bffe17 	ldw	r2,-8(fp)
   4235c:	10c00e17 	ldw	r3,56(r2)
   42360:	e0bffb17 	ldw	r2,-20(fp)
   42364:	1885883a 	add	r2,r3,r2
   42368:	e0bffc15 	stw	r2,-16(fp)
        // read sector
    if (fatReadSecter(pVol, nSecter)){
   4236c:	e17ffc17 	ldw	r5,-16(fp)
   42370:	e13ffe17 	ldw	r4,-8(fp)
   42374:	004228c0 	call	4228c <fatReadSecter>
   42378:	10000d26 	beq	r2,zero,423b0 <fatFindDirectory+0x94>
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
   4237c:	e0bfff17 	ldw	r2,-4(fp)
   42380:	1006917a 	slli	r3,r2,5
   42384:	e0bffe17 	ldw	r2,-8(fp)
   42388:	10800617 	ldw	r2,24(r2)
   4238c:	100b883a 	mov	r5,r2
   42390:	1809883a 	mov	r4,r3
   42394:	00453e40 	call	453e4 <__umodsi3>
   42398:	e0bffd15 	stw	r2,-12(fp)
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
   4239c:	e0bffe17 	ldw	r2,-8(fp)
   423a0:	10c01004 	addi	r3,r2,64
   423a4:	e0bffd17 	ldw	r2,-12(fp)
   423a8:	1885883a 	add	r2,r3,r2
   423ac:	e0bffa15 	stw	r2,-24(fp)
    }        
        
    return pDir;        
   423b0:	e0bffa17 	ldw	r2,-24(fp)
}
   423b4:	e037883a 	mov	sp,fp
   423b8:	dfc00117 	ldw	ra,4(sp)
   423bc:	df000017 	ldw	fp,0(sp)
   423c0:	dec00204 	addi	sp,sp,8
   423c4:	f800283a 	ret

000423c8 <fatFindUnusedDirectory>:

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
   423c8:	defff604 	addi	sp,sp,-40
   423cc:	dfc00915 	stw	ra,36(sp)
   423d0:	df000815 	stw	fp,32(sp)
   423d4:	df000804 	addi	fp,sp,32
   423d8:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Dir = -1;
   423dc:	00bfffc4 	movi	r2,-1
   423e0:	e0bff815 	stw	r2,-32(fp)
    FAT_DIRECTORY *pDir=NULL;
   423e4:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
   423e8:	00800084 	movi	r2,2
   423ec:	e0bff915 	stw	r2,-28(fp)
    bool bDone = FALSE;
   423f0:	e03ffa15 	stw	zero,-24(fp)
             
    while(!bDone){             
   423f4:	00003006 	br	424b8 <fatFindUnusedDirectory+0xf0>
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
   423f8:	e0bff917 	ldw	r2,-28(fp)
   423fc:	1006917a 	slli	r3,r2,5
   42400:	e0bfff17 	ldw	r2,-4(fp)
   42404:	10800617 	ldw	r2,24(r2)
   42408:	100b883a 	mov	r5,r2
   4240c:	1809883a 	mov	r4,r3
   42410:	00453800 	call	45380 <__udivsi3>
   42414:	e0bffc15 	stw	r2,-16(fp)
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
   42418:	e0bfff17 	ldw	r2,-4(fp)
   4241c:	10c00e17 	ldw	r3,56(r2)
   42420:	e0bffc17 	ldw	r2,-16(fp)
   42424:	1885883a 	add	r2,r3,r2
   42428:	e0bffd15 	stw	r2,-12(fp)
            // read sector
        if (fatReadSecter(pVol, nSecter)){
   4242c:	e17ffd17 	ldw	r5,-12(fp)
   42430:	e13fff17 	ldw	r4,-4(fp)
   42434:	004228c0 	call	4228c <fatReadSecter>
   42438:	10001e26 	beq	r2,zero,424b4 <fatFindUnusedDirectory+0xec>
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
   4243c:	e0bff917 	ldw	r2,-28(fp)
   42440:	1006917a 	slli	r3,r2,5
   42444:	e0bfff17 	ldw	r2,-4(fp)
   42448:	10800617 	ldw	r2,24(r2)
   4244c:	100b883a 	mov	r5,r2
   42450:	1809883a 	mov	r4,r3
   42454:	00453e40 	call	453e4 <__umodsi3>
   42458:	e0bffe15 	stw	r2,-8(fp)
            pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
   4245c:	e0bfff17 	ldw	r2,-4(fp)
   42460:	10c01004 	addi	r3,r2,64
   42464:	e0bffe17 	ldw	r2,-8(fp)
   42468:	1885883a 	add	r2,r3,r2
   4246c:	e0bffb15 	stw	r2,-20(fp)
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
   42470:	e13ffb17 	ldw	r4,-20(fp)
   42474:	0041f200 	call	41f20 <fatIsLastDir>
   42478:	1000031e 	bne	r2,zero,42488 <fatFindUnusedDirectory+0xc0>
   4247c:	e13ffb17 	ldw	r4,-20(fp)
   42480:	00420100 	call	42010 <fatIsUnusedDir>
   42484:	10000726 	beq	r2,zero,424a4 <fatFindUnusedDirectory+0xdc>
                bDone = TRUE;
   42488:	00800044 	movi	r2,1
   4248c:	e0bffa15 	stw	r2,-24(fp)
                if (fatIsUnusedDir(pDir))
   42490:	e13ffb17 	ldw	r4,-20(fp)
   42494:	00420100 	call	42010 <fatIsUnusedDir>
   42498:	10000226 	beq	r2,zero,424a4 <fatFindUnusedDirectory+0xdc>
                    Dir = nDirectoryIndex;
   4249c:	e0bff917 	ldw	r2,-28(fp)
   424a0:	e0bff815 	stw	r2,-32(fp)
            }
            nDirectoryIndex++;        
   424a4:	e0bff917 	ldw	r2,-28(fp)
   424a8:	10800044 	addi	r2,r2,1
   424ac:	e0bff915 	stw	r2,-28(fp)
   424b0:	00000106 	br	424b8 <fatFindUnusedDirectory+0xf0>
        }else{
                bDone = FALSE;
   424b4:	e03ffa15 	stw	zero,-24(fp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
   424b8:	e0bffa17 	ldw	r2,-24(fp)
   424bc:	103fce26 	beq	r2,zero,423f8 <_gp+0xffff008c>
        }else{
                bDone = FALSE;
        }
    }             
    
    return Dir;      
   424c0:	e0bff817 	ldw	r2,-32(fp)
}
   424c4:	e037883a 	mov	sp,fp
   424c8:	dfc00117 	ldw	ra,4(sp)
   424cc:	df000017 	ldw	fp,0(sp)
   424d0:	dec00204 	addi	sp,sp,8
   424d4:	f800283a 	ret

000424d8 <fatMount>:

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
   424d8:	deff7604 	addi	sp,sp,-552
   424dc:	dfc08915 	stw	ra,548(sp)
   424e0:	df008815 	stw	fp,544(sp)
   424e4:	dc008715 	stw	r16,540(sp)
   424e8:	df008804 	addi	fp,sp,544
   424ec:	e13ffe15 	stw	r4,-8(fp)
    bool bSuccess = TRUE;
   424f0:	00800044 	movi	r2,1
   424f4:	e0bf7815 	stw	r2,-544(fp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
   424f8:	e0bffe17 	ldw	r2,-8(fp)
   424fc:	10800117 	ldw	r2,4(r2)
   42500:	e0fffe17 	ldw	r3,-8(fp)
   42504:	18c00017 	ldw	r3,0(r3)
   42508:	e13f7e04 	addi	r4,fp,-520
   4250c:	200d883a 	mov	r6,r4
   42510:	000b883a 	mov	r5,zero
   42514:	1809883a 	mov	r4,r3
   42518:	103ee83a 	callr	r2
   4251c:	1000021e 	bne	r2,zero,42528 <fatMount+0x50>
    //if (!pVol->ReadBlock512(pVol->DiskHandle, 8192, szBlock)){
        FAT_DEBUG(("Read section 0 error.\n"));
        return FALSE;
   42520:	0005883a 	mov	r2,zero
   42524:	0000b406 	br	427f8 <fatMount+0x320>
        return FALSE;
    }
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
   42528:	00806f84 	movi	r2,446
   4252c:	e0bf7915 	stw	r2,-540(fp)
    PartitionType = szBlock[FirstPartitionEntry + 4];
   42530:	e0bf7917 	ldw	r2,-540(fp)
   42534:	10800104 	addi	r2,r2,4
   42538:	e0ff7e04 	addi	r3,fp,-520
   4253c:	1885883a 	add	r2,r3,r2
   42540:	10800003 	ldbu	r2,0(r2)
   42544:	10803fcc 	andi	r2,r2,255
   42548:	e0bf7a15 	stw	r2,-536(fp)
    if (PartitionType == PARTITION_FAT16){
   4254c:	e0bf7a17 	ldw	r2,-536(fp)
   42550:	108001a0 	cmpeqi	r2,r2,6
   42554:	1000051e 	bne	r2,zero,4256c <fatMount+0x94>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
   42558:	e0bf7a17 	ldw	r2,-536(fp)
   4255c:	10800320 	cmpeqi	r2,r2,12
   42560:	1000021e 	bne	r2,zero,4256c <fatMount+0x94>
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
   42564:	0005883a 	mov	r2,zero
   42568:	0000a306 	br	427f8 <fatMount+0x320>
    }       
    pVol->Partition_Type = PartitionType; 
   4256c:	e0ff7a17 	ldw	r3,-536(fp)
   42570:	e0bffe17 	ldw	r2,-8(fp)
   42574:	10c00315 	stw	r3,12(r2)
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
   42578:	e0bf7917 	ldw	r2,-540(fp)
   4257c:	10800204 	addi	r2,r2,8
   42580:	e0ff7e04 	addi	r3,fp,-520
   42584:	1885883a 	add	r2,r3,r2
   42588:	01400104 	movi	r5,4
   4258c:	1009883a 	mov	r4,r2
   42590:	00422040 	call	42204 <fatArray2Value>
   42594:	e0bf7b15 	stw	r2,-532(fp)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
   42598:	e0bffe17 	ldw	r2,-8(fp)
   4259c:	10800117 	ldw	r2,4(r2)
   425a0:	e0fffe17 	ldw	r3,-8(fp)
   425a4:	18c00017 	ldw	r3,0(r3)
   425a8:	e13f7b17 	ldw	r4,-532(fp)
   425ac:	e17f7e04 	addi	r5,fp,-520
   425b0:	280d883a 	mov	r6,r5
   425b4:	200b883a 	mov	r5,r4
   425b8:	1809883a 	mov	r4,r3
   425bc:	103ee83a 	callr	r2
   425c0:	1000021e 	bne	r2,zero,425cc <fatMount+0xf4>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
   425c4:	0005883a 	mov	r2,zero
   425c8:	00008b06 	br	427f8 <fatMount+0x320>
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
   425cc:	e0ff7b17 	ldw	r3,-532(fp)
   425d0:	e0bffe17 	ldw	r2,-8(fp)
   425d4:	10c00515 	stw	r3,20(r2)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
   425d8:	e0bf8103 	ldbu	r2,-508(fp)
   425dc:	10803fcc 	andi	r2,r2,255
   425e0:	1006923a 	slli	r3,r2,8
   425e4:	e0bf80c3 	ldbu	r2,-509(fp)
   425e8:	10803fcc 	andi	r2,r2,255
   425ec:	1885883a 	add	r2,r3,r2
   425f0:	1007883a 	mov	r3,r2
   425f4:	e0bffe17 	ldw	r2,-8(fp)
   425f8:	10c00615 	stw	r3,24(r2)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
   425fc:	e0bf8143 	ldbu	r2,-507(fp)
   42600:	10c03fcc 	andi	r3,r2,255
   42604:	e0bffe17 	ldw	r2,-8(fp)
   42608:	10c00715 	stw	r3,28(r2)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
   4260c:	e0bf81c3 	ldbu	r2,-505(fp)
   42610:	10803fcc 	andi	r2,r2,255
   42614:	1006923a 	slli	r3,r2,8
   42618:	e0bf8183 	ldbu	r2,-506(fp)
   4261c:	10803fcc 	andi	r2,r2,255
   42620:	1885883a 	add	r2,r3,r2
   42624:	1007883a 	mov	r3,r2
   42628:	e0bffe17 	ldw	r2,-8(fp)
   4262c:	10c00815 	stw	r3,32(r2)
    pVol->BPB_NumFATs = szBlock[0x10];
   42630:	e0bf8203 	ldbu	r2,-504(fp)
   42634:	10c03fcc 	andi	r3,r2,255
   42638:	e0bffe17 	ldw	r2,-8(fp)
   4263c:	10c00915 	stw	r3,36(r2)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
   42640:	e0bf8283 	ldbu	r2,-502(fp)
   42644:	10803fcc 	andi	r2,r2,255
   42648:	1006923a 	slli	r3,r2,8
   4264c:	e0bf8243 	ldbu	r2,-503(fp)
   42650:	10803fcc 	andi	r2,r2,255
   42654:	1885883a 	add	r2,r3,r2
   42658:	1007883a 	mov	r3,r2
   4265c:	e0bffe17 	ldw	r2,-8(fp)
   42660:	10c00a15 	stw	r3,40(r2)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
   42664:	e0bf83c3 	ldbu	r2,-497(fp)
   42668:	10803fcc 	andi	r2,r2,255
   4266c:	1006923a 	slli	r3,r2,8
   42670:	e0bf8383 	ldbu	r2,-498(fp)
   42674:	10803fcc 	andi	r2,r2,255
   42678:	1885883a 	add	r2,r3,r2
   4267c:	1007883a 	mov	r3,r2
   42680:	e0bffe17 	ldw	r2,-8(fp)
   42684:	10c00b15 	stw	r3,44(r2)
    
    // add for v2.0
    pVol->Secter_Index = -1;
   42688:	e0bffe17 	ldw	r2,-8(fp)
   4268c:	00ffffc4 	movi	r3,-1
   42690:	10c09015 	stw	r3,576(r2)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
   42694:	e0bffe17 	ldw	r2,-8(fp)
   42698:	10801004 	addi	r2,r2,64
   4269c:	01808004 	movi	r6,512
   426a0:	000b883a 	mov	r5,zero
   426a4:	1009883a 	mov	r4,r2
   426a8:	0046b000 	call	46b00 <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
   426ac:	e0bffe17 	ldw	r2,-8(fp)
   426b0:	10800317 	ldw	r2,12(r2)
   426b4:	10800318 	cmpnei	r2,r2,12
   426b8:	1000081e 	bne	r2,zero,426dc <fatMount+0x204>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
   426bc:	e0bf7e04 	addi	r2,fp,-520
   426c0:	10800904 	addi	r2,r2,36
   426c4:	01400104 	movi	r5,4
   426c8:	1009883a 	mov	r4,r2
   426cc:	00422040 	call	42204 <fatArray2Value>
   426d0:	1007883a 	mov	r3,r2
   426d4:	e0bffe17 	ldw	r2,-8(fp)
   426d8:	10c00b15 	stw	r3,44(r2)
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
   426dc:	e0bffe17 	ldw	r2,-8(fp)
   426e0:	10800617 	ldw	r2,24(r2)
   426e4:	10808020 	cmpeqi	r2,r2,512
   426e8:	1000021e 	bne	r2,zero,426f4 <fatMount+0x21c>
        FAT_DEBUG(("This program only supports FAT BPB_BytsPerSec == %d\n", MY_SECTER_SIZE));
        return FALSE; // only support FAT16 in this example
   426ec:	0005883a 	mov	r2,zero
   426f0:	00004106 	br	427f8 <fatMount+0x320>
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", gVolumeInfo.BPB_NumFATs, gVolumeInfo.BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", gVolumeInfo.BPB_RootEntCnt, gVolumeInfo.BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
   426f4:	e0bffe17 	ldw	r2,-8(fp)
   426f8:	10c00517 	ldw	r3,20(r2)
   426fc:	e0bffe17 	ldw	r2,-8(fp)
   42700:	10800817 	ldw	r2,32(r2)
   42704:	1887883a 	add	r3,r3,r2
   42708:	e0bffe17 	ldw	r2,-8(fp)
   4270c:	10c00d15 	stw	r3,52(r2)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
   42710:	e0bffe17 	ldw	r2,-8(fp)
   42714:	14000d17 	ldw	r16,52(r2)
   42718:	e0bffe17 	ldw	r2,-8(fp)
   4271c:	10c00917 	ldw	r3,36(r2)
   42720:	e0bffe17 	ldw	r2,-8(fp)
   42724:	10800b17 	ldw	r2,44(r2)
   42728:	100b883a 	mov	r5,r2
   4272c:	1809883a 	mov	r4,r3
   42730:	004543c0 	call	4543c <__mulsi3>
   42734:	8087883a 	add	r3,r16,r2
   42738:	e0bffe17 	ldw	r2,-8(fp)
   4273c:	10c00e15 	stw	r3,56(r2)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
   42740:	e0bffe17 	ldw	r2,-8(fp)
   42744:	14000e17 	ldw	r16,56(r2)
   42748:	e0bffe17 	ldw	r2,-8(fp)
   4274c:	10800a17 	ldw	r2,40(r2)
   42750:	1006917a 	slli	r3,r2,5
   42754:	e0bffe17 	ldw	r2,-8(fp)
   42758:	10800617 	ldw	r2,24(r2)
   4275c:	1885883a 	add	r2,r3,r2
   42760:	10ffffc4 	addi	r3,r2,-1
   42764:	e0bffe17 	ldw	r2,-8(fp)
   42768:	10800617 	ldw	r2,24(r2)
   4276c:	100b883a 	mov	r5,r2
   42770:	1809883a 	mov	r4,r3
   42774:	00453800 	call	45380 <__udivsi3>
   42778:	8087883a 	add	r3,r16,r2
   4277c:	e0bffe17 	ldw	r2,-8(fp)
   42780:	10c00f15 	stw	r3,60(r2)
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
   42784:	e0bffe17 	ldw	r2,-8(fp)
   42788:	10c00617 	ldw	r3,24(r2)
   4278c:	e0bffe17 	ldw	r2,-8(fp)
   42790:	10800717 	ldw	r2,28(r2)
   42794:	100b883a 	mov	r5,r2
   42798:	1809883a 	mov	r4,r3
   4279c:	004543c0 	call	4543c <__mulsi3>
   427a0:	1007883a 	mov	r3,r2
   427a4:	e0bffe17 	ldw	r2,-8(fp)
   427a8:	10c00c15 	stw	r3,48(r2)
    nFatTableSecterNum = pVol->BPB_NumFATs * pVol->BPB_FATSz;
   427ac:	e0bffe17 	ldw	r2,-8(fp)
   427b0:	10c00917 	ldw	r3,36(r2)
   427b4:	e0bffe17 	ldw	r2,-8(fp)
   427b8:	10800b17 	ldw	r2,44(r2)
   427bc:	100b883a 	mov	r5,r2
   427c0:	1809883a 	mov	r4,r3
   427c4:	004543c0 	call	4543c <__mulsi3>
   427c8:	e0bf7c15 	stw	r2,-528(fp)
    nFatTableSize = nFatTableSecterNum * pVol->BPB_BytsPerSec;
   427cc:	e0bffe17 	ldw	r2,-8(fp)
   427d0:	10800617 	ldw	r2,24(r2)
   427d4:	e0ff7c17 	ldw	r3,-528(fp)
   427d8:	180b883a 	mov	r5,r3
   427dc:	1009883a 	mov	r4,r2
   427e0:	004543c0 	call	4543c <__mulsi3>
   427e4:	e0bf7d15 	stw	r2,-524(fp)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
   427e8:	e0bffe17 	ldw	r2,-8(fp)
   427ec:	e0ff7817 	ldw	r3,-544(fp)
   427f0:	10c00415 	stw	r3,16(r2)
    return bSuccess;   
   427f4:	e0bf7817 	ldw	r2,-544(fp)
    

}
   427f8:	e6ffff04 	addi	sp,fp,-4
   427fc:	dfc00217 	ldw	ra,8(sp)
   42800:	df000117 	ldw	fp,4(sp)
   42804:	dc000017 	ldw	r16,0(sp)
   42808:	dec00304 	addi	sp,sp,12
   4280c:	f800283a 	ret

00042810 <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
   42810:	defffb04 	addi	sp,sp,-20
   42814:	dfc00415 	stw	ra,16(sp)
   42818:	df000315 	stw	fp,12(sp)
   4281c:	df000304 	addi	fp,sp,12
   42820:	e13ffd15 	stw	r4,-12(fp)
   42824:	e17ffe15 	stw	r5,-8(fp)
   42828:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
   4282c:	e17fff17 	ldw	r5,-4(fp)
   42830:	e13ffe17 	ldw	r4,-8(fp)
   42834:	0043a680 	call	43a68 <SDLIB_ReadBlock512>
}
   42838:	e037883a 	mov	sp,fp
   4283c:	dfc00117 	ldw	ra,4(sp)
   42840:	df000017 	ldw	fp,0(sp)
   42844:	dec00204 	addi	sp,sp,8
   42848:	f800283a 	ret

0004284c <SD_WriteBlock512>:

bool SD_WriteBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
   4284c:	defffb04 	addi	sp,sp,-20
   42850:	dfc00415 	stw	ra,16(sp)
   42854:	df000315 	stw	fp,12(sp)
   42858:	df000304 	addi	fp,sp,12
   4285c:	e13ffd15 	stw	r4,-12(fp)
   42860:	e17ffe15 	stw	r5,-8(fp)
   42864:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_WriteBlock512(PysicalSelector, szBuf);
   42868:	e17fff17 	ldw	r5,-4(fp)
   4286c:	e13ffe17 	ldw	r4,-8(fp)
   42870:	0043b5c0 	call	43b5c <SDLIB_WriteBlock512>
}
   42874:	e037883a 	mov	sp,fp
   42878:	dfc00117 	ldw	ra,4(sp)
   4287c:	df000017 	ldw	fp,0(sp)
   42880:	dec00204 	addi	sp,sp,8
   42884:	f800283a 	ret

00042888 <fatMountSdcard>:

FAT_HANDLE fatMountSdcard(void){
   42888:	defff804 	addi	sp,sp,-32
   4288c:	dfc00715 	stw	ra,28(sp)
   42890:	df000615 	stw	fp,24(sp)
   42894:	df000604 	addi	fp,sp,24
    FAT_HANDLE hFat = 0;
   42898:	e03ffa15 	stw	zero,-24(fp)
    VOLUME_INFO *pVol;
    const int nMaxTry=10;
   4289c:	00800284 	movi	r2,10
   428a0:	e0bffd15 	stw	r2,-12(fp)
    bool bFind = FALSE;
   428a4:	e03ffb15 	stw	zero,-20(fp)
    int nTry=0;
   428a8:	e03ffc15 	stw	zero,-16(fp)
    bool bSuccess = TRUE;
   428ac:	00800044 	movi	r2,1
   428b0:	e0bffe15 	stw	r2,-8(fp)
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
   428b4:	00000706 	br	428d4 <fatMountSdcard+0x4c>
        bFind = SDLIB_Init();
   428b8:	004374c0 	call	4374c <SDLIB_Init>
   428bc:	e0bffb15 	stw	r2,-20(fp)
        if (!bFind)
   428c0:	e0bffb17 	ldw	r2,-20(fp)
   428c4:	1000031e 	bne	r2,zero,428d4 <fatMountSdcard+0x4c>
            usleep(100*1000);
   428c8:	010000b4 	movhi	r4,2
   428cc:	2121a804 	addi	r4,r4,-31072
   428d0:	00483040 	call	48304 <usleep>
    int nTry=0;
    bool bSuccess = TRUE;
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
   428d4:	e0bffb17 	ldw	r2,-20(fp)
   428d8:	1000051e 	bne	r2,zero,428f0 <fatMountSdcard+0x68>
   428dc:	e0bffc17 	ldw	r2,-16(fp)
   428e0:	10c00044 	addi	r3,r2,1
   428e4:	e0fffc15 	stw	r3,-16(fp)
   428e8:	e0fffd17 	ldw	r3,-12(fp)
   428ec:	10fff216 	blt	r2,r3,428b8 <_gp+0xffff054c>
        bFind = SDLIB_Init();
        if (!bFind)
            usleep(100*1000);
    }
    if (!bFind){
   428f0:	e0bffb17 	ldw	r2,-20(fp)
   428f4:	1000021e 	bne	r2,zero,42900 <fatMountSdcard+0x78>
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
   428f8:	e0bffa17 	ldw	r2,-24(fp)
   428fc:	00001a06 	br	42968 <fatMountSdcard+0xe0>
    }    
    
    hFat = malloc(sizeof(VOLUME_INFO));
   42900:	01009104 	movi	r4,580
   42904:	0046ab00 	call	46ab0 <malloc>
   42908:	e0bffa15 	stw	r2,-24(fp)
    pVol = (VOLUME_INFO *)hFat;
   4290c:	e0bffa17 	ldw	r2,-24(fp)
   42910:	e0bfff15 	stw	r2,-4(fp)
    pVol->ReadBlock512 = SD_ReadBlock512;
   42914:	e0ffff17 	ldw	r3,-4(fp)
   42918:	00800134 	movhi	r2,4
   4291c:	108a0404 	addi	r2,r2,10256
   42920:	18800115 	stw	r2,4(r3)
    pVol->WriteBlock512 = SD_WriteBlock512;
   42924:	e0ffff17 	ldw	r3,-4(fp)
   42928:	00800134 	movhi	r2,4
   4292c:	108a1304 	addi	r2,r2,10316
   42930:	18800215 	stw	r2,8(r3)
    bSuccess = fatMount(pVol);
   42934:	e13fff17 	ldw	r4,-4(fp)
   42938:	00424d80 	call	424d8 <fatMount>
   4293c:	e0bffe15 	stw	r2,-8(fp)
        
    
  
    if (bSuccess){
   42940:	e0bffe17 	ldw	r2,-8(fp)
   42944:	10000426 	beq	r2,zero,42958 <fatMountSdcard+0xd0>
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
   42948:	e0bfff17 	ldw	r2,-4(fp)
   4294c:	00c00044 	movi	r3,1
   42950:	10c00415 	stw	r3,16(r2)
   42954:	00000306 	br	42964 <fatMountSdcard+0xdc>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
        free((void *)hFat);
   42958:	e13ffa17 	ldw	r4,-24(fp)
   4295c:	0046ac40 	call	46ac4 <free>
        hFat = 0;
   42960:	e03ffa15 	stw	zero,-24(fp)
    }        

    return hFat;   
   42964:	e0bffa17 	ldw	r2,-24(fp)
}
   42968:	e037883a 	mov	sp,fp
   4296c:	dfc00117 	ldw	ra,4(sp)
   42970:	df000017 	ldw	fp,0(sp)
   42974:	dec00204 	addi	sp,sp,8
   42978:	f800283a 	ret

0004297c <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
   4297c:	defffd04 	addi	sp,sp,-12
   42980:	dfc00215 	stw	ra,8(sp)
   42984:	df000115 	stw	fp,4(sp)
   42988:	df000104 	addi	fp,sp,4
   4298c:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
   42990:	e13fff17 	ldw	r4,-4(fp)
   42994:	0046d980 	call	46d98 <printf>
}
   42998:	0001883a 	nop
   4299c:	e037883a 	mov	sp,fp
   429a0:	dfc00117 	ldw	ra,4(sp)
   429a4:	df000017 	ldw	fp,0(sp)
   429a8:	dec00204 	addi	sp,sp,8
   429ac:	f800283a 	ret

000429b0 <myprintf>:





int myprintf(char *format, ...){
   429b0:	deff7804 	addi	sp,sp,-544
   429b4:	dfc08415 	stw	ra,528(sp)
   429b8:	df008315 	stw	fp,524(sp)
   429bc:	df008304 	addi	fp,sp,524
   429c0:	e13fff15 	stw	r4,-4(fp)
   429c4:	e1400215 	stw	r5,8(fp)
   429c8:	e1800315 	stw	r6,12(fp)
   429cc:	e1c00415 	stw	r7,16(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
   429d0:	e0800204 	addi	r2,fp,8
   429d4:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
   429d8:	e0fffe17 	ldw	r3,-8(fp)
   429dc:	e0bf7e04 	addi	r2,fp,-520
   429e0:	180f883a 	mov	r7,r3
   429e4:	e1bfff17 	ldw	r6,-4(fp)
   429e8:	01408004 	movi	r5,512
   429ec:	1009883a 	mov	r4,r2
   429f0:	0047c600 	call	47c60 <vsnprintf>
   429f4:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
   429f8:	e0bf7e04 	addi	r2,fp,-520
   429fc:	1009883a 	mov	r4,r2
   42a00:	004297c0 	call	4297c <debug_output>

    return rc;    
   42a04:	e0bf7d17 	ldw	r2,-524(fp)
}
   42a08:	e037883a 	mov	sp,fp
   42a0c:	dfc00117 	ldw	ra,4(sp)
   42a10:	df000017 	ldw	fp,0(sp)
   42a14:	dec00504 	addi	sp,sp,20
   42a18:	f800283a 	ret

00042a1c <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   42a1c:	defff704 	addi	sp,sp,-36
   42a20:	dfc00815 	stw	ra,32(sp)
   42a24:	df000715 	stw	fp,28(sp)
   42a28:	df000704 	addi	fp,sp,28
   42a2c:	e13ffe15 	stw	r4,-8(fp)
   42a30:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   42a34:	e03ff915 	stw	zero,-28(fp)
   42a38:	00001106 	br	42a80 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
   42a3c:	e0bff917 	ldw	r2,-28(fp)
   42a40:	e0fffe17 	ldw	r3,-8(fp)
   42a44:	1885883a 	add	r2,r3,r2
   42a48:	10800003 	ldbu	r2,0(r2)
   42a4c:	10c03fcc 	andi	r3,r2,255
   42a50:	e0bffa04 	addi	r2,fp,-24
   42a54:	180d883a 	mov	r6,r3
   42a58:	01400174 	movhi	r5,5
   42a5c:	29667604 	addi	r5,r5,-26152
   42a60:	1009883a 	mov	r4,r2
   42a64:	0046f500 	call	46f50 <sprintf>
        DEBUG((szText));
   42a68:	e0bffa04 	addi	r2,fp,-24
   42a6c:	1009883a 	mov	r4,r2
   42a70:	00429b00 	call	429b0 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   42a74:	e0bff917 	ldw	r2,-28(fp)
   42a78:	10800044 	addi	r2,r2,1
   42a7c:	e0bff915 	stw	r2,-28(fp)
   42a80:	e0fff917 	ldw	r3,-28(fp)
   42a84:	e0bfff17 	ldw	r2,-4(fp)
   42a88:	18bfec16 	blt	r3,r2,42a3c <_gp+0xffff06d0>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
   42a8c:	e0bfff17 	ldw	r2,-4(fp)
}
   42a90:	e037883a 	mov	sp,fp
   42a94:	dfc00117 	ldw	ra,4(sp)
   42a98:	df000017 	ldw	fp,0(sp)
   42a9c:	dec00204 	addi	sp,sp,8
   42aa0:	f800283a 	ret

00042aa4 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   42aa4:	defff704 	addi	sp,sp,-36
   42aa8:	dfc00815 	stw	ra,32(sp)
   42aac:	df000715 	stw	fp,28(sp)
   42ab0:	df000704 	addi	fp,sp,28
   42ab4:	e13ffe15 	stw	r4,-8(fp)
   42ab8:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   42abc:	e03ff915 	stw	zero,-28(fp)
   42ac0:	00001306 	br	42b10 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
   42ac4:	e0bff917 	ldw	r2,-28(fp)
   42ac8:	1085883a 	add	r2,r2,r2
   42acc:	1085883a 	add	r2,r2,r2
   42ad0:	1007883a 	mov	r3,r2
   42ad4:	e0bffe17 	ldw	r2,-8(fp)
   42ad8:	10c5883a 	add	r2,r2,r3
   42adc:	10c00017 	ldw	r3,0(r2)
   42ae0:	e0bffa04 	addi	r2,fp,-24
   42ae4:	180d883a 	mov	r6,r3
   42ae8:	01400174 	movhi	r5,5
   42aec:	29667804 	addi	r5,r5,-26144
   42af0:	1009883a 	mov	r4,r2
   42af4:	0046f500 	call	46f50 <sprintf>
        DEBUG((szText));
   42af8:	e0bffa04 	addi	r2,fp,-24
   42afc:	1009883a 	mov	r4,r2
   42b00:	00429b00 	call	429b0 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   42b04:	e0bff917 	ldw	r2,-28(fp)
   42b08:	10800044 	addi	r2,r2,1
   42b0c:	e0bff915 	stw	r2,-28(fp)
   42b10:	e0fff917 	ldw	r3,-28(fp)
   42b14:	e0bfff17 	ldw	r2,-4(fp)
   42b18:	18bfea16 	blt	r3,r2,42ac4 <_gp+0xffff0758>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
   42b1c:	e0bfff17 	ldw	r2,-4(fp)
}
   42b20:	e037883a 	mov	sp,fp
   42b24:	dfc00117 	ldw	ra,4(sp)
   42b28:	df000017 	ldw	fp,0(sp)
   42b2c:	dec00204 	addi	sp,sp,8
   42b30:	f800283a 	ret

00042b34 <crc16>:
    0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,
    0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
    0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
alt_u16 crc16(const alt_u8 *buffer, int len){
   42b34:	defffb04 	addi	sp,sp,-20
   42b38:	df000415 	stw	fp,16(sp)
   42b3c:	df000404 	addi	fp,sp,16
   42b40:	e13ffe15 	stw	r4,-8(fp)
   42b44:	e17fff15 	stw	r5,-4(fp)

    int counter;
    alt_u16 crc = 0;
   42b48:	e03ffd0d 	sth	zero,-12(fp)
    for( counter = 0; counter < len; counter++)
   42b4c:	e03ffc15 	stw	zero,-16(fp)
   42b50:	00001906 	br	42bb8 <crc16+0x84>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
   42b54:	e0bffd0b 	ldhu	r2,-12(fp)
   42b58:	1004923a 	slli	r2,r2,8
   42b5c:	100b883a 	mov	r5,r2
   42b60:	e0bffd0b 	ldhu	r2,-12(fp)
   42b64:	1004d23a 	srli	r2,r2,8
   42b68:	10ffffcc 	andi	r3,r2,65535
   42b6c:	e0bffe17 	ldw	r2,-8(fp)
   42b70:	11000044 	addi	r4,r2,1
   42b74:	e13ffe15 	stw	r4,-8(fp)
   42b78:	10800003 	ldbu	r2,0(r2)
   42b7c:	10803fcc 	andi	r2,r2,255
   42b80:	1080201c 	xori	r2,r2,128
   42b84:	10bfe004 	addi	r2,r2,-128
   42b88:	1884f03a 	xor	r2,r3,r2
   42b8c:	10c03fcc 	andi	r3,r2,255
   42b90:	00800174 	movhi	r2,5
   42b94:	10a67a04 	addi	r2,r2,-26136
   42b98:	18c7883a 	add	r3,r3,r3
   42b9c:	10c5883a 	add	r2,r2,r3
   42ba0:	1080000b 	ldhu	r2,0(r2)
   42ba4:	2884f03a 	xor	r2,r5,r2
   42ba8:	e0bffd0d 	sth	r2,-12(fp)
  
alt_u16 crc16(const alt_u8 *buffer, int len){

    int counter;
    alt_u16 crc = 0;
    for( counter = 0; counter < len; counter++)
   42bac:	e0bffc17 	ldw	r2,-16(fp)
   42bb0:	10800044 	addi	r2,r2,1
   42bb4:	e0bffc15 	stw	r2,-16(fp)
   42bb8:	e0fffc17 	ldw	r3,-16(fp)
   42bbc:	e0bfff17 	ldw	r2,-4(fp)
   42bc0:	18bfe416 	blt	r3,r2,42b54 <_gp+0xffff07e8>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
    return crc;
   42bc4:	e0bffd0b 	ldhu	r2,-12(fp)
}
   42bc8:	e037883a 	mov	sp,fp
   42bcc:	df000017 	ldw	fp,0(sp)
   42bd0:	dec00104 	addi	sp,sp,4
   42bd4:	f800283a 	ret

00042bd8 <crc7_byte>:
      0x0e, 0x07, 0x1c, 0x15, 0x2a, 0x23, 0x38, 0x31,
      0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

alt_u8 crc7_byte(alt_u8 crc, alt_u8 data)
{
   42bd8:	defffd04 	addi	sp,sp,-12
   42bdc:	df000215 	stw	fp,8(sp)
   42be0:	df000204 	addi	fp,sp,8
   42be4:	2007883a 	mov	r3,r4
   42be8:	2805883a 	mov	r2,r5
   42bec:	e0fffe05 	stb	r3,-8(fp)
   42bf0:	e0bfff05 	stb	r2,-4(fp)
        return crc7_syndrome_table[(crc << 1) ^ data];
   42bf4:	e0bffe03 	ldbu	r2,-8(fp)
   42bf8:	1085883a 	add	r2,r2,r2
   42bfc:	1007883a 	mov	r3,r2
   42c00:	e0bfff03 	ldbu	r2,-4(fp)
   42c04:	1886f03a 	xor	r3,r3,r2
   42c08:	00800174 	movhi	r2,5
   42c0c:	10a6fa04 	addi	r2,r2,-25624
   42c10:	10c5883a 	add	r2,r2,r3
   42c14:	10800003 	ldbu	r2,0(r2)
}
   42c18:	e037883a 	mov	sp,fp
   42c1c:	df000017 	ldw	fp,0(sp)
   42c20:	dec00104 	addi	sp,sp,4
   42c24:	f800283a 	ret

00042c28 <crc7>:
 * Context: any
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
   42c28:	defffb04 	addi	sp,sp,-20
   42c2c:	dfc00415 	stw	ra,16(sp)
   42c30:	df000315 	stw	fp,12(sp)
   42c34:	df000304 	addi	fp,sp,12
   42c38:	2005883a 	mov	r2,r4
   42c3c:	e17ffe15 	stw	r5,-8(fp)
   42c40:	e1bfff15 	stw	r6,-4(fp)
   42c44:	e0bffd05 	stb	r2,-12(fp)
      while (len--)
   42c48:	00000906 	br	42c70 <crc7+0x48>
            crc = crc7_byte(crc, *buffer++);
   42c4c:	e13ffd03 	ldbu	r4,-12(fp)
   42c50:	e0bffe17 	ldw	r2,-8(fp)
   42c54:	10c00044 	addi	r3,r2,1
   42c58:	e0fffe15 	stw	r3,-8(fp)
   42c5c:	10800003 	ldbu	r2,0(r2)
   42c60:	10803fcc 	andi	r2,r2,255
   42c64:	100b883a 	mov	r5,r2
   42c68:	0042bd80 	call	42bd8 <crc7_byte>
   42c6c:	e0bffd05 	stb	r2,-12(fp)
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
      while (len--)
   42c70:	e0bfff17 	ldw	r2,-4(fp)
   42c74:	10ffffc4 	addi	r3,r2,-1
   42c78:	e0ffff15 	stw	r3,-4(fp)
   42c7c:	103ff31e 	bne	r2,zero,42c4c <_gp+0xffff08e0>
            crc = crc7_byte(crc, *buffer++);
      return crc;
   42c80:	e0bffd03 	ldbu	r2,-12(fp)
}
   42c84:	e037883a 	mov	sp,fp
   42c88:	dfc00117 	ldw	ra,4(sp)
   42c8c:	df000017 	ldw	fp,0(sp)
   42c90:	dec00204 	addi	sp,sp,8
   42c94:	f800283a 	ret

00042c98 <SDHAL_IsSupport4Bits>:
#include "sd_hal.h"
#include "sd_hw.h"
#include "crc16.h"


bool SDHAL_IsSupport4Bits(void){
   42c98:	defffe04 	addi	sp,sp,-8
   42c9c:	df000115 	stw	fp,4(sp)
   42ca0:	df000104 	addi	fp,sp,4
    bool bYes = FALSE;
   42ca4:	e03fff15 	stw	zero,-4(fp)
#ifdef SD_4BIT_MODE
    bYes = TRUE;
   42ca8:	00800044 	movi	r2,1
   42cac:	e0bfff15 	stw	r2,-4(fp)
#endif    
    return bYes;
   42cb0:	e0bfff17 	ldw	r2,-4(fp)
}
   42cb4:	e037883a 	mov	sp,fp
   42cb8:	df000017 	ldw	fp,0(sp)
   42cbc:	dec00104 	addi	sp,sp,4
   42cc0:	f800283a 	ret

00042cc4 <SDHAL_Init>:

void SDHAL_Init(void){
   42cc4:	deffff04 	addi	sp,sp,-4
   42cc8:	df000015 	stw	fp,0(sp)
   42ccc:	d839883a 	mov	fp,sp
    SD_CMD_OUT;
   42cd0:	00c00044 	movi	r3,1
   42cd4:	00800234 	movhi	r2,8
   42cd8:	10840d04 	addi	r2,r2,4148
   42cdc:	10c00035 	stwio	r3,0(r2)
    SD_DAT_IN;
   42ce0:	0007883a 	mov	r3,zero
   42ce4:	00800234 	movhi	r2,8
   42ce8:	10840904 	addi	r2,r2,4132
   42cec:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   42cf0:	00c00044 	movi	r3,1
   42cf4:	00800234 	movhi	r2,8
   42cf8:	10841404 	addi	r2,r2,4176
   42cfc:	10c00035 	stwio	r3,0(r2)
    SD_CMD_HIGH;
   42d00:	00c00044 	movi	r3,1
   42d04:	00800234 	movhi	r2,8
   42d08:	10840c04 	addi	r2,r2,4144
   42d0c:	10c00035 	stwio	r3,0(r2)
    SD_DAT_LOW;    
   42d10:	0007883a 	mov	r3,zero
   42d14:	00800234 	movhi	r2,8
   42d18:	10840804 	addi	r2,r2,4128
   42d1c:	10c00035 	stwio	r3,0(r2)
}
   42d20:	0001883a 	nop
   42d24:	e037883a 	mov	sp,fp
   42d28:	df000017 	ldw	fp,0(sp)
   42d2c:	dec00104 	addi	sp,sp,4
   42d30:	f800283a 	ret

00042d34 <SDHAL_SendCmd>:

void SDHAL_SendCmd(alt_u8 szCommand[6], int nCmdLen){
   42d34:	defffa04 	addi	sp,sp,-24
   42d38:	df000515 	stw	fp,20(sp)
   42d3c:	df000504 	addi	fp,sp,20
   42d40:	e13ffe15 	stw	r4,-8(fp)
   42d44:	e17fff15 	stw	r5,-4(fp)

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
   42d48:	00c00044 	movi	r3,1
   42d4c:	00800234 	movhi	r2,8
   42d50:	10840d04 	addi	r2,r2,4148
   42d54:	10c00035 	stwio	r3,0(r2)
    for(i=0;i<nCmdLen;i++){
   42d58:	e03ffb15 	stw	zero,-20(fp)
   42d5c:	00002b06 	br	42e0c <SDHAL_SendCmd+0xd8>
        Mask = 0x80;
   42d60:	00bfe004 	movi	r2,-128
   42d64:	e0bffd05 	stb	r2,-12(fp)
        Data = szCommand[i];
   42d68:	e0bffb17 	ldw	r2,-20(fp)
   42d6c:	e0fffe17 	ldw	r3,-8(fp)
   42d70:	1885883a 	add	r2,r3,r2
   42d74:	10800003 	ldbu	r2,0(r2)
   42d78:	e0bffd45 	stb	r2,-11(fp)
        for(k=0;k<8;k++){
   42d7c:	e03ffc15 	stw	zero,-16(fp)
   42d80:	00001c06 	br	42df4 <SDHAL_SendCmd+0xc0>
            SD_CLK_LOW;
   42d84:	0007883a 	mov	r3,zero
   42d88:	00800234 	movhi	r2,8
   42d8c:	10841404 	addi	r2,r2,4176
   42d90:	10c00035 	stwio	r3,0(r2)
            if (Data & Mask)
   42d94:	e0fffd43 	ldbu	r3,-11(fp)
   42d98:	e0bffd03 	ldbu	r2,-12(fp)
   42d9c:	1884703a 	and	r2,r3,r2
   42da0:	10803fcc 	andi	r2,r2,255
   42da4:	10000526 	beq	r2,zero,42dbc <SDHAL_SendCmd+0x88>
                SD_CMD_HIGH;
   42da8:	00c00044 	movi	r3,1
   42dac:	00800234 	movhi	r2,8
   42db0:	10840c04 	addi	r2,r2,4144
   42db4:	10c00035 	stwio	r3,0(r2)
   42db8:	00000406 	br	42dcc <SDHAL_SendCmd+0x98>
            else
                SD_CMD_LOW;
   42dbc:	0007883a 	mov	r3,zero
   42dc0:	00800234 	movhi	r2,8
   42dc4:	10840c04 	addi	r2,r2,4144
   42dc8:	10c00035 	stwio	r3,0(r2)
            SD_CLK_HIGH;    
   42dcc:	00c00044 	movi	r3,1
   42dd0:	00800234 	movhi	r2,8
   42dd4:	10841404 	addi	r2,r2,4176
   42dd8:	10c00035 	stwio	r3,0(r2)
            //    
            Mask >>= 1;
   42ddc:	e0bffd03 	ldbu	r2,-12(fp)
   42de0:	1004d07a 	srli	r2,r2,1
   42de4:	e0bffd05 	stb	r2,-12(fp)
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
        Mask = 0x80;
        Data = szCommand[i];
        for(k=0;k<8;k++){
   42de8:	e0bffc17 	ldw	r2,-16(fp)
   42dec:	10800044 	addi	r2,r2,1
   42df0:	e0bffc15 	stw	r2,-16(fp)
   42df4:	e0bffc17 	ldw	r2,-16(fp)
   42df8:	10800210 	cmplti	r2,r2,8
   42dfc:	103fe11e 	bne	r2,zero,42d84 <_gp+0xffff0a18>

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
   42e00:	e0bffb17 	ldw	r2,-20(fp)
   42e04:	10800044 	addi	r2,r2,1
   42e08:	e0bffb15 	stw	r2,-20(fp)
   42e0c:	e0fffb17 	ldw	r3,-20(fp)
   42e10:	e0bfff17 	ldw	r2,-4(fp)
   42e14:	18bfd216 	blt	r3,r2,42d60 <_gp+0xffff09f4>
            //    
            Mask >>= 1;
           // usleep(1);
        }
    }
}
   42e18:	0001883a 	nop
   42e1c:	e037883a 	mov	sp,fp
   42e20:	df000017 	ldw	fp,0(sp)
   42e24:	dec00104 	addi	sp,sp,4
   42e28:	f800283a 	ret

00042e2c <SDHAL_GetResponse>:




bool SDHAL_GetResponse(alt_u8 szResponse[], int nLen){
   42e2c:	defff504 	addi	sp,sp,-44
   42e30:	dfc00a15 	stw	ra,40(sp)
   42e34:	df000915 	stw	fp,36(sp)
   42e38:	df000904 	addi	fp,sp,36
   42e3c:	e13ffe15 	stw	r4,-8(fp)
   42e40:	e17fff15 	stw	r5,-4(fp)
    bool bDone, bTimeout;
    const int nMaxCnt = 20; // !!!! Note. the value should be large than 8
   42e44:	00800504 	movi	r2,20
   42e48:	e0bffc15 	stw	r2,-16(fp)
    int nCnt, nBitCnt, nIndex;
    alt_u8 Value;
    

    SD_CMD_IN;
   42e4c:	0007883a 	mov	r3,zero
   42e50:	00800234 	movhi	r2,8
   42e54:	10840d04 	addi	r2,r2,4148
   42e58:	10c00035 	stwio	r3,0(r2)
    
    //===== check start bit == 0
    nCnt = 0;
   42e5c:	e03ff915 	stw	zero,-28(fp)
    bDone = FALSE;
   42e60:	e03ff715 	stw	zero,-36(fp)
    bTimeout = FALSE;
   42e64:	e03ff815 	stw	zero,-32(fp)
    while(!bDone && !bTimeout){
   42e68:	00001606 	br	42ec4 <SDHAL_GetResponse+0x98>
        SD_CLK_LOW;
   42e6c:	0007883a 	mov	r3,zero
   42e70:	00800234 	movhi	r2,8
   42e74:	10841404 	addi	r2,r2,4176
   42e78:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   42e7c:	00c00044 	movi	r3,1
   42e80:	00800234 	movhi	r2,8
   42e84:	10841404 	addi	r2,r2,4176
   42e88:	10c00035 	stwio	r3,0(r2)
        if(!(SD_TEST_CMD))
   42e8c:	00800234 	movhi	r2,8
   42e90:	10840c04 	addi	r2,r2,4144
   42e94:	10800037 	ldwio	r2,0(r2)
   42e98:	1000031e 	bne	r2,zero,42ea8 <SDHAL_GetResponse+0x7c>
            bDone = TRUE;
   42e9c:	00800044 	movi	r2,1
   42ea0:	e0bff715 	stw	r2,-36(fp)
   42ea4:	00000706 	br	42ec4 <SDHAL_GetResponse+0x98>
        else if(nCnt++ > nMaxCnt)
   42ea8:	e0bff917 	ldw	r2,-28(fp)
   42eac:	10c00044 	addi	r3,r2,1
   42eb0:	e0fff915 	stw	r3,-28(fp)
   42eb4:	e0fffc17 	ldw	r3,-16(fp)
   42eb8:	1880020e 	bge	r3,r2,42ec4 <SDHAL_GetResponse+0x98>
            bTimeout = TRUE;
   42ebc:	00800044 	movi	r2,1
   42ec0:	e0bff815 	stw	r2,-32(fp)
    
    //===== check start bit == 0
    nCnt = 0;
    bDone = FALSE;
    bTimeout = FALSE;
    while(!bDone && !bTimeout){
   42ec4:	e0bff717 	ldw	r2,-36(fp)
   42ec8:	1000021e 	bne	r2,zero,42ed4 <SDHAL_GetResponse+0xa8>
   42ecc:	e0bff817 	ldw	r2,-32(fp)
   42ed0:	103fe626 	beq	r2,zero,42e6c <_gp+0xffff0b00>
            bDone = TRUE;
        else if(nCnt++ > nMaxCnt)
            bTimeout = TRUE;
    }
    
    if (!bDone || bTimeout)
   42ed4:	e0bff717 	ldw	r2,-36(fp)
   42ed8:	10000226 	beq	r2,zero,42ee4 <SDHAL_GetResponse+0xb8>
   42edc:	e0bff817 	ldw	r2,-32(fp)
   42ee0:	10000226 	beq	r2,zero,42eec <SDHAL_GetResponse+0xc0>
        return FALSE;
   42ee4:	0005883a 	mov	r2,zero
   42ee8:	00005006 	br	4302c <SDHAL_GetResponse+0x200>
  
    //===== check transmitter bit == 0

    SD_CLK_LOW;
   42eec:	0007883a 	mov	r3,zero
   42ef0:	00800234 	movhi	r2,8
   42ef4:	10841404 	addi	r2,r2,4176
   42ef8:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   42efc:	00c00044 	movi	r3,1
   42f00:	00800234 	movhi	r2,8
   42f04:	10841404 	addi	r2,r2,4176
   42f08:	10c00035 	stwio	r3,0(r2)
    if (SD_TEST_CMD)
   42f0c:	00800234 	movhi	r2,8
   42f10:	10840c04 	addi	r2,r2,4144
   42f14:	10800037 	ldwio	r2,0(r2)
   42f18:	10000226 	beq	r2,zero,42f24 <SDHAL_GetResponse+0xf8>
        return FALSE;   // 0 is expected
   42f1c:	0005883a 	mov	r2,zero
   42f20:	00004206 	br	4302c <SDHAL_GetResponse+0x200>

    
    //===== read content + CRC + end-bits ======
    nIndex = 2;
   42f24:	00800084 	movi	r2,2
   42f28:	e0bffa15 	stw	r2,-24(fp)
    nBitCnt = nLen*8;
   42f2c:	e0bfff17 	ldw	r2,-4(fp)
   42f30:	100490fa 	slli	r2,r2,3
   42f34:	e0bffd15 	stw	r2,-12(fp)
    bDone = FALSE;
   42f38:	e03ff715 	stw	zero,-36(fp)
    Value = 0;
   42f3c:	e03ffb05 	stb	zero,-20(fp)
    while(nIndex < nBitCnt){
   42f40:	00003406 	br	43014 <SDHAL_GetResponse+0x1e8>
        SD_CLK_LOW;
   42f44:	0007883a 	mov	r3,zero
   42f48:	00800234 	movhi	r2,8
   42f4c:	10841404 	addi	r2,r2,4176
   42f50:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   42f54:	00c00044 	movi	r3,1
   42f58:	00800234 	movhi	r2,8
   42f5c:	10841404 	addi	r2,r2,4176
   42f60:	10c00035 	stwio	r3,0(r2)
        if (SD_TEST_CMD){
   42f64:	00800234 	movhi	r2,8
   42f68:	10840c04 	addi	r2,r2,4144
   42f6c:	10800037 	ldwio	r2,0(r2)
   42f70:	10001026 	beq	r2,zero,42fb4 <SDHAL_GetResponse+0x188>
            Value |= 0x80 >> (nIndex % 8);
   42f74:	e0fffa17 	ldw	r3,-24(fp)
   42f78:	00a00034 	movhi	r2,32768
   42f7c:	108001c4 	addi	r2,r2,7
   42f80:	1884703a 	and	r2,r3,r2
   42f84:	1000040e 	bge	r2,zero,42f98 <SDHAL_GetResponse+0x16c>
   42f88:	10bfffc4 	addi	r2,r2,-1
   42f8c:	00fffe04 	movi	r3,-8
   42f90:	10c4b03a 	or	r2,r2,r3
   42f94:	10800044 	addi	r2,r2,1
   42f98:	1007883a 	mov	r3,r2
   42f9c:	00802004 	movi	r2,128
   42fa0:	10c5d83a 	sra	r2,r2,r3
   42fa4:	1007883a 	mov	r3,r2
   42fa8:	e0bffb03 	ldbu	r2,-20(fp)
   42fac:	1884b03a 	or	r2,r3,r2
   42fb0:	e0bffb05 	stb	r2,-20(fp)
        }
        if (nIndex%8 == 7){
   42fb4:	e0fffa17 	ldw	r3,-24(fp)
   42fb8:	00a00034 	movhi	r2,32768
   42fbc:	108001c4 	addi	r2,r2,7
   42fc0:	1884703a 	and	r2,r3,r2
   42fc4:	1000040e 	bge	r2,zero,42fd8 <SDHAL_GetResponse+0x1ac>
   42fc8:	10bfffc4 	addi	r2,r2,-1
   42fcc:	00fffe04 	movi	r3,-8
   42fd0:	10c4b03a 	or	r2,r2,r3
   42fd4:	10800044 	addi	r2,r2,1
   42fd8:	108001d8 	cmpnei	r2,r2,7
   42fdc:	10000a1e 	bne	r2,zero,43008 <SDHAL_GetResponse+0x1dc>
            szResponse[nIndex/8] = Value;
   42fe0:	e0bffa17 	ldw	r2,-24(fp)
   42fe4:	1000010e 	bge	r2,zero,42fec <SDHAL_GetResponse+0x1c0>
   42fe8:	108001c4 	addi	r2,r2,7
   42fec:	1005d0fa 	srai	r2,r2,3
   42ff0:	1007883a 	mov	r3,r2
   42ff4:	e0bffe17 	ldw	r2,-8(fp)
   42ff8:	10c5883a 	add	r2,r2,r3
   42ffc:	e0fffb03 	ldbu	r3,-20(fp)
   43000:	10c00005 	stb	r3,0(r2)
            Value = 0;
   43004:	e03ffb05 	stb	zero,-20(fp)
        }
        nIndex++;
   43008:	e0bffa17 	ldw	r2,-24(fp)
   4300c:	10800044 	addi	r2,r2,1
   43010:	e0bffa15 	stw	r2,-24(fp)
    //===== read content + CRC + end-bits ======
    nIndex = 2;
    nBitCnt = nLen*8;
    bDone = FALSE;
    Value = 0;
    while(nIndex < nBitCnt){
   43014:	e0fffa17 	ldw	r3,-24(fp)
   43018:	e0bffd17 	ldw	r2,-12(fp)
   4301c:	18bfc916 	blt	r3,r2,42f44 <_gp+0xffff0bd8>
        }
        nIndex++;
    } 
    
    // A command with response. 8 clocks after the card response end bit.
    SDHAL_DummyClock(8);
   43020:	01000204 	movi	r4,8
   43024:	00436e80 	call	436e8 <SDHAL_DummyClock>
    
    return TRUE;
   43028:	00800044 	movi	r2,1
}
   4302c:	e037883a 	mov	sp,fp
   43030:	dfc00117 	ldw	ra,4(sp)
   43034:	df000017 	ldw	fp,0(sp)
   43038:	dec00204 	addi	sp,sp,8
   4303c:	f800283a 	ret

00043040 <SDHAL_ReadData>:


bool SDHAL_ReadData(alt_u8 szBuf[], int nBufLen){
   43040:	deff6e04 	addi	sp,sp,-584
   43044:	dfc09115 	stw	ra,580(sp)
   43048:	df009015 	stw	fp,576(sp)
   4304c:	df009004 	addi	fp,sp,576
   43050:	e13ffe15 	stw	r4,-8(fp)
   43054:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
   43058:	00800044 	movi	r2,1
   4305c:	e0bf7015 	stw	r2,-576(fp)
    int nTry = 0;
   43060:	e03f7115 	stw	zero,-572(fp)
    const int nMaxTry = 5000; 
   43064:	0084e204 	movi	r2,5000
   43068:	e0bf7a15 	stw	r2,-536(fp)
    int i, j,k,n=0;   
   4306c:	e03f7515 	stw	zero,-556(fp)
    
    alt_u8 Data8_0,Data8_1,Data8_2,Data8_3;
    
#endif    
    
    SD_DAT_IN;
   43070:	0007883a 	mov	r3,zero
   43074:	00800234 	movhi	r2,8
   43078:	10840904 	addi	r2,r2,4132
   4307c:	10c00035 	stwio	r3,0(r2)
    
    // wait start bits (zero)
    while(1){
      SD_CLK_LOW;
   43080:	0007883a 	mov	r3,zero
   43084:	00800234 	movhi	r2,8
   43088:	10841404 	addi	r2,r2,4176
   4308c:	10c00035 	stwio	r3,0(r2)
      SD_CLK_HIGH;
   43090:	00c00044 	movi	r3,1
   43094:	00800234 	movhi	r2,8
   43098:	10841404 	addi	r2,r2,4176
   4309c:	10c00035 	stwio	r3,0(r2)
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
   430a0:	00800234 	movhi	r2,8
   430a4:	10840804 	addi	r2,r2,4128
   430a8:	10800037 	ldwio	r2,0(r2)
   430ac:	108003cc 	andi	r2,r2,15
   430b0:	10000726 	beq	r2,zero,430d0 <SDHAL_ReadData+0x90>
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
      if (nTry++ > nMaxTry)
   430b4:	e0bf7117 	ldw	r2,-572(fp)
   430b8:	10c00044 	addi	r3,r2,1
   430bc:	e0ff7115 	stw	r3,-572(fp)
   430c0:	e0ff7a17 	ldw	r3,-536(fp)
   430c4:	18bfee0e 	bge	r3,r2,43080 <_gp+0xffff0d14>
        return FALSE;        
   430c8:	0005883a 	mov	r2,zero
   430cc:	00010906 	br	434f4 <SDHAL_ReadData+0x4b4>
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
   430d0:	0001883a 	nop
    }     
    
    // read data (512byte = 1 block)
    
#ifdef SD_4BIT_MODE
     for(i=0;i<nBufLen/4;i++)
   430d4:	e03f7215 	stw	zero,-568(fp)
   430d8:	00007106 	br	432a0 <SDHAL_ReadData+0x260>
     {
        k = 0;
   430dc:	e03f7415 	stw	zero,-560(fp)
        Data8   = 0;
   430e0:	e03f7605 	stb	zero,-552(fp)
        Data8_0 = 0;
   430e4:	e03f7885 	stb	zero,-542(fp)
        Data8_1 = 0;
   430e8:	e03f78c5 	stb	zero,-541(fp)
        Data8_2 = 0;
   430ec:	e03f7905 	stb	zero,-540(fp)
        Data8_3 = 0;
   430f0:	e03f7945 	stb	zero,-539(fp)
        
        for(j=0;j<8;j++)
   430f4:	e03f7315 	stw	zero,-564(fp)
   430f8:	00004f06 	br	43238 <SDHAL_ReadData+0x1f8>
        {
          SD_CLK_LOW;
   430fc:	0007883a 	mov	r3,zero
   43100:	00800234 	movhi	r2,8
   43104:	10841404 	addi	r2,r2,4176
   43108:	10c00035 	stwio	r3,0(r2)
          SD_CLK_HIGH;
   4310c:	00c00044 	movi	r3,1
   43110:	00800234 	movhi	r2,8
   43114:	10841404 	addi	r2,r2,4176
   43118:	10c00035 	stwio	r3,0(r2)
          Data8   <<= 4;
   4311c:	e0bf7603 	ldbu	r2,-552(fp)
   43120:	1004913a 	slli	r2,r2,4
   43124:	e0bf7605 	stb	r2,-552(fp)
          Data8_0 <<= 1;
   43128:	e0bf7883 	ldbu	r2,-542(fp)
   4312c:	1085883a 	add	r2,r2,r2
   43130:	e0bf7885 	stb	r2,-542(fp)
          Data8_1 <<= 1;
   43134:	e0bf78c3 	ldbu	r2,-541(fp)
   43138:	1085883a 	add	r2,r2,r2
   4313c:	e0bf78c5 	stb	r2,-541(fp)
          Data8_2 <<= 1;
   43140:	e0bf7903 	ldbu	r2,-540(fp)
   43144:	1085883a 	add	r2,r2,r2
   43148:	e0bf7905 	stb	r2,-540(fp)
          Data8_3 <<= 1; 
   4314c:	e0bf7943 	ldbu	r2,-539(fp)
   43150:	1085883a 	add	r2,r2,r2
   43154:	e0bf7945 	stb	r2,-539(fp)
          
          DataTemp = SD_TEST_DAT;
   43158:	00800234 	movhi	r2,8
   4315c:	10840804 	addi	r2,r2,4128
   43160:	10800037 	ldwio	r2,0(r2)
   43164:	e0bf7b05 	stb	r2,-532(fp)
          Data8   |= (DataTemp & 0x0F);
   43168:	e0bf7b03 	ldbu	r2,-532(fp)
   4316c:	108003cc 	andi	r2,r2,15
   43170:	1007883a 	mov	r3,r2
   43174:	e0bf7603 	ldbu	r2,-552(fp)
   43178:	1884b03a 	or	r2,r3,r2
   4317c:	e0bf7605 	stb	r2,-552(fp)
          Data8_0 |= (DataTemp & 0x01);
   43180:	e0bf7b03 	ldbu	r2,-532(fp)
   43184:	1080004c 	andi	r2,r2,1
   43188:	1007883a 	mov	r3,r2
   4318c:	e0bf7883 	ldbu	r2,-542(fp)
   43190:	1884b03a 	or	r2,r3,r2
   43194:	e0bf7885 	stb	r2,-542(fp)
          Data8_1 |= ((DataTemp >> 1) & 0x01);
   43198:	e0bf7b03 	ldbu	r2,-532(fp)
   4319c:	1004d07a 	srli	r2,r2,1
   431a0:	1080004c 	andi	r2,r2,1
   431a4:	1007883a 	mov	r3,r2
   431a8:	e0bf78c3 	ldbu	r2,-541(fp)
   431ac:	1884b03a 	or	r2,r3,r2
   431b0:	e0bf78c5 	stb	r2,-541(fp)
          Data8_2 |= ((DataTemp >> 2) & 0x01);
   431b4:	e0bf7b03 	ldbu	r2,-532(fp)
   431b8:	1004d0ba 	srli	r2,r2,2
   431bc:	1080004c 	andi	r2,r2,1
   431c0:	1007883a 	mov	r3,r2
   431c4:	e0bf7903 	ldbu	r2,-540(fp)
   431c8:	1884b03a 	or	r2,r3,r2
   431cc:	e0bf7905 	stb	r2,-540(fp)
          Data8_3 |= ((DataTemp >> 3) & 0x01);
   431d0:	e0bf7b03 	ldbu	r2,-532(fp)
   431d4:	1004d0fa 	srli	r2,r2,3
   431d8:	1080004c 	andi	r2,r2,1
   431dc:	1007883a 	mov	r3,r2
   431e0:	e0bf7943 	ldbu	r2,-539(fp)
   431e4:	1884b03a 	or	r2,r3,r2
   431e8:	e0bf7945 	stb	r2,-539(fp)
          
          k++;
   431ec:	e0bf7417 	ldw	r2,-560(fp)
   431f0:	10800044 	addi	r2,r2,1
   431f4:	e0bf7415 	stw	r2,-560(fp)
          if(k == 2)
   431f8:	e0bf7417 	ldw	r2,-560(fp)
   431fc:	10800098 	cmpnei	r2,r2,2
   43200:	10000a1e 	bne	r2,zero,4322c <SDHAL_ReadData+0x1ec>
          {
            szBuf[n++] = Data8;
   43204:	e0bf7517 	ldw	r2,-556(fp)
   43208:	10c00044 	addi	r3,r2,1
   4320c:	e0ff7515 	stw	r3,-556(fp)
   43210:	1007883a 	mov	r3,r2
   43214:	e0bffe17 	ldw	r2,-8(fp)
   43218:	10c5883a 	add	r2,r2,r3
   4321c:	e0ff7603 	ldbu	r3,-552(fp)
   43220:	10c00005 	stb	r3,0(r2)
            Data8 = 0;
   43224:	e03f7605 	stb	zero,-552(fp)
            k = 0;
   43228:	e03f7415 	stw	zero,-560(fp)
        Data8_0 = 0;
        Data8_1 = 0;
        Data8_2 = 0;
        Data8_3 = 0;
        
        for(j=0;j<8;j++)
   4322c:	e0bf7317 	ldw	r2,-564(fp)
   43230:	10800044 	addi	r2,r2,1
   43234:	e0bf7315 	stw	r2,-564(fp)
   43238:	e0bf7317 	ldw	r2,-564(fp)
   4323c:	10800210 	cmplti	r2,r2,8
   43240:	103fae1e 	bne	r2,zero,430fc <_gp+0xffff0d90>
            szBuf[n++] = Data8;
            Data8 = 0;
            k = 0;
          }
        } 
        szBuf_0[i] = Data8_0;
   43244:	e0ff7d84 	addi	r3,fp,-522
   43248:	e0bf7217 	ldw	r2,-568(fp)
   4324c:	1885883a 	add	r2,r3,r2
   43250:	e0ff7883 	ldbu	r3,-542(fp)
   43254:	10c00005 	stb	r3,0(r2)
        szBuf_1[i] = Data8_1;
   43258:	e0ff9d84 	addi	r3,fp,-394
   4325c:	e0bf7217 	ldw	r2,-568(fp)
   43260:	1885883a 	add	r2,r3,r2
   43264:	e0ff78c3 	ldbu	r3,-541(fp)
   43268:	10c00005 	stb	r3,0(r2)
        szBuf_2[i] = Data8_2;
   4326c:	e0ffbd84 	addi	r3,fp,-266
   43270:	e0bf7217 	ldw	r2,-568(fp)
   43274:	1885883a 	add	r2,r3,r2
   43278:	e0ff7903 	ldbu	r3,-540(fp)
   4327c:	10c00005 	stb	r3,0(r2)
        szBuf_3[i] = Data8_3;
   43280:	e0ffdd84 	addi	r3,fp,-138
   43284:	e0bf7217 	ldw	r2,-568(fp)
   43288:	1885883a 	add	r2,r3,r2
   4328c:	e0ff7943 	ldbu	r3,-539(fp)
   43290:	10c00005 	stb	r3,0(r2)
    }     
    
    // read data (512byte = 1 block)
    
#ifdef SD_4BIT_MODE
     for(i=0;i<nBufLen/4;i++)
   43294:	e0bf7217 	ldw	r2,-568(fp)
   43298:	10800044 	addi	r2,r2,1
   4329c:	e0bf7215 	stw	r2,-568(fp)
   432a0:	e0bfff17 	ldw	r2,-4(fp)
   432a4:	1000010e 	bge	r2,zero,432ac <SDHAL_ReadData+0x26c>
   432a8:	108000c4 	addi	r2,r2,3
   432ac:	1005d0ba 	srai	r2,r2,2
   432b0:	1007883a 	mov	r3,r2
   432b4:	e0bf7217 	ldw	r2,-568(fp)
   432b8:	10ff8816 	blt	r2,r3,430dc <_gp+0xffff0d70>
#endif

    //===== CRC16 and end-bit check (each channel is seperated)
#ifdef SD_4BIT_MODE 
    // Not implement yet
    DataCrc16_0 = 0;
   432bc:	e03f768d 	sth	zero,-550(fp)
    DataCrc16_1 = 0;
   432c0:	e03f770d 	sth	zero,-548(fp)
    DataCrc16_2 = 0;
   432c4:	e03f778d 	sth	zero,-546(fp)
    DataCrc16_3 = 0;
   432c8:	e03f780d 	sth	zero,-544(fp)
    for(i=0;i<16;i++)
   432cc:	e03f7215 	stw	zero,-568(fp)
   432d0:	00003306 	br	433a0 <SDHAL_ReadData+0x360>
    {
        SD_CLK_LOW;
   432d4:	0007883a 	mov	r3,zero
   432d8:	00800234 	movhi	r2,8
   432dc:	10841404 	addi	r2,r2,4176
   432e0:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   432e4:	00c00044 	movi	r3,1
   432e8:	00800234 	movhi	r2,8
   432ec:	10841404 	addi	r2,r2,4176
   432f0:	10c00035 	stwio	r3,0(r2)
        
        DataCrc16_0 <<= 1;
   432f4:	e0bf768b 	ldhu	r2,-550(fp)
   432f8:	1085883a 	add	r2,r2,r2
   432fc:	e0bf768d 	sth	r2,-550(fp)
        DataCrc16_1 <<= 1;
   43300:	e0bf770b 	ldhu	r2,-548(fp)
   43304:	1085883a 	add	r2,r2,r2
   43308:	e0bf770d 	sth	r2,-548(fp)
        DataCrc16_2 <<= 1;
   4330c:	e0bf778b 	ldhu	r2,-546(fp)
   43310:	1085883a 	add	r2,r2,r2
   43314:	e0bf778d 	sth	r2,-546(fp)
        DataCrc16_3 <<= 1;
   43318:	e0bf780b 	ldhu	r2,-544(fp)
   4331c:	1085883a 	add	r2,r2,r2
   43320:	e0bf780d 	sth	r2,-544(fp)
        
        DataTemp = SD_TEST_DAT;
   43324:	00800234 	movhi	r2,8
   43328:	10840804 	addi	r2,r2,4128
   4332c:	10800037 	ldwio	r2,0(r2)
   43330:	e0bf7b05 	stb	r2,-532(fp)
        
        if (DataTemp & 0x01)
   43334:	e0bf7b03 	ldbu	r2,-532(fp)
   43338:	1080004c 	andi	r2,r2,1
   4333c:	10000326 	beq	r2,zero,4334c <SDHAL_ReadData+0x30c>
            DataCrc16_0 |= 0x01;
   43340:	e0bf768b 	ldhu	r2,-550(fp)
   43344:	10800054 	ori	r2,r2,1
   43348:	e0bf768d 	sth	r2,-550(fp)
         if(DataTemp & 0x02)
   4334c:	e0bf7b03 	ldbu	r2,-532(fp)
   43350:	1080008c 	andi	r2,r2,2
   43354:	10000326 	beq	r2,zero,43364 <SDHAL_ReadData+0x324>
            DataCrc16_1 |= 0x01;
   43358:	e0bf770b 	ldhu	r2,-548(fp)
   4335c:	10800054 	ori	r2,r2,1
   43360:	e0bf770d 	sth	r2,-548(fp)
         if(DataTemp & 0x04)
   43364:	e0bf7b03 	ldbu	r2,-532(fp)
   43368:	1080010c 	andi	r2,r2,4
   4336c:	10000326 	beq	r2,zero,4337c <SDHAL_ReadData+0x33c>
            DataCrc16_2 |= 0x01;
   43370:	e0bf778b 	ldhu	r2,-546(fp)
   43374:	10800054 	ori	r2,r2,1
   43378:	e0bf778d 	sth	r2,-546(fp)
         if(DataTemp & 0x08)
   4337c:	e0bf7b03 	ldbu	r2,-532(fp)
   43380:	1080020c 	andi	r2,r2,8
   43384:	10000326 	beq	r2,zero,43394 <SDHAL_ReadData+0x354>
            DataCrc16_3 |= 0x01;
   43388:	e0bf780b 	ldhu	r2,-544(fp)
   4338c:	10800054 	ori	r2,r2,1
   43390:	e0bf780d 	sth	r2,-544(fp)
    // Not implement yet
    DataCrc16_0 = 0;
    DataCrc16_1 = 0;
    DataCrc16_2 = 0;
    DataCrc16_3 = 0;
    for(i=0;i<16;i++)
   43394:	e0bf7217 	ldw	r2,-568(fp)
   43398:	10800044 	addi	r2,r2,1
   4339c:	e0bf7215 	stw	r2,-568(fp)
   433a0:	e0bf7217 	ldw	r2,-568(fp)
   433a4:	10800410 	cmplti	r2,r2,16
   433a8:	103fca1e 	bne	r2,zero,432d4 <_gp+0xffff0f68>
         if(DataTemp & 0x08)
            DataCrc16_3 |= 0x01;
    }
    
    // check end bit (value 'one' is expected
    SD_CLK_LOW;
   433ac:	0007883a 	mov	r3,zero
   433b0:	00800234 	movhi	r2,8
   433b4:	10841404 	addi	r2,r2,4176
   433b8:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   433bc:	00c00044 	movi	r3,1
   433c0:	00800234 	movhi	r2,8
   433c4:	10841404 	addi	r2,r2,4176
   433c8:	10c00035 	stwio	r3,0(r2)
    if ((SD_TEST_DAT & 0x0F) != 0x0F)
   433cc:	00800234 	movhi	r2,8
   433d0:	10840804 	addi	r2,r2,4128
   433d4:	10800037 	ldwio	r2,0(r2)
   433d8:	108003cc 	andi	r2,r2,15
   433dc:	108003e0 	cmpeqi	r2,r2,15
   433e0:	1000011e 	bne	r2,zero,433e8 <SDHAL_ReadData+0x3a8>
        bSuccess = FALSE;
   433e4:	e03f7015 	stw	zero,-576(fp)
     
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
   433e8:	01000204 	movi	r4,8
   433ec:	00436e80 	call	436e8 <SDHAL_DummyClock>
     
    // check crc    
    if (bSuccess){
   433f0:	e0bf7017 	ldw	r2,-576(fp)
   433f4:	10000e26 	beq	r2,zero,43430 <SDHAL_ReadData+0x3f0>
        MyCrc16_0 = crc16(szBuf_0, nBufLen/4);
   433f8:	e0bfff17 	ldw	r2,-4(fp)
   433fc:	1000010e 	bge	r2,zero,43404 <SDHAL_ReadData+0x3c4>
   43400:	108000c4 	addi	r2,r2,3
   43404:	1005d0ba 	srai	r2,r2,2
   43408:	1007883a 	mov	r3,r2
   4340c:	e0bf7d84 	addi	r2,fp,-522
   43410:	180b883a 	mov	r5,r3
   43414:	1009883a 	mov	r4,r2
   43418:	0042b340 	call	42b34 <crc16>
   4341c:	e0bf7b8d 	sth	r2,-530(fp)
        if (MyCrc16_0 != DataCrc16_0)
   43420:	e0ff7b8b 	ldhu	r3,-530(fp)
   43424:	e0bf768b 	ldhu	r2,-550(fp)
   43428:	18800126 	beq	r3,r2,43430 <SDHAL_ReadData+0x3f0>
            bSuccess = FALSE;
   4342c:	e03f7015 	stw	zero,-576(fp)
    }    
    if (bSuccess){
   43430:	e0bf7017 	ldw	r2,-576(fp)
   43434:	10000e26 	beq	r2,zero,43470 <SDHAL_ReadData+0x430>
        MyCrc16_1 = crc16(szBuf_1, nBufLen/4);
   43438:	e0bfff17 	ldw	r2,-4(fp)
   4343c:	1000010e 	bge	r2,zero,43444 <SDHAL_ReadData+0x404>
   43440:	108000c4 	addi	r2,r2,3
   43444:	1005d0ba 	srai	r2,r2,2
   43448:	1007883a 	mov	r3,r2
   4344c:	e0bf9d84 	addi	r2,fp,-394
   43450:	180b883a 	mov	r5,r3
   43454:	1009883a 	mov	r4,r2
   43458:	0042b340 	call	42b34 <crc16>
   4345c:	e0bf7c0d 	sth	r2,-528(fp)
        if (MyCrc16_1 != DataCrc16_1)
   43460:	e0ff7c0b 	ldhu	r3,-528(fp)
   43464:	e0bf770b 	ldhu	r2,-548(fp)
   43468:	18800126 	beq	r3,r2,43470 <SDHAL_ReadData+0x430>
            bSuccess = FALSE;
   4346c:	e03f7015 	stw	zero,-576(fp)
    }   
    if (bSuccess){
   43470:	e0bf7017 	ldw	r2,-576(fp)
   43474:	10000e26 	beq	r2,zero,434b0 <SDHAL_ReadData+0x470>
        MyCrc16_2 = crc16(szBuf_2, nBufLen/4);
   43478:	e0bfff17 	ldw	r2,-4(fp)
   4347c:	1000010e 	bge	r2,zero,43484 <SDHAL_ReadData+0x444>
   43480:	108000c4 	addi	r2,r2,3
   43484:	1005d0ba 	srai	r2,r2,2
   43488:	1007883a 	mov	r3,r2
   4348c:	e0bfbd84 	addi	r2,fp,-266
   43490:	180b883a 	mov	r5,r3
   43494:	1009883a 	mov	r4,r2
   43498:	0042b340 	call	42b34 <crc16>
   4349c:	e0bf7c8d 	sth	r2,-526(fp)
        if (MyCrc16_2 != DataCrc16_2)
   434a0:	e0ff7c8b 	ldhu	r3,-526(fp)
   434a4:	e0bf778b 	ldhu	r2,-546(fp)
   434a8:	18800126 	beq	r3,r2,434b0 <SDHAL_ReadData+0x470>
            bSuccess = FALSE;
   434ac:	e03f7015 	stw	zero,-576(fp)
    } 
    if (bSuccess){
   434b0:	e0bf7017 	ldw	r2,-576(fp)
   434b4:	10000e26 	beq	r2,zero,434f0 <SDHAL_ReadData+0x4b0>
        MyCrc16_3 = crc16(szBuf_3, nBufLen/4);
   434b8:	e0bfff17 	ldw	r2,-4(fp)
   434bc:	1000010e 	bge	r2,zero,434c4 <SDHAL_ReadData+0x484>
   434c0:	108000c4 	addi	r2,r2,3
   434c4:	1005d0ba 	srai	r2,r2,2
   434c8:	1007883a 	mov	r3,r2
   434cc:	e0bfdd84 	addi	r2,fp,-138
   434d0:	180b883a 	mov	r5,r3
   434d4:	1009883a 	mov	r4,r2
   434d8:	0042b340 	call	42b34 <crc16>
   434dc:	e0bf7d0d 	sth	r2,-524(fp)
        if (MyCrc16_3 != DataCrc16_3)
   434e0:	e0ff7d0b 	ldhu	r3,-524(fp)
   434e4:	e0bf780b 	ldhu	r2,-544(fp)
   434e8:	18800126 	beq	r3,r2,434f0 <SDHAL_ReadData+0x4b0>
            bSuccess = FALSE;
   434ec:	e03f7015 	stw	zero,-576(fp)
            bSuccess = FALSE;
    }            
    
#endif

    return bSuccess;
   434f0:	e0bf7017 	ldw	r2,-576(fp)
}
   434f4:	e037883a 	mov	sp,fp
   434f8:	dfc00117 	ldw	ra,4(sp)
   434fc:	df000017 	ldw	fp,0(sp)
   43500:	dec00204 	addi	sp,sp,8
   43504:	f800283a 	ret

00043508 <SDHAL_WriteData>:

bool SDHAL_WriteData(alt_u8 szDataWrite[], int nDataLen){
   43508:	defff604 	addi	sp,sp,-40
   4350c:	dfc00915 	stw	ra,36(sp)
   43510:	df000815 	stw	fp,32(sp)
   43514:	df000804 	addi	fp,sp,32
   43518:	e13ffe15 	stw	r4,-8(fp)
   4351c:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
   43520:	00800044 	movi	r2,1
   43524:	e0bff815 	stw	r2,-32(fp)
  //  const int nMaxTry = 5000; 
    int i, j;   
    alt_u8 Data8;
    alt_u16 DataCrc16;
    
    DataCrc16 = crc16(szDataWrite, nDataLen);
   43528:	e17fff17 	ldw	r5,-4(fp)
   4352c:	e13ffe17 	ldw	r4,-8(fp)
   43530:	0042b340 	call	42b34 <crc16>
   43534:	e0bffd0d 	sth	r2,-12(fp)
        break;
      if (nTry++ > nMaxTry)
        return FALSE;        
    } */    
    
    SD_DAT_OUT;
   43538:	00c00044 	movi	r3,1
   4353c:	00800234 	movhi	r2,8
   43540:	10840904 	addi	r2,r2,4132
   43544:	10c00035 	stwio	r3,0(r2)
    // start bits (zero value)
    SD_CLK_LOW;
   43548:	0007883a 	mov	r3,zero
   4354c:	00800234 	movhi	r2,8
   43550:	10841404 	addi	r2,r2,4176
   43554:	10c00035 	stwio	r3,0(r2)
    SD_DAT_WRITE(0x00);  
   43558:	0007883a 	mov	r3,zero
   4355c:	00800234 	movhi	r2,8
   43560:	10840804 	addi	r2,r2,4128
   43564:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   43568:	00c00044 	movi	r3,1
   4356c:	00800234 	movhi	r2,8
   43570:	10841404 	addi	r2,r2,4176
   43574:	10c00035 	stwio	r3,0(r2)
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
   43578:	e03ff915 	stw	zero,-28(fp)
   4357c:	00002206 	br	43608 <SDHAL_WriteData+0x100>
    {
      Data8 = szDataWrite[i];
   43580:	e0bff917 	ldw	r2,-28(fp)
   43584:	e0fffe17 	ldw	r3,-8(fp)
   43588:	1885883a 	add	r2,r3,r2
   4358c:	10800003 	ldbu	r2,0(r2)
   43590:	e0bffb05 	stb	r2,-20(fp)
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
   43594:	e03ffa15 	stw	zero,-24(fp)
   43598:	00001506 	br	435f0 <SDHAL_WriteData+0xe8>
      {
        SD_CLK_LOW;
   4359c:	0007883a 	mov	r3,zero
   435a0:	00800234 	movhi	r2,8
   435a4:	10841404 	addi	r2,r2,4176
   435a8:	10c00035 	stwio	r3,0(r2)
        //
        SD_DAT_WRITE((Data8 >> 4) & 0x0F);
   435ac:	e0bffb03 	ldbu	r2,-20(fp)
   435b0:	1004d13a 	srli	r2,r2,4
   435b4:	10803fcc 	andi	r2,r2,255
   435b8:	10c003cc 	andi	r3,r2,15
   435bc:	00800234 	movhi	r2,8
   435c0:	10840804 	addi	r2,r2,4128
   435c4:	10c00035 	stwio	r3,0(r2)
        //            
        SD_CLK_HIGH;
   435c8:	00c00044 	movi	r3,1
   435cc:	00800234 	movhi	r2,8
   435d0:	10841404 	addi	r2,r2,4176
   435d4:	10c00035 	stwio	r3,0(r2)
        Data8 <<= 4; 
   435d8:	e0bffb03 	ldbu	r2,-20(fp)
   435dc:	1004913a 	slli	r2,r2,4
   435e0:	e0bffb05 	stb	r2,-20(fp)
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
    {
      Data8 = szDataWrite[i];
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
   435e4:	e0bffa17 	ldw	r2,-24(fp)
   435e8:	10800044 	addi	r2,r2,1
   435ec:	e0bffa15 	stw	r2,-24(fp)
   435f0:	e0bffa17 	ldw	r2,-24(fp)
   435f4:	10800090 	cmplti	r2,r2,2
   435f8:	103fe81e 	bne	r2,zero,4359c <_gp+0xffff1230>
    SD_CLK_LOW;
    SD_DAT_WRITE(0x00);  
    SD_CLK_HIGH;
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
   435fc:	e0bff917 	ldw	r2,-28(fp)
   43600:	10800044 	addi	r2,r2,1
   43604:	e0bff915 	stw	r2,-28(fp)
   43608:	e0fff917 	ldw	r3,-28(fp)
   4360c:	e0bfff17 	ldw	r2,-4(fp)
   43610:	18bfdb16 	blt	r3,r2,43580 <_gp+0xffff1214>

    
#endif    

    // stop bits (value 'one')
    SD_CLK_LOW;
   43614:	0007883a 	mov	r3,zero
   43618:	00800234 	movhi	r2,8
   4361c:	10841404 	addi	r2,r2,4176
   43620:	10c00035 	stwio	r3,0(r2)
#ifdef SD_4BIT_MODE
    SD_DAT_WRITE(0x0F);
   43624:	00c003c4 	movi	r3,15
   43628:	00800234 	movhi	r2,8
   4362c:	10840804 	addi	r2,r2,4128
   43630:	10c00035 	stwio	r3,0(r2)
#else    
    SD_DAT_HIGH;
#endif     
    SD_CLK_HIGH;
   43634:	00c00044 	movi	r3,1
   43638:	00800234 	movhi	r2,8
   4363c:	10841404 	addi	r2,r2,4176
   43640:	10c00035 	stwio	r3,0(r2)
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
   43644:	0007883a 	mov	r3,zero
   43648:	00800234 	movhi	r2,8
   4364c:	10840904 	addi	r2,r2,4132
   43650:	10c00035 	stwio	r3,0(r2)
bool bWriteSuccess = FALSE;    
   43654:	e03ffc15 	stw	zero,-16(fp)
for(i=0;i<32 && !bWriteSuccess;i++){        
   43658:	e03ff915 	stw	zero,-28(fp)
   4365c:	00001206 	br	436a8 <SDHAL_WriteData+0x1a0>
    SD_CLK_LOW;
   43660:	0007883a 	mov	r3,zero
   43664:	00800234 	movhi	r2,8
   43668:	10841404 	addi	r2,r2,4176
   4366c:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   43670:	00c00044 	movi	r3,1
   43674:	00800234 	movhi	r2,8
   43678:	10841404 	addi	r2,r2,4176
   4367c:	10c00035 	stwio	r3,0(r2)
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
   43680:	00800234 	movhi	r2,8
   43684:	10840804 	addi	r2,r2,4128
   43688:	10800037 	ldwio	r2,0(r2)
   4368c:	1080004c 	andi	r2,r2,1
   43690:	10000226 	beq	r2,zero,4369c <SDHAL_WriteData+0x194>
        bWriteSuccess = TRUE;
   43694:	00800044 	movi	r2,1
   43698:	e0bffc15 	stw	r2,-16(fp)
    SD_CLK_HIGH;
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
bool bWriteSuccess = FALSE;    
for(i=0;i<32 && !bWriteSuccess;i++){        
   4369c:	e0bff917 	ldw	r2,-28(fp)
   436a0:	10800044 	addi	r2,r2,1
   436a4:	e0bff915 	stw	r2,-28(fp)
   436a8:	e0bff917 	ldw	r2,-28(fp)
   436ac:	10800808 	cmpgei	r2,r2,32
   436b0:	1000021e 	bne	r2,zero,436bc <SDHAL_WriteData+0x1b4>
   436b4:	e0bffc17 	ldw	r2,-16(fp)
   436b8:	103fe926 	beq	r2,zero,43660 <_gp+0xffff12f4>
    SD_CLK_LOW;
    SD_CLK_HIGH;
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
        bWriteSuccess = TRUE;
}
    if (!bWriteSuccess)
   436bc:	e0bffc17 	ldw	r2,-16(fp)
   436c0:	1000011e 	bne	r2,zero,436c8 <SDHAL_WriteData+0x1c0>
        bSuccess = FALSE;
   436c4:	e03ff815 	stw	zero,-32(fp)
                
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
   436c8:	01000204 	movi	r4,8
   436cc:	00436e80 	call	436e8 <SDHAL_DummyClock>
    for(i=0; i<16; i++){
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }*/
    
    return bSuccess;
   436d0:	e0bff817 	ldw	r2,-32(fp)
    
}
   436d4:	e037883a 	mov	sp,fp
   436d8:	dfc00117 	ldw	ra,4(sp)
   436dc:	df000017 	ldw	fp,0(sp)
   436e0:	dec00204 	addi	sp,sp,8
   436e4:	f800283a 	ret

000436e8 <SDHAL_DummyClock>:


void SDHAL_DummyClock(int nClockCnt){
   436e8:	defffd04 	addi	sp,sp,-12
   436ec:	df000215 	stw	fp,8(sp)
   436f0:	df000204 	addi	fp,sp,8
   436f4:	e13fff15 	stw	r4,-4(fp)
    int i;
    for(i=0;i<nClockCnt;i++){
   436f8:	e03ffe15 	stw	zero,-8(fp)
   436fc:	00000b06 	br	4372c <SDHAL_DummyClock+0x44>
        SD_CLK_LOW;
   43700:	0007883a 	mov	r3,zero
   43704:	00800234 	movhi	r2,8
   43708:	10841404 	addi	r2,r2,4176
   4370c:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   43710:	00c00044 	movi	r3,1
   43714:	00800234 	movhi	r2,8
   43718:	10841404 	addi	r2,r2,4176
   4371c:	10c00035 	stwio	r3,0(r2)
}


void SDHAL_DummyClock(int nClockCnt){
    int i;
    for(i=0;i<nClockCnt;i++){
   43720:	e0bffe17 	ldw	r2,-8(fp)
   43724:	10800044 	addi	r2,r2,1
   43728:	e0bffe15 	stw	r2,-8(fp)
   4372c:	e0fffe17 	ldw	r3,-8(fp)
   43730:	e0bfff17 	ldw	r2,-4(fp)
   43734:	18bff216 	blt	r3,r2,43700 <_gp+0xffff1394>
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }
}
   43738:	0001883a 	nop
   4373c:	e037883a 	mov	sp,fp
   43740:	df000017 	ldw	fp,0(sp)
   43744:	dec00104 	addi	sp,sp,4
   43748:	f800283a 	ret

0004374c <SDLIB_Init>:
static SD_INFO gSdInfo;


//-------------------------------------------------------------------------
bool SDLIB_Init(void)
{
   4374c:	defff604 	addi	sp,sp,-40
   43750:	dfc00915 	stw	ra,36(sp)
   43754:	df000815 	stw	fp,32(sp)
   43758:	df000804 	addi	fp,sp,32
    bool bSuccess = FALSE, bTimeout = FALSE;
   4375c:	e03ff815 	stw	zero,-32(fp)
   43760:	e03ff915 	stw	zero,-28(fp)
   43764:	d0a0cd17 	ldw	r2,-31948(gp)
    alt_u8  szThisCID[16];
    const int nTimeout = alt_ticks_per_second();
   43768:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 TimeStart;

    
   // alt_u8 x,y;
    memset(&gSdInfo, 0, sizeof(gSdInfo));
   4376c:	01800e04 	movi	r6,56
   43770:	000b883a 	mov	r5,zero
   43774:	01000174 	movhi	r4,5
   43778:	2129ac04 	addi	r4,r4,-22864
   4377c:	0046b000 	call	46b00 <memset>
    gSdInfo.bSupport4Bits = SD_IsSupport4Bits();
   43780:	0043c080 	call	43c08 <SD_IsSupport4Bits>
   43784:	1007883a 	mov	r3,r2
   43788:	00800174 	movhi	r2,5
   4378c:	10a9ac04 	addi	r2,r2,-22864
   43790:	10c00015 	stw	r3,0(r2)

    SDCARD_DEBUG(("--- Power On, Card Identification Mode, Idle State\r\n"));
    SDCARD_DEBUG(("sd %d-bit mode\r\n", gSdInfo.bSupport4Bits?4:1));
  
    usleep(74*10);
   43794:	0100b904 	movi	r4,740
   43798:	00483040 	call	48304 <usleep>
    
    SD_Init();
   4379c:	0043bdc0 	call	43bdc <SD_Init>

    
    //========================== CMD0 (None Response) ========
    // Reset all cards to idle state
    SD_CMD0();
   437a0:	0043c300 	call	43c30 <SD_CMD0>
    usleep(100*1000);
   437a4:	010000b4 	movhi	r4,2
   437a8:	2121a804 	addi	r4,r4,-31072
   437ac:	00483040 	call	48304 <usleep>
    
    //========================== CMD8 (Response R7) ==========
    //Sends SD Memory Card interface condition (Added in SDHC 2.0)
    if (SD_CMD8(SD_VHS_2V7_3V6, CMD8_DEFAULT_TEST_PATTERN)){
   437b0:	01402a84 	movi	r5,170
   437b4:	01000044 	movi	r4,1
   437b8:	0043cbc0 	call	43cbc <SD_CMD8>
   437bc:	10000e26 	beq	r2,zero,437f8 <SDLIB_Init+0xac>
        // OCR: Operation Condistions Register
        //gSdInfo.HostOCR32 = 0x01 << 30; //argument=0x40FF8000; // support HC
        gSdInfo.HostOCR32 = 0x40FF8000;
   437c0:	00800174 	movhi	r2,5
   437c4:	10a9ac04 	addi	r2,r2,-22864
   437c8:	00d04034 	movhi	r3,16640
   437cc:	18e00004 	addi	r3,r3,-32768
   437d0:	10c00315 	stw	r3,12(r2)
        gSdInfo.bVer2 = TRUE;
   437d4:	00800174 	movhi	r2,5
   437d8:	10a9ac04 	addi	r2,r2,-22864
   437dc:	00c00044 	movi	r3,1
   437e0:	10c00115 	stw	r3,4(r2)
        gSdInfo.bSDHC = TRUE;
   437e4:	00800174 	movhi	r2,5
   437e8:	10a9ac04 	addi	r2,r2,-22864
   437ec:	00c00044 	movi	r3,1
   437f0:	10c00215 	stw	r3,8(r2)
   437f4:	00000806 	br	43818 <SDLIB_Init+0xcc>
        SDCARD_DEBUG((" 2.0 \r\n"));
    }else{
        gSdInfo.HostOCR32 = 0x00040000;   
   437f8:	00800174 	movhi	r2,5
   437fc:	10a9ac04 	addi	r2,r2,-22864
   43800:	00c00134 	movhi	r3,4
   43804:	10c00315 	stw	r3,12(r2)
        SDCARD_TRACE(("CMD8 not supported\r\n"));
        
        // Reset cards to idle state
        SD_CMD0();
   43808:	0043c300 	call	43c30 <SD_CMD0>
        usleep(100*1000);        
   4380c:	010000b4 	movhi	r4,2
   43810:	2121a804 	addi	r4,r4,-31072
   43814:	00483040 	call	48304 <usleep>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   43818:	d0a0ce17 	ldw	r2,-31944(gp)
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
   4381c:	e0bffb15 	stw	r2,-20(fp)
    while(!bSuccess && !bTimeout){
   43820:	00002c06 	br	438d4 <SDLIB_Init+0x188>
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_IDLE)){  // execute cmd55 before execute and ACMD
   43824:	00800174 	movhi	r2,5
   43828:	10a9ac04 	addi	r2,r2,-22864
   4382c:	1080050b 	ldhu	r2,20(r2)
   43830:	10bfffcc 	andi	r2,r2,65535
   43834:	000b883a 	mov	r5,zero
   43838:	1009883a 	mov	r4,r2
   4383c:	0043e480 	call	43e48 <SD_CMD55>
   43840:	1000021e 	bne	r2,zero,4384c <SDLIB_Init+0x100>
            SDCARD_ERROR(("CMD55 NG\r\n"));
            return FALSE;
   43844:	0005883a 	mov	r2,zero
   43848:	00008206 	br	43a54 <SDLIB_Init+0x308>
        }else{    
            bSuccess = SD_ACMD41(gSdInfo.HostOCR32, &gSdInfo.OCR32);
   4384c:	00800174 	movhi	r2,5
   43850:	10a9ac04 	addi	r2,r2,-22864
   43854:	10800317 	ldw	r2,12(r2)
   43858:	01400174 	movhi	r5,5
   4385c:	2969b004 	addi	r5,r5,-22848
   43860:	1009883a 	mov	r4,r2
   43864:	0043fc80 	call	43fc8 <SD_ACMD41>
   43868:	e0bff815 	stw	r2,-32(fp)
            if (bSuccess && gSdInfo.bSDHC && ((gSdInfo.OCR32 & 0x40000000) == 0x00)){
   4386c:	e0bff817 	ldw	r2,-32(fp)
   43870:	10000c26 	beq	r2,zero,438a4 <SDLIB_Init+0x158>
   43874:	00800174 	movhi	r2,5
   43878:	10a9ac04 	addi	r2,r2,-22864
   4387c:	10800217 	ldw	r2,8(r2)
   43880:	10000826 	beq	r2,zero,438a4 <SDLIB_Init+0x158>
   43884:	00800174 	movhi	r2,5
   43888:	10a9ac04 	addi	r2,r2,-22864
   4388c:	10800417 	ldw	r2,16(r2)
   43890:	1090002c 	andhi	r2,r2,16384
   43894:	1000031e 	bne	r2,zero,438a4 <SDLIB_Init+0x158>
                gSdInfo.bSDHC = FALSE;
   43898:	00800174 	movhi	r2,5
   4389c:	10a9ac04 	addi	r2,r2,-22864
   438a0:	10000215 	stw	zero,8(r2)
            }    
            // check timeout
            if (!bSuccess){
   438a4:	e0bff817 	ldw	r2,-32(fp)
   438a8:	10000a1e 	bne	r2,zero,438d4 <SDLIB_Init+0x188>
   438ac:	d0e0ce17 	ldw	r3,-31944(gp)
                if ((alt_nticks() - TimeStart) > nTimeout){
   438b0:	e0bffb17 	ldw	r2,-20(fp)
   438b4:	1885c83a 	sub	r2,r3,r2
   438b8:	e0fffa17 	ldw	r3,-24(fp)
   438bc:	1880032e 	bgeu	r3,r2,438cc <SDLIB_Init+0x180>
                    SDCARD_ERROR(("ACMD41[SD_APP_OP_COND] fail\r\n"));
                    bTimeout = TRUE;
   438c0:	00800044 	movi	r2,1
   438c4:	e0bff915 	stw	r2,-28(fp)
   438c8:	00000206 	br	438d4 <SDLIB_Init+0x188>
                }else{
                    usleep(10*1000);
   438cc:	0109c404 	movi	r4,10000
   438d0:	00483040 	call	48304 <usleep>
        SD_CMD0();
        usleep(100*1000);        
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
    while(!bSuccess && !bTimeout){
   438d4:	e0bff817 	ldw	r2,-32(fp)
   438d8:	1000021e 	bne	r2,zero,438e4 <SDLIB_Init+0x198>
   438dc:	e0bff917 	ldw	r2,-28(fp)
   438e0:	103fd026 	beq	r2,zero,43824 <_gp+0xffff14b8>
                    usleep(10*1000);
                }    
            }
        }
    }
    if (!bSuccess){
   438e4:	e0bff817 	ldw	r2,-32(fp)
   438e8:	1000021e 	bne	r2,zero,438f4 <SDLIB_Init+0x1a8>
        return FALSE;
   438ec:	0005883a 	mov	r2,zero
   438f0:	00005806 	br	43a54 <SDLIB_Init+0x308>
    }
   
    //========================== CMD2 ========================    
    // issue cmd2 & wait response 
    // ALL_SEND_CID (CMD2): Asks any card to send the CID numbers on the CMD line
    if (!SD_CMD2(gSdInfo.szCID, sizeof(gSdInfo.szCID))){
   438f4:	01400444 	movi	r5,17
   438f8:	01000174 	movhi	r4,5
   438fc:	2129b184 	addi	r4,r4,-22842
   43900:	00441640 	call	44164 <SD_CMD2>
   43904:	1000021e 	bne	r2,zero,43910 <SDLIB_Init+0x1c4>
        SDCARD_ERROR(("CMD2 fail\r\n"));
        return FALSE;
   43908:	0005883a 	mov	r2,zero
   4390c:	00005106 	br	43a54 <SDLIB_Init+0x308>
    SDCARD_TRACE(("--- Power On, Card Identification Mode, Identification State\r\n"));

    //========================== CMD3 ========================        
    // issue cmd3 & wait response, finally get RCA
    // CMD3 (SEND_RELATIVE_ADDR): Ask the card to publish a new relative address (RCA)
    if (!SD_CMD3(&gSdInfo.RCA16)){
   43910:	01000174 	movhi	r4,5
   43914:	2129b104 	addi	r4,r4,-22844
   43918:	00442fc0 	call	442fc <SD_CMD3>
   4391c:	1000021e 	bne	r2,zero,43928 <SDLIB_Init+0x1dc>
        SDCARD_ERROR(("CMD3 fail\r\n"));
        return FALSE;
   43920:	0005883a 	mov	r2,zero
   43924:	00004b06 	br	43a54 <SDLIB_Init+0x308>
    //### Standby-by state in Data-transfer mode
    
    //========================== CMD9 ========================
    SDCARD_DEBUG(("--- enter data-transfer mode, Standby state\r\n"));
    // issue cmd9 with given RCA & wait response 
    if (!SD_CMD9(gSdInfo.RCA16, gSdInfo.szCSD, sizeof(gSdInfo.szCSD))){
   43928:	00800174 	movhi	r2,5
   4392c:	10a9ac04 	addi	r2,r2,-22864
   43930:	1080050b 	ldhu	r2,20(r2)
   43934:	10bfffcc 	andi	r2,r2,65535
   43938:	01800444 	movi	r6,17
   4393c:	01400174 	movhi	r5,5
   43940:	2969b5c4 	addi	r5,r5,-22825
   43944:	1009883a 	mov	r4,r2
   43948:	00444980 	call	44498 <SD_CMD9>
   4394c:	1000021e 	bne	r2,zero,43958 <SDLIB_Init+0x20c>
        SDCARD_DEBUG(("CMD9 fail\r\n"));
        return FALSE;
   43950:	0005883a 	mov	r2,zero
   43954:	00003f06 	br	43a54 <SDLIB_Init+0x308>
    }
    
    //========================== CMD10 ========================
    // richard add  (query card identification)  
    if (!SD_CMD10(gSdInfo.RCA16, szThisCID, sizeof(szThisCID))){
   43958:	00800174 	movhi	r2,5
   4395c:	10a9ac04 	addi	r2,r2,-22864
   43960:	1080050b 	ldhu	r2,20(r2)
   43964:	10bfffcc 	andi	r2,r2,65535
   43968:	e0fffc04 	addi	r3,fp,-16
   4396c:	01800404 	movi	r6,16
   43970:	180b883a 	mov	r5,r3
   43974:	1009883a 	mov	r4,r2
   43978:	00446580 	call	44658 <SD_CMD10>
   4397c:	1000021e 	bne	r2,zero,43988 <SDLIB_Init+0x23c>
        SDCARD_DEBUG(("CMD10 fail\r\n"));
        return FALSE;
   43980:	0005883a 	mov	r2,zero
   43984:	00003306 	br	43a54 <SDLIB_Init+0x308>
    // issue cmd9 with given RCA & wait response
    
    //========================== CMD7 ========================
    // richard: issue cmd7 to enter transfer state
    // cmd7: toggle between Standy-by and Trasfer State
    if (!SD_CMD7(gSdInfo.RCA16)){
   43988:	00800174 	movhi	r2,5
   4398c:	10a9ac04 	addi	r2,r2,-22864
   43990:	1080050b 	ldhu	r2,20(r2)
   43994:	10bfffcc 	andi	r2,r2,65535
   43998:	1009883a 	mov	r4,r2
   4399c:	00448180 	call	44818 <SD_CMD7>
   439a0:	1000021e 	bne	r2,zero,439ac <SDLIB_Init+0x260>
        SDCARD_DEBUG(("CMD7 fail\r\n"));
        return FALSE;
   439a4:	0005883a 	mov	r2,zero
   439a8:	00002a06 	br	43a54 <SDLIB_Init+0x308>
    //### Transfer state in Data-transfer mode     
    SDCARD_DEBUG(("--- enter data-transfer mode, Transfer state\r\n"));
       
    //========================== CMD16 ========================   
    // issue cmd16 (select a block length) & wait response
    if (!SD_CMD16(512)){  // 512 bytes
   439ac:	01008004 	movi	r4,512
   439b0:	00449980 	call	44998 <SD_CMD16>
   439b4:	1000021e 	bne	r2,zero,439c0 <SDLIB_Init+0x274>
        SDCARD_DEBUG(("CMD16 fail\r\n"));
        return FALSE;
   439b8:	0005883a 	mov	r2,zero
   439bc:	00002506 	br	43a54 <SDLIB_Init+0x308>
    }       
    
    if (gSdInfo.bSupport4Bits){ 
   439c0:	00800174 	movhi	r2,5
   439c4:	10a9ac04 	addi	r2,r2,-22864
   439c8:	10800017 	ldw	r2,0(r2)
   439cc:	10002026 	beq	r2,zero,43a50 <SDLIB_Init+0x304>
        // richard add: set bus width
        // Note. This command is valid only in "transfer state", i.e. after CMD7 is issued

        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
   439d0:	00800174 	movhi	r2,5
   439d4:	10a9ac04 	addi	r2,r2,-22864
   439d8:	1080050b 	ldhu	r2,20(r2)
   439dc:	10bfffcc 	andi	r2,r2,65535
   439e0:	01400104 	movi	r5,4
   439e4:	1009883a 	mov	r4,r2
   439e8:	0043e480 	call	43e48 <SD_CMD55>
   439ec:	1000021e 	bne	r2,zero,439f8 <SDLIB_Init+0x2ac>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
   439f0:	0005883a 	mov	r2,zero
   439f4:	00001706 	br	43a54 <SDLIB_Init+0x308>
        }       
    
        SDCARD_DEBUG(("ACMD6[SET_BUS_WIDTH], 4-bit\r\n"));
        if (!SD_ACMD6(TRUE, SD_STATE_TRAN)){  // 4-bit mode
   439f8:	01400104 	movi	r5,4
   439fc:	01000044 	movi	r4,1
   43a00:	0044b380 	call	44b38 <SD_ACMD6>
   43a04:	1000021e 	bne	r2,zero,43a10 <SDLIB_Init+0x2c4>
            SDCARD_DEBUG(("ACMD6 NG\r\n"));
            return FALSE;
   43a08:	0005883a 	mov	r2,zero
   43a0c:	00001106 	br	43a54 <SDLIB_Init+0x308>
        }         
    
    
        //
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
   43a10:	00800174 	movhi	r2,5
   43a14:	10a9ac04 	addi	r2,r2,-22864
   43a18:	1080050b 	ldhu	r2,20(r2)
   43a1c:	10bfffcc 	andi	r2,r2,65535
   43a20:	01400104 	movi	r5,4
   43a24:	1009883a 	mov	r4,r2
   43a28:	0043e480 	call	43e48 <SD_CMD55>
   43a2c:	1000021e 	bne	r2,zero,43a38 <SDLIB_Init+0x2ec>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
   43a30:	0005883a 	mov	r2,zero
   43a34:	00000706 	br	43a54 <SDLIB_Init+0x308>
        }    
    
       
        SDCARD_DEBUG(("ACMD42[SET_CLR_CARD_DETECT], connect card\r\n"));
        if (!SD_ACMD42(TRUE, SD_STATE_TRAN)){  // connect card
   43a38:	01400104 	movi	r5,4
   43a3c:	01000044 	movi	r4,1
   43a40:	0044cc40 	call	44cc4 <SD_ACMD42>
   43a44:	1000021e 	bne	r2,zero,43a50 <SDLIB_Init+0x304>
            SDCARD_DEBUG(("ACMD42 NG\r\n"));
            return FALSE;
   43a48:	0005883a 	mov	r2,zero
   43a4c:	00000106 	br	43a54 <SDLIB_Init+0x308>
        printf("!!!!!write ng\r\n");
#endif
     
    SDCARD_DEBUG(("SDLIB_Init success\r\n"));
    
    return TRUE;
   43a50:	00800044 	movi	r2,1
}
   43a54:	e037883a 	mov	sp,fp
   43a58:	dfc00117 	ldw	ra,4(sp)
   43a5c:	df000017 	ldw	fp,0(sp)
   43a60:	dec00204 	addi	sp,sp,8
   43a64:	f800283a 	ret

00043a68 <SDLIB_ReadBlock512>:


bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff)
{
   43a68:	defff904 	addi	sp,sp,-28
   43a6c:	dfc00615 	stw	ra,24(sp)
   43a70:	df000515 	stw	fp,20(sp)
   43a74:	df000504 	addi	fp,sp,20
   43a78:	e13ffe15 	stw	r4,-8(fp)
   43a7c:	e17fff15 	stw	r5,-4(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd17 for 'Single Block Read'. parameter: block address
    if (gSdInfo.bSDHC)
   43a80:	00800174 	movhi	r2,5
   43a84:	10a9ac04 	addi	r2,r2,-22864
   43a88:	10800217 	ldw	r2,8(r2)
   43a8c:	10000326 	beq	r2,zero,43a9c <SDLIB_ReadBlock512+0x34>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
   43a90:	e0bffe17 	ldw	r2,-8(fp)
   43a94:	e0bffb15 	stw	r2,-20(fp)
   43a98:	00000306 	br	43aa8 <SDLIB_ReadBlock512+0x40>
    else 
        addr = block_number * 512;
   43a9c:	e0bffe17 	ldw	r2,-8(fp)
   43aa0:	1004927a 	slli	r2,r2,9
   43aa4:	e0bffb15 	stw	r2,-20(fp)
    if (!SD_CMD17(addr, SD_STATE_TRAN)){  // 4-bit mode
   43aa8:	01400104 	movi	r5,4
   43aac:	e13ffb17 	ldw	r4,-20(fp)
   43ab0:	0044e440 	call	44e44 <SD_CMD17>
   43ab4:	1000021e 	bne	r2,zero,43ac0 <SDLIB_ReadBlock512+0x58>
        SDCARD_DEBUG(("CMD17 NG\r\n"));
        return FALSE;
   43ab8:	0005883a 	mov	r2,zero
   43abc:	00002206 	br	43b48 <SDLIB_ReadBlock512+0xe0>
    }
    //

    bSuccess = SD_ReadData(buff, 512);  // read 512 bytes
   43ac0:	01408004 	movi	r5,512
   43ac4:	e13fff17 	ldw	r4,-4(fp)
   43ac8:	00451940 	call	45194 <SD_ReadData>
   43acc:	e0bffd15 	stw	r2,-12(fp)
    
    printf("BLOCK READ:");
   43ad0:	01000174 	movhi	r4,5
   43ad4:	21273a04 	addi	r4,r4,-25368
   43ad8:	0046d980 	call	46d98 <printf>
    for (int i = 0; i < 512; i++) {
   43adc:	e03ffc15 	stw	zero,-16(fp)
   43ae0:	00001206 	br	43b2c <SDLIB_ReadBlock512+0xc4>
    	if (i%16 == 0) printf("\r\n");
   43ae4:	e0bffc17 	ldw	r2,-16(fp)
   43ae8:	108003cc 	andi	r2,r2,15
   43aec:	1000031e 	bne	r2,zero,43afc <SDLIB_ReadBlock512+0x94>
   43af0:	01000174 	movhi	r4,5
   43af4:	21273d04 	addi	r4,r4,-25356
   43af8:	0046e880 	call	46e88 <puts>
    	printf("%02x ", buff[i]);
   43afc:	e0bffc17 	ldw	r2,-16(fp)
   43b00:	e0ffff17 	ldw	r3,-4(fp)
   43b04:	1885883a 	add	r2,r3,r2
   43b08:	10800003 	ldbu	r2,0(r2)
   43b0c:	10803fcc 	andi	r2,r2,255
   43b10:	100b883a 	mov	r5,r2
   43b14:	01000174 	movhi	r4,5
   43b18:	21273e04 	addi	r4,r4,-25352
   43b1c:	0046d980 	call	46d98 <printf>
    //

    bSuccess = SD_ReadData(buff, 512);  // read 512 bytes
    
    printf("BLOCK READ:");
    for (int i = 0; i < 512; i++) {
   43b20:	e0bffc17 	ldw	r2,-16(fp)
   43b24:	10800044 	addi	r2,r2,1
   43b28:	e0bffc15 	stw	r2,-16(fp)
   43b2c:	e0bffc17 	ldw	r2,-16(fp)
   43b30:	10808010 	cmplti	r2,r2,512
   43b34:	103feb1e 	bne	r2,zero,43ae4 <_gp+0xffff1778>
    	if (i%16 == 0) printf("\r\n");
    	printf("%02x ", buff[i]);
    }

    printf("\r\n\r\n");
   43b38:	01000174 	movhi	r4,5
   43b3c:	21274004 	addi	r4,r4,-25344
   43b40:	0046e880 	call	46e88 <puts>

    //
    return bSuccess;
   43b44:	e0bffd17 	ldw	r2,-12(fp)
}
   43b48:	e037883a 	mov	sp,fp
   43b4c:	dfc00117 	ldw	ra,4(sp)
   43b50:	df000017 	ldw	fp,0(sp)
   43b54:	dec00204 	addi	sp,sp,8
   43b58:	f800283a 	ret

00043b5c <SDLIB_WriteBlock512>:

bool SDLIB_WriteBlock512(alt_u32 block_number, alt_u8 *szDataWrite)
{
   43b5c:	defffa04 	addi	sp,sp,-24
   43b60:	dfc00515 	stw	ra,20(sp)
   43b64:	df000415 	stw	fp,16(sp)
   43b68:	df000404 	addi	fp,sp,16
   43b6c:	e13ffe15 	stw	r4,-8(fp)
   43b70:	e17fff15 	stw	r5,-4(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd24 for 'Single Block write'. parameter: block address
    if (gSdInfo.bSDHC)
   43b74:	00800174 	movhi	r2,5
   43b78:	10a9ac04 	addi	r2,r2,-22864
   43b7c:	10800217 	ldw	r2,8(r2)
   43b80:	10000326 	beq	r2,zero,43b90 <SDLIB_WriteBlock512+0x34>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
   43b84:	e0bffe17 	ldw	r2,-8(fp)
   43b88:	e0bffc15 	stw	r2,-16(fp)
   43b8c:	00000306 	br	43b9c <SDLIB_WriteBlock512+0x40>
    else 
        addr = block_number * 512;
   43b90:	e0bffe17 	ldw	r2,-8(fp)
   43b94:	1004927a 	slli	r2,r2,9
   43b98:	e0bffc15 	stw	r2,-16(fp)
    if (!SD_CMD24(addr, SD_STATE_TRAN)){ 
   43b9c:	01400104 	movi	r5,4
   43ba0:	e13ffc17 	ldw	r4,-16(fp)
   43ba4:	0044fec0 	call	44fec <SD_CMD24>
   43ba8:	1000021e 	bne	r2,zero,43bb4 <SDLIB_WriteBlock512+0x58>
        SDCARD_DEBUG(("CMD24 NG\r\n"));
        return FALSE;
   43bac:	0005883a 	mov	r2,zero
   43bb0:	00000506 	br	43bc8 <SDLIB_WriteBlock512+0x6c>
    }
    //

    bSuccess = SD_WriteData(szDataWrite, 512);  // Write 512 bytes
   43bb4:	01408004 	movi	r5,512
   43bb8:	e13fff17 	ldw	r4,-4(fp)
   43bbc:	00451d40 	call	451d4 <SD_WriteData>
   43bc0:	e0bffd15 	stw	r2,-12(fp)
    
    //
    return bSuccess;
   43bc4:	e0bffd17 	ldw	r2,-12(fp)
}
   43bc8:	e037883a 	mov	sp,fp
   43bcc:	dfc00117 	ldw	ra,4(sp)
   43bd0:	df000017 	ldw	fp,0(sp)
   43bd4:	dec00204 	addi	sp,sp,8
   43bd8:	f800283a 	ret

00043bdc <SD_Init>:
// internal function
alt_u32 ArrayToU32(alt_u8 szData[]);

//============================================================

void SD_Init(void){
   43bdc:	defffe04 	addi	sp,sp,-8
   43be0:	dfc00115 	stw	ra,4(sp)
   43be4:	df000015 	stw	fp,0(sp)
   43be8:	d839883a 	mov	fp,sp
    SDHAL_Init();
   43bec:	0042cc40 	call	42cc4 <SDHAL_Init>
}
   43bf0:	0001883a 	nop
   43bf4:	e037883a 	mov	sp,fp
   43bf8:	dfc00117 	ldw	ra,4(sp)
   43bfc:	df000017 	ldw	fp,0(sp)
   43c00:	dec00204 	addi	sp,sp,8
   43c04:	f800283a 	ret

00043c08 <SD_IsSupport4Bits>:

bool SD_IsSupport4Bits(void){
   43c08:	defffe04 	addi	sp,sp,-8
   43c0c:	dfc00115 	stw	ra,4(sp)
   43c10:	df000015 	stw	fp,0(sp)
   43c14:	d839883a 	mov	fp,sp
    return SDHAL_IsSupport4Bits();
   43c18:	0042c980 	call	42c98 <SDHAL_IsSupport4Bits>
}
   43c1c:	e037883a 	mov	sp,fp
   43c20:	dfc00117 	ldw	ra,4(sp)
   43c24:	df000017 	ldw	fp,0(sp)
   43c28:	dec00204 	addi	sp,sp,8
   43c2c:	f800283a 	ret

00043c30 <SD_CMD0>:



void SD_CMD0(void){
   43c30:	defffc04 	addi	sp,sp,-16
   43c34:	dfc00315 	stw	ra,12(sp)
   43c38:	df000215 	stw	fp,8(sp)
   43c3c:	df000204 	addi	fp,sp,8
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   43c40:	00801004 	movi	r2,64
   43c44:	e0bffe45 	stb	r2,-7(fp)
   43c48:	e03ffe85 	stb	zero,-6(fp)
   43c4c:	e03ffec5 	stb	zero,-5(fp)
   43c50:	e03fff05 	stb	zero,-4(fp)
   43c54:	e03fff45 	stb	zero,-3(fp)
   43c58:	e03fff85 	stb	zero,-2(fp)

    SDCARD_TRACE(("CMD0\r\n"));
    // build packet    
    szCmd[0] |= 0X00;
   43c5c:	e0bffe43 	ldbu	r2,-7(fp)
   43c60:	e0bffe45 	stb	r2,-7(fp)
    crc = crc7(0, szCmd, 5);
   43c64:	e0bffe44 	addi	r2,fp,-7
   43c68:	01800144 	movi	r6,5
   43c6c:	100b883a 	mov	r5,r2
   43c70:	0009883a 	mov	r4,zero
   43c74:	0042c280 	call	42c28 <crc7>
   43c78:	e0bffe05 	stb	r2,-8(fp)
    szCmd[5] = (crc << 1) | 0x01;
   43c7c:	e0bffe03 	ldbu	r2,-8(fp)
   43c80:	1085883a 	add	r2,r2,r2
   43c84:	10800054 	ori	r2,r2,1
   43c88:	e0bfff85 	stb	r2,-2(fp)
    
    // Tx 100 clock for power on sequence 
   // SDHAL_DummyClock(100);
    //
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   43c8c:	e0bffe44 	addi	r2,fp,-7
   43c90:	01400184 	movi	r5,6
   43c94:	1009883a 	mov	r4,r2
   43c98:	0042d340 	call	42d34 <SDHAL_SendCmd>
    
    // A command with no response. 8 clocks after the host command end bit.
    // !!!!!!!!!! Note. Remember to add dummy clock here
    SDHAL_DummyClock(8);
   43c9c:	01000204 	movi	r4,8
   43ca0:	00436e80 	call	436e8 <SDHAL_DummyClock>
    
}
   43ca4:	0001883a 	nop
   43ca8:	e037883a 	mov	sp,fp
   43cac:	dfc00117 	ldw	ra,4(sp)
   43cb0:	df000017 	ldw	fp,0(sp)
   43cb4:	dec00204 	addi	sp,sp,8
   43cb8:	f800283a 	ret

00043cbc <SD_CMD8>:


bool SD_CMD8(alt_u8 VolId, alt_u8 TestPattern){
   43cbc:	defff704 	addi	sp,sp,-36
   43cc0:	dfc00815 	stw	ra,32(sp)
   43cc4:	df000715 	stw	fp,28(sp)
   43cc8:	df000704 	addi	fp,sp,28
   43ccc:	2007883a 	mov	r3,r4
   43cd0:	2805883a 	mov	r2,r5
   43cd4:	e0fffe05 	stb	r3,-8(fp)
   43cd8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 8;
   43cdc:	00800204 	movi	r2,8
   43ce0:	e0bffa05 	stb	r2,-24(fp)
   // int x;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   43ce4:	00801004 	movi	r2,64
   43ce8:	e0bffc45 	stb	r2,-15(fp)
   43cec:	e03ffc85 	stb	zero,-14(fp)
   43cf0:	e03ffcc5 	stb	zero,-13(fp)
   43cf4:	e03ffd05 	stb	zero,-12(fp)
   43cf8:	e03ffd45 	stb	zero,-11(fp)
   43cfc:	e03ffd85 	stb	zero,-10(fp)

    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   43d00:	e0fffc43 	ldbu	r3,-15(fp)
   43d04:	e0bffa03 	ldbu	r2,-24(fp)
   43d08:	1884b03a 	or	r2,r3,r2
   43d0c:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (VolId & 0x0F);
   43d10:	e0bffd03 	ldbu	r2,-12(fp)
   43d14:	1007883a 	mov	r3,r2
   43d18:	e0bffe03 	ldbu	r2,-8(fp)
   43d1c:	108003cc 	andi	r2,r2,15
   43d20:	1884b03a 	or	r2,r3,r2
   43d24:	e0bffd05 	stb	r2,-12(fp)
    szCmd[4] = TestPattern;
   43d28:	e0bfff03 	ldbu	r2,-4(fp)
   43d2c:	e0bffd45 	stb	r2,-11(fp)
    crc = crc7(0, szCmd, 5);
   43d30:	e0bffc44 	addi	r2,fp,-15
   43d34:	01800144 	movi	r6,5
   43d38:	100b883a 	mov	r5,r2
   43d3c:	0009883a 	mov	r4,zero
   43d40:	0042c280 	call	42c28 <crc7>
   43d44:	e0bffa45 	stb	r2,-23(fp)
    szCmd[5] = (crc << 1) | 0x01;
   43d48:	e0bffa43 	ldbu	r2,-23(fp)
   43d4c:	1085883a 	add	r2,r2,r2
   43d50:	10800054 	ori	r2,r2,1
   43d54:	e0bffd85 	stb	r2,-10(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   43d58:	e0bffc44 	addi	r2,fp,-15
   43d5c:	01400184 	movi	r5,6
   43d60:	1009883a 	mov	r4,r2
   43d64:	0042d340 	call	42d34 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   43d68:	e0bffac4 	addi	r2,fp,-21
   43d6c:	01400184 	movi	r5,6
   43d70:	1009883a 	mov	r4,r2
   43d74:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   43d78:	e0bff915 	stw	r2,-28(fp)
    
    // check response content
    if (bSuccess){
   43d7c:	e0bff917 	ldw	r2,-28(fp)
   43d80:	10002b26 	beq	r2,zero,43e30 <SD_CMD8+0x174>
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   43d84:	e0bff917 	ldw	r2,-28(fp)
   43d88:	10000526 	beq	r2,zero,43da0 <SD_CMD8+0xe4>
   43d8c:	e0bffac3 	ldbu	r2,-21(fp)
   43d90:	10c03fcc 	andi	r3,r2,255
   43d94:	e0bffa03 	ldbu	r2,-24(fp)
   43d98:	18800126 	beq	r3,r2,43da0 <SD_CMD8+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
   43d9c:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check voltage supplied        
        if (bSuccess && szResponse[3] != VolId){
   43da0:	e0bff917 	ldw	r2,-28(fp)
   43da4:	10000526 	beq	r2,zero,43dbc <SD_CMD8+0x100>
   43da8:	e0bffb83 	ldbu	r2,-18(fp)
   43dac:	10c03fcc 	andi	r3,r2,255
   43db0:	e0bffe03 	ldbu	r2,-8(fp)
   43db4:	18800126 	beq	r3,r2,43dbc <SD_CMD8+0x100>
            SDCARD_DEBUG(("CMD%d Response: Invalid Void Id\r\n", Cmd));
            bSuccess = FALSE;
   43db8:	e03ff915 	stw	zero,-28(fp)
        }        

        // check test pattern        
        if (bSuccess && szResponse[4] != TestPattern){
   43dbc:	e0bff917 	ldw	r2,-28(fp)
   43dc0:	10000526 	beq	r2,zero,43dd8 <SD_CMD8+0x11c>
   43dc4:	e0bffbc3 	ldbu	r2,-17(fp)
   43dc8:	10c03fcc 	andi	r3,r2,255
   43dcc:	e0bfff03 	ldbu	r2,-4(fp)
   43dd0:	18800126 	beq	r3,r2,43dd8 <SD_CMD8+0x11c>
            SDCARD_DEBUG(("CMD%d Response: Invalid Test pattern\r\n", Cmd));
            bSuccess = FALSE;
   43dd4:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check crc
        if (bSuccess){
   43dd8:	e0bff917 	ldw	r2,-28(fp)
   43ddc:	10000d26 	beq	r2,zero,43e14 <SD_CMD8+0x158>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   43de0:	e0bffac4 	addi	r2,fp,-21
   43de4:	01800144 	movi	r6,5
   43de8:	100b883a 	mov	r5,r2
   43dec:	0009883a 	mov	r4,zero
   43df0:	0042c280 	call	42c28 <crc7>
   43df4:	e0bffa85 	stb	r2,-22(fp)
            if (crc != (szResponse[5] >> 1)){
   43df8:	e0bffc03 	ldbu	r2,-16(fp)
   43dfc:	10803fcc 	andi	r2,r2,255
   43e00:	1004d07a 	srli	r2,r2,1
   43e04:	10c03fcc 	andi	r3,r2,255
   43e08:	e0bffa83 	ldbu	r2,-22(fp)
   43e0c:	18800126 	beq	r3,r2,43e14 <SD_CMD8+0x158>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   43e10:	e03ff915 	stw	zero,-28(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   43e14:	e0bff917 	ldw	r2,-28(fp)
   43e18:	10000526 	beq	r2,zero,43e30 <SD_CMD8+0x174>
   43e1c:	e0bffc03 	ldbu	r2,-16(fp)
   43e20:	10803fcc 	andi	r2,r2,255
   43e24:	1080004c 	andi	r2,r2,1
   43e28:	1000011e 	bne	r2,zero,43e30 <SD_CMD8+0x174>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   43e2c:	e03ff915 	stw	zero,-28(fp)
        }
        
         
    }
    
    return bSuccess;
   43e30:	e0bff917 	ldw	r2,-28(fp)
    
}
   43e34:	e037883a 	mov	sp,fp
   43e38:	dfc00117 	ldw	ra,4(sp)
   43e3c:	df000017 	ldw	fp,0(sp)
   43e40:	dec00204 	addi	sp,sp,8
   43e44:	f800283a 	ret

00043e48 <SD_CMD55>:

bool SD_CMD55(alt_u16 RCA16, alt_u8 ExpectedState){
   43e48:	defff404 	addi	sp,sp,-48
   43e4c:	dfc00b15 	stw	ra,44(sp)
   43e50:	df000a15 	stw	fp,40(sp)
   43e54:	df000a04 	addi	fp,sp,40
   43e58:	2007883a 	mov	r3,r4
   43e5c:	2805883a 	mov	r2,r5
   43e60:	e0fffe0d 	sth	r3,-8(fp)
   43e64:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 55;
   43e68:	00800dc4 	movi	r2,55
   43e6c:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   43e70:	00801004 	movi	r2,64
   43e74:	e0bffbc5 	stb	r2,-17(fp)
   43e78:	e03ffc05 	stb	zero,-16(fp)
   43e7c:	e03ffc45 	stb	zero,-15(fp)
   43e80:	e03ffc85 	stb	zero,-14(fp)
   43e84:	e03ffcc5 	stb	zero,-13(fp)
   43e88:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD55\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   43e8c:	e0fffbc3 	ldbu	r3,-17(fp)
   43e90:	e0bff703 	ldbu	r2,-36(fp)
   43e94:	1884b03a 	or	r2,r3,r2
   43e98:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] = RCA16 >> 8;
   43e9c:	e0bffe0b 	ldhu	r2,-8(fp)
   43ea0:	1004d23a 	srli	r2,r2,8
   43ea4:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] = RCA16 & 0xFF;
   43ea8:	e0bffe0b 	ldhu	r2,-8(fp)
   43eac:	e0bffc45 	stb	r2,-15(fp)
    crc = crc7(0, szCmd, 5);
   43eb0:	e0bffbc4 	addi	r2,fp,-17
   43eb4:	01800144 	movi	r6,5
   43eb8:	100b883a 	mov	r5,r2
   43ebc:	0009883a 	mov	r4,zero
   43ec0:	0042c280 	call	42c28 <crc7>
   43ec4:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   43ec8:	e0bff743 	ldbu	r2,-35(fp)
   43ecc:	1085883a 	add	r2,r2,r2
   43ed0:	10800054 	ori	r2,r2,1
   43ed4:	e0bffd05 	stb	r2,-12(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   43ed8:	e0bffbc4 	addi	r2,fp,-17
   43edc:	01400184 	movi	r5,6
   43ee0:	1009883a 	mov	r4,r2
   43ee4:	0042d340 	call	42d34 <SDHAL_SendCmd>
  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   43ee8:	e0bffa44 	addi	r2,fp,-23
   43eec:	01400184 	movi	r5,6
   43ef0:	1009883a 	mov	r4,r2
   43ef4:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   43ef8:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
   43efc:	e0bff617 	ldw	r2,-40(fp)
   43f00:	10002b26 	beq	r2,zero,43fb0 <SD_CMD55+0x168>
        alt_u32 CardStatus, ExpectedStatus;  // define in 4.10
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   43f04:	e0bff617 	ldw	r2,-40(fp)
   43f08:	10000526 	beq	r2,zero,43f20 <SD_CMD55+0xd8>
   43f0c:	e0bffa43 	ldbu	r2,-23(fp)
   43f10:	10c03fcc 	andi	r3,r2,255
   43f14:	e0bff703 	ldbu	r2,-36(fp)
   43f18:	18800126 	beq	r3,r2,43f20 <SD_CMD55+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
   43f1c:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   43f20:	e0bffa44 	addi	r2,fp,-23
   43f24:	10800044 	addi	r2,r2,1
   43f28:	1009883a 	mov	r4,r2
   43f2c:	00452140 	call	45214 <ArrayToU32>
   43f30:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
   43f34:	e0bfff03 	ldbu	r2,-4(fp)
   43f38:	108003cc 	andi	r2,r2,15
   43f3c:	1004927a 	slli	r2,r2,9
   43f40:	10804814 	ori	r2,r2,288
   43f44:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   43f48:	e0fff817 	ldw	r3,-32(fp)
   43f4c:	e0bff917 	ldw	r2,-28(fp)
   43f50:	18800126 	beq	r3,r2,43f58 <SD_CMD55+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   43f54:	e03ff615 	stw	zero,-40(fp)
        }
        
        // check crc
        if (bSuccess){
   43f58:	e0bff617 	ldw	r2,-40(fp)
   43f5c:	10000d26 	beq	r2,zero,43f94 <SD_CMD55+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   43f60:	e0bffa44 	addi	r2,fp,-23
   43f64:	01800144 	movi	r6,5
   43f68:	100b883a 	mov	r5,r2
   43f6c:	0009883a 	mov	r4,zero
   43f70:	0042c280 	call	42c28 <crc7>
   43f74:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   43f78:	e0bffb83 	ldbu	r2,-18(fp)
   43f7c:	10803fcc 	andi	r2,r2,255
   43f80:	1004d07a 	srli	r2,r2,1
   43f84:	10c03fcc 	andi	r3,r2,255
   43f88:	e0bffa03 	ldbu	r2,-24(fp)
   43f8c:	18800126 	beq	r3,r2,43f94 <SD_CMD55+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   43f90:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   43f94:	e0bff617 	ldw	r2,-40(fp)
   43f98:	10000526 	beq	r2,zero,43fb0 <SD_CMD55+0x168>
   43f9c:	e0bffb83 	ldbu	r2,-18(fp)
   43fa0:	10803fcc 	andi	r2,r2,255
   43fa4:	1080004c 	andi	r2,r2,1
   43fa8:	1000011e 	bne	r2,zero,43fb0 <SD_CMD55+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   43fac:	e03ff615 	stw	zero,-40(fp)
        }
          
    }
    
    return bSuccess;
   43fb0:	e0bff617 	ldw	r2,-40(fp)
    
}
   43fb4:	e037883a 	mov	sp,fp
   43fb8:	dfc00117 	ldw	ra,4(sp)
   43fbc:	df000017 	ldw	fp,0(sp)
   43fc0:	dec00204 	addi	sp,sp,8
   43fc4:	f800283a 	ret

00043fc8 <SD_ACMD41>:

// Response: R3
bool SD_ACMD41(alt_u32 HostOCR32, alt_u32 *pOCR32){
   43fc8:	defff504 	addi	sp,sp,-44
   43fcc:	dfc00a15 	stw	ra,40(sp)
   43fd0:	df000915 	stw	fp,36(sp)
   43fd4:	df000904 	addi	fp,sp,36
   43fd8:	e13ffe15 	stw	r4,-8(fp)
   43fdc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 OCR;
    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 41;
   43fe0:	00800a44 	movi	r2,41
   43fe4:	e0bffa05 	stb	r2,-24(fp)
    //alt_u8 szCmd[6]  = {0x40,0x0f,0xf0,0x00,0x00, 0x00}, crc;
    //alt_u8 szCmd[6]  = {0x40,0x00,0xff,0x80,0x00, 0x00}, crc;  // 2.7~3.6V
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;  
   43fe8:	00801004 	movi	r2,64
   43fec:	e0bffc05 	stb	r2,-16(fp)
   43ff0:	e03ffc45 	stb	zero,-15(fp)
   43ff4:	e03ffc85 	stb	zero,-14(fp)
   43ff8:	e03ffcc5 	stb	zero,-13(fp)
   43ffc:	e03ffd05 	stb	zero,-12(fp)
   44000:	e03ffd45 	stb	zero,-11(fp)
    
    SDCARD_TRACE(("ACMD41\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   44004:	e0fffc03 	ldbu	r3,-16(fp)
   44008:	e0bffa03 	ldbu	r2,-24(fp)
   4400c:	1884b03a 	or	r2,r3,r2
   44010:	e0bffc05 	stb	r2,-16(fp)
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
   44014:	e0bffc43 	ldbu	r2,-15(fp)
   44018:	e0fffe17 	ldw	r3,-8(fp)
   4401c:	1806d63a 	srli	r3,r3,24
   44020:	18c0100c 	andi	r3,r3,64
   44024:	10c4b03a 	or	r2,r2,r3
   44028:	e0bffc45 	stb	r2,-15(fp)
    szCmd[2] = (HostOCR32 >> 16) & 0xFF;
   4402c:	e0bffe17 	ldw	r2,-8(fp)
   44030:	1004d43a 	srli	r2,r2,16
   44034:	e0bffc85 	stb	r2,-14(fp)
    szCmd[3] = (HostOCR32 >> 8) & 0xFF;
   44038:	e0bffe17 	ldw	r2,-8(fp)
   4403c:	1004d23a 	srli	r2,r2,8
   44040:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[4] = HostOCR32 & 0xFF;
   44044:	e0bffe17 	ldw	r2,-8(fp)
   44048:	e0bffd05 	stb	r2,-12(fp)
    /*szCmd[0] = 0x69;
    szCmd[1] = 0x40;
    szCmd[2] = 0xFF;
    szCmd[3] = 0x80;
    szCmd[4] = 0x00;*/
    crc = crc7(0, szCmd, 5);
   4404c:	e0bffc04 	addi	r2,fp,-16
   44050:	01800144 	movi	r6,5
   44054:	100b883a 	mov	r5,r2
   44058:	0009883a 	mov	r4,zero
   4405c:	0042c280 	call	42c28 <crc7>
   44060:	e0bffa45 	stb	r2,-23(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44064:	e0bffa43 	ldbu	r2,-23(fp)
   44068:	1085883a 	add	r2,r2,r2
   4406c:	10800054 	ori	r2,r2,1
   44070:	e0bffd45 	stb	r2,-11(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44074:	e0bffc04 	addi	r2,fp,-16
   44078:	01400184 	movi	r5,6
   4407c:	1009883a 	mov	r4,r2
   44080:	0042d340 	call	42d34 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44084:	e0bffa84 	addi	r2,fp,-22
   44088:	01400184 	movi	r5,6
   4408c:	1009883a 	mov	r4,r2
   44090:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   44094:	e0bff815 	stw	r2,-32(fp)
    
    if (bSuccess){
   44098:	e0bff817 	ldw	r2,-32(fp)
   4409c:	10002626 	beq	r2,zero,44138 <SD_ACMD41+0x170>
        int i;
        // check command
        if (bSuccess && szResponse[0] != 0x3F){
   440a0:	e0bff817 	ldw	r2,-32(fp)
   440a4:	10000526 	beq	r2,zero,440bc <SD_ACMD41+0xf4>
   440a8:	e0bffa83 	ldbu	r2,-22(fp)
   440ac:	10803fcc 	andi	r2,r2,255
   440b0:	10800fe0 	cmpeqi	r2,r2,63
   440b4:	1000011e 	bne	r2,zero,440bc <SD_ACMD41+0xf4>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
   440b8:	e03ff815 	stw	zero,-32(fp)
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
   440bc:	e03ff715 	stw	zero,-36(fp)
        for(i=0;i<4;i++){
   440c0:	e03ff915 	stw	zero,-28(fp)
   440c4:	00000f06 	br	44104 <SD_ACMD41+0x13c>
            OCR <<= 8;
   440c8:	e0bff717 	ldw	r2,-36(fp)
   440cc:	1004923a 	slli	r2,r2,8
   440d0:	e0bff715 	stw	r2,-36(fp)
            OCR |= szResponse[i+1];
   440d4:	e0bff917 	ldw	r2,-28(fp)
   440d8:	10800044 	addi	r2,r2,1
   440dc:	e0fffa84 	addi	r3,fp,-22
   440e0:	1885883a 	add	r2,r3,r2
   440e4:	10800003 	ldbu	r2,0(r2)
   440e8:	10803fcc 	andi	r2,r2,255
   440ec:	e0fff717 	ldw	r3,-36(fp)
   440f0:	1884b03a 	or	r2,r3,r2
   440f4:	e0bff715 	stw	r2,-36(fp)
            bSuccess = FALSE;
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
        for(i=0;i<4;i++){
   440f8:	e0bff917 	ldw	r2,-28(fp)
   440fc:	10800044 	addi	r2,r2,1
   44100:	e0bff915 	stw	r2,-28(fp)
   44104:	e0bff917 	ldw	r2,-28(fp)
   44108:	10800110 	cmplti	r2,r2,4
   4410c:	103fee1e 	bne	r2,zero,440c8 <_gp+0xffff1d5c>
            OCR <<= 8;
            OCR |= szResponse[i+1];
        }           
        
        //!!!!!!!!!! note. bit31(Card power up status bit) is LOW when the card is busy.
        if ((OCR & 0x80000000) != 0x80000000){
   44110:	e0bff717 	ldw	r2,-36(fp)
   44114:	10000116 	blt	r2,zero,4411c <SD_ACMD41+0x154>
            // busy
            SDCARD_DEBUG(("ACMD%d Response: card is busy\r\n", Cmd));
            bSuccess = FALSE;
   44118:	e03ff815 	stw	zero,-32(fp)
        } 
        
        // check reserved bits and end-bits
        if (bSuccess && (szResponse[5] != 0xFF)){
   4411c:	e0bff817 	ldw	r2,-32(fp)
   44120:	10000526 	beq	r2,zero,44138 <SD_ACMD41+0x170>
   44124:	e0bffbc3 	ldbu	r2,-17(fp)
   44128:	10803fcc 	andi	r2,r2,255
   4412c:	10803fe0 	cmpeqi	r2,r2,255
   44130:	1000011e 	bne	r2,zero,44138 <SD_ACMD41+0x170>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved & end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44134:	e03ff815 	stw	zero,-32(fp)
        }
          
    }      
    
   if (bSuccess)
   44138:	e0bff817 	ldw	r2,-32(fp)
   4413c:	10000326 	beq	r2,zero,4414c <SD_ACMD41+0x184>
      *pOCR32 = OCR;  
   44140:	e0bfff17 	ldw	r2,-4(fp)
   44144:	e0fff717 	ldw	r3,-36(fp)
   44148:	10c00015 	stw	r3,0(r2)

    return bSuccess;
   4414c:	e0bff817 	ldw	r2,-32(fp)
}
   44150:	e037883a 	mov	sp,fp
   44154:	dfc00117 	ldw	ra,4(sp)
   44158:	df000017 	ldw	fp,0(sp)
   4415c:	dec00204 	addi	sp,sp,8
   44160:	f800283a 	ret

00044164 <SD_CMD2>:

// function: Asks any card to send the CID numbers on the CMD line (4.7.4)
// response: 4.9.3 R2 (CMD2 & CMD10)
// CID(Card IDentification): 128 bits = 128/8 = 16 bytes
bool SD_CMD2(alt_u8 szCID[], int nBufLen){
   44164:	defff204 	addi	sp,sp,-56
   44168:	dfc00d15 	stw	ra,52(sp)
   4416c:	df000c15 	stw	fp,48(sp)
   44170:	df000c04 	addi	fp,sp,48
   44174:	e13ffe15 	stw	r4,-8(fp)
   44178:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[17];  // 136/8 = 17
    const alt_u8 Cmd = 2;
   4417c:	00800084 	movi	r2,2
   44180:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   44184:	00801004 	movi	r2,64
   44188:	e0bffc05 	stb	r2,-16(fp)
   4418c:	e03ffc45 	stb	zero,-15(fp)
   44190:	e03ffc85 	stb	zero,-14(fp)
   44194:	e03ffcc5 	stb	zero,-13(fp)
   44198:	e03ffd05 	stb	zero,-12(fp)
   4419c:	e03ffd45 	stb	zero,-11(fp)

    SDCARD_TRACE(("CMD2\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   441a0:	e0fffc03 	ldbu	r3,-16(fp)
   441a4:	e0bff703 	ldbu	r2,-36(fp)
   441a8:	1884b03a 	or	r2,r3,r2
   441ac:	e0bffc05 	stb	r2,-16(fp)
    crc = crc7(0, szCmd, 5);
   441b0:	e0bffc04 	addi	r2,fp,-16
   441b4:	01800144 	movi	r6,5
   441b8:	100b883a 	mov	r5,r2
   441bc:	0009883a 	mov	r4,zero
   441c0:	0042c280 	call	42c28 <crc7>
   441c4:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   441c8:	e0bff743 	ldbu	r2,-35(fp)
   441cc:	1085883a 	add	r2,r2,r2
   441d0:	10800054 	ori	r2,r2,1
   441d4:	e0bffd45 	stb	r2,-11(fp)
    
    //
 //   sd_Ncc();
    //for(x=0;x<40;x++)
    //    sd_Ncr();
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   441d8:	e0bffc04 	addi	r2,fp,-16
   441dc:	01400184 	movi	r5,6
   441e0:	1009883a 	mov	r4,r2
   441e4:	0042d340 	call	42d34 <SDHAL_SendCmd>
  //  sd_Ncr();
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   441e8:	e0bff7c4 	addi	r2,fp,-33
   441ec:	01400444 	movi	r5,17
   441f0:	1009883a 	mov	r4,r2
   441f4:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   441f8:	e0bff415 	stw	r2,-48(fp)
    
    // check response content
    if (bSuccess){
   441fc:	e0bff417 	ldw	r2,-48(fp)
   44200:	10001e26 	beq	r2,zero,4427c <SD_CMD2+0x118>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
   44204:	e0bff417 	ldw	r2,-48(fp)
   44208:	10000526 	beq	r2,zero,44220 <SD_CMD2+0xbc>
   4420c:	e0bff7c3 	ldbu	r2,-33(fp)
   44210:	10803fcc 	andi	r2,r2,255
   44214:	10800fe0 	cmpeqi	r2,r2,63
   44218:	1000011e 	bne	r2,zero,44220 <SD_CMD2+0xbc>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   4421c:	e03ff415 	stw	zero,-48(fp)
        }
        
        
        // check crc
        if (bSuccess){
   44220:	e0bff417 	ldw	r2,-48(fp)
   44224:	10000e26 	beq	r2,zero,44260 <SD_CMD2+0xfc>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
   44228:	e0bff7c4 	addi	r2,fp,-33
   4422c:	10800044 	addi	r2,r2,1
   44230:	018003c4 	movi	r6,15
   44234:	100b883a 	mov	r5,r2
   44238:	0009883a 	mov	r4,zero
   4423c:	0042c280 	call	42c28 <crc7>
   44240:	e0bff785 	stb	r2,-34(fp)
            if (crc != (szResponse[16] >> 1)){
   44244:	e0bffbc3 	ldbu	r2,-17(fp)
   44248:	10803fcc 	andi	r2,r2,255
   4424c:	1004d07a 	srli	r2,r2,1
   44250:	10c03fcc 	andi	r3,r2,255
   44254:	e0bff783 	ldbu	r2,-34(fp)
   44258:	18800126 	beq	r3,r2,44260 <SD_CMD2+0xfc>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   4425c:	e03ff415 	stw	zero,-48(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
   44260:	e0bff417 	ldw	r2,-48(fp)
   44264:	10000526 	beq	r2,zero,4427c <SD_CMD2+0x118>
   44268:	e0bffbc3 	ldbu	r2,-17(fp)
   4426c:	10803fcc 	andi	r2,r2,255
   44270:	1080004c 	andi	r2,r2,1
   44274:	1000011e 	bne	r2,zero,4427c <SD_CMD2+0x118>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44278:	e03ff415 	stw	zero,-48(fp)
        }
          
    }
    
    if (bSuccess){
   4427c:	e0bff417 	ldw	r2,-48(fp)
   44280:	10001826 	beq	r2,zero,442e4 <SD_CMD2+0x180>
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
   44284:	e0bfff17 	ldw	r2,-4(fp)
   44288:	e0bff515 	stw	r2,-44(fp)
        if (nCopyLen > 16)
   4428c:	e0bff517 	ldw	r2,-44(fp)
   44290:	10800450 	cmplti	r2,r2,17
   44294:	1000021e 	bne	r2,zero,442a0 <SD_CMD2+0x13c>
            nCopyLen = 16;
   44298:	00800404 	movi	r2,16
   4429c:	e0bff515 	stw	r2,-44(fp)
        for(x=0;x<nCopyLen;x++)
   442a0:	e03ff615 	stw	zero,-40(fp)
   442a4:	00000c06 	br	442d8 <SD_CMD2+0x174>
            szCID[x] = szResponse[x+1];
   442a8:	e0bff617 	ldw	r2,-40(fp)
   442ac:	e0fffe17 	ldw	r3,-8(fp)
   442b0:	1885883a 	add	r2,r3,r2
   442b4:	e0fff617 	ldw	r3,-40(fp)
   442b8:	18c00044 	addi	r3,r3,1
   442bc:	e13ff7c4 	addi	r4,fp,-33
   442c0:	20c7883a 	add	r3,r4,r3
   442c4:	18c00003 	ldbu	r3,0(r3)
   442c8:	10c00005 	stb	r3,0(r2)
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
   442cc:	e0bff617 	ldw	r2,-40(fp)
   442d0:	10800044 	addi	r2,r2,1
   442d4:	e0bff615 	stw	r2,-40(fp)
   442d8:	e0fff617 	ldw	r3,-40(fp)
   442dc:	e0bff517 	ldw	r2,-44(fp)
   442e0:	18bff116 	blt	r3,r2,442a8 <_gp+0xffff1f3c>
            szCID[x] = szResponse[x+1];
        
    }
    
    return bSuccess;
   442e4:	e0bff417 	ldw	r2,-48(fp)
    
}
   442e8:	e037883a 	mov	sp,fp
   442ec:	dfc00117 	ldw	ra,4(sp)
   442f0:	df000017 	ldw	fp,0(sp)
   442f4:	dec00204 	addi	sp,sp,8
   442f8:	f800283a 	ret

000442fc <SD_CMD3>:

//
bool SD_CMD3(alt_u16 *pRCA16){
   442fc:	defff704 	addi	sp,sp,-36
   44300:	dfc00815 	stw	ra,32(sp)
   44304:	df000715 	stw	fp,28(sp)
   44308:	df000704 	addi	fp,sp,28
   4430c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 RCA16;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 3;
   44310:	008000c4 	movi	r2,3
   44314:	e0bffa85 	stb	r2,-22(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   44318:	00801004 	movi	r2,64
   4431c:	e0bffd85 	stb	r2,-10(fp)
   44320:	e03ffdc5 	stb	zero,-9(fp)
   44324:	e03ffe05 	stb	zero,-8(fp)
   44328:	e03ffe45 	stb	zero,-7(fp)
   4432c:	e03ffe85 	stb	zero,-6(fp)
   44330:	e03ffec5 	stb	zero,-5(fp)

    SDCARD_TRACE(("CMD3\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   44334:	e0fffd83 	ldbu	r3,-10(fp)
   44338:	e0bffa83 	ldbu	r2,-22(fp)
   4433c:	1884b03a 	or	r2,r3,r2
   44340:	e0bffd85 	stb	r2,-10(fp)
    crc = crc7(0, szCmd, 5);
   44344:	e0bffd84 	addi	r2,fp,-10
   44348:	01800144 	movi	r6,5
   4434c:	100b883a 	mov	r5,r2
   44350:	0009883a 	mov	r4,zero
   44354:	0042c280 	call	42c28 <crc7>
   44358:	e0bffac5 	stb	r2,-21(fp)
    szCmd[5] = (crc << 1) | 0x01;
   4435c:	e0bffac3 	ldbu	r2,-21(fp)
   44360:	1085883a 	add	r2,r2,r2
   44364:	10800054 	ori	r2,r2,1
   44368:	e0bffec5 	stb	r2,-5(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   4436c:	e0bffd84 	addi	r2,fp,-10
   44370:	01400184 	movi	r5,6
   44374:	1009883a 	mov	r4,r2
   44378:	0042d340 	call	42d34 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   4437c:	e0bffc04 	addi	r2,fp,-16
   44380:	01400184 	movi	r5,6
   44384:	1009883a 	mov	r4,r2
   44388:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   4438c:	e0bff915 	stw	r2,-28(fp)
    
    // check response content
    if (bSuccess){
   44390:	e0bff917 	ldw	r2,-28(fp)
   44394:	10003526 	beq	r2,zero,4446c <SD_CMD3+0x170>
        alt_u16 Status16;
        alt_u8  State8;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   44398:	e0bff917 	ldw	r2,-28(fp)
   4439c:	10000526 	beq	r2,zero,443b4 <SD_CMD3+0xb8>
   443a0:	e0bffc03 	ldbu	r2,-16(fp)
   443a4:	10c03fcc 	andi	r3,r2,255
   443a8:	e0bffa83 	ldbu	r2,-22(fp)
   443ac:	18800126 	beq	r3,r2,443b4 <SD_CMD3+0xb8>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   443b0:	e03ff915 	stw	zero,-28(fp)
        }
        
        // New published RCA[31:16] of the card
        RCA16 = (szResponse[1] << 8) | szResponse[2];
   443b4:	e0bffc43 	ldbu	r2,-15(fp)
   443b8:	10803fcc 	andi	r2,r2,255
   443bc:	1004923a 	slli	r2,r2,8
   443c0:	1007883a 	mov	r3,r2
   443c4:	e0bffc83 	ldbu	r2,-14(fp)
   443c8:	10803fcc 	andi	r2,r2,255
   443cc:	1884b03a 	or	r2,r3,r2
   443d0:	e0bffa0d 	sth	r2,-24(fp)
        
        // [15:0] card status bits (16 bits: 23, 22, 19, 12~0) 0x500   
        Status16 = (szResponse[3] << 8) | szResponse[4];
   443d4:	e0bffcc3 	ldbu	r2,-13(fp)
   443d8:	10803fcc 	andi	r2,r2,255
   443dc:	1004923a 	slli	r2,r2,8
   443e0:	1007883a 	mov	r3,r2
   443e4:	e0bffd03 	ldbu	r2,-12(fp)
   443e8:	10803fcc 	andi	r2,r2,255
   443ec:	1884b03a 	or	r2,r3,r2
   443f0:	e0bffb0d 	sth	r2,-20(fp)
        State8 = SD_CURRENT_STATE_DECODE(Status16);
   443f4:	e0bffb0b 	ldhu	r2,-20(fp)
   443f8:	1004d27a 	srli	r2,r2,9
   443fc:	108003cc 	andi	r2,r2,15
   44400:	e0bffb85 	stb	r2,-18(fp)
        if (State8 != SD_STATE_IDENT){
   44404:	e0bffb83 	ldbu	r2,-18(fp)
   44408:	108000a0 	cmpeqi	r2,r2,2
   4440c:	1000011e 	bne	r2,zero,44414 <SD_CMD3+0x118>
           SDCARD_DEBUG(("CMD%d Response: Unexpected CURRENT_STATE\r\n", Cmd));
           bSuccess = FALSE;
   44410:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check crc
        if (bSuccess){
   44414:	e0bff917 	ldw	r2,-28(fp)
   44418:	10000d26 	beq	r2,zero,44450 <SD_CMD3+0x154>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   4441c:	e0bffc04 	addi	r2,fp,-16
   44420:	01800144 	movi	r6,5
   44424:	100b883a 	mov	r5,r2
   44428:	0009883a 	mov	r4,zero
   4442c:	0042c280 	call	42c28 <crc7>
   44430:	e0bffbc5 	stb	r2,-17(fp)
            if (crc != (szResponse[5] >> 1)){
   44434:	e0bffd43 	ldbu	r2,-11(fp)
   44438:	10803fcc 	andi	r2,r2,255
   4443c:	1004d07a 	srli	r2,r2,1
   44440:	10c03fcc 	andi	r3,r2,255
   44444:	e0bffbc3 	ldbu	r2,-17(fp)
   44448:	18800126 	beq	r3,r2,44450 <SD_CMD3+0x154>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   4444c:	e03ff915 	stw	zero,-28(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44450:	e0bff917 	ldw	r2,-28(fp)
   44454:	10000526 	beq	r2,zero,4446c <SD_CMD3+0x170>
   44458:	e0bffd43 	ldbu	r2,-11(fp)
   4445c:	10803fcc 	andi	r2,r2,255
   44460:	1080004c 	andi	r2,r2,1
   44464:	1000011e 	bne	r2,zero,4446c <SD_CMD3+0x170>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44468:	e03ff915 	stw	zero,-28(fp)
        }
          
    }
    
    if (bSuccess)
   4446c:	e0bff917 	ldw	r2,-28(fp)
   44470:	10000326 	beq	r2,zero,44480 <SD_CMD3+0x184>
        *pRCA16 = RCA16;
   44474:	e0bfff17 	ldw	r2,-4(fp)
   44478:	e0fffa0b 	ldhu	r3,-24(fp)
   4447c:	10c0000d 	sth	r3,0(r2)
    
    return bSuccess;
   44480:	e0bff917 	ldw	r2,-28(fp)
    
}
   44484:	e037883a 	mov	sp,fp
   44488:	dfc00117 	ldw	ra,4(sp)
   4448c:	df000017 	ldw	fp,0(sp)
   44490:	dec00204 	addi	sp,sp,8
   44494:	f800283a 	ret

00044498 <SD_CMD9>:

bool SD_CMD9(alt_u16 RCA16, alt_u8 szCSD[], int nBufLen){
   44498:	defff104 	addi	sp,sp,-60
   4449c:	dfc00e15 	stw	ra,56(sp)
   444a0:	df000d15 	stw	fp,52(sp)
   444a4:	df000d04 	addi	fp,sp,52
   444a8:	2005883a 	mov	r2,r4
   444ac:	e17ffe15 	stw	r5,-8(fp)
   444b0:	e1bfff15 	stw	r6,-4(fp)
   444b4:	e0bffd0d 	sth	r2,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 9;
   444b8:	00800244 	movi	r2,9
   444bc:	e0bff605 	stb	r2,-40(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   444c0:	00801004 	movi	r2,64
   444c4:	e0bffb05 	stb	r2,-20(fp)
   444c8:	e03ffb45 	stb	zero,-19(fp)
   444cc:	e03ffb85 	stb	zero,-18(fp)
   444d0:	e03ffbc5 	stb	zero,-17(fp)
   444d4:	e03ffc05 	stb	zero,-16(fp)
   444d8:	e03ffc45 	stb	zero,-15(fp)

    SDCARD_TRACE(("CMD9\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   444dc:	e0fffb03 	ldbu	r3,-20(fp)
   444e0:	e0bff603 	ldbu	r2,-40(fp)
   444e4:	1884b03a 	or	r2,r3,r2
   444e8:	e0bffb05 	stb	r2,-20(fp)
    szCmd[1] |= RCA16 >> 8;
   444ec:	e0bffb43 	ldbu	r2,-19(fp)
   444f0:	e0fffd0b 	ldhu	r3,-12(fp)
   444f4:	1806d23a 	srli	r3,r3,8
   444f8:	10c4b03a 	or	r2,r2,r3
   444fc:	e0bffb45 	stb	r2,-19(fp)
    szCmd[2] |= RCA16 & 0xFF;
   44500:	e0bffb83 	ldbu	r2,-18(fp)
   44504:	1007883a 	mov	r3,r2
   44508:	e0bffd0b 	ldhu	r2,-12(fp)
   4450c:	1884b03a 	or	r2,r3,r2
   44510:	e0bffb85 	stb	r2,-18(fp)
    crc = crc7(0, szCmd, 5);
   44514:	e0bffb04 	addi	r2,fp,-20
   44518:	01800144 	movi	r6,5
   4451c:	100b883a 	mov	r5,r2
   44520:	0009883a 	mov	r4,zero
   44524:	0042c280 	call	42c28 <crc7>
   44528:	e0bff645 	stb	r2,-39(fp)
    szCmd[5] = (crc << 1) | 0x01;
   4452c:	e0bff643 	ldbu	r2,-39(fp)
   44530:	1085883a 	add	r2,r2,r2
   44534:	10800054 	ori	r2,r2,1
   44538:	e0bffc45 	stb	r2,-15(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   4453c:	e0bffb04 	addi	r2,fp,-20
   44540:	01400184 	movi	r5,6
   44544:	1009883a 	mov	r4,r2
   44548:	0042d340 	call	42d34 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   4454c:	e0bff6c4 	addi	r2,fp,-37
   44550:	01400444 	movi	r5,17
   44554:	1009883a 	mov	r4,r2
   44558:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   4455c:	e0bff315 	stw	r2,-52(fp)
    
    // check response content
    if (bSuccess){
   44560:	e0bff317 	ldw	r2,-52(fp)
   44564:	10001e26 	beq	r2,zero,445e0 <SD_CMD9+0x148>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
   44568:	e0bff317 	ldw	r2,-52(fp)
   4456c:	10000526 	beq	r2,zero,44584 <SD_CMD9+0xec>
   44570:	e0bff6c3 	ldbu	r2,-37(fp)
   44574:	10803fcc 	andi	r2,r2,255
   44578:	10800fe0 	cmpeqi	r2,r2,63
   4457c:	1000011e 	bne	r2,zero,44584 <SD_CMD9+0xec>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   44580:	e03ff315 	stw	zero,-52(fp)
        }
        
        // check crc
        if (bSuccess){
   44584:	e0bff317 	ldw	r2,-52(fp)
   44588:	10000e26 	beq	r2,zero,445c4 <SD_CMD9+0x12c>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
   4458c:	e0bff6c4 	addi	r2,fp,-37
   44590:	10800044 	addi	r2,r2,1
   44594:	018003c4 	movi	r6,15
   44598:	100b883a 	mov	r5,r2
   4459c:	0009883a 	mov	r4,zero
   445a0:	0042c280 	call	42c28 <crc7>
   445a4:	e0bff685 	stb	r2,-38(fp)
            if (crc != (szResponse[16] >> 1)){
   445a8:	e0bffac3 	ldbu	r2,-21(fp)
   445ac:	10803fcc 	andi	r2,r2,255
   445b0:	1004d07a 	srli	r2,r2,1
   445b4:	10c03fcc 	andi	r3,r2,255
   445b8:	e0bff683 	ldbu	r2,-38(fp)
   445bc:	18800126 	beq	r3,r2,445c4 <SD_CMD9+0x12c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   445c0:	e03ff315 	stw	zero,-52(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
   445c4:	e0bff317 	ldw	r2,-52(fp)
   445c8:	10000526 	beq	r2,zero,445e0 <SD_CMD9+0x148>
   445cc:	e0bffac3 	ldbu	r2,-21(fp)
   445d0:	10803fcc 	andi	r2,r2,255
   445d4:	1080004c 	andi	r2,r2,1
   445d8:	1000011e 	bne	r2,zero,445e0 <SD_CMD9+0x148>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   445dc:	e03ff315 	stw	zero,-52(fp)
        }
          
    }
    
    if (bSuccess){
   445e0:	e0bff317 	ldw	r2,-52(fp)
   445e4:	10001626 	beq	r2,zero,44640 <SD_CMD9+0x1a8>
        int nCopyLen, x;
        if (nCopyLen > 16)
   445e8:	e0bff417 	ldw	r2,-48(fp)
   445ec:	10800450 	cmplti	r2,r2,17
   445f0:	1000021e 	bne	r2,zero,445fc <SD_CMD9+0x164>
            nCopyLen = 16;
   445f4:	00800404 	movi	r2,16
   445f8:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
   445fc:	e03ff515 	stw	zero,-44(fp)
   44600:	00000c06 	br	44634 <SD_CMD9+0x19c>
            szCSD[x] = szResponse[x+1];           
   44604:	e0bff517 	ldw	r2,-44(fp)
   44608:	e0fffe17 	ldw	r3,-8(fp)
   4460c:	1885883a 	add	r2,r3,r2
   44610:	e0fff517 	ldw	r3,-44(fp)
   44614:	18c00044 	addi	r3,r3,1
   44618:	e13ff6c4 	addi	r4,fp,-37
   4461c:	20c7883a 	add	r3,r4,r3
   44620:	18c00003 	ldbu	r3,0(r3)
   44624:	10c00005 	stb	r3,0(r2)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
   44628:	e0bff517 	ldw	r2,-44(fp)
   4462c:	10800044 	addi	r2,r2,1
   44630:	e0bff515 	stw	r2,-44(fp)
   44634:	e0fff517 	ldw	r3,-44(fp)
   44638:	e0bff417 	ldw	r2,-48(fp)
   4463c:	18bff116 	blt	r3,r2,44604 <_gp+0xffff2298>
            szCSD[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
   44640:	e0bff317 	ldw	r2,-52(fp)
}
   44644:	e037883a 	mov	sp,fp
   44648:	dfc00117 	ldw	ra,4(sp)
   4464c:	df000017 	ldw	fp,0(sp)
   44650:	dec00204 	addi	sp,sp,8
   44654:	f800283a 	ret

00044658 <SD_CMD10>:

bool SD_CMD10(alt_u16 RCA16, alt_u8 szCID[], int nBufLen){
   44658:	defff104 	addi	sp,sp,-60
   4465c:	dfc00e15 	stw	ra,56(sp)
   44660:	df000d15 	stw	fp,52(sp)
   44664:	df000d04 	addi	fp,sp,52
   44668:	2005883a 	mov	r2,r4
   4466c:	e17ffe15 	stw	r5,-8(fp)
   44670:	e1bfff15 	stw	r6,-4(fp)
   44674:	e0bffd0d 	sth	r2,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 10;
   44678:	00800284 	movi	r2,10
   4467c:	e0bff605 	stb	r2,-40(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   44680:	00801004 	movi	r2,64
   44684:	e0bffb05 	stb	r2,-20(fp)
   44688:	e03ffb45 	stb	zero,-19(fp)
   4468c:	e03ffb85 	stb	zero,-18(fp)
   44690:	e03ffbc5 	stb	zero,-17(fp)
   44694:	e03ffc05 	stb	zero,-16(fp)
   44698:	e03ffc45 	stb	zero,-15(fp)

    SDCARD_TRACE(("CMD10\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   4469c:	e0fffb03 	ldbu	r3,-20(fp)
   446a0:	e0bff603 	ldbu	r2,-40(fp)
   446a4:	1884b03a 	or	r2,r3,r2
   446a8:	e0bffb05 	stb	r2,-20(fp)
    szCmd[1] |= RCA16 >> 8;
   446ac:	e0bffb43 	ldbu	r2,-19(fp)
   446b0:	e0fffd0b 	ldhu	r3,-12(fp)
   446b4:	1806d23a 	srli	r3,r3,8
   446b8:	10c4b03a 	or	r2,r2,r3
   446bc:	e0bffb45 	stb	r2,-19(fp)
    szCmd[2] |= RCA16 & 0xFF;
   446c0:	e0bffb83 	ldbu	r2,-18(fp)
   446c4:	1007883a 	mov	r3,r2
   446c8:	e0bffd0b 	ldhu	r2,-12(fp)
   446cc:	1884b03a 	or	r2,r3,r2
   446d0:	e0bffb85 	stb	r2,-18(fp)
    crc = crc7(0, szCmd, 5);
   446d4:	e0bffb04 	addi	r2,fp,-20
   446d8:	01800144 	movi	r6,5
   446dc:	100b883a 	mov	r5,r2
   446e0:	0009883a 	mov	r4,zero
   446e4:	0042c280 	call	42c28 <crc7>
   446e8:	e0bff645 	stb	r2,-39(fp)
    szCmd[5] = (crc << 1) | 0x01;
   446ec:	e0bff643 	ldbu	r2,-39(fp)
   446f0:	1085883a 	add	r2,r2,r2
   446f4:	10800054 	ori	r2,r2,1
   446f8:	e0bffc45 	stb	r2,-15(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   446fc:	e0bffb04 	addi	r2,fp,-20
   44700:	01400184 	movi	r5,6
   44704:	1009883a 	mov	r4,r2
   44708:	0042d340 	call	42d34 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   4470c:	e0bff6c4 	addi	r2,fp,-37
   44710:	01400444 	movi	r5,17
   44714:	1009883a 	mov	r4,r2
   44718:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   4471c:	e0bff315 	stw	r2,-52(fp)
    
    // check response content
    if (bSuccess){
   44720:	e0bff317 	ldw	r2,-52(fp)
   44724:	10001e26 	beq	r2,zero,447a0 <SD_CMD10+0x148>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
   44728:	e0bff317 	ldw	r2,-52(fp)
   4472c:	10000526 	beq	r2,zero,44744 <SD_CMD10+0xec>
   44730:	e0bff6c3 	ldbu	r2,-37(fp)
   44734:	10803fcc 	andi	r2,r2,255
   44738:	10800fe0 	cmpeqi	r2,r2,63
   4473c:	1000011e 	bne	r2,zero,44744 <SD_CMD10+0xec>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   44740:	e03ff315 	stw	zero,-52(fp)
        }
        
        // check crc
        if (bSuccess){
   44744:	e0bff317 	ldw	r2,-52(fp)
   44748:	10000e26 	beq	r2,zero,44784 <SD_CMD10+0x12c>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
   4474c:	e0bff6c4 	addi	r2,fp,-37
   44750:	10800044 	addi	r2,r2,1
   44754:	018003c4 	movi	r6,15
   44758:	100b883a 	mov	r5,r2
   4475c:	0009883a 	mov	r4,zero
   44760:	0042c280 	call	42c28 <crc7>
   44764:	e0bff685 	stb	r2,-38(fp)
            if (crc != (szResponse[16] >> 1)){
   44768:	e0bffac3 	ldbu	r2,-21(fp)
   4476c:	10803fcc 	andi	r2,r2,255
   44770:	1004d07a 	srli	r2,r2,1
   44774:	10c03fcc 	andi	r3,r2,255
   44778:	e0bff683 	ldbu	r2,-38(fp)
   4477c:	18800126 	beq	r3,r2,44784 <SD_CMD10+0x12c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44780:	e03ff315 	stw	zero,-52(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
   44784:	e0bff317 	ldw	r2,-52(fp)
   44788:	10000526 	beq	r2,zero,447a0 <SD_CMD10+0x148>
   4478c:	e0bffac3 	ldbu	r2,-21(fp)
   44790:	10803fcc 	andi	r2,r2,255
   44794:	1080004c 	andi	r2,r2,1
   44798:	1000011e 	bne	r2,zero,447a0 <SD_CMD10+0x148>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   4479c:	e03ff315 	stw	zero,-52(fp)
        }
          
    }
    
    if (bSuccess){
   447a0:	e0bff317 	ldw	r2,-52(fp)
   447a4:	10001626 	beq	r2,zero,44800 <SD_CMD10+0x1a8>
        int nCopyLen, x;
        if (nCopyLen > 16)
   447a8:	e0bff417 	ldw	r2,-48(fp)
   447ac:	10800450 	cmplti	r2,r2,17
   447b0:	1000021e 	bne	r2,zero,447bc <SD_CMD10+0x164>
            nCopyLen = 16;
   447b4:	00800404 	movi	r2,16
   447b8:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
   447bc:	e03ff515 	stw	zero,-44(fp)
   447c0:	00000c06 	br	447f4 <SD_CMD10+0x19c>
            szCID[x] = szResponse[x+1];           
   447c4:	e0bff517 	ldw	r2,-44(fp)
   447c8:	e0fffe17 	ldw	r3,-8(fp)
   447cc:	1885883a 	add	r2,r3,r2
   447d0:	e0fff517 	ldw	r3,-44(fp)
   447d4:	18c00044 	addi	r3,r3,1
   447d8:	e13ff6c4 	addi	r4,fp,-37
   447dc:	20c7883a 	add	r3,r4,r3
   447e0:	18c00003 	ldbu	r3,0(r3)
   447e4:	10c00005 	stb	r3,0(r2)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
   447e8:	e0bff517 	ldw	r2,-44(fp)
   447ec:	10800044 	addi	r2,r2,1
   447f0:	e0bff515 	stw	r2,-44(fp)
   447f4:	e0fff517 	ldw	r3,-44(fp)
   447f8:	e0bff417 	ldw	r2,-48(fp)
   447fc:	18bff116 	blt	r3,r2,447c4 <_gp+0xffff2458>
            szCID[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
   44800:	e0bff317 	ldw	r2,-52(fp)
}
   44804:	e037883a 	mov	sp,fp
   44808:	dfc00117 	ldw	ra,4(sp)
   4480c:	df000017 	ldw	fp,0(sp)
   44810:	dec00204 	addi	sp,sp,8
   44814:	f800283a 	ret

00044818 <SD_CMD7>:


bool SD_CMD7(alt_u16 RCA16){
   44818:	defff504 	addi	sp,sp,-44
   4481c:	dfc00a15 	stw	ra,40(sp)
   44820:	df000915 	stw	fp,36(sp)
   44824:	df000904 	addi	fp,sp,36
   44828:	2005883a 	mov	r2,r4
   4482c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 7;
   44830:	008001c4 	movi	r2,7
   44834:	e0bff805 	stb	r2,-32(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   44838:	00801004 	movi	r2,64
   4483c:	e0bffcc5 	stb	r2,-13(fp)
   44840:	e03ffd05 	stb	zero,-12(fp)
   44844:	e03ffd45 	stb	zero,-11(fp)
   44848:	e03ffd85 	stb	zero,-10(fp)
   4484c:	e03ffdc5 	stb	zero,-9(fp)
   44850:	e03ffe05 	stb	zero,-8(fp)

    SDCARD_TRACE(("CMD7\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   44854:	e0fffcc3 	ldbu	r3,-13(fp)
   44858:	e0bff803 	ldbu	r2,-32(fp)
   4485c:	1884b03a 	or	r2,r3,r2
   44860:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[1] |= RCA16 >> 8;
   44864:	e0bffd03 	ldbu	r2,-12(fp)
   44868:	e0ffff0b 	ldhu	r3,-4(fp)
   4486c:	1806d23a 	srli	r3,r3,8
   44870:	10c4b03a 	or	r2,r2,r3
   44874:	e0bffd05 	stb	r2,-12(fp)
    szCmd[2] |= RCA16 & 0xFF;
   44878:	e0bffd43 	ldbu	r2,-11(fp)
   4487c:	1007883a 	mov	r3,r2
   44880:	e0bfff0b 	ldhu	r2,-4(fp)
   44884:	1884b03a 	or	r2,r3,r2
   44888:	e0bffd45 	stb	r2,-11(fp)
    crc = crc7(0, szCmd, 5);
   4488c:	e0bffcc4 	addi	r2,fp,-13
   44890:	01800144 	movi	r6,5
   44894:	100b883a 	mov	r5,r2
   44898:	0009883a 	mov	r4,zero
   4489c:	0042c280 	call	42c28 <crc7>
   448a0:	e0bff845 	stb	r2,-31(fp)
    szCmd[5] = (crc << 1) | 0x01;
   448a4:	e0bff843 	ldbu	r2,-31(fp)
   448a8:	1085883a 	add	r2,r2,r2
   448ac:	10800054 	ori	r2,r2,1
   448b0:	e0bffe05 	stb	r2,-8(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   448b4:	e0bffcc4 	addi	r2,fp,-13
   448b8:	01400184 	movi	r5,6
   448bc:	1009883a 	mov	r4,r2
   448c0:	0042d340 	call	42d34 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   448c4:	e0bffb44 	addi	r2,fp,-19
   448c8:	01400184 	movi	r5,6
   448cc:	1009883a 	mov	r4,r2
   448d0:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   448d4:	e0bff715 	stw	r2,-36(fp)
    
    // check response content
    if (bSuccess){
   448d8:	e0bff717 	ldw	r2,-36(fp)
   448dc:	10002826 	beq	r2,zero,44980 <SD_CMD7+0x168>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   448e0:	e0bff717 	ldw	r2,-36(fp)
   448e4:	10000526 	beq	r2,zero,448fc <SD_CMD7+0xe4>
   448e8:	e0bffb43 	ldbu	r2,-19(fp)
   448ec:	10c03fcc 	andi	r3,r2,255
   448f0:	e0bff803 	ldbu	r2,-32(fp)
   448f4:	18800126 	beq	r3,r2,448fc <SD_CMD7+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   448f8:	e03ff715 	stw	zero,-36(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   448fc:	e0bffb44 	addi	r2,fp,-19
   44900:	10800044 	addi	r2,r2,1
   44904:	1009883a 	mov	r4,r2
   44908:	00452140 	call	45214 <ArrayToU32>
   4490c:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_STBY);
   44910:	0081c004 	movi	r2,1792
   44914:	e0bffa15 	stw	r2,-24(fp)
        if (CardStatus != ExpectedStatus){
   44918:	e0fff917 	ldw	r3,-28(fp)
   4491c:	e0bffa17 	ldw	r2,-24(fp)
   44920:	18800126 	beq	r3,r2,44928 <SD_CMD7+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44924:	e03ff715 	stw	zero,-36(fp)
        }        
        
        // check crc
        if (bSuccess){
   44928:	e0bff717 	ldw	r2,-36(fp)
   4492c:	10000d26 	beq	r2,zero,44964 <SD_CMD7+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44930:	e0bffb44 	addi	r2,fp,-19
   44934:	01800144 	movi	r6,5
   44938:	100b883a 	mov	r5,r2
   4493c:	0009883a 	mov	r4,zero
   44940:	0042c280 	call	42c28 <crc7>
   44944:	e0bffb05 	stb	r2,-20(fp)
            if (crc != (szResponse[5] >> 1)){
   44948:	e0bffc83 	ldbu	r2,-14(fp)
   4494c:	10803fcc 	andi	r2,r2,255
   44950:	1004d07a 	srli	r2,r2,1
   44954:	10c03fcc 	andi	r3,r2,255
   44958:	e0bffb03 	ldbu	r2,-20(fp)
   4495c:	18800126 	beq	r3,r2,44964 <SD_CMD7+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44960:	e03ff715 	stw	zero,-36(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44964:	e0bff717 	ldw	r2,-36(fp)
   44968:	10000526 	beq	r2,zero,44980 <SD_CMD7+0x168>
   4496c:	e0bffc83 	ldbu	r2,-14(fp)
   44970:	10803fcc 	andi	r2,r2,255
   44974:	1080004c 	andi	r2,r2,1
   44978:	1000011e 	bne	r2,zero,44980 <SD_CMD7+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   4497c:	e03ff715 	stw	zero,-36(fp)
          
    }
    
     
    
    return bSuccess;
   44980:	e0bff717 	ldw	r2,-36(fp)
}
   44984:	e037883a 	mov	sp,fp
   44988:	dfc00117 	ldw	ra,4(sp)
   4498c:	df000017 	ldw	fp,0(sp)
   44990:	dec00204 	addi	sp,sp,8
   44994:	f800283a 	ret

00044998 <SD_CMD16>:

bool SD_CMD16(alt_u32 BlockSize){
   44998:	defff504 	addi	sp,sp,-44
   4499c:	dfc00a15 	stw	ra,40(sp)
   449a0:	df000915 	stw	fp,36(sp)
   449a4:	df000904 	addi	fp,sp,36
   449a8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 16;
   449ac:	00800404 	movi	r2,16
   449b0:	e0bff805 	stb	r2,-32(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   449b4:	00801004 	movi	r2,64
   449b8:	e0bffcc5 	stb	r2,-13(fp)
   449bc:	e03ffd05 	stb	zero,-12(fp)
   449c0:	e03ffd45 	stb	zero,-11(fp)
   449c4:	e03ffd85 	stb	zero,-10(fp)
   449c8:	e03ffdc5 	stb	zero,-9(fp)
   449cc:	e03ffe05 	stb	zero,-8(fp)

    SDCARD_TRACE(("CMD16\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   449d0:	e0fffcc3 	ldbu	r3,-13(fp)
   449d4:	e0bff803 	ldbu	r2,-32(fp)
   449d8:	1884b03a 	or	r2,r3,r2
   449dc:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[1] |= BlockSize >> 24;
   449e0:	e0bffd03 	ldbu	r2,-12(fp)
   449e4:	e0ffff17 	ldw	r3,-4(fp)
   449e8:	1806d63a 	srli	r3,r3,24
   449ec:	10c4b03a 	or	r2,r2,r3
   449f0:	e0bffd05 	stb	r2,-12(fp)
    szCmd[2] |= BlockSize >> 16;
   449f4:	e0bffd43 	ldbu	r2,-11(fp)
   449f8:	e0ffff17 	ldw	r3,-4(fp)
   449fc:	1806d43a 	srli	r3,r3,16
   44a00:	10c4b03a 	or	r2,r2,r3
   44a04:	e0bffd45 	stb	r2,-11(fp)
    szCmd[3] |= BlockSize >> 8;
   44a08:	e0bffd83 	ldbu	r2,-10(fp)
   44a0c:	e0ffff17 	ldw	r3,-4(fp)
   44a10:	1806d23a 	srli	r3,r3,8
   44a14:	10c4b03a 	or	r2,r2,r3
   44a18:	e0bffd85 	stb	r2,-10(fp)
    szCmd[4] |= BlockSize & 0xFF;
   44a1c:	e0bffdc3 	ldbu	r2,-9(fp)
   44a20:	e0ffff17 	ldw	r3,-4(fp)
   44a24:	10c4b03a 	or	r2,r2,r3
   44a28:	e0bffdc5 	stb	r2,-9(fp)
    crc = crc7(0, szCmd, 5);
   44a2c:	e0bffcc4 	addi	r2,fp,-13
   44a30:	01800144 	movi	r6,5
   44a34:	100b883a 	mov	r5,r2
   44a38:	0009883a 	mov	r4,zero
   44a3c:	0042c280 	call	42c28 <crc7>
   44a40:	e0bff845 	stb	r2,-31(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44a44:	e0bff843 	ldbu	r2,-31(fp)
   44a48:	1085883a 	add	r2,r2,r2
   44a4c:	10800054 	ori	r2,r2,1
   44a50:	e0bffe05 	stb	r2,-8(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44a54:	e0bffcc4 	addi	r2,fp,-13
   44a58:	01400184 	movi	r5,6
   44a5c:	1009883a 	mov	r4,r2
   44a60:	0042d340 	call	42d34 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44a64:	e0bffb44 	addi	r2,fp,-19
   44a68:	01400184 	movi	r5,6
   44a6c:	1009883a 	mov	r4,r2
   44a70:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   44a74:	e0bff715 	stw	r2,-36(fp)
    
    // check response content
    if (bSuccess){
   44a78:	e0bff717 	ldw	r2,-36(fp)
   44a7c:	10002826 	beq	r2,zero,44b20 <SD_CMD16+0x188>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   44a80:	e0bff717 	ldw	r2,-36(fp)
   44a84:	10000526 	beq	r2,zero,44a9c <SD_CMD16+0x104>
   44a88:	e0bffb43 	ldbu	r2,-19(fp)
   44a8c:	10c03fcc 	andi	r3,r2,255
   44a90:	e0bff803 	ldbu	r2,-32(fp)
   44a94:	18800126 	beq	r3,r2,44a9c <SD_CMD16+0x104>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   44a98:	e03ff715 	stw	zero,-36(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   44a9c:	e0bffb44 	addi	r2,fp,-19
   44aa0:	10800044 	addi	r2,r2,1
   44aa4:	1009883a 	mov	r4,r2
   44aa8:	00452140 	call	45214 <ArrayToU32>
   44aac:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
   44ab0:	00824004 	movi	r2,2304
   44ab4:	e0bffa15 	stw	r2,-24(fp)
        if (CardStatus != ExpectedStatus){
   44ab8:	e0fff917 	ldw	r3,-28(fp)
   44abc:	e0bffa17 	ldw	r2,-24(fp)
   44ac0:	18800126 	beq	r3,r2,44ac8 <SD_CMD16+0x130>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44ac4:	e03ff715 	stw	zero,-36(fp)
        }        
        
        // check crc
        if (bSuccess){
   44ac8:	e0bff717 	ldw	r2,-36(fp)
   44acc:	10000d26 	beq	r2,zero,44b04 <SD_CMD16+0x16c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44ad0:	e0bffb44 	addi	r2,fp,-19
   44ad4:	01800144 	movi	r6,5
   44ad8:	100b883a 	mov	r5,r2
   44adc:	0009883a 	mov	r4,zero
   44ae0:	0042c280 	call	42c28 <crc7>
   44ae4:	e0bffb05 	stb	r2,-20(fp)
            if (crc != (szResponse[5] >> 1)){
   44ae8:	e0bffc83 	ldbu	r2,-14(fp)
   44aec:	10803fcc 	andi	r2,r2,255
   44af0:	1004d07a 	srli	r2,r2,1
   44af4:	10c03fcc 	andi	r3,r2,255
   44af8:	e0bffb03 	ldbu	r2,-20(fp)
   44afc:	18800126 	beq	r3,r2,44b04 <SD_CMD16+0x16c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44b00:	e03ff715 	stw	zero,-36(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44b04:	e0bff717 	ldw	r2,-36(fp)
   44b08:	10000526 	beq	r2,zero,44b20 <SD_CMD16+0x188>
   44b0c:	e0bffc83 	ldbu	r2,-14(fp)
   44b10:	10803fcc 	andi	r2,r2,255
   44b14:	1080004c 	andi	r2,r2,1
   44b18:	1000011e 	bne	r2,zero,44b20 <SD_CMD16+0x188>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44b1c:	e03ff715 	stw	zero,-36(fp)
          
    }
    
     
    
    return bSuccess;
   44b20:	e0bff717 	ldw	r2,-36(fp)
}
   44b24:	e037883a 	mov	sp,fp
   44b28:	dfc00117 	ldw	ra,4(sp)
   44b2c:	df000017 	ldw	fp,0(sp)
   44b30:	dec00204 	addi	sp,sp,8
   44b34:	f800283a 	ret

00044b38 <SD_ACMD6>:

// SET_BUS_WIDTH
// Response: R1
bool SD_ACMD6(bool b4BitsBus, alt_u8 ExpectedState){
   44b38:	defff404 	addi	sp,sp,-48
   44b3c:	dfc00b15 	stw	ra,44(sp)
   44b40:	df000a15 	stw	fp,40(sp)
   44b44:	df000a04 	addi	fp,sp,40
   44b48:	e13ffe15 	stw	r4,-8(fp)
   44b4c:	2805883a 	mov	r2,r5
   44b50:	e0bfff05 	stb	r2,-4(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 6;
   44b54:	00800184 	movi	r2,6
   44b58:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
   44b5c:	00801004 	movi	r2,64
   44b60:	e0bffbc5 	stb	r2,-17(fp)
   44b64:	e03ffc05 	stb	zero,-16(fp)
   44b68:	e03ffc45 	stb	zero,-15(fp)
   44b6c:	e03ffc85 	stb	zero,-14(fp)
   44b70:	e03ffcc5 	stb	zero,-13(fp)
   44b74:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("ACMD6\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   44b78:	e0fffbc3 	ldbu	r3,-17(fp)
   44b7c:	e0bff703 	ldbu	r2,-36(fp)
   44b80:	1884b03a 	or	r2,r3,r2
   44b84:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[4] |= b4BitsBus?2:0;
   44b88:	e0bffcc3 	ldbu	r2,-13(fp)
   44b8c:	1007883a 	mov	r3,r2
   44b90:	e0bffe17 	ldw	r2,-8(fp)
   44b94:	10000226 	beq	r2,zero,44ba0 <SD_ACMD6+0x68>
   44b98:	00800084 	movi	r2,2
   44b9c:	00000106 	br	44ba4 <SD_ACMD6+0x6c>
   44ba0:	0005883a 	mov	r2,zero
   44ba4:	1884b03a 	or	r2,r3,r2
   44ba8:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   44bac:	e0bffbc4 	addi	r2,fp,-17
   44bb0:	01800144 	movi	r6,5
   44bb4:	100b883a 	mov	r5,r2
   44bb8:	0009883a 	mov	r4,zero
   44bbc:	0042c280 	call	42c28 <crc7>
   44bc0:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44bc4:	e0bff743 	ldbu	r2,-35(fp)
   44bc8:	1085883a 	add	r2,r2,r2
   44bcc:	10800054 	ori	r2,r2,1
   44bd0:	e0bffd05 	stb	r2,-12(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44bd4:	e0bffbc4 	addi	r2,fp,-17
   44bd8:	01400184 	movi	r5,6
   44bdc:	1009883a 	mov	r4,r2
   44be0:	0042d340 	call	42d34 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44be4:	e0bffa44 	addi	r2,fp,-23
   44be8:	01400184 	movi	r5,6
   44bec:	1009883a 	mov	r4,r2
   44bf0:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   44bf4:	e0bff615 	stw	r2,-40(fp)
    
    if (bSuccess){
   44bf8:	e0bff617 	ldw	r2,-40(fp)
   44bfc:	10002b26 	beq	r2,zero,44cac <SD_ACMD6+0x174>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   44c00:	e0bff617 	ldw	r2,-40(fp)
   44c04:	10000526 	beq	r2,zero,44c1c <SD_ACMD6+0xe4>
   44c08:	e0bffa43 	ldbu	r2,-23(fp)
   44c0c:	10c03fcc 	andi	r3,r2,255
   44c10:	e0bff703 	ldbu	r2,-36(fp)
   44c14:	18800126 	beq	r3,r2,44c1c <SD_ACMD6+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
   44c18:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
   44c1c:	e0bffa44 	addi	r2,fp,-23
   44c20:	10800044 	addi	r2,r2,1
   44c24:	1009883a 	mov	r4,r2
   44c28:	00452140 	call	45214 <ArrayToU32>
   44c2c:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
   44c30:	e0bfff03 	ldbu	r2,-4(fp)
   44c34:	108003cc 	andi	r2,r2,15
   44c38:	1004927a 	slli	r2,r2,9
   44c3c:	10804814 	ori	r2,r2,288
   44c40:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   44c44:	e0fff817 	ldw	r3,-32(fp)
   44c48:	e0bff917 	ldw	r2,-28(fp)
   44c4c:	18800126 	beq	r3,r2,44c54 <SD_ACMD6+0x11c>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44c50:	e03ff615 	stw	zero,-40(fp)
        }
                
        // check crc
        if (bSuccess){
   44c54:	e0bff617 	ldw	r2,-40(fp)
   44c58:	10000d26 	beq	r2,zero,44c90 <SD_ACMD6+0x158>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44c5c:	e0bffa44 	addi	r2,fp,-23
   44c60:	01800144 	movi	r6,5
   44c64:	100b883a 	mov	r5,r2
   44c68:	0009883a 	mov	r4,zero
   44c6c:	0042c280 	call	42c28 <crc7>
   44c70:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   44c74:	e0bffb83 	ldbu	r2,-18(fp)
   44c78:	10803fcc 	andi	r2,r2,255
   44c7c:	1004d07a 	srli	r2,r2,1
   44c80:	10c03fcc 	andi	r3,r2,255
   44c84:	e0bffa03 	ldbu	r2,-24(fp)
   44c88:	18800126 	beq	r3,r2,44c90 <SD_ACMD6+0x158>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44c8c:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44c90:	e0bff617 	ldw	r2,-40(fp)
   44c94:	10000526 	beq	r2,zero,44cac <SD_ACMD6+0x174>
   44c98:	e0bffb83 	ldbu	r2,-18(fp)
   44c9c:	10803fcc 	andi	r2,r2,255
   44ca0:	1080004c 	andi	r2,r2,1
   44ca4:	1000011e 	bne	r2,zero,44cac <SD_ACMD6+0x174>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44ca8:	e03ff615 	stw	zero,-40(fp)
        }
          
    }      
    

    return bSuccess;
   44cac:	e0bff617 	ldw	r2,-40(fp)
}
   44cb0:	e037883a 	mov	sp,fp
   44cb4:	dfc00117 	ldw	ra,4(sp)
   44cb8:	df000017 	ldw	fp,0(sp)
   44cbc:	dec00204 	addi	sp,sp,8
   44cc0:	f800283a 	ret

00044cc4 <SD_ACMD42>:

// SET_CLR_CARD_DETECT
// Response: R1
bool SD_ACMD42(bool b4BitsBus, alt_u8 ExpectedState){
   44cc4:	defff404 	addi	sp,sp,-48
   44cc8:	dfc00b15 	stw	ra,44(sp)
   44ccc:	df000a15 	stw	fp,40(sp)
   44cd0:	df000a04 	addi	fp,sp,40
   44cd4:	e13ffe15 	stw	r4,-8(fp)
   44cd8:	2805883a 	mov	r2,r5
   44cdc:	e0bfff05 	stb	r2,-4(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 42;
   44ce0:	00800a84 	movi	r2,42
   44ce4:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
   44ce8:	00801004 	movi	r2,64
   44cec:	e0bffbc5 	stb	r2,-17(fp)
   44cf0:	e03ffc05 	stb	zero,-16(fp)
   44cf4:	e03ffc45 	stb	zero,-15(fp)
   44cf8:	e03ffc85 	stb	zero,-14(fp)
   44cfc:	e03ffcc5 	stb	zero,-13(fp)
   44d00:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("ACMD42\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   44d04:	e0fffbc3 	ldbu	r3,-17(fp)
   44d08:	e0bff703 	ldbu	r2,-36(fp)
   44d0c:	1884b03a 	or	r2,r3,r2
   44d10:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[4] |= b4BitsBus?1:0;
   44d14:	e0bffcc3 	ldbu	r2,-13(fp)
   44d18:	1007883a 	mov	r3,r2
   44d1c:	e0bffe17 	ldw	r2,-8(fp)
   44d20:	1004c03a 	cmpne	r2,r2,zero
   44d24:	1884b03a 	or	r2,r3,r2
   44d28:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   44d2c:	e0bffbc4 	addi	r2,fp,-17
   44d30:	01800144 	movi	r6,5
   44d34:	100b883a 	mov	r5,r2
   44d38:	0009883a 	mov	r4,zero
   44d3c:	0042c280 	call	42c28 <crc7>
   44d40:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44d44:	e0bff743 	ldbu	r2,-35(fp)
   44d48:	1085883a 	add	r2,r2,r2
   44d4c:	10800054 	ori	r2,r2,1
   44d50:	e0bffd05 	stb	r2,-12(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44d54:	e0bffbc4 	addi	r2,fp,-17
   44d58:	01400184 	movi	r5,6
   44d5c:	1009883a 	mov	r4,r2
   44d60:	0042d340 	call	42d34 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44d64:	e0bffa44 	addi	r2,fp,-23
   44d68:	01400184 	movi	r5,6
   44d6c:	1009883a 	mov	r4,r2
   44d70:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   44d74:	e0bff615 	stw	r2,-40(fp)
    
    if (bSuccess){
   44d78:	e0bff617 	ldw	r2,-40(fp)
   44d7c:	10002b26 	beq	r2,zero,44e2c <SD_ACMD42+0x168>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   44d80:	e0bff617 	ldw	r2,-40(fp)
   44d84:	10000526 	beq	r2,zero,44d9c <SD_ACMD42+0xd8>
   44d88:	e0bffa43 	ldbu	r2,-23(fp)
   44d8c:	10c03fcc 	andi	r3,r2,255
   44d90:	e0bff703 	ldbu	r2,-36(fp)
   44d94:	18800126 	beq	r3,r2,44d9c <SD_ACMD42+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
   44d98:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
   44d9c:	e0bffa44 	addi	r2,fp,-23
   44da0:	10800044 	addi	r2,r2,1
   44da4:	1009883a 	mov	r4,r2
   44da8:	00452140 	call	45214 <ArrayToU32>
   44dac:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
   44db0:	e0bfff03 	ldbu	r2,-4(fp)
   44db4:	108003cc 	andi	r2,r2,15
   44db8:	1004927a 	slli	r2,r2,9
   44dbc:	10804814 	ori	r2,r2,288
   44dc0:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   44dc4:	e0fff817 	ldw	r3,-32(fp)
   44dc8:	e0bff917 	ldw	r2,-28(fp)
   44dcc:	18800126 	beq	r3,r2,44dd4 <SD_ACMD42+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44dd0:	e03ff615 	stw	zero,-40(fp)
        }
                
        // check crc
        if (bSuccess){
   44dd4:	e0bff617 	ldw	r2,-40(fp)
   44dd8:	10000d26 	beq	r2,zero,44e10 <SD_ACMD42+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44ddc:	e0bffa44 	addi	r2,fp,-23
   44de0:	01800144 	movi	r6,5
   44de4:	100b883a 	mov	r5,r2
   44de8:	0009883a 	mov	r4,zero
   44dec:	0042c280 	call	42c28 <crc7>
   44df0:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   44df4:	e0bffb83 	ldbu	r2,-18(fp)
   44df8:	10803fcc 	andi	r2,r2,255
   44dfc:	1004d07a 	srli	r2,r2,1
   44e00:	10c03fcc 	andi	r3,r2,255
   44e04:	e0bffa03 	ldbu	r2,-24(fp)
   44e08:	18800126 	beq	r3,r2,44e10 <SD_ACMD42+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44e0c:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44e10:	e0bff617 	ldw	r2,-40(fp)
   44e14:	10000526 	beq	r2,zero,44e2c <SD_ACMD42+0x168>
   44e18:	e0bffb83 	ldbu	r2,-18(fp)
   44e1c:	10803fcc 	andi	r2,r2,255
   44e20:	1080004c 	andi	r2,r2,1
   44e24:	1000011e 	bne	r2,zero,44e2c <SD_ACMD42+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44e28:	e03ff615 	stw	zero,-40(fp)
        }
          
    }      
    

    return bSuccess;
   44e2c:	e0bff617 	ldw	r2,-40(fp)
}
   44e30:	e037883a 	mov	sp,fp
   44e34:	dfc00117 	ldw	ra,4(sp)
   44e38:	df000017 	ldw	fp,0(sp)
   44e3c:	dec00204 	addi	sp,sp,8
   44e40:	f800283a 	ret

00044e44 <SD_CMD17>:


// READ_SINGLE_BLOCK
// Response R1
bool SD_CMD17(alt_u32 Addr, alt_u8 ExpectedStatus){
   44e44:	defff404 	addi	sp,sp,-48
   44e48:	dfc00b15 	stw	ra,44(sp)
   44e4c:	df000a15 	stw	fp,40(sp)
   44e50:	df000a04 	addi	fp,sp,40
   44e54:	e13ffe15 	stw	r4,-8(fp)
   44e58:	2805883a 	mov	r2,r5
   44e5c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 17;
   44e60:	00800444 	movi	r2,17
   44e64:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   44e68:	00801004 	movi	r2,64
   44e6c:	e0bffbc5 	stb	r2,-17(fp)
   44e70:	e03ffc05 	stb	zero,-16(fp)
   44e74:	e03ffc45 	stb	zero,-15(fp)
   44e78:	e03ffc85 	stb	zero,-14(fp)
   44e7c:	e03ffcc5 	stb	zero,-13(fp)
   44e80:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD17\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   44e84:	e0fffbc3 	ldbu	r3,-17(fp)
   44e88:	e0bff703 	ldbu	r2,-36(fp)
   44e8c:	1884b03a 	or	r2,r3,r2
   44e90:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
   44e94:	e0bffc03 	ldbu	r2,-16(fp)
   44e98:	e0fffe17 	ldw	r3,-8(fp)
   44e9c:	1806d63a 	srli	r3,r3,24
   44ea0:	10c4b03a 	or	r2,r2,r3
   44ea4:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
   44ea8:	e0bffc43 	ldbu	r2,-15(fp)
   44eac:	e0fffe17 	ldw	r3,-8(fp)
   44eb0:	1806d43a 	srli	r3,r3,16
   44eb4:	10c4b03a 	or	r2,r2,r3
   44eb8:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
   44ebc:	e0bffc83 	ldbu	r2,-14(fp)
   44ec0:	e0fffe17 	ldw	r3,-8(fp)
   44ec4:	1806d23a 	srli	r3,r3,8
   44ec8:	10c4b03a 	or	r2,r2,r3
   44ecc:	e0bffc85 	stb	r2,-14(fp)
    szCmd[4] |= Addr & 0xFF;
   44ed0:	e0bffcc3 	ldbu	r2,-13(fp)
   44ed4:	e0fffe17 	ldw	r3,-8(fp)
   44ed8:	10c4b03a 	or	r2,r2,r3
   44edc:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   44ee0:	e0bffbc4 	addi	r2,fp,-17
   44ee4:	01800144 	movi	r6,5
   44ee8:	100b883a 	mov	r5,r2
   44eec:	0009883a 	mov	r4,zero
   44ef0:	0042c280 	call	42c28 <crc7>
   44ef4:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44ef8:	e0bff743 	ldbu	r2,-35(fp)
   44efc:	1085883a 	add	r2,r2,r2
   44f00:	10800054 	ori	r2,r2,1
   44f04:	e0bffd05 	stb	r2,-12(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44f08:	e0bffbc4 	addi	r2,fp,-17
   44f0c:	01400184 	movi	r5,6
   44f10:	1009883a 	mov	r4,r2
   44f14:	0042d340 	call	42d34 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44f18:	e0bffa44 	addi	r2,fp,-23
   44f1c:	01400184 	movi	r5,6
   44f20:	1009883a 	mov	r4,r2
   44f24:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   44f28:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
   44f2c:	e0bff617 	ldw	r2,-40(fp)
   44f30:	10002826 	beq	r2,zero,44fd4 <SD_CMD17+0x190>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   44f34:	e0bff617 	ldw	r2,-40(fp)
   44f38:	10000526 	beq	r2,zero,44f50 <SD_CMD17+0x10c>
   44f3c:	e0bffa43 	ldbu	r2,-23(fp)
   44f40:	10c03fcc 	andi	r3,r2,255
   44f44:	e0bff703 	ldbu	r2,-36(fp)
   44f48:	18800126 	beq	r3,r2,44f50 <SD_CMD17+0x10c>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   44f4c:	e03ff615 	stw	zero,-40(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   44f50:	e0bffa44 	addi	r2,fp,-23
   44f54:	10800044 	addi	r2,r2,1
   44f58:	1009883a 	mov	r4,r2
   44f5c:	00452140 	call	45214 <ArrayToU32>
   44f60:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
   44f64:	00824004 	movi	r2,2304
   44f68:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   44f6c:	e0fff817 	ldw	r3,-32(fp)
   44f70:	e0bff917 	ldw	r2,-28(fp)
   44f74:	18800126 	beq	r3,r2,44f7c <SD_CMD17+0x138>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44f78:	e03ff615 	stw	zero,-40(fp)
        }        
        
        // check crc
        if (bSuccess){
   44f7c:	e0bff617 	ldw	r2,-40(fp)
   44f80:	10000d26 	beq	r2,zero,44fb8 <SD_CMD17+0x174>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44f84:	e0bffa44 	addi	r2,fp,-23
   44f88:	01800144 	movi	r6,5
   44f8c:	100b883a 	mov	r5,r2
   44f90:	0009883a 	mov	r4,zero
   44f94:	0042c280 	call	42c28 <crc7>
   44f98:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   44f9c:	e0bffb83 	ldbu	r2,-18(fp)
   44fa0:	10803fcc 	andi	r2,r2,255
   44fa4:	1004d07a 	srli	r2,r2,1
   44fa8:	10c03fcc 	andi	r3,r2,255
   44fac:	e0bffa03 	ldbu	r2,-24(fp)
   44fb0:	18800126 	beq	r3,r2,44fb8 <SD_CMD17+0x174>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44fb4:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44fb8:	e0bff617 	ldw	r2,-40(fp)
   44fbc:	10000526 	beq	r2,zero,44fd4 <SD_CMD17+0x190>
   44fc0:	e0bffb83 	ldbu	r2,-18(fp)
   44fc4:	10803fcc 	andi	r2,r2,255
   44fc8:	1080004c 	andi	r2,r2,1
   44fcc:	1000011e 	bne	r2,zero,44fd4 <SD_CMD17+0x190>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44fd0:	e03ff615 	stw	zero,-40(fp)
          
    }
    
     
    
    return bSuccess;
   44fd4:	e0bff617 	ldw	r2,-40(fp)
}
   44fd8:	e037883a 	mov	sp,fp
   44fdc:	dfc00117 	ldw	ra,4(sp)
   44fe0:	df000017 	ldw	fp,0(sp)
   44fe4:	dec00204 	addi	sp,sp,8
   44fe8:	f800283a 	ret

00044fec <SD_CMD24>:

// WRITE_BLOCK (Single)
// Response R1
bool SD_CMD24(alt_u32 Addr, alt_u8 ExpectedStatus){
   44fec:	defff404 	addi	sp,sp,-48
   44ff0:	dfc00b15 	stw	ra,44(sp)
   44ff4:	df000a15 	stw	fp,40(sp)
   44ff8:	df000a04 	addi	fp,sp,40
   44ffc:	e13ffe15 	stw	r4,-8(fp)
   45000:	2805883a 	mov	r2,r5
   45004:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 24;
   45008:	00800604 	movi	r2,24
   4500c:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   45010:	00801004 	movi	r2,64
   45014:	e0bffbc5 	stb	r2,-17(fp)
   45018:	e03ffc05 	stb	zero,-16(fp)
   4501c:	e03ffc45 	stb	zero,-15(fp)
   45020:	e03ffc85 	stb	zero,-14(fp)
   45024:	e03ffcc5 	stb	zero,-13(fp)
   45028:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD24\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   4502c:	e0fffbc3 	ldbu	r3,-17(fp)
   45030:	e0bff703 	ldbu	r2,-36(fp)
   45034:	1884b03a 	or	r2,r3,r2
   45038:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
   4503c:	e0bffc03 	ldbu	r2,-16(fp)
   45040:	e0fffe17 	ldw	r3,-8(fp)
   45044:	1806d63a 	srli	r3,r3,24
   45048:	10c4b03a 	or	r2,r2,r3
   4504c:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
   45050:	e0bffc43 	ldbu	r2,-15(fp)
   45054:	e0fffe17 	ldw	r3,-8(fp)
   45058:	1806d43a 	srli	r3,r3,16
   4505c:	10c4b03a 	or	r2,r2,r3
   45060:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
   45064:	e0bffc83 	ldbu	r2,-14(fp)
   45068:	e0fffe17 	ldw	r3,-8(fp)
   4506c:	1806d23a 	srli	r3,r3,8
   45070:	10c4b03a 	or	r2,r2,r3
   45074:	e0bffc85 	stb	r2,-14(fp)
    szCmd[4] |= Addr & 0xFF;
   45078:	e0bffcc3 	ldbu	r2,-13(fp)
   4507c:	e0fffe17 	ldw	r3,-8(fp)
   45080:	10c4b03a 	or	r2,r2,r3
   45084:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   45088:	e0bffbc4 	addi	r2,fp,-17
   4508c:	01800144 	movi	r6,5
   45090:	100b883a 	mov	r5,r2
   45094:	0009883a 	mov	r4,zero
   45098:	0042c280 	call	42c28 <crc7>
   4509c:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   450a0:	e0bff743 	ldbu	r2,-35(fp)
   450a4:	1085883a 	add	r2,r2,r2
   450a8:	10800054 	ori	r2,r2,1
   450ac:	e0bffd05 	stb	r2,-12(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   450b0:	e0bffbc4 	addi	r2,fp,-17
   450b4:	01400184 	movi	r5,6
   450b8:	1009883a 	mov	r4,r2
   450bc:	0042d340 	call	42d34 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   450c0:	e0bffa44 	addi	r2,fp,-23
   450c4:	01400184 	movi	r5,6
   450c8:	1009883a 	mov	r4,r2
   450cc:	0042e2c0 	call	42e2c <SDHAL_GetResponse>
   450d0:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
   450d4:	e0bff617 	ldw	r2,-40(fp)
   450d8:	10002826 	beq	r2,zero,4517c <SD_CMD24+0x190>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   450dc:	e0bff617 	ldw	r2,-40(fp)
   450e0:	10000526 	beq	r2,zero,450f8 <SD_CMD24+0x10c>
   450e4:	e0bffa43 	ldbu	r2,-23(fp)
   450e8:	10c03fcc 	andi	r3,r2,255
   450ec:	e0bff703 	ldbu	r2,-36(fp)
   450f0:	18800126 	beq	r3,r2,450f8 <SD_CMD24+0x10c>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   450f4:	e03ff615 	stw	zero,-40(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   450f8:	e0bffa44 	addi	r2,fp,-23
   450fc:	10800044 	addi	r2,r2,1
   45100:	1009883a 	mov	r4,r2
   45104:	00452140 	call	45214 <ArrayToU32>
   45108:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
   4510c:	00824004 	movi	r2,2304
   45110:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   45114:	e0fff817 	ldw	r3,-32(fp)
   45118:	e0bff917 	ldw	r2,-28(fp)
   4511c:	18800126 	beq	r3,r2,45124 <SD_CMD24+0x138>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   45120:	e03ff615 	stw	zero,-40(fp)
        }        
        
        // check crc
        if (bSuccess){
   45124:	e0bff617 	ldw	r2,-40(fp)
   45128:	10000d26 	beq	r2,zero,45160 <SD_CMD24+0x174>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   4512c:	e0bffa44 	addi	r2,fp,-23
   45130:	01800144 	movi	r6,5
   45134:	100b883a 	mov	r5,r2
   45138:	0009883a 	mov	r4,zero
   4513c:	0042c280 	call	42c28 <crc7>
   45140:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   45144:	e0bffb83 	ldbu	r2,-18(fp)
   45148:	10803fcc 	andi	r2,r2,255
   4514c:	1004d07a 	srli	r2,r2,1
   45150:	10c03fcc 	andi	r3,r2,255
   45154:	e0bffa03 	ldbu	r2,-24(fp)
   45158:	18800126 	beq	r3,r2,45160 <SD_CMD24+0x174>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   4515c:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   45160:	e0bff617 	ldw	r2,-40(fp)
   45164:	10000526 	beq	r2,zero,4517c <SD_CMD24+0x190>
   45168:	e0bffb83 	ldbu	r2,-18(fp)
   4516c:	10803fcc 	andi	r2,r2,255
   45170:	1080004c 	andi	r2,r2,1
   45174:	1000011e 	bne	r2,zero,4517c <SD_CMD24+0x190>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   45178:	e03ff615 	stw	zero,-40(fp)
          
    }
    
     
    
    return bSuccess;
   4517c:	e0bff617 	ldw	r2,-40(fp)
}
   45180:	e037883a 	mov	sp,fp
   45184:	dfc00117 	ldw	ra,4(sp)
   45188:	df000017 	ldw	fp,0(sp)
   4518c:	dec00204 	addi	sp,sp,8
   45190:	f800283a 	ret

00045194 <SD_ReadData>:


bool SD_ReadData(alt_u8 szBuf[], int nBufLen){
   45194:	defffb04 	addi	sp,sp,-20
   45198:	dfc00415 	stw	ra,16(sp)
   4519c:	df000315 	stw	fp,12(sp)
   451a0:	df000304 	addi	fp,sp,12
   451a4:	e13ffe15 	stw	r4,-8(fp)
   451a8:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_ReadData(szBuf, nBufLen);
   451ac:	e17fff17 	ldw	r5,-4(fp)
   451b0:	e13ffe17 	ldw	r4,-8(fp)
   451b4:	00430400 	call	43040 <SDHAL_ReadData>
   451b8:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
   451bc:	e0bffd17 	ldw	r2,-12(fp)
}
   451c0:	e037883a 	mov	sp,fp
   451c4:	dfc00117 	ldw	ra,4(sp)
   451c8:	df000017 	ldw	fp,0(sp)
   451cc:	dec00204 	addi	sp,sp,8
   451d0:	f800283a 	ret

000451d4 <SD_WriteData>:

bool SD_WriteData(alt_u8 szDataWrite[], int nDataLen){
   451d4:	defffb04 	addi	sp,sp,-20
   451d8:	dfc00415 	stw	ra,16(sp)
   451dc:	df000315 	stw	fp,12(sp)
   451e0:	df000304 	addi	fp,sp,12
   451e4:	e13ffe15 	stw	r4,-8(fp)
   451e8:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_WriteData(szDataWrite, nDataLen);
   451ec:	e17fff17 	ldw	r5,-4(fp)
   451f0:	e13ffe17 	ldw	r4,-8(fp)
   451f4:	00435080 	call	43508 <SDHAL_WriteData>
   451f8:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
   451fc:	e0bffd17 	ldw	r2,-12(fp)
}
   45200:	e037883a 	mov	sp,fp
   45204:	dfc00117 	ldw	ra,4(sp)
   45208:	df000017 	ldw	fp,0(sp)
   4520c:	dec00204 	addi	sp,sp,8
   45210:	f800283a 	ret

00045214 <ArrayToU32>:


alt_u32 ArrayToU32(alt_u8 szData[]){
   45214:	defffc04 	addi	sp,sp,-16
   45218:	df000315 	stw	fp,12(sp)
   4521c:	df000304 	addi	fp,sp,12
   45220:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Value32 = 0;
   45224:	e03ffd15 	stw	zero,-12(fp)
    int i;
    
    for(i=0;i<4;i++){
   45228:	e03ffe15 	stw	zero,-8(fp)
   4522c:	00000e06 	br	45268 <ArrayToU32+0x54>
        Value32 <<= 8;
   45230:	e0bffd17 	ldw	r2,-12(fp)
   45234:	1004923a 	slli	r2,r2,8
   45238:	e0bffd15 	stw	r2,-12(fp)
        Value32 |= szData[i];
   4523c:	e0bffe17 	ldw	r2,-8(fp)
   45240:	e0ffff17 	ldw	r3,-4(fp)
   45244:	1885883a 	add	r2,r3,r2
   45248:	10800003 	ldbu	r2,0(r2)
   4524c:	10803fcc 	andi	r2,r2,255
   45250:	e0fffd17 	ldw	r3,-12(fp)
   45254:	1884b03a 	or	r2,r3,r2
   45258:	e0bffd15 	stw	r2,-12(fp)

alt_u32 ArrayToU32(alt_u8 szData[]){
    alt_u32 Value32 = 0;
    int i;
    
    for(i=0;i<4;i++){
   4525c:	e0bffe17 	ldw	r2,-8(fp)
   45260:	10800044 	addi	r2,r2,1
   45264:	e0bffe15 	stw	r2,-8(fp)
   45268:	e0bffe17 	ldw	r2,-8(fp)
   4526c:	10800110 	cmplti	r2,r2,4
   45270:	103fef1e 	bne	r2,zero,45230 <_gp+0xffff2ec4>
        Value32 <<= 8;
        Value32 |= szData[i];
    }
    return Value32;
   45274:	e0bffd17 	ldw	r2,-12(fp)
}
   45278:	e037883a 	mov	sp,fp
   4527c:	df000017 	ldw	fp,0(sp)
   45280:	dec00104 	addi	sp,sp,4
   45284:	f800283a 	ret

00045288 <__divsi3>:
   45288:	20001b16 	blt	r4,zero,452f8 <__divsi3+0x70>
   4528c:	000f883a 	mov	r7,zero
   45290:	28001616 	blt	r5,zero,452ec <__divsi3+0x64>
   45294:	200d883a 	mov	r6,r4
   45298:	29001a2e 	bgeu	r5,r4,45304 <__divsi3+0x7c>
   4529c:	00800804 	movi	r2,32
   452a0:	00c00044 	movi	r3,1
   452a4:	00000106 	br	452ac <__divsi3+0x24>
   452a8:	10000d26 	beq	r2,zero,452e0 <__divsi3+0x58>
   452ac:	294b883a 	add	r5,r5,r5
   452b0:	10bfffc4 	addi	r2,r2,-1
   452b4:	18c7883a 	add	r3,r3,r3
   452b8:	293ffb36 	bltu	r5,r4,452a8 <_gp+0xffff2f3c>
   452bc:	0005883a 	mov	r2,zero
   452c0:	18000726 	beq	r3,zero,452e0 <__divsi3+0x58>
   452c4:	0005883a 	mov	r2,zero
   452c8:	31400236 	bltu	r6,r5,452d4 <__divsi3+0x4c>
   452cc:	314dc83a 	sub	r6,r6,r5
   452d0:	10c4b03a 	or	r2,r2,r3
   452d4:	1806d07a 	srli	r3,r3,1
   452d8:	280ad07a 	srli	r5,r5,1
   452dc:	183ffa1e 	bne	r3,zero,452c8 <_gp+0xffff2f5c>
   452e0:	38000126 	beq	r7,zero,452e8 <__divsi3+0x60>
   452e4:	0085c83a 	sub	r2,zero,r2
   452e8:	f800283a 	ret
   452ec:	014bc83a 	sub	r5,zero,r5
   452f0:	39c0005c 	xori	r7,r7,1
   452f4:	003fe706 	br	45294 <_gp+0xffff2f28>
   452f8:	0109c83a 	sub	r4,zero,r4
   452fc:	01c00044 	movi	r7,1
   45300:	003fe306 	br	45290 <_gp+0xffff2f24>
   45304:	00c00044 	movi	r3,1
   45308:	003fee06 	br	452c4 <_gp+0xffff2f58>

0004530c <__modsi3>:
   4530c:	20001716 	blt	r4,zero,4536c <__modsi3+0x60>
   45310:	000f883a 	mov	r7,zero
   45314:	2005883a 	mov	r2,r4
   45318:	28001216 	blt	r5,zero,45364 <__modsi3+0x58>
   4531c:	2900162e 	bgeu	r5,r4,45378 <__modsi3+0x6c>
   45320:	01800804 	movi	r6,32
   45324:	00c00044 	movi	r3,1
   45328:	00000106 	br	45330 <__modsi3+0x24>
   4532c:	30000a26 	beq	r6,zero,45358 <__modsi3+0x4c>
   45330:	294b883a 	add	r5,r5,r5
   45334:	31bfffc4 	addi	r6,r6,-1
   45338:	18c7883a 	add	r3,r3,r3
   4533c:	293ffb36 	bltu	r5,r4,4532c <_gp+0xffff2fc0>
   45340:	18000526 	beq	r3,zero,45358 <__modsi3+0x4c>
   45344:	1806d07a 	srli	r3,r3,1
   45348:	11400136 	bltu	r2,r5,45350 <__modsi3+0x44>
   4534c:	1145c83a 	sub	r2,r2,r5
   45350:	280ad07a 	srli	r5,r5,1
   45354:	183ffb1e 	bne	r3,zero,45344 <_gp+0xffff2fd8>
   45358:	38000126 	beq	r7,zero,45360 <__modsi3+0x54>
   4535c:	0085c83a 	sub	r2,zero,r2
   45360:	f800283a 	ret
   45364:	014bc83a 	sub	r5,zero,r5
   45368:	003fec06 	br	4531c <_gp+0xffff2fb0>
   4536c:	0109c83a 	sub	r4,zero,r4
   45370:	01c00044 	movi	r7,1
   45374:	003fe706 	br	45314 <_gp+0xffff2fa8>
   45378:	00c00044 	movi	r3,1
   4537c:	003ff106 	br	45344 <_gp+0xffff2fd8>

00045380 <__udivsi3>:
   45380:	200d883a 	mov	r6,r4
   45384:	2900152e 	bgeu	r5,r4,453dc <__udivsi3+0x5c>
   45388:	28001416 	blt	r5,zero,453dc <__udivsi3+0x5c>
   4538c:	00800804 	movi	r2,32
   45390:	00c00044 	movi	r3,1
   45394:	00000206 	br	453a0 <__udivsi3+0x20>
   45398:	10000e26 	beq	r2,zero,453d4 <__udivsi3+0x54>
   4539c:	28000516 	blt	r5,zero,453b4 <__udivsi3+0x34>
   453a0:	294b883a 	add	r5,r5,r5
   453a4:	10bfffc4 	addi	r2,r2,-1
   453a8:	18c7883a 	add	r3,r3,r3
   453ac:	293ffa36 	bltu	r5,r4,45398 <_gp+0xffff302c>
   453b0:	18000826 	beq	r3,zero,453d4 <__udivsi3+0x54>
   453b4:	0005883a 	mov	r2,zero
   453b8:	31400236 	bltu	r6,r5,453c4 <__udivsi3+0x44>
   453bc:	314dc83a 	sub	r6,r6,r5
   453c0:	10c4b03a 	or	r2,r2,r3
   453c4:	1806d07a 	srli	r3,r3,1
   453c8:	280ad07a 	srli	r5,r5,1
   453cc:	183ffa1e 	bne	r3,zero,453b8 <_gp+0xffff304c>
   453d0:	f800283a 	ret
   453d4:	0005883a 	mov	r2,zero
   453d8:	f800283a 	ret
   453dc:	00c00044 	movi	r3,1
   453e0:	003ff406 	br	453b4 <_gp+0xffff3048>

000453e4 <__umodsi3>:
   453e4:	2005883a 	mov	r2,r4
   453e8:	2900122e 	bgeu	r5,r4,45434 <__umodsi3+0x50>
   453ec:	28001116 	blt	r5,zero,45434 <__umodsi3+0x50>
   453f0:	01800804 	movi	r6,32
   453f4:	00c00044 	movi	r3,1
   453f8:	00000206 	br	45404 <__umodsi3+0x20>
   453fc:	30000c26 	beq	r6,zero,45430 <__umodsi3+0x4c>
   45400:	28000516 	blt	r5,zero,45418 <__umodsi3+0x34>
   45404:	294b883a 	add	r5,r5,r5
   45408:	31bfffc4 	addi	r6,r6,-1
   4540c:	18c7883a 	add	r3,r3,r3
   45410:	293ffa36 	bltu	r5,r4,453fc <_gp+0xffff3090>
   45414:	18000626 	beq	r3,zero,45430 <__umodsi3+0x4c>
   45418:	1806d07a 	srli	r3,r3,1
   4541c:	11400136 	bltu	r2,r5,45424 <__umodsi3+0x40>
   45420:	1145c83a 	sub	r2,r2,r5
   45424:	280ad07a 	srli	r5,r5,1
   45428:	183ffb1e 	bne	r3,zero,45418 <_gp+0xffff30ac>
   4542c:	f800283a 	ret
   45430:	f800283a 	ret
   45434:	00c00044 	movi	r3,1
   45438:	003ff706 	br	45418 <_gp+0xffff30ac>

0004543c <__mulsi3>:
   4543c:	0005883a 	mov	r2,zero
   45440:	20000726 	beq	r4,zero,45460 <__mulsi3+0x24>
   45444:	20c0004c 	andi	r3,r4,1
   45448:	2008d07a 	srli	r4,r4,1
   4544c:	18000126 	beq	r3,zero,45454 <__mulsi3+0x18>
   45450:	1145883a 	add	r2,r2,r5
   45454:	294b883a 	add	r5,r5,r5
   45458:	203ffa1e 	bne	r4,zero,45444 <_gp+0xffff30d8>
   4545c:	f800283a 	ret
   45460:	f800283a 	ret

00045464 <__divsf3>:
   45464:	defff504 	addi	sp,sp,-44
   45468:	200cd5fa 	srli	r6,r4,23
   4546c:	dcc00415 	stw	r19,16(sp)
   45470:	2026d7fa 	srli	r19,r4,31
   45474:	00c02034 	movhi	r3,128
   45478:	dd800715 	stw	r22,28(sp)
   4547c:	dd000515 	stw	r20,20(sp)
   45480:	dc800315 	stw	r18,12(sp)
   45484:	18ffffc4 	addi	r3,r3,-1
   45488:	dfc00a15 	stw	ra,40(sp)
   4548c:	df000915 	stw	fp,36(sp)
   45490:	ddc00815 	stw	r23,32(sp)
   45494:	dd400615 	stw	r21,24(sp)
   45498:	dc400215 	stw	r17,8(sp)
   4549c:	dc000115 	stw	r16,4(sp)
   454a0:	35003fcc 	andi	r20,r6,255
   454a4:	1924703a 	and	r18,r3,r4
   454a8:	9d803fcc 	andi	r22,r19,255
   454ac:	a0005226 	beq	r20,zero,455f8 <__divsf3+0x194>
   454b0:	00803fc4 	movi	r2,255
   454b4:	a0802e26 	beq	r20,r2,45570 <__divsf3+0x10c>
   454b8:	91002034 	orhi	r4,r18,128
   454bc:	202490fa 	slli	r18,r4,3
   454c0:	a53fe044 	addi	r20,r20,-127
   454c4:	0021883a 	mov	r16,zero
   454c8:	002f883a 	mov	r23,zero
   454cc:	280cd5fa 	srli	r6,r5,23
   454d0:	282ad7fa 	srli	r21,r5,31
   454d4:	00c02034 	movhi	r3,128
   454d8:	18ffffc4 	addi	r3,r3,-1
   454dc:	31803fcc 	andi	r6,r6,255
   454e0:	1962703a 	and	r17,r3,r5
   454e4:	af003fcc 	andi	fp,r21,255
   454e8:	30004a26 	beq	r6,zero,45614 <__divsf3+0x1b0>
   454ec:	00803fc4 	movi	r2,255
   454f0:	30804526 	beq	r6,r2,45608 <__divsf3+0x1a4>
   454f4:	89402034 	orhi	r5,r17,128
   454f8:	282290fa 	slli	r17,r5,3
   454fc:	31bfe044 	addi	r6,r6,-127
   45500:	000b883a 	mov	r5,zero
   45504:	2c20b03a 	or	r16,r5,r16
   45508:	802090ba 	slli	r16,r16,2
   4550c:	00800134 	movhi	r2,4
   45510:	10954c04 	addi	r2,r2,21808
   45514:	80a1883a 	add	r16,r16,r2
   45518:	81000017 	ldw	r4,0(r16)
   4551c:	9d46f03a 	xor	r3,r19,r21
   45520:	180f883a 	mov	r7,r3
   45524:	18803fcc 	andi	r2,r3,255
   45528:	a18dc83a 	sub	r6,r20,r6
   4552c:	2000683a 	jmp	r4
   45530:	00045714 	movui	zero,4444
   45534:	00045598 	cmpnei	zero,zero,4438
   45538:	00045708 	cmpgei	zero,zero,4444
   4553c:	00045584 	movi	zero,4438
   45540:	00045708 	cmpgei	zero,zero,4444
   45544:	000456e0 	cmpeqi	zero,zero,4443
   45548:	00045708 	cmpgei	zero,zero,4444
   4554c:	00045584 	movi	zero,4438
   45550:	00045598 	cmpnei	zero,zero,4438
   45554:	00045598 	cmpnei	zero,zero,4438
   45558:	000456e0 	cmpeqi	zero,zero,4443
   4555c:	00045584 	movi	zero,4438
   45560:	000457f4 	movhi	zero,4447
   45564:	000457f4 	movhi	zero,4447
   45568:	000457f4 	movhi	zero,4447
   4556c:	000457a8 	cmpgeui	zero,zero,4446
   45570:	9000581e 	bne	r18,zero,456d4 <__divsf3+0x270>
   45574:	04000204 	movi	r16,8
   45578:	05c00084 	movi	r23,2
   4557c:	003fd306 	br	454cc <_gp+0xffff3160>
   45580:	0023883a 	mov	r17,zero
   45584:	e02d883a 	mov	r22,fp
   45588:	282f883a 	mov	r23,r5
   4558c:	00800084 	movi	r2,2
   45590:	b8808f1e 	bne	r23,r2,457d0 <__divsf3+0x36c>
   45594:	b005883a 	mov	r2,r22
   45598:	11c0004c 	andi	r7,r2,1
   4559c:	013fffc4 	movi	r4,-1
   455a0:	000d883a 	mov	r6,zero
   455a4:	21003fcc 	andi	r4,r4,255
   455a8:	200895fa 	slli	r4,r4,23
   455ac:	38803fcc 	andi	r2,r7,255
   455b0:	00c02034 	movhi	r3,128
   455b4:	100497fa 	slli	r2,r2,31
   455b8:	18ffffc4 	addi	r3,r3,-1
   455bc:	30c6703a 	and	r3,r6,r3
   455c0:	1906b03a 	or	r3,r3,r4
   455c4:	1884b03a 	or	r2,r3,r2
   455c8:	dfc00a17 	ldw	ra,40(sp)
   455cc:	df000917 	ldw	fp,36(sp)
   455d0:	ddc00817 	ldw	r23,32(sp)
   455d4:	dd800717 	ldw	r22,28(sp)
   455d8:	dd400617 	ldw	r21,24(sp)
   455dc:	dd000517 	ldw	r20,20(sp)
   455e0:	dcc00417 	ldw	r19,16(sp)
   455e4:	dc800317 	ldw	r18,12(sp)
   455e8:	dc400217 	ldw	r17,8(sp)
   455ec:	dc000117 	ldw	r16,4(sp)
   455f0:	dec00b04 	addi	sp,sp,44
   455f4:	f800283a 	ret
   455f8:	90002b1e 	bne	r18,zero,456a8 <__divsf3+0x244>
   455fc:	04000104 	movi	r16,4
   45600:	05c00044 	movi	r23,1
   45604:	003fb106 	br	454cc <_gp+0xffff3160>
   45608:	8800251e 	bne	r17,zero,456a0 <__divsf3+0x23c>
   4560c:	01400084 	movi	r5,2
   45610:	00000206 	br	4561c <__divsf3+0x1b8>
   45614:	88001a1e 	bne	r17,zero,45680 <__divsf3+0x21c>
   45618:	01400044 	movi	r5,1
   4561c:	8160b03a 	or	r16,r16,r5
   45620:	802090ba 	slli	r16,r16,2
   45624:	00c00134 	movhi	r3,4
   45628:	18d59004 	addi	r3,r3,22080
   4562c:	80e1883a 	add	r16,r16,r3
   45630:	80c00017 	ldw	r3,0(r16)
   45634:	9d44f03a 	xor	r2,r19,r21
   45638:	a18dc83a 	sub	r6,r20,r6
   4563c:	1800683a 	jmp	r3
   45640:	00045598 	cmpnei	zero,zero,4438
   45644:	00045598 	cmpnei	zero,zero,4438
   45648:	000457e4 	muli	zero,zero,4447
   4564c:	00045580 	call	4558 <__reset-0x3baa8>
   45650:	000457e4 	muli	zero,zero,4447
   45654:	000456e0 	cmpeqi	zero,zero,4443
   45658:	000457e4 	muli	zero,zero,4447
   4565c:	00045580 	call	4558 <__reset-0x3baa8>
   45660:	00045598 	cmpnei	zero,zero,4438
   45664:	00045598 	cmpnei	zero,zero,4438
   45668:	000456e0 	cmpeqi	zero,zero,4443
   4566c:	00045580 	call	4558 <__reset-0x3baa8>
   45670:	000457f4 	movhi	zero,4447
   45674:	000457f4 	movhi	zero,4447
   45678:	000457f4 	movhi	zero,4447
   4567c:	0004580c 	andi	zero,zero,4448
   45680:	8809883a 	mov	r4,r17
   45684:	0046a4c0 	call	46a4c <__clzsi2>
   45688:	10fffec4 	addi	r3,r2,-5
   4568c:	10801d84 	addi	r2,r2,118
   45690:	88e2983a 	sll	r17,r17,r3
   45694:	008dc83a 	sub	r6,zero,r2
   45698:	000b883a 	mov	r5,zero
   4569c:	003f9906 	br	45504 <_gp+0xffff3198>
   456a0:	014000c4 	movi	r5,3
   456a4:	003f9706 	br	45504 <_gp+0xffff3198>
   456a8:	9009883a 	mov	r4,r18
   456ac:	d9400015 	stw	r5,0(sp)
   456b0:	0046a4c0 	call	46a4c <__clzsi2>
   456b4:	10fffec4 	addi	r3,r2,-5
   456b8:	11801d84 	addi	r6,r2,118
   456bc:	90e4983a 	sll	r18,r18,r3
   456c0:	01a9c83a 	sub	r20,zero,r6
   456c4:	0021883a 	mov	r16,zero
   456c8:	002f883a 	mov	r23,zero
   456cc:	d9400017 	ldw	r5,0(sp)
   456d0:	003f7e06 	br	454cc <_gp+0xffff3160>
   456d4:	04000304 	movi	r16,12
   456d8:	05c000c4 	movi	r23,3
   456dc:	003f7b06 	br	454cc <_gp+0xffff3160>
   456e0:	01802034 	movhi	r6,128
   456e4:	000f883a 	mov	r7,zero
   456e8:	31bfffc4 	addi	r6,r6,-1
   456ec:	013fffc4 	movi	r4,-1
   456f0:	003fac06 	br	455a4 <_gp+0xffff3238>
   456f4:	01400044 	movi	r5,1
   456f8:	2909c83a 	sub	r4,r5,r4
   456fc:	00c006c4 	movi	r3,27
   45700:	19004b0e 	bge	r3,r4,45830 <__divsf3+0x3cc>
   45704:	114e703a 	and	r7,r2,r5
   45708:	0009883a 	mov	r4,zero
   4570c:	000d883a 	mov	r6,zero
   45710:	003fa406 	br	455a4 <_gp+0xffff3238>
   45714:	9006917a 	slli	r3,r18,5
   45718:	8822917a 	slli	r17,r17,5
   4571c:	1c40372e 	bgeu	r3,r17,457fc <__divsf3+0x398>
   45720:	31bfffc4 	addi	r6,r6,-1
   45724:	010006c4 	movi	r4,27
   45728:	000b883a 	mov	r5,zero
   4572c:	180f883a 	mov	r7,r3
   45730:	294b883a 	add	r5,r5,r5
   45734:	18c7883a 	add	r3,r3,r3
   45738:	38000116 	blt	r7,zero,45740 <__divsf3+0x2dc>
   4573c:	1c400236 	bltu	r3,r17,45748 <__divsf3+0x2e4>
   45740:	1c47c83a 	sub	r3,r3,r17
   45744:	29400054 	ori	r5,r5,1
   45748:	213fffc4 	addi	r4,r4,-1
   4574c:	203ff71e 	bne	r4,zero,4572c <_gp+0xffff33c0>
   45750:	1806c03a 	cmpne	r3,r3,zero
   45754:	1962b03a 	or	r17,r3,r5
   45758:	31001fc4 	addi	r4,r6,127
   4575c:	013fe50e 	bge	zero,r4,456f4 <_gp+0xffff3388>
   45760:	88c001cc 	andi	r3,r17,7
   45764:	18000426 	beq	r3,zero,45778 <__divsf3+0x314>
   45768:	88c003cc 	andi	r3,r17,15
   4576c:	01400104 	movi	r5,4
   45770:	19400126 	beq	r3,r5,45778 <__divsf3+0x314>
   45774:	8963883a 	add	r17,r17,r5
   45778:	88c2002c 	andhi	r3,r17,2048
   4577c:	18000426 	beq	r3,zero,45790 <__divsf3+0x32c>
   45780:	00fe0034 	movhi	r3,63488
   45784:	18ffffc4 	addi	r3,r3,-1
   45788:	31002004 	addi	r4,r6,128
   4578c:	88e2703a 	and	r17,r17,r3
   45790:	00c03f84 	movi	r3,254
   45794:	193f8016 	blt	r3,r4,45598 <_gp+0xffff322c>
   45798:	880c91ba 	slli	r6,r17,6
   4579c:	11c0004c 	andi	r7,r2,1
   457a0:	300cd27a 	srli	r6,r6,9
   457a4:	003f7f06 	br	455a4 <_gp+0xffff3238>
   457a8:	9080102c 	andhi	r2,r18,64
   457ac:	10000226 	beq	r2,zero,457b8 <__divsf3+0x354>
   457b0:	8880102c 	andhi	r2,r17,64
   457b4:	10001826 	beq	r2,zero,45818 <__divsf3+0x3b4>
   457b8:	00802034 	movhi	r2,128
   457bc:	91801034 	orhi	r6,r18,64
   457c0:	10bfffc4 	addi	r2,r2,-1
   457c4:	980f883a 	mov	r7,r19
   457c8:	308c703a 	and	r6,r6,r2
   457cc:	003fc706 	br	456ec <_gp+0xffff3380>
   457d0:	008000c4 	movi	r2,3
   457d4:	b8802d26 	beq	r23,r2,4588c <__divsf3+0x428>
   457d8:	00c00044 	movi	r3,1
   457dc:	b005883a 	mov	r2,r22
   457e0:	b8ffdd1e 	bne	r23,r3,45758 <_gp+0xffff33ec>
   457e4:	11c0004c 	andi	r7,r2,1
   457e8:	0009883a 	mov	r4,zero
   457ec:	000d883a 	mov	r6,zero
   457f0:	003f6c06 	br	455a4 <_gp+0xffff3238>
   457f4:	9023883a 	mov	r17,r18
   457f8:	003f6406 	br	4558c <_gp+0xffff3220>
   457fc:	1c47c83a 	sub	r3,r3,r17
   45800:	01000684 	movi	r4,26
   45804:	01400044 	movi	r5,1
   45808:	003fc806 	br	4572c <_gp+0xffff33c0>
   4580c:	9080102c 	andhi	r2,r18,64
   45810:	103fe926 	beq	r2,zero,457b8 <_gp+0xffff344c>
   45814:	0023883a 	mov	r17,zero
   45818:	00802034 	movhi	r2,128
   4581c:	89801034 	orhi	r6,r17,64
   45820:	10bfffc4 	addi	r2,r2,-1
   45824:	a80f883a 	mov	r7,r21
   45828:	308c703a 	and	r6,r6,r2
   4582c:	003faf06 	br	456ec <_gp+0xffff3380>
   45830:	01c00804 	movi	r7,32
   45834:	390fc83a 	sub	r7,r7,r4
   45838:	89ce983a 	sll	r7,r17,r7
   4583c:	890ad83a 	srl	r5,r17,r4
   45840:	380ec03a 	cmpne	r7,r7,zero
   45844:	29cab03a 	or	r5,r5,r7
   45848:	28c001cc 	andi	r3,r5,7
   4584c:	18000426 	beq	r3,zero,45860 <__divsf3+0x3fc>
   45850:	28c003cc 	andi	r3,r5,15
   45854:	01000104 	movi	r4,4
   45858:	19000126 	beq	r3,r4,45860 <__divsf3+0x3fc>
   4585c:	290b883a 	add	r5,r5,r4
   45860:	28c1002c 	andhi	r3,r5,1024
   45864:	18000426 	beq	r3,zero,45878 <__divsf3+0x414>
   45868:	11c0004c 	andi	r7,r2,1
   4586c:	01000044 	movi	r4,1
   45870:	000d883a 	mov	r6,zero
   45874:	003f4b06 	br	455a4 <_gp+0xffff3238>
   45878:	280a91ba 	slli	r5,r5,6
   4587c:	11c0004c 	andi	r7,r2,1
   45880:	0009883a 	mov	r4,zero
   45884:	280cd27a 	srli	r6,r5,9
   45888:	003f4606 	br	455a4 <_gp+0xffff3238>
   4588c:	00802034 	movhi	r2,128
   45890:	89801034 	orhi	r6,r17,64
   45894:	10bfffc4 	addi	r2,r2,-1
   45898:	b00f883a 	mov	r7,r22
   4589c:	308c703a 	and	r6,r6,r2
   458a0:	003f9206 	br	456ec <_gp+0xffff3380>

000458a4 <__mulsf3>:
   458a4:	defff504 	addi	sp,sp,-44
   458a8:	dc000115 	stw	r16,4(sp)
   458ac:	2020d5fa 	srli	r16,r4,23
   458b0:	dd400615 	stw	r21,24(sp)
   458b4:	202ad7fa 	srli	r21,r4,31
   458b8:	dc800315 	stw	r18,12(sp)
   458bc:	04802034 	movhi	r18,128
   458c0:	df000915 	stw	fp,36(sp)
   458c4:	dd000515 	stw	r20,20(sp)
   458c8:	94bfffc4 	addi	r18,r18,-1
   458cc:	dfc00a15 	stw	ra,40(sp)
   458d0:	ddc00815 	stw	r23,32(sp)
   458d4:	dd800715 	stw	r22,28(sp)
   458d8:	dcc00415 	stw	r19,16(sp)
   458dc:	dc400215 	stw	r17,8(sp)
   458e0:	84003fcc 	andi	r16,r16,255
   458e4:	9124703a 	and	r18,r18,r4
   458e8:	a829883a 	mov	r20,r21
   458ec:	af003fcc 	andi	fp,r21,255
   458f0:	80005426 	beq	r16,zero,45a44 <__mulsf3+0x1a0>
   458f4:	00803fc4 	movi	r2,255
   458f8:	80802f26 	beq	r16,r2,459b8 <__mulsf3+0x114>
   458fc:	91002034 	orhi	r4,r18,128
   45900:	202490fa 	slli	r18,r4,3
   45904:	843fe044 	addi	r16,r16,-127
   45908:	0023883a 	mov	r17,zero
   4590c:	002f883a 	mov	r23,zero
   45910:	2804d5fa 	srli	r2,r5,23
   45914:	282cd7fa 	srli	r22,r5,31
   45918:	01002034 	movhi	r4,128
   4591c:	213fffc4 	addi	r4,r4,-1
   45920:	10803fcc 	andi	r2,r2,255
   45924:	2166703a 	and	r19,r4,r5
   45928:	b1803fcc 	andi	r6,r22,255
   4592c:	10004c26 	beq	r2,zero,45a60 <__mulsf3+0x1bc>
   45930:	00c03fc4 	movi	r3,255
   45934:	10c04726 	beq	r2,r3,45a54 <__mulsf3+0x1b0>
   45938:	99002034 	orhi	r4,r19,128
   4593c:	202690fa 	slli	r19,r4,3
   45940:	10bfe044 	addi	r2,r2,-127
   45944:	0007883a 	mov	r3,zero
   45948:	80a1883a 	add	r16,r16,r2
   4594c:	010003c4 	movi	r4,15
   45950:	1c44b03a 	or	r2,r3,r17
   45954:	b56af03a 	xor	r21,r22,r21
   45958:	81c00044 	addi	r7,r16,1
   4595c:	20806b36 	bltu	r4,r2,45b0c <__mulsf3+0x268>
   45960:	100490ba 	slli	r2,r2,2
   45964:	01000134 	movhi	r4,4
   45968:	21165e04 	addi	r4,r4,22904
   4596c:	1105883a 	add	r2,r2,r4
   45970:	10800017 	ldw	r2,0(r2)
   45974:	1000683a 	jmp	r2
   45978:	00045b0c 	andi	zero,zero,4460
   4597c:	000459cc 	andi	zero,zero,4455
   45980:	000459cc 	andi	zero,zero,4455
   45984:	000459c8 	cmpgei	zero,zero,4455
   45988:	00045af0 	cmpltui	zero,zero,4459
   4598c:	00045af0 	cmpltui	zero,zero,4459
   45990:	00045adc 	xori	zero,zero,4459
   45994:	000459c8 	cmpgei	zero,zero,4455
   45998:	00045af0 	cmpltui	zero,zero,4459
   4599c:	00045adc 	xori	zero,zero,4459
   459a0:	00045af0 	cmpltui	zero,zero,4459
   459a4:	000459c8 	cmpgei	zero,zero,4455
   459a8:	00045afc 	xorhi	zero,zero,4459
   459ac:	00045afc 	xorhi	zero,zero,4459
   459b0:	00045afc 	xorhi	zero,zero,4459
   459b4:	00045c0c 	andi	zero,zero,4464
   459b8:	90003b1e 	bne	r18,zero,45aa8 <__mulsf3+0x204>
   459bc:	04400204 	movi	r17,8
   459c0:	05c00084 	movi	r23,2
   459c4:	003fd206 	br	45910 <_gp+0xffff35a4>
   459c8:	302b883a 	mov	r21,r6
   459cc:	00800084 	movi	r2,2
   459d0:	18802626 	beq	r3,r2,45a6c <__mulsf3+0x1c8>
   459d4:	008000c4 	movi	r2,3
   459d8:	1880b826 	beq	r3,r2,45cbc <__mulsf3+0x418>
   459dc:	00800044 	movi	r2,1
   459e0:	1880af1e 	bne	r3,r2,45ca0 <__mulsf3+0x3fc>
   459e4:	a829883a 	mov	r20,r21
   459e8:	0007883a 	mov	r3,zero
   459ec:	0009883a 	mov	r4,zero
   459f0:	18803fcc 	andi	r2,r3,255
   459f4:	100695fa 	slli	r3,r2,23
   459f8:	a0803fcc 	andi	r2,r20,255
   459fc:	100a97fa 	slli	r5,r2,31
   45a00:	00802034 	movhi	r2,128
   45a04:	10bfffc4 	addi	r2,r2,-1
   45a08:	2084703a 	and	r2,r4,r2
   45a0c:	10c4b03a 	or	r2,r2,r3
   45a10:	1144b03a 	or	r2,r2,r5
   45a14:	dfc00a17 	ldw	ra,40(sp)
   45a18:	df000917 	ldw	fp,36(sp)
   45a1c:	ddc00817 	ldw	r23,32(sp)
   45a20:	dd800717 	ldw	r22,28(sp)
   45a24:	dd400617 	ldw	r21,24(sp)
   45a28:	dd000517 	ldw	r20,20(sp)
   45a2c:	dcc00417 	ldw	r19,16(sp)
   45a30:	dc800317 	ldw	r18,12(sp)
   45a34:	dc400217 	ldw	r17,8(sp)
   45a38:	dc000117 	ldw	r16,4(sp)
   45a3c:	dec00b04 	addi	sp,sp,44
   45a40:	f800283a 	ret
   45a44:	90000d1e 	bne	r18,zero,45a7c <__mulsf3+0x1d8>
   45a48:	04400104 	movi	r17,4
   45a4c:	05c00044 	movi	r23,1
   45a50:	003faf06 	br	45910 <_gp+0xffff35a4>
   45a54:	9806c03a 	cmpne	r3,r19,zero
   45a58:	18c00084 	addi	r3,r3,2
   45a5c:	003fba06 	br	45948 <_gp+0xffff35dc>
   45a60:	9800141e 	bne	r19,zero,45ab4 <__mulsf3+0x210>
   45a64:	00c00044 	movi	r3,1
   45a68:	003fb706 	br	45948 <_gp+0xffff35dc>
   45a6c:	a829883a 	mov	r20,r21
   45a70:	00ffffc4 	movi	r3,-1
   45a74:	0009883a 	mov	r4,zero
   45a78:	003fdd06 	br	459f0 <_gp+0xffff3684>
   45a7c:	9009883a 	mov	r4,r18
   45a80:	d9400015 	stw	r5,0(sp)
   45a84:	0046a4c0 	call	46a4c <__clzsi2>
   45a88:	10fffec4 	addi	r3,r2,-5
   45a8c:	10801d84 	addi	r2,r2,118
   45a90:	90e4983a 	sll	r18,r18,r3
   45a94:	00a1c83a 	sub	r16,zero,r2
   45a98:	0023883a 	mov	r17,zero
   45a9c:	002f883a 	mov	r23,zero
   45aa0:	d9400017 	ldw	r5,0(sp)
   45aa4:	003f9a06 	br	45910 <_gp+0xffff35a4>
   45aa8:	04400304 	movi	r17,12
   45aac:	05c000c4 	movi	r23,3
   45ab0:	003f9706 	br	45910 <_gp+0xffff35a4>
   45ab4:	9809883a 	mov	r4,r19
   45ab8:	d9800015 	stw	r6,0(sp)
   45abc:	0046a4c0 	call	46a4c <__clzsi2>
   45ac0:	10fffec4 	addi	r3,r2,-5
   45ac4:	10801d84 	addi	r2,r2,118
   45ac8:	98e6983a 	sll	r19,r19,r3
   45acc:	0085c83a 	sub	r2,zero,r2
   45ad0:	0007883a 	mov	r3,zero
   45ad4:	d9800017 	ldw	r6,0(sp)
   45ad8:	003f9b06 	br	45948 <_gp+0xffff35dc>
   45adc:	01002034 	movhi	r4,128
   45ae0:	0029883a 	mov	r20,zero
   45ae4:	213fffc4 	addi	r4,r4,-1
   45ae8:	00ffffc4 	movi	r3,-1
   45aec:	003fc006 	br	459f0 <_gp+0xffff3684>
   45af0:	9027883a 	mov	r19,r18
   45af4:	b807883a 	mov	r3,r23
   45af8:	003fb406 	br	459cc <_gp+0xffff3660>
   45afc:	9027883a 	mov	r19,r18
   45b00:	e02b883a 	mov	r21,fp
   45b04:	b807883a 	mov	r3,r23
   45b08:	003fb006 	br	459cc <_gp+0xffff3660>
   45b0c:	9028d43a 	srli	r20,r18,16
   45b10:	982cd43a 	srli	r22,r19,16
   45b14:	94bfffcc 	andi	r18,r18,65535
   45b18:	9cffffcc 	andi	r19,r19,65535
   45b1c:	980b883a 	mov	r5,r19
   45b20:	9009883a 	mov	r4,r18
   45b24:	d9c00015 	stw	r7,0(sp)
   45b28:	004543c0 	call	4543c <__mulsi3>
   45b2c:	a00b883a 	mov	r5,r20
   45b30:	9809883a 	mov	r4,r19
   45b34:	1023883a 	mov	r17,r2
   45b38:	004543c0 	call	4543c <__mulsi3>
   45b3c:	a009883a 	mov	r4,r20
   45b40:	b00b883a 	mov	r5,r22
   45b44:	1027883a 	mov	r19,r2
   45b48:	004543c0 	call	4543c <__mulsi3>
   45b4c:	b00b883a 	mov	r5,r22
   45b50:	9009883a 	mov	r4,r18
   45b54:	1029883a 	mov	r20,r2
   45b58:	004543c0 	call	4543c <__mulsi3>
   45b5c:	8806d43a 	srli	r3,r17,16
   45b60:	14c5883a 	add	r2,r2,r19
   45b64:	d9c00017 	ldw	r7,0(sp)
   45b68:	1885883a 	add	r2,r3,r2
   45b6c:	14c0022e 	bgeu	r2,r19,45b78 <__mulsf3+0x2d4>
   45b70:	00c00074 	movhi	r3,1
   45b74:	a0e9883a 	add	r20,r20,r3
   45b78:	1026943a 	slli	r19,r2,16
   45b7c:	8c7fffcc 	andi	r17,r17,65535
   45b80:	1004d43a 	srli	r2,r2,16
   45b84:	9c63883a 	add	r17,r19,r17
   45b88:	882691ba 	slli	r19,r17,6
   45b8c:	1505883a 	add	r2,r2,r20
   45b90:	8822d6ba 	srli	r17,r17,26
   45b94:	100891ba 	slli	r4,r2,6
   45b98:	9826c03a 	cmpne	r19,r19,zero
   45b9c:	9c62b03a 	or	r17,r19,r17
   45ba0:	8926b03a 	or	r19,r17,r4
   45ba4:	9882002c 	andhi	r2,r19,2048
   45ba8:	10000426 	beq	r2,zero,45bbc <__mulsf3+0x318>
   45bac:	9804d07a 	srli	r2,r19,1
   45bb0:	9900004c 	andi	r4,r19,1
   45bb4:	3821883a 	mov	r16,r7
   45bb8:	1126b03a 	or	r19,r2,r4
   45bbc:	80c01fc4 	addi	r3,r16,127
   45bc0:	00c0210e 	bge	zero,r3,45c48 <__mulsf3+0x3a4>
   45bc4:	988001cc 	andi	r2,r19,7
   45bc8:	10000426 	beq	r2,zero,45bdc <__mulsf3+0x338>
   45bcc:	988003cc 	andi	r2,r19,15
   45bd0:	01000104 	movi	r4,4
   45bd4:	11000126 	beq	r2,r4,45bdc <__mulsf3+0x338>
   45bd8:	9927883a 	add	r19,r19,r4
   45bdc:	9882002c 	andhi	r2,r19,2048
   45be0:	10000426 	beq	r2,zero,45bf4 <__mulsf3+0x350>
   45be4:	00be0034 	movhi	r2,63488
   45be8:	10bfffc4 	addi	r2,r2,-1
   45bec:	80c02004 	addi	r3,r16,128
   45bf0:	98a6703a 	and	r19,r19,r2
   45bf4:	00803f84 	movi	r2,254
   45bf8:	10ff9c16 	blt	r2,r3,45a6c <_gp+0xffff3700>
   45bfc:	980891ba 	slli	r4,r19,6
   45c00:	a829883a 	mov	r20,r21
   45c04:	2008d27a 	srli	r4,r4,9
   45c08:	003f7906 	br	459f0 <_gp+0xffff3684>
   45c0c:	9080102c 	andhi	r2,r18,64
   45c10:	10000826 	beq	r2,zero,45c34 <__mulsf3+0x390>
   45c14:	9880102c 	andhi	r2,r19,64
   45c18:	1000061e 	bne	r2,zero,45c34 <__mulsf3+0x390>
   45c1c:	00802034 	movhi	r2,128
   45c20:	99001034 	orhi	r4,r19,64
   45c24:	10bfffc4 	addi	r2,r2,-1
   45c28:	b029883a 	mov	r20,r22
   45c2c:	2088703a 	and	r4,r4,r2
   45c30:	003fad06 	br	45ae8 <_gp+0xffff377c>
   45c34:	00802034 	movhi	r2,128
   45c38:	91001034 	orhi	r4,r18,64
   45c3c:	10bfffc4 	addi	r2,r2,-1
   45c40:	2088703a 	and	r4,r4,r2
   45c44:	003fa806 	br	45ae8 <_gp+0xffff377c>
   45c48:	00800044 	movi	r2,1
   45c4c:	10c7c83a 	sub	r3,r2,r3
   45c50:	008006c4 	movi	r2,27
   45c54:	10ff6316 	blt	r2,r3,459e4 <_gp+0xffff3678>
   45c58:	00800804 	movi	r2,32
   45c5c:	10c5c83a 	sub	r2,r2,r3
   45c60:	9884983a 	sll	r2,r19,r2
   45c64:	98c6d83a 	srl	r3,r19,r3
   45c68:	1004c03a 	cmpne	r2,r2,zero
   45c6c:	1884b03a 	or	r2,r3,r2
   45c70:	10c001cc 	andi	r3,r2,7
   45c74:	18000426 	beq	r3,zero,45c88 <__mulsf3+0x3e4>
   45c78:	10c003cc 	andi	r3,r2,15
   45c7c:	01000104 	movi	r4,4
   45c80:	19000126 	beq	r3,r4,45c88 <__mulsf3+0x3e4>
   45c84:	1105883a 	add	r2,r2,r4
   45c88:	10c1002c 	andhi	r3,r2,1024
   45c8c:	18000626 	beq	r3,zero,45ca8 <__mulsf3+0x404>
   45c90:	a829883a 	mov	r20,r21
   45c94:	00c00044 	movi	r3,1
   45c98:	0009883a 	mov	r4,zero
   45c9c:	003f5406 	br	459f0 <_gp+0xffff3684>
   45ca0:	3821883a 	mov	r16,r7
   45ca4:	003fc506 	br	45bbc <_gp+0xffff3850>
   45ca8:	100491ba 	slli	r2,r2,6
   45cac:	a829883a 	mov	r20,r21
   45cb0:	0007883a 	mov	r3,zero
   45cb4:	1008d27a 	srli	r4,r2,9
   45cb8:	003f4d06 	br	459f0 <_gp+0xffff3684>
   45cbc:	00802034 	movhi	r2,128
   45cc0:	99001034 	orhi	r4,r19,64
   45cc4:	10bfffc4 	addi	r2,r2,-1
   45cc8:	a829883a 	mov	r20,r21
   45ccc:	2088703a 	and	r4,r4,r2
   45cd0:	003f8506 	br	45ae8 <_gp+0xffff377c>

00045cd4 <__floatunsisf>:
   45cd4:	defffe04 	addi	sp,sp,-8
   45cd8:	dfc00115 	stw	ra,4(sp)
   45cdc:	dc000015 	stw	r16,0(sp)
   45ce0:	20002c26 	beq	r4,zero,45d94 <__floatunsisf+0xc0>
   45ce4:	2021883a 	mov	r16,r4
   45ce8:	0046a4c0 	call	46a4c <__clzsi2>
   45cec:	00c02784 	movi	r3,158
   45cf0:	1887c83a 	sub	r3,r3,r2
   45cf4:	01002584 	movi	r4,150
   45cf8:	20c00f16 	blt	r4,r3,45d38 <__floatunsisf+0x64>
   45cfc:	20c9c83a 	sub	r4,r4,r3
   45d00:	8108983a 	sll	r4,r16,r4
   45d04:	00802034 	movhi	r2,128
   45d08:	10bfffc4 	addi	r2,r2,-1
   45d0c:	2088703a 	and	r4,r4,r2
   45d10:	18803fcc 	andi	r2,r3,255
   45d14:	100695fa 	slli	r3,r2,23
   45d18:	00802034 	movhi	r2,128
   45d1c:	10bfffc4 	addi	r2,r2,-1
   45d20:	2084703a 	and	r2,r4,r2
   45d24:	10c4b03a 	or	r2,r2,r3
   45d28:	dfc00117 	ldw	ra,4(sp)
   45d2c:	dc000017 	ldw	r16,0(sp)
   45d30:	dec00204 	addi	sp,sp,8
   45d34:	f800283a 	ret
   45d38:	01002644 	movi	r4,153
   45d3c:	20c01816 	blt	r4,r3,45da0 <__floatunsisf+0xcc>
   45d40:	20c9c83a 	sub	r4,r4,r3
   45d44:	8108983a 	sll	r4,r16,r4
   45d48:	017f0034 	movhi	r5,64512
   45d4c:	297fffc4 	addi	r5,r5,-1
   45d50:	218001cc 	andi	r6,r4,7
   45d54:	214a703a 	and	r5,r4,r5
   45d58:	30000426 	beq	r6,zero,45d6c <__floatunsisf+0x98>
   45d5c:	210003cc 	andi	r4,r4,15
   45d60:	01800104 	movi	r6,4
   45d64:	21800126 	beq	r4,r6,45d6c <__floatunsisf+0x98>
   45d68:	298b883a 	add	r5,r5,r6
   45d6c:	2901002c 	andhi	r4,r5,1024
   45d70:	20000526 	beq	r4,zero,45d88 <__floatunsisf+0xb4>
   45d74:	00c027c4 	movi	r3,159
   45d78:	1887c83a 	sub	r3,r3,r2
   45d7c:	00bf0034 	movhi	r2,64512
   45d80:	10bfffc4 	addi	r2,r2,-1
   45d84:	288a703a 	and	r5,r5,r2
   45d88:	280891ba 	slli	r4,r5,6
   45d8c:	2008d27a 	srli	r4,r4,9
   45d90:	003fdf06 	br	45d10 <_gp+0xffff39a4>
   45d94:	0007883a 	mov	r3,zero
   45d98:	0009883a 	mov	r4,zero
   45d9c:	003fdc06 	br	45d10 <_gp+0xffff39a4>
   45da0:	01402e44 	movi	r5,185
   45da4:	28cbc83a 	sub	r5,r5,r3
   45da8:	01000144 	movi	r4,5
   45dac:	2089c83a 	sub	r4,r4,r2
   45db0:	814a983a 	sll	r5,r16,r5
   45db4:	8108d83a 	srl	r4,r16,r4
   45db8:	2820c03a 	cmpne	r16,r5,zero
   45dbc:	2408b03a 	or	r4,r4,r16
   45dc0:	003fe106 	br	45d48 <_gp+0xffff39dc>

00045dc4 <__divdf3>:
   45dc4:	defff004 	addi	sp,sp,-64
   45dc8:	dc800815 	stw	r18,32(sp)
   45dcc:	2824d53a 	srli	r18,r5,20
   45dd0:	dd800c15 	stw	r22,48(sp)
   45dd4:	282cd7fa 	srli	r22,r5,31
   45dd8:	dc000615 	stw	r16,24(sp)
   45ddc:	04000434 	movhi	r16,16
   45de0:	843fffc4 	addi	r16,r16,-1
   45de4:	dfc00f15 	stw	ra,60(sp)
   45de8:	df000e15 	stw	fp,56(sp)
   45dec:	ddc00d15 	stw	r23,52(sp)
   45df0:	dd400b15 	stw	r21,44(sp)
   45df4:	dd000a15 	stw	r20,40(sp)
   45df8:	dcc00915 	stw	r19,36(sp)
   45dfc:	dc400715 	stw	r17,28(sp)
   45e00:	9481ffcc 	andi	r18,r18,2047
   45e04:	2c20703a 	and	r16,r5,r16
   45e08:	b2003fcc 	andi	r8,r22,255
   45e0c:	90006126 	beq	r18,zero,45f94 <__divdf3+0x1d0>
   45e10:	0081ffc4 	movi	r2,2047
   45e14:	202b883a 	mov	r21,r4
   45e18:	90803726 	beq	r18,r2,45ef8 <__divdf3+0x134>
   45e1c:	80800434 	orhi	r2,r16,16
   45e20:	100490fa 	slli	r2,r2,3
   45e24:	2020d77a 	srli	r16,r4,29
   45e28:	202a90fa 	slli	r21,r4,3
   45e2c:	94bf0044 	addi	r18,r18,-1023
   45e30:	80a0b03a 	or	r16,r16,r2
   45e34:	0013883a 	mov	r9,zero
   45e38:	000b883a 	mov	r5,zero
   45e3c:	3806d53a 	srli	r3,r7,20
   45e40:	382ed7fa 	srli	r23,r7,31
   45e44:	04400434 	movhi	r17,16
   45e48:	8c7fffc4 	addi	r17,r17,-1
   45e4c:	18c1ffcc 	andi	r3,r3,2047
   45e50:	3029883a 	mov	r20,r6
   45e54:	3c62703a 	and	r17,r7,r17
   45e58:	bf003fcc 	andi	fp,r23,255
   45e5c:	18006e26 	beq	r3,zero,46018 <__divdf3+0x254>
   45e60:	0081ffc4 	movi	r2,2047
   45e64:	18806626 	beq	r3,r2,46000 <__divdf3+0x23c>
   45e68:	88800434 	orhi	r2,r17,16
   45e6c:	100490fa 	slli	r2,r2,3
   45e70:	3022d77a 	srli	r17,r6,29
   45e74:	302890fa 	slli	r20,r6,3
   45e78:	18ff0044 	addi	r3,r3,-1023
   45e7c:	88a2b03a 	or	r17,r17,r2
   45e80:	000f883a 	mov	r7,zero
   45e84:	b5e6f03a 	xor	r19,r22,r23
   45e88:	3a4cb03a 	or	r6,r7,r9
   45e8c:	008003c4 	movi	r2,15
   45e90:	9809883a 	mov	r4,r19
   45e94:	90c7c83a 	sub	r3,r18,r3
   45e98:	9cc03fcc 	andi	r19,r19,255
   45e9c:	11809636 	bltu	r2,r6,460f8 <__divdf3+0x334>
   45ea0:	300c90ba 	slli	r6,r6,2
   45ea4:	00800134 	movhi	r2,4
   45ea8:	1097ae04 	addi	r2,r2,24248
   45eac:	308d883a 	add	r6,r6,r2
   45eb0:	30800017 	ldw	r2,0(r6)
   45eb4:	1000683a 	jmp	r2
   45eb8:	000460f8 	rdprs	zero,zero,4483
   45ebc:	00045f30 	cmpltui	zero,zero,4476
   45ec0:	000460e8 	cmpgeui	zero,zero,4483
   45ec4:	00045f24 	muli	zero,zero,4476
   45ec8:	000460e8 	cmpgeui	zero,zero,4483
   45ecc:	000460bc 	xorhi	zero,zero,4482
   45ed0:	000460e8 	cmpgeui	zero,zero,4483
   45ed4:	00045f24 	muli	zero,zero,4476
   45ed8:	00045f30 	cmpltui	zero,zero,4476
   45edc:	00045f30 	cmpltui	zero,zero,4476
   45ee0:	000460bc 	xorhi	zero,zero,4482
   45ee4:	00045f24 	muli	zero,zero,4476
   45ee8:	00045f14 	movui	zero,4476
   45eec:	00045f14 	movui	zero,4476
   45ef0:	00045f14 	movui	zero,4476
   45ef4:	00046480 	call	4648 <__reset-0x3b9b8>
   45ef8:	2404b03a 	or	r2,r4,r16
   45efc:	10006c1e 	bne	r2,zero,460b0 <__divdf3+0x2ec>
   45f00:	02400204 	movi	r9,8
   45f04:	0021883a 	mov	r16,zero
   45f08:	002b883a 	mov	r21,zero
   45f0c:	01400084 	movi	r5,2
   45f10:	003fca06 	br	45e3c <_gp+0xffff3ad0>
   45f14:	8023883a 	mov	r17,r16
   45f18:	a829883a 	mov	r20,r21
   45f1c:	4039883a 	mov	fp,r8
   45f20:	280f883a 	mov	r7,r5
   45f24:	00800084 	movi	r2,2
   45f28:	3881601e 	bne	r7,r2,464ac <__divdf3+0x6e8>
   45f2c:	e027883a 	mov	r19,fp
   45f30:	9900004c 	andi	r4,r19,1
   45f34:	0081ffc4 	movi	r2,2047
   45f38:	0021883a 	mov	r16,zero
   45f3c:	002b883a 	mov	r21,zero
   45f40:	1004953a 	slli	r2,r2,20
   45f44:	20c03fcc 	andi	r3,r4,255
   45f48:	01400434 	movhi	r5,16
   45f4c:	297fffc4 	addi	r5,r5,-1
   45f50:	180697fa 	slli	r3,r3,31
   45f54:	8160703a 	and	r16,r16,r5
   45f58:	80a0b03a 	or	r16,r16,r2
   45f5c:	80c6b03a 	or	r3,r16,r3
   45f60:	a805883a 	mov	r2,r21
   45f64:	dfc00f17 	ldw	ra,60(sp)
   45f68:	df000e17 	ldw	fp,56(sp)
   45f6c:	ddc00d17 	ldw	r23,52(sp)
   45f70:	dd800c17 	ldw	r22,48(sp)
   45f74:	dd400b17 	ldw	r21,44(sp)
   45f78:	dd000a17 	ldw	r20,40(sp)
   45f7c:	dcc00917 	ldw	r19,36(sp)
   45f80:	dc800817 	ldw	r18,32(sp)
   45f84:	dc400717 	ldw	r17,28(sp)
   45f88:	dc000617 	ldw	r16,24(sp)
   45f8c:	dec01004 	addi	sp,sp,64
   45f90:	f800283a 	ret
   45f94:	2404b03a 	or	r2,r4,r16
   45f98:	2023883a 	mov	r17,r4
   45f9c:	10003f26 	beq	r2,zero,4609c <__divdf3+0x2d8>
   45fa0:	80015e26 	beq	r16,zero,4651c <__divdf3+0x758>
   45fa4:	8009883a 	mov	r4,r16
   45fa8:	d9800215 	stw	r6,8(sp)
   45fac:	d9c00515 	stw	r7,20(sp)
   45fb0:	da000415 	stw	r8,16(sp)
   45fb4:	0046a4c0 	call	46a4c <__clzsi2>
   45fb8:	d9800217 	ldw	r6,8(sp)
   45fbc:	d9c00517 	ldw	r7,20(sp)
   45fc0:	da000417 	ldw	r8,16(sp)
   45fc4:	113ffd44 	addi	r4,r2,-11
   45fc8:	00c00704 	movi	r3,28
   45fcc:	19014f16 	blt	r3,r4,4650c <__divdf3+0x748>
   45fd0:	00c00744 	movi	r3,29
   45fd4:	157ffe04 	addi	r21,r2,-8
   45fd8:	1907c83a 	sub	r3,r3,r4
   45fdc:	8560983a 	sll	r16,r16,r21
   45fe0:	88c6d83a 	srl	r3,r17,r3
   45fe4:	8d6a983a 	sll	r21,r17,r21
   45fe8:	1c20b03a 	or	r16,r3,r16
   45fec:	1080fcc4 	addi	r2,r2,1011
   45ff0:	00a5c83a 	sub	r18,zero,r2
   45ff4:	0013883a 	mov	r9,zero
   45ff8:	000b883a 	mov	r5,zero
   45ffc:	003f8f06 	br	45e3c <_gp+0xffff3ad0>
   46000:	3444b03a 	or	r2,r6,r17
   46004:	1000231e 	bne	r2,zero,46094 <__divdf3+0x2d0>
   46008:	0023883a 	mov	r17,zero
   4600c:	0029883a 	mov	r20,zero
   46010:	01c00084 	movi	r7,2
   46014:	003f9b06 	br	45e84 <_gp+0xffff3b18>
   46018:	3444b03a 	or	r2,r6,r17
   4601c:	10001926 	beq	r2,zero,46084 <__divdf3+0x2c0>
   46020:	88014b26 	beq	r17,zero,46550 <__divdf3+0x78c>
   46024:	8809883a 	mov	r4,r17
   46028:	d9400115 	stw	r5,4(sp)
   4602c:	d9800215 	stw	r6,8(sp)
   46030:	da000415 	stw	r8,16(sp)
   46034:	da400315 	stw	r9,12(sp)
   46038:	0046a4c0 	call	46a4c <__clzsi2>
   4603c:	d9400117 	ldw	r5,4(sp)
   46040:	d9800217 	ldw	r6,8(sp)
   46044:	da000417 	ldw	r8,16(sp)
   46048:	da400317 	ldw	r9,12(sp)
   4604c:	113ffd44 	addi	r4,r2,-11
   46050:	00c00704 	movi	r3,28
   46054:	19013a16 	blt	r3,r4,46540 <__divdf3+0x77c>
   46058:	00c00744 	movi	r3,29
   4605c:	153ffe04 	addi	r20,r2,-8
   46060:	1907c83a 	sub	r3,r3,r4
   46064:	8d22983a 	sll	r17,r17,r20
   46068:	30c6d83a 	srl	r3,r6,r3
   4606c:	3528983a 	sll	r20,r6,r20
   46070:	1c62b03a 	or	r17,r3,r17
   46074:	1080fcc4 	addi	r2,r2,1011
   46078:	0087c83a 	sub	r3,zero,r2
   4607c:	000f883a 	mov	r7,zero
   46080:	003f8006 	br	45e84 <_gp+0xffff3b18>
   46084:	0023883a 	mov	r17,zero
   46088:	0029883a 	mov	r20,zero
   4608c:	01c00044 	movi	r7,1
   46090:	003f7c06 	br	45e84 <_gp+0xffff3b18>
   46094:	01c000c4 	movi	r7,3
   46098:	003f7a06 	br	45e84 <_gp+0xffff3b18>
   4609c:	02400104 	movi	r9,4
   460a0:	0021883a 	mov	r16,zero
   460a4:	002b883a 	mov	r21,zero
   460a8:	01400044 	movi	r5,1
   460ac:	003f6306 	br	45e3c <_gp+0xffff3ad0>
   460b0:	02400304 	movi	r9,12
   460b4:	014000c4 	movi	r5,3
   460b8:	003f6006 	br	45e3c <_gp+0xffff3ad0>
   460bc:	04000434 	movhi	r16,16
   460c0:	0009883a 	mov	r4,zero
   460c4:	843fffc4 	addi	r16,r16,-1
   460c8:	057fffc4 	movi	r21,-1
   460cc:	0081ffc4 	movi	r2,2047
   460d0:	003f9b06 	br	45f40 <_gp+0xffff3bd4>
   460d4:	00c00044 	movi	r3,1
   460d8:	1887c83a 	sub	r3,r3,r2
   460dc:	01000e04 	movi	r4,56
   460e0:	20c1530e 	bge	r4,r3,46630 <__divdf3+0x86c>
   460e4:	9900004c 	andi	r4,r19,1
   460e8:	0005883a 	mov	r2,zero
   460ec:	0021883a 	mov	r16,zero
   460f0:	002b883a 	mov	r21,zero
   460f4:	003f9206 	br	45f40 <_gp+0xffff3bd4>
   460f8:	8c012e36 	bltu	r17,r16,465b4 <__divdf3+0x7f0>
   460fc:	84412c26 	beq	r16,r17,465b0 <__divdf3+0x7ec>
   46100:	a82f883a 	mov	r23,r21
   46104:	18ffffc4 	addi	r3,r3,-1
   46108:	002b883a 	mov	r21,zero
   4610c:	a004d63a 	srli	r2,r20,24
   46110:	8822923a 	slli	r17,r17,8
   46114:	a028923a 	slli	r20,r20,8
   46118:	8009883a 	mov	r4,r16
   4611c:	88acb03a 	or	r22,r17,r2
   46120:	dd000015 	stw	r20,0(sp)
   46124:	b028d43a 	srli	r20,r22,16
   46128:	d8c00215 	stw	r3,8(sp)
   4612c:	b4bfffcc 	andi	r18,r22,65535
   46130:	a00b883a 	mov	r5,r20
   46134:	00453800 	call	45380 <__udivsi3>
   46138:	100b883a 	mov	r5,r2
   4613c:	9009883a 	mov	r4,r18
   46140:	1023883a 	mov	r17,r2
   46144:	004543c0 	call	4543c <__mulsi3>
   46148:	8009883a 	mov	r4,r16
   4614c:	a00b883a 	mov	r5,r20
   46150:	1039883a 	mov	fp,r2
   46154:	00453e40 	call	453e4 <__umodsi3>
   46158:	1004943a 	slli	r2,r2,16
   4615c:	b808d43a 	srli	r4,r23,16
   46160:	d8c00217 	ldw	r3,8(sp)
   46164:	2084b03a 	or	r2,r4,r2
   46168:	1700062e 	bgeu	r2,fp,46184 <__divdf3+0x3c0>
   4616c:	1585883a 	add	r2,r2,r22
   46170:	893fffc4 	addi	r4,r17,-1
   46174:	15811d36 	bltu	r2,r22,465ec <__divdf3+0x828>
   46178:	17011c2e 	bgeu	r2,fp,465ec <__divdf3+0x828>
   4617c:	8c7fff84 	addi	r17,r17,-2
   46180:	1585883a 	add	r2,r2,r22
   46184:	1739c83a 	sub	fp,r2,fp
   46188:	a00b883a 	mov	r5,r20
   4618c:	e009883a 	mov	r4,fp
   46190:	d8c00215 	stw	r3,8(sp)
   46194:	00453800 	call	45380 <__udivsi3>
   46198:	100b883a 	mov	r5,r2
   4619c:	9009883a 	mov	r4,r18
   461a0:	1021883a 	mov	r16,r2
   461a4:	004543c0 	call	4543c <__mulsi3>
   461a8:	a00b883a 	mov	r5,r20
   461ac:	e009883a 	mov	r4,fp
   461b0:	d8800415 	stw	r2,16(sp)
   461b4:	00453e40 	call	453e4 <__umodsi3>
   461b8:	1004943a 	slli	r2,r2,16
   461bc:	da000417 	ldw	r8,16(sp)
   461c0:	bdffffcc 	andi	r23,r23,65535
   461c4:	b884b03a 	or	r2,r23,r2
   461c8:	d8c00217 	ldw	r3,8(sp)
   461cc:	1200062e 	bgeu	r2,r8,461e8 <__divdf3+0x424>
   461d0:	1585883a 	add	r2,r2,r22
   461d4:	813fffc4 	addi	r4,r16,-1
   461d8:	15810236 	bltu	r2,r22,465e4 <__divdf3+0x820>
   461dc:	1201012e 	bgeu	r2,r8,465e4 <__divdf3+0x820>
   461e0:	843fff84 	addi	r16,r16,-2
   461e4:	1585883a 	add	r2,r2,r22
   461e8:	8822943a 	slli	r17,r17,16
   461ec:	d9800017 	ldw	r6,0(sp)
   461f0:	1211c83a 	sub	r8,r2,r8
   461f4:	8c22b03a 	or	r17,r17,r16
   461f8:	373fffcc 	andi	fp,r6,65535
   461fc:	8abfffcc 	andi	r10,r17,65535
   46200:	8820d43a 	srli	r16,r17,16
   46204:	5009883a 	mov	r4,r10
   46208:	e00b883a 	mov	r5,fp
   4620c:	302ed43a 	srli	r23,r6,16
   46210:	d8c00215 	stw	r3,8(sp)
   46214:	da000415 	stw	r8,16(sp)
   46218:	da800115 	stw	r10,4(sp)
   4621c:	004543c0 	call	4543c <__mulsi3>
   46220:	800b883a 	mov	r5,r16
   46224:	e009883a 	mov	r4,fp
   46228:	d8800515 	stw	r2,20(sp)
   4622c:	004543c0 	call	4543c <__mulsi3>
   46230:	8009883a 	mov	r4,r16
   46234:	b80b883a 	mov	r5,r23
   46238:	d8800315 	stw	r2,12(sp)
   4623c:	004543c0 	call	4543c <__mulsi3>
   46240:	da800117 	ldw	r10,4(sp)
   46244:	b80b883a 	mov	r5,r23
   46248:	1021883a 	mov	r16,r2
   4624c:	5009883a 	mov	r4,r10
   46250:	004543c0 	call	4543c <__mulsi3>
   46254:	d9c00517 	ldw	r7,20(sp)
   46258:	da400317 	ldw	r9,12(sp)
   4625c:	d8c00217 	ldw	r3,8(sp)
   46260:	3808d43a 	srli	r4,r7,16
   46264:	1245883a 	add	r2,r2,r9
   46268:	da000417 	ldw	r8,16(sp)
   4626c:	2085883a 	add	r2,r4,r2
   46270:	1240022e 	bgeu	r2,r9,4627c <__divdf3+0x4b8>
   46274:	01000074 	movhi	r4,1
   46278:	8121883a 	add	r16,r16,r4
   4627c:	1008d43a 	srli	r4,r2,16
   46280:	1004943a 	slli	r2,r2,16
   46284:	39ffffcc 	andi	r7,r7,65535
   46288:	2409883a 	add	r4,r4,r16
   4628c:	11c5883a 	add	r2,r2,r7
   46290:	4100bb36 	bltu	r8,r4,46580 <__divdf3+0x7bc>
   46294:	4100d726 	beq	r8,r4,465f4 <__divdf3+0x830>
   46298:	4109c83a 	sub	r4,r8,r4
   4629c:	a8a1c83a 	sub	r16,r21,r2
   462a0:	ac2b803a 	cmpltu	r21,r21,r16
   462a4:	256bc83a 	sub	r21,r4,r21
   462a8:	b540d926 	beq	r22,r21,46610 <__divdf3+0x84c>
   462ac:	a00b883a 	mov	r5,r20
   462b0:	a809883a 	mov	r4,r21
   462b4:	d8c00215 	stw	r3,8(sp)
   462b8:	00453800 	call	45380 <__udivsi3>
   462bc:	100b883a 	mov	r5,r2
   462c0:	9009883a 	mov	r4,r18
   462c4:	d8800515 	stw	r2,20(sp)
   462c8:	004543c0 	call	4543c <__mulsi3>
   462cc:	a809883a 	mov	r4,r21
   462d0:	a00b883a 	mov	r5,r20
   462d4:	d8800415 	stw	r2,16(sp)
   462d8:	00453e40 	call	453e4 <__umodsi3>
   462dc:	1004943a 	slli	r2,r2,16
   462e0:	8008d43a 	srli	r4,r16,16
   462e4:	da000417 	ldw	r8,16(sp)
   462e8:	d8c00217 	ldw	r3,8(sp)
   462ec:	2084b03a 	or	r2,r4,r2
   462f0:	d9c00517 	ldw	r7,20(sp)
   462f4:	1200062e 	bgeu	r2,r8,46310 <__divdf3+0x54c>
   462f8:	1585883a 	add	r2,r2,r22
   462fc:	393fffc4 	addi	r4,r7,-1
   46300:	1580c536 	bltu	r2,r22,46618 <__divdf3+0x854>
   46304:	1200c42e 	bgeu	r2,r8,46618 <__divdf3+0x854>
   46308:	39ffff84 	addi	r7,r7,-2
   4630c:	1585883a 	add	r2,r2,r22
   46310:	122bc83a 	sub	r21,r2,r8
   46314:	a00b883a 	mov	r5,r20
   46318:	a809883a 	mov	r4,r21
   4631c:	d8c00215 	stw	r3,8(sp)
   46320:	d9c00515 	stw	r7,20(sp)
   46324:	00453800 	call	45380 <__udivsi3>
   46328:	9009883a 	mov	r4,r18
   4632c:	100b883a 	mov	r5,r2
   46330:	d8800415 	stw	r2,16(sp)
   46334:	004543c0 	call	4543c <__mulsi3>
   46338:	a809883a 	mov	r4,r21
   4633c:	a00b883a 	mov	r5,r20
   46340:	1025883a 	mov	r18,r2
   46344:	00453e40 	call	453e4 <__umodsi3>
   46348:	1004943a 	slli	r2,r2,16
   4634c:	813fffcc 	andi	r4,r16,65535
   46350:	d8c00217 	ldw	r3,8(sp)
   46354:	20a0b03a 	or	r16,r4,r2
   46358:	d9c00517 	ldw	r7,20(sp)
   4635c:	da000417 	ldw	r8,16(sp)
   46360:	8480062e 	bgeu	r16,r18,4637c <__divdf3+0x5b8>
   46364:	85a1883a 	add	r16,r16,r22
   46368:	40bfffc4 	addi	r2,r8,-1
   4636c:	8580ac36 	bltu	r16,r22,46620 <__divdf3+0x85c>
   46370:	8480ab2e 	bgeu	r16,r18,46620 <__divdf3+0x85c>
   46374:	423fff84 	addi	r8,r8,-2
   46378:	85a1883a 	add	r16,r16,r22
   4637c:	3804943a 	slli	r2,r7,16
   46380:	84a1c83a 	sub	r16,r16,r18
   46384:	e009883a 	mov	r4,fp
   46388:	1228b03a 	or	r20,r2,r8
   4638c:	a1ffffcc 	andi	r7,r20,65535
   46390:	a024d43a 	srli	r18,r20,16
   46394:	380b883a 	mov	r5,r7
   46398:	d8c00215 	stw	r3,8(sp)
   4639c:	d9c00515 	stw	r7,20(sp)
   463a0:	004543c0 	call	4543c <__mulsi3>
   463a4:	900b883a 	mov	r5,r18
   463a8:	e009883a 	mov	r4,fp
   463ac:	102b883a 	mov	r21,r2
   463b0:	004543c0 	call	4543c <__mulsi3>
   463b4:	900b883a 	mov	r5,r18
   463b8:	b809883a 	mov	r4,r23
   463bc:	1039883a 	mov	fp,r2
   463c0:	004543c0 	call	4543c <__mulsi3>
   463c4:	d9c00517 	ldw	r7,20(sp)
   463c8:	b80b883a 	mov	r5,r23
   463cc:	1025883a 	mov	r18,r2
   463d0:	3809883a 	mov	r4,r7
   463d4:	004543c0 	call	4543c <__mulsi3>
   463d8:	a808d43a 	srli	r4,r21,16
   463dc:	1705883a 	add	r2,r2,fp
   463e0:	d8c00217 	ldw	r3,8(sp)
   463e4:	2085883a 	add	r2,r4,r2
   463e8:	1700022e 	bgeu	r2,fp,463f4 <__divdf3+0x630>
   463ec:	01000074 	movhi	r4,1
   463f0:	9125883a 	add	r18,r18,r4
   463f4:	1008d43a 	srli	r4,r2,16
   463f8:	1004943a 	slli	r2,r2,16
   463fc:	ad7fffcc 	andi	r21,r21,65535
   46400:	2489883a 	add	r4,r4,r18
   46404:	1545883a 	add	r2,r2,r21
   46408:	81003836 	bltu	r16,r4,464ec <__divdf3+0x728>
   4640c:	81003626 	beq	r16,r4,464e8 <__divdf3+0x724>
   46410:	a5000054 	ori	r20,r20,1
   46414:	1880ffc4 	addi	r2,r3,1023
   46418:	00bf2e0e 	bge	zero,r2,460d4 <_gp+0xffff3d68>
   4641c:	a10001cc 	andi	r4,r20,7
   46420:	20000726 	beq	r4,zero,46440 <__divdf3+0x67c>
   46424:	a10003cc 	andi	r4,r20,15
   46428:	01400104 	movi	r5,4
   4642c:	21400426 	beq	r4,r5,46440 <__divdf3+0x67c>
   46430:	a149883a 	add	r4,r20,r5
   46434:	2529803a 	cmpltu	r20,r4,r20
   46438:	8d23883a 	add	r17,r17,r20
   4643c:	2029883a 	mov	r20,r4
   46440:	8900402c 	andhi	r4,r17,256
   46444:	20000426 	beq	r4,zero,46458 <__divdf3+0x694>
   46448:	18810004 	addi	r2,r3,1024
   4644c:	00ffc034 	movhi	r3,65280
   46450:	18ffffc4 	addi	r3,r3,-1
   46454:	88e2703a 	and	r17,r17,r3
   46458:	00c1ff84 	movi	r3,2046
   4645c:	18beb416 	blt	r3,r2,45f30 <_gp+0xffff3bc4>
   46460:	a028d0fa 	srli	r20,r20,3
   46464:	882a977a 	slli	r21,r17,29
   46468:	8820927a 	slli	r16,r17,9
   4646c:	1081ffcc 	andi	r2,r2,2047
   46470:	ad2ab03a 	or	r21,r21,r20
   46474:	8020d33a 	srli	r16,r16,12
   46478:	9900004c 	andi	r4,r19,1
   4647c:	003eb006 	br	45f40 <_gp+0xffff3bd4>
   46480:	8080022c 	andhi	r2,r16,8
   46484:	10001226 	beq	r2,zero,464d0 <__divdf3+0x70c>
   46488:	8880022c 	andhi	r2,r17,8
   4648c:	1000101e 	bne	r2,zero,464d0 <__divdf3+0x70c>
   46490:	00800434 	movhi	r2,16
   46494:	8c000234 	orhi	r16,r17,8
   46498:	10bfffc4 	addi	r2,r2,-1
   4649c:	b809883a 	mov	r4,r23
   464a0:	80a0703a 	and	r16,r16,r2
   464a4:	a02b883a 	mov	r21,r20
   464a8:	003f0806 	br	460cc <_gp+0xffff3d60>
   464ac:	008000c4 	movi	r2,3
   464b0:	3880b126 	beq	r7,r2,46778 <__divdf3+0x9b4>
   464b4:	00800044 	movi	r2,1
   464b8:	38805b1e 	bne	r7,r2,46628 <__divdf3+0x864>
   464bc:	e009883a 	mov	r4,fp
   464c0:	0005883a 	mov	r2,zero
   464c4:	0021883a 	mov	r16,zero
   464c8:	002b883a 	mov	r21,zero
   464cc:	003e9c06 	br	45f40 <_gp+0xffff3bd4>
   464d0:	00800434 	movhi	r2,16
   464d4:	84000234 	orhi	r16,r16,8
   464d8:	10bfffc4 	addi	r2,r2,-1
   464dc:	b009883a 	mov	r4,r22
   464e0:	80a0703a 	and	r16,r16,r2
   464e4:	003ef906 	br	460cc <_gp+0xffff3d60>
   464e8:	103fca26 	beq	r2,zero,46414 <_gp+0xffff40a8>
   464ec:	b421883a 	add	r16,r22,r16
   464f0:	a17fffc4 	addi	r5,r20,-1
   464f4:	8580422e 	bgeu	r16,r22,46600 <__divdf3+0x83c>
   464f8:	2829883a 	mov	r20,r5
   464fc:	813fc41e 	bne	r16,r4,46410 <_gp+0xffff40a4>
   46500:	d9800017 	ldw	r6,0(sp)
   46504:	30bfc21e 	bne	r6,r2,46410 <_gp+0xffff40a4>
   46508:	003fc206 	br	46414 <_gp+0xffff40a8>
   4650c:	143ff604 	addi	r16,r2,-40
   46510:	8c20983a 	sll	r16,r17,r16
   46514:	002b883a 	mov	r21,zero
   46518:	003eb406 	br	45fec <_gp+0xffff3c80>
   4651c:	d9800215 	stw	r6,8(sp)
   46520:	d9c00515 	stw	r7,20(sp)
   46524:	da000415 	stw	r8,16(sp)
   46528:	0046a4c0 	call	46a4c <__clzsi2>
   4652c:	10800804 	addi	r2,r2,32
   46530:	da000417 	ldw	r8,16(sp)
   46534:	d9c00517 	ldw	r7,20(sp)
   46538:	d9800217 	ldw	r6,8(sp)
   4653c:	003ea106 	br	45fc4 <_gp+0xffff3c58>
   46540:	147ff604 	addi	r17,r2,-40
   46544:	3462983a 	sll	r17,r6,r17
   46548:	0029883a 	mov	r20,zero
   4654c:	003ec906 	br	46074 <_gp+0xffff3d08>
   46550:	3009883a 	mov	r4,r6
   46554:	d9400115 	stw	r5,4(sp)
   46558:	d9800215 	stw	r6,8(sp)
   4655c:	da000415 	stw	r8,16(sp)
   46560:	da400315 	stw	r9,12(sp)
   46564:	0046a4c0 	call	46a4c <__clzsi2>
   46568:	10800804 	addi	r2,r2,32
   4656c:	da400317 	ldw	r9,12(sp)
   46570:	da000417 	ldw	r8,16(sp)
   46574:	d9800217 	ldw	r6,8(sp)
   46578:	d9400117 	ldw	r5,4(sp)
   4657c:	003eb306 	br	4604c <_gp+0xffff3ce0>
   46580:	d9800017 	ldw	r6,0(sp)
   46584:	a9ab883a 	add	r21,r21,r6
   46588:	a98b803a 	cmpltu	r5,r21,r6
   4658c:	2d8b883a 	add	r5,r5,r22
   46590:	2a11883a 	add	r8,r5,r8
   46594:	897fffc4 	addi	r5,r17,-1
   46598:	b2000c2e 	bgeu	r22,r8,465cc <__divdf3+0x808>
   4659c:	41003f36 	bltu	r8,r4,4669c <__divdf3+0x8d8>
   465a0:	22006c26 	beq	r4,r8,46754 <__divdf3+0x990>
   465a4:	4109c83a 	sub	r4,r8,r4
   465a8:	2823883a 	mov	r17,r5
   465ac:	003f3b06 	br	4629c <_gp+0xffff3f30>
   465b0:	ad3ed336 	bltu	r21,r20,46100 <_gp+0xffff3d94>
   465b4:	a804d07a 	srli	r2,r21,1
   465b8:	802e97fa 	slli	r23,r16,31
   465bc:	a82a97fa 	slli	r21,r21,31
   465c0:	8020d07a 	srli	r16,r16,1
   465c4:	b8aeb03a 	or	r23,r23,r2
   465c8:	003ed006 	br	4610c <_gp+0xffff3da0>
   465cc:	b23ff51e 	bne	r22,r8,465a4 <_gp+0xffff4238>
   465d0:	d9800017 	ldw	r6,0(sp)
   465d4:	a9bff12e 	bgeu	r21,r6,4659c <_gp+0xffff4230>
   465d8:	b109c83a 	sub	r4,r22,r4
   465dc:	2823883a 	mov	r17,r5
   465e0:	003f2e06 	br	4629c <_gp+0xffff3f30>
   465e4:	2021883a 	mov	r16,r4
   465e8:	003eff06 	br	461e8 <_gp+0xffff3e7c>
   465ec:	2023883a 	mov	r17,r4
   465f0:	003ee406 	br	46184 <_gp+0xffff3e18>
   465f4:	a8bfe236 	bltu	r21,r2,46580 <_gp+0xffff4214>
   465f8:	0009883a 	mov	r4,zero
   465fc:	003f2706 	br	4629c <_gp+0xffff3f30>
   46600:	81002d36 	bltu	r16,r4,466b8 <__divdf3+0x8f4>
   46604:	24005626 	beq	r4,r16,46760 <__divdf3+0x99c>
   46608:	2829883a 	mov	r20,r5
   4660c:	003f8006 	br	46410 <_gp+0xffff40a4>
   46610:	053fffc4 	movi	r20,-1
   46614:	003f7f06 	br	46414 <_gp+0xffff40a8>
   46618:	200f883a 	mov	r7,r4
   4661c:	003f3c06 	br	46310 <_gp+0xffff3fa4>
   46620:	1011883a 	mov	r8,r2
   46624:	003f5506 	br	4637c <_gp+0xffff4010>
   46628:	e027883a 	mov	r19,fp
   4662c:	003f7906 	br	46414 <_gp+0xffff40a8>
   46630:	010007c4 	movi	r4,31
   46634:	20c02816 	blt	r4,r3,466d8 <__divdf3+0x914>
   46638:	00800804 	movi	r2,32
   4663c:	10c5c83a 	sub	r2,r2,r3
   46640:	888a983a 	sll	r5,r17,r2
   46644:	a0c8d83a 	srl	r4,r20,r3
   46648:	a084983a 	sll	r2,r20,r2
   4664c:	88e2d83a 	srl	r17,r17,r3
   46650:	2906b03a 	or	r3,r5,r4
   46654:	1004c03a 	cmpne	r2,r2,zero
   46658:	1886b03a 	or	r3,r3,r2
   4665c:	188001cc 	andi	r2,r3,7
   46660:	10000726 	beq	r2,zero,46680 <__divdf3+0x8bc>
   46664:	188003cc 	andi	r2,r3,15
   46668:	01000104 	movi	r4,4
   4666c:	11000426 	beq	r2,r4,46680 <__divdf3+0x8bc>
   46670:	1805883a 	mov	r2,r3
   46674:	10c00104 	addi	r3,r2,4
   46678:	1885803a 	cmpltu	r2,r3,r2
   4667c:	88a3883a 	add	r17,r17,r2
   46680:	8880202c 	andhi	r2,r17,128
   46684:	10002926 	beq	r2,zero,4672c <__divdf3+0x968>
   46688:	9900004c 	andi	r4,r19,1
   4668c:	00800044 	movi	r2,1
   46690:	0021883a 	mov	r16,zero
   46694:	002b883a 	mov	r21,zero
   46698:	003e2906 	br	45f40 <_gp+0xffff3bd4>
   4669c:	d9800017 	ldw	r6,0(sp)
   466a0:	8c7fff84 	addi	r17,r17,-2
   466a4:	a9ab883a 	add	r21,r21,r6
   466a8:	a98b803a 	cmpltu	r5,r21,r6
   466ac:	2d8b883a 	add	r5,r5,r22
   466b0:	2a11883a 	add	r8,r5,r8
   466b4:	003ef806 	br	46298 <_gp+0xffff3f2c>
   466b8:	d9800017 	ldw	r6,0(sp)
   466bc:	318f883a 	add	r7,r6,r6
   466c0:	398b803a 	cmpltu	r5,r7,r6
   466c4:	2d8d883a 	add	r6,r5,r22
   466c8:	81a1883a 	add	r16,r16,r6
   466cc:	a17fff84 	addi	r5,r20,-2
   466d0:	d9c00015 	stw	r7,0(sp)
   466d4:	003f8806 	br	464f8 <_gp+0xffff418c>
   466d8:	013ff844 	movi	r4,-31
   466dc:	2085c83a 	sub	r2,r4,r2
   466e0:	8888d83a 	srl	r4,r17,r2
   466e4:	00800804 	movi	r2,32
   466e8:	18802126 	beq	r3,r2,46770 <__divdf3+0x9ac>
   466ec:	04001004 	movi	r16,64
   466f0:	80c7c83a 	sub	r3,r16,r3
   466f4:	88e0983a 	sll	r16,r17,r3
   466f8:	8504b03a 	or	r2,r16,r20
   466fc:	1004c03a 	cmpne	r2,r2,zero
   46700:	2084b03a 	or	r2,r4,r2
   46704:	144001cc 	andi	r17,r2,7
   46708:	88000d1e 	bne	r17,zero,46740 <__divdf3+0x97c>
   4670c:	0021883a 	mov	r16,zero
   46710:	102ad0fa 	srli	r21,r2,3
   46714:	9900004c 	andi	r4,r19,1
   46718:	0005883a 	mov	r2,zero
   4671c:	ac6ab03a 	or	r21,r21,r17
   46720:	003e0706 	br	45f40 <_gp+0xffff3bd4>
   46724:	1007883a 	mov	r3,r2
   46728:	0023883a 	mov	r17,zero
   4672c:	8820927a 	slli	r16,r17,9
   46730:	1805883a 	mov	r2,r3
   46734:	8822977a 	slli	r17,r17,29
   46738:	8020d33a 	srli	r16,r16,12
   4673c:	003ff406 	br	46710 <_gp+0xffff43a4>
   46740:	10c003cc 	andi	r3,r2,15
   46744:	01000104 	movi	r4,4
   46748:	193ff626 	beq	r3,r4,46724 <_gp+0xffff43b8>
   4674c:	0023883a 	mov	r17,zero
   46750:	003fc806 	br	46674 <_gp+0xffff4308>
   46754:	a8bfd136 	bltu	r21,r2,4669c <_gp+0xffff4330>
   46758:	2823883a 	mov	r17,r5
   4675c:	003fa606 	br	465f8 <_gp+0xffff428c>
   46760:	d9800017 	ldw	r6,0(sp)
   46764:	30bfd436 	bltu	r6,r2,466b8 <_gp+0xffff434c>
   46768:	2829883a 	mov	r20,r5
   4676c:	003f6406 	br	46500 <_gp+0xffff4194>
   46770:	0021883a 	mov	r16,zero
   46774:	003fe006 	br	466f8 <_gp+0xffff438c>
   46778:	00800434 	movhi	r2,16
   4677c:	8c000234 	orhi	r16,r17,8
   46780:	10bfffc4 	addi	r2,r2,-1
   46784:	e009883a 	mov	r4,fp
   46788:	80a0703a 	and	r16,r16,r2
   4678c:	a02b883a 	mov	r21,r20
   46790:	003e4e06 	br	460cc <_gp+0xffff3d60>

00046794 <__extendsfdf2>:
   46794:	200ad5fa 	srli	r5,r4,23
   46798:	defffd04 	addi	sp,sp,-12
   4679c:	dc400115 	stw	r17,4(sp)
   467a0:	29403fcc 	andi	r5,r5,255
   467a4:	29800044 	addi	r6,r5,1
   467a8:	04402034 	movhi	r17,128
   467ac:	dc000015 	stw	r16,0(sp)
   467b0:	8c7fffc4 	addi	r17,r17,-1
   467b4:	dfc00215 	stw	ra,8(sp)
   467b8:	31803fcc 	andi	r6,r6,255
   467bc:	00800044 	movi	r2,1
   467c0:	8922703a 	and	r17,r17,r4
   467c4:	2020d7fa 	srli	r16,r4,31
   467c8:	1180110e 	bge	r2,r6,46810 <__extendsfdf2+0x7c>
   467cc:	880cd0fa 	srli	r6,r17,3
   467d0:	8822977a 	slli	r17,r17,29
   467d4:	2940e004 	addi	r5,r5,896
   467d8:	2941ffcc 	andi	r5,r5,2047
   467dc:	2804953a 	slli	r2,r5,20
   467e0:	01400434 	movhi	r5,16
   467e4:	800697fa 	slli	r3,r16,31
   467e8:	297fffc4 	addi	r5,r5,-1
   467ec:	314a703a 	and	r5,r6,r5
   467f0:	288ab03a 	or	r5,r5,r2
   467f4:	28c6b03a 	or	r3,r5,r3
   467f8:	8805883a 	mov	r2,r17
   467fc:	dfc00217 	ldw	ra,8(sp)
   46800:	dc400117 	ldw	r17,4(sp)
   46804:	dc000017 	ldw	r16,0(sp)
   46808:	dec00304 	addi	sp,sp,12
   4680c:	f800283a 	ret
   46810:	2800111e 	bne	r5,zero,46858 <__extendsfdf2+0xc4>
   46814:	88001c26 	beq	r17,zero,46888 <__extendsfdf2+0xf4>
   46818:	8809883a 	mov	r4,r17
   4681c:	0046a4c0 	call	46a4c <__clzsi2>
   46820:	00c00284 	movi	r3,10
   46824:	18801b16 	blt	r3,r2,46894 <__extendsfdf2+0x100>
   46828:	018002c4 	movi	r6,11
   4682c:	308dc83a 	sub	r6,r6,r2
   46830:	11000544 	addi	r4,r2,21
   46834:	8986d83a 	srl	r3,r17,r6
   46838:	8922983a 	sll	r17,r17,r4
   4683c:	0180e244 	movi	r6,905
   46840:	01400434 	movhi	r5,16
   46844:	3085c83a 	sub	r2,r6,r2
   46848:	297fffc4 	addi	r5,r5,-1
   4684c:	194c703a 	and	r6,r3,r5
   46850:	1141ffcc 	andi	r5,r2,2047
   46854:	003fe006 	br	467d8 <_gp+0xffff446c>
   46858:	88000826 	beq	r17,zero,4687c <__extendsfdf2+0xe8>
   4685c:	880cd0fa 	srli	r6,r17,3
   46860:	00800434 	movhi	r2,16
   46864:	10bfffc4 	addi	r2,r2,-1
   46868:	31800234 	orhi	r6,r6,8
   4686c:	8822977a 	slli	r17,r17,29
   46870:	308c703a 	and	r6,r6,r2
   46874:	0141ffc4 	movi	r5,2047
   46878:	003fd706 	br	467d8 <_gp+0xffff446c>
   4687c:	0141ffc4 	movi	r5,2047
   46880:	000d883a 	mov	r6,zero
   46884:	003fd406 	br	467d8 <_gp+0xffff446c>
   46888:	000b883a 	mov	r5,zero
   4688c:	000d883a 	mov	r6,zero
   46890:	003fd106 	br	467d8 <_gp+0xffff446c>
   46894:	11bffd44 	addi	r6,r2,-11
   46898:	8986983a 	sll	r3,r17,r6
   4689c:	0023883a 	mov	r17,zero
   468a0:	003fe606 	br	4683c <_gp+0xffff44d0>

000468a4 <__truncdfsf2>:
   468a4:	2810d53a 	srli	r8,r5,20
   468a8:	01c00434 	movhi	r7,16
   468ac:	39ffffc4 	addi	r7,r7,-1
   468b0:	29ce703a 	and	r7,r5,r7
   468b4:	4201ffcc 	andi	r8,r8,2047
   468b8:	380e90fa 	slli	r7,r7,3
   468bc:	200cd77a 	srli	r6,r4,29
   468c0:	42400044 	addi	r9,r8,1
   468c4:	4a41ffcc 	andi	r9,r9,2047
   468c8:	00c00044 	movi	r3,1
   468cc:	280ad7fa 	srli	r5,r5,31
   468d0:	31ceb03a 	or	r7,r6,r7
   468d4:	200490fa 	slli	r2,r4,3
   468d8:	1a40230e 	bge	r3,r9,46968 <__truncdfsf2+0xc4>
   468dc:	40ff2004 	addi	r3,r8,-896
   468e0:	01803f84 	movi	r6,254
   468e4:	30c01516 	blt	r6,r3,4693c <__truncdfsf2+0x98>
   468e8:	00c0380e 	bge	zero,r3,469cc <__truncdfsf2+0x128>
   468ec:	200c91ba 	slli	r6,r4,6
   468f0:	380e90fa 	slli	r7,r7,3
   468f4:	1004d77a 	srli	r2,r2,29
   468f8:	300cc03a 	cmpne	r6,r6,zero
   468fc:	31ccb03a 	or	r6,r6,r7
   46900:	308cb03a 	or	r6,r6,r2
   46904:	308001cc 	andi	r2,r6,7
   46908:	10000426 	beq	r2,zero,4691c <__truncdfsf2+0x78>
   4690c:	308003cc 	andi	r2,r6,15
   46910:	01000104 	movi	r4,4
   46914:	11000126 	beq	r2,r4,4691c <__truncdfsf2+0x78>
   46918:	31800104 	addi	r6,r6,4
   4691c:	3081002c 	andhi	r2,r6,1024
   46920:	10001626 	beq	r2,zero,4697c <__truncdfsf2+0xd8>
   46924:	18c00044 	addi	r3,r3,1
   46928:	00803fc4 	movi	r2,255
   4692c:	18800326 	beq	r3,r2,4693c <__truncdfsf2+0x98>
   46930:	300c91ba 	slli	r6,r6,6
   46934:	300cd27a 	srli	r6,r6,9
   46938:	00000206 	br	46944 <__truncdfsf2+0xa0>
   4693c:	00ffffc4 	movi	r3,-1
   46940:	000d883a 	mov	r6,zero
   46944:	18c03fcc 	andi	r3,r3,255
   46948:	180895fa 	slli	r4,r3,23
   4694c:	00c02034 	movhi	r3,128
   46950:	280a97fa 	slli	r5,r5,31
   46954:	18ffffc4 	addi	r3,r3,-1
   46958:	30c6703a 	and	r3,r6,r3
   4695c:	1906b03a 	or	r3,r3,r4
   46960:	1944b03a 	or	r2,r3,r5
   46964:	f800283a 	ret
   46968:	40000b1e 	bne	r8,zero,46998 <__truncdfsf2+0xf4>
   4696c:	388cb03a 	or	r6,r7,r2
   46970:	0007883a 	mov	r3,zero
   46974:	30000426 	beq	r6,zero,46988 <__truncdfsf2+0xe4>
   46978:	01800144 	movi	r6,5
   4697c:	00803fc4 	movi	r2,255
   46980:	300cd0fa 	srli	r6,r6,3
   46984:	18800a26 	beq	r3,r2,469b0 <__truncdfsf2+0x10c>
   46988:	00802034 	movhi	r2,128
   4698c:	10bfffc4 	addi	r2,r2,-1
   46990:	308c703a 	and	r6,r6,r2
   46994:	003feb06 	br	46944 <_gp+0xffff45d8>
   46998:	3888b03a 	or	r4,r7,r2
   4699c:	203fe726 	beq	r4,zero,4693c <_gp+0xffff45d0>
   469a0:	380c90fa 	slli	r6,r7,3
   469a4:	00c03fc4 	movi	r3,255
   469a8:	31808034 	orhi	r6,r6,512
   469ac:	003fd506 	br	46904 <_gp+0xffff4598>
   469b0:	303fe226 	beq	r6,zero,4693c <_gp+0xffff45d0>
   469b4:	00802034 	movhi	r2,128
   469b8:	31801034 	orhi	r6,r6,64
   469bc:	10bfffc4 	addi	r2,r2,-1
   469c0:	00ffffc4 	movi	r3,-1
   469c4:	308c703a 	and	r6,r6,r2
   469c8:	003fde06 	br	46944 <_gp+0xffff45d8>
   469cc:	013ffa44 	movi	r4,-23
   469d0:	19000e16 	blt	r3,r4,46a0c <__truncdfsf2+0x168>
   469d4:	01000784 	movi	r4,30
   469d8:	20c9c83a 	sub	r4,r4,r3
   469dc:	018007c4 	movi	r6,31
   469e0:	39c02034 	orhi	r7,r7,128
   469e4:	31000b16 	blt	r6,r4,46a14 <__truncdfsf2+0x170>
   469e8:	423f2084 	addi	r8,r8,-894
   469ec:	120c983a 	sll	r6,r2,r8
   469f0:	3a0e983a 	sll	r7,r7,r8
   469f4:	1104d83a 	srl	r2,r2,r4
   469f8:	300cc03a 	cmpne	r6,r6,zero
   469fc:	31ceb03a 	or	r7,r6,r7
   46a00:	388cb03a 	or	r6,r7,r2
   46a04:	0007883a 	mov	r3,zero
   46a08:	003fbe06 	br	46904 <_gp+0xffff4598>
   46a0c:	0007883a 	mov	r3,zero
   46a10:	003fd906 	br	46978 <_gp+0xffff460c>
   46a14:	01bfff84 	movi	r6,-2
   46a18:	30cdc83a 	sub	r6,r6,r3
   46a1c:	00c00804 	movi	r3,32
   46a20:	398cd83a 	srl	r6,r7,r6
   46a24:	20c00726 	beq	r4,r3,46a44 <__truncdfsf2+0x1a0>
   46a28:	423f2884 	addi	r8,r8,-862
   46a2c:	3a0e983a 	sll	r7,r7,r8
   46a30:	3884b03a 	or	r2,r7,r2
   46a34:	1004c03a 	cmpne	r2,r2,zero
   46a38:	118cb03a 	or	r6,r2,r6
   46a3c:	0007883a 	mov	r3,zero
   46a40:	003fb006 	br	46904 <_gp+0xffff4598>
   46a44:	000f883a 	mov	r7,zero
   46a48:	003ff906 	br	46a30 <_gp+0xffff46c4>

00046a4c <__clzsi2>:
   46a4c:	00bfffd4 	movui	r2,65535
   46a50:	11000536 	bltu	r2,r4,46a68 <__clzsi2+0x1c>
   46a54:	00803fc4 	movi	r2,255
   46a58:	11000f36 	bltu	r2,r4,46a98 <__clzsi2+0x4c>
   46a5c:	00800804 	movi	r2,32
   46a60:	0007883a 	mov	r3,zero
   46a64:	00000506 	br	46a7c <__clzsi2+0x30>
   46a68:	00804034 	movhi	r2,256
   46a6c:	10bfffc4 	addi	r2,r2,-1
   46a70:	11000c2e 	bgeu	r2,r4,46aa4 <__clzsi2+0x58>
   46a74:	00800204 	movi	r2,8
   46a78:	00c00604 	movi	r3,24
   46a7c:	20c8d83a 	srl	r4,r4,r3
   46a80:	00c00174 	movhi	r3,5
   46a84:	18e74104 	addi	r3,r3,-25340
   46a88:	1909883a 	add	r4,r3,r4
   46a8c:	20c00003 	ldbu	r3,0(r4)
   46a90:	10c5c83a 	sub	r2,r2,r3
   46a94:	f800283a 	ret
   46a98:	00800604 	movi	r2,24
   46a9c:	00c00204 	movi	r3,8
   46aa0:	003ff606 	br	46a7c <_gp+0xffff4710>
   46aa4:	00800404 	movi	r2,16
   46aa8:	1007883a 	mov	r3,r2
   46aac:	003ff306 	br	46a7c <_gp+0xffff4710>

00046ab0 <malloc>:
   46ab0:	00800174 	movhi	r2,5
   46ab4:	10a8dd04 	addi	r2,r2,-23692
   46ab8:	200b883a 	mov	r5,r4
   46abc:	11000017 	ldw	r4,0(r2)
   46ac0:	0046c041 	jmpi	46c04 <_malloc_r>

00046ac4 <free>:
   46ac4:	00800174 	movhi	r2,5
   46ac8:	10a8dd04 	addi	r2,r2,-23692
   46acc:	200b883a 	mov	r5,r4
   46ad0:	11000017 	ldw	r4,0(r2)
   46ad4:	0046b201 	jmpi	46b20 <_free_r>

00046ad8 <memcpy>:
   46ad8:	2005883a 	mov	r2,r4
   46adc:	2007883a 	mov	r3,r4
   46ae0:	218d883a 	add	r6,r4,r6
   46ae4:	19800526 	beq	r3,r6,46afc <memcpy+0x24>
   46ae8:	29000003 	ldbu	r4,0(r5)
   46aec:	18c00044 	addi	r3,r3,1
   46af0:	29400044 	addi	r5,r5,1
   46af4:	193fffc5 	stb	r4,-1(r3)
   46af8:	003ffa06 	br	46ae4 <_gp+0xffff4778>
   46afc:	f800283a 	ret

00046b00 <memset>:
   46b00:	2005883a 	mov	r2,r4
   46b04:	2007883a 	mov	r3,r4
   46b08:	218d883a 	add	r6,r4,r6
   46b0c:	19800326 	beq	r3,r6,46b1c <memset+0x1c>
   46b10:	19400005 	stb	r5,0(r3)
   46b14:	18c00044 	addi	r3,r3,1
   46b18:	003ffc06 	br	46b0c <_gp+0xffff47a0>
   46b1c:	f800283a 	ret

00046b20 <_free_r>:
   46b20:	28003726 	beq	r5,zero,46c00 <_free_r+0xe0>
   46b24:	28ffff17 	ldw	r3,-4(r5)
   46b28:	28bfff04 	addi	r2,r5,-4
   46b2c:	1800010e 	bge	r3,zero,46b34 <_free_r+0x14>
   46b30:	10c5883a 	add	r2,r2,r3
   46b34:	01400174 	movhi	r5,5
   46b38:	2969a304 	addi	r5,r5,-22900
   46b3c:	28c00017 	ldw	r3,0(r5)
   46b40:	280d883a 	mov	r6,r5
   46b44:	1800031e 	bne	r3,zero,46b54 <_free_r+0x34>
   46b48:	10000115 	stw	zero,4(r2)
   46b4c:	28800015 	stw	r2,0(r5)
   46b50:	f800283a 	ret
   46b54:	10c00c2e 	bgeu	r2,r3,46b88 <_free_r+0x68>
   46b58:	11000017 	ldw	r4,0(r2)
   46b5c:	110b883a 	add	r5,r2,r4
   46b60:	1940041e 	bne	r3,r5,46b74 <_free_r+0x54>
   46b64:	19400017 	ldw	r5,0(r3)
   46b68:	18c00117 	ldw	r3,4(r3)
   46b6c:	2909883a 	add	r4,r5,r4
   46b70:	11000015 	stw	r4,0(r2)
   46b74:	10c00115 	stw	r3,4(r2)
   46b78:	30800015 	stw	r2,0(r6)
   46b7c:	f800283a 	ret
   46b80:	11400336 	bltu	r2,r5,46b90 <_free_r+0x70>
   46b84:	2807883a 	mov	r3,r5
   46b88:	19400117 	ldw	r5,4(r3)
   46b8c:	283ffc1e 	bne	r5,zero,46b80 <_gp+0xffff4814>
   46b90:	19c00017 	ldw	r7,0(r3)
   46b94:	19cd883a 	add	r6,r3,r7
   46b98:	30800a1e 	bne	r6,r2,46bc4 <_free_r+0xa4>
   46b9c:	10800017 	ldw	r2,0(r2)
   46ba0:	3885883a 	add	r2,r7,r2
   46ba4:	18800015 	stw	r2,0(r3)
   46ba8:	1889883a 	add	r4,r3,r2
   46bac:	2900141e 	bne	r5,r4,46c00 <_free_r+0xe0>
   46bb0:	29000017 	ldw	r4,0(r5)
   46bb4:	2085883a 	add	r2,r4,r2
   46bb8:	18800015 	stw	r2,0(r3)
   46bbc:	28800117 	ldw	r2,4(r5)
   46bc0:	00000e06 	br	46bfc <_free_r+0xdc>
   46bc4:	1180032e 	bgeu	r2,r6,46bd4 <_free_r+0xb4>
   46bc8:	00800304 	movi	r2,12
   46bcc:	20800015 	stw	r2,0(r4)
   46bd0:	f800283a 	ret
   46bd4:	11000017 	ldw	r4,0(r2)
   46bd8:	110d883a 	add	r6,r2,r4
   46bdc:	2980061e 	bne	r5,r6,46bf8 <_free_r+0xd8>
   46be0:	29800017 	ldw	r6,0(r5)
   46be4:	3109883a 	add	r4,r6,r4
   46be8:	11000015 	stw	r4,0(r2)
   46bec:	29000117 	ldw	r4,4(r5)
   46bf0:	11000115 	stw	r4,4(r2)
   46bf4:	00000106 	br	46bfc <_free_r+0xdc>
   46bf8:	11400115 	stw	r5,4(r2)
   46bfc:	18800115 	stw	r2,4(r3)
   46c00:	f800283a 	ret

00046c04 <_malloc_r>:
   46c04:	defffb04 	addi	sp,sp,-20
   46c08:	00bfff04 	movi	r2,-4
   46c0c:	dc400115 	stw	r17,4(sp)
   46c10:	2c4000c4 	addi	r17,r5,3
   46c14:	88a2703a 	and	r17,r17,r2
   46c18:	dc800215 	stw	r18,8(sp)
   46c1c:	dfc00415 	stw	ra,16(sp)
   46c20:	dcc00315 	stw	r19,12(sp)
   46c24:	dc000015 	stw	r16,0(sp)
   46c28:	8c400204 	addi	r17,r17,8
   46c2c:	00800304 	movi	r2,12
   46c30:	2025883a 	mov	r18,r4
   46c34:	8880022e 	bgeu	r17,r2,46c40 <_malloc_r+0x3c>
   46c38:	1023883a 	mov	r17,r2
   46c3c:	00000506 	br	46c54 <_malloc_r+0x50>
   46c40:	8800040e 	bge	r17,zero,46c54 <_malloc_r+0x50>
   46c44:	00800304 	movi	r2,12
   46c48:	90800015 	stw	r2,0(r18)
   46c4c:	0005883a 	mov	r2,zero
   46c50:	00003b06 	br	46d40 <_malloc_r+0x13c>
   46c54:	897ffb36 	bltu	r17,r5,46c44 <_gp+0xffff48d8>
   46c58:	00800174 	movhi	r2,5
   46c5c:	10a9a304 	addi	r2,r2,-22900
   46c60:	10c00017 	ldw	r3,0(r2)
   46c64:	1009883a 	mov	r4,r2
   46c68:	1821883a 	mov	r16,r3
   46c6c:	80000926 	beq	r16,zero,46c94 <_malloc_r+0x90>
   46c70:	80800017 	ldw	r2,0(r16)
   46c74:	1445c83a 	sub	r2,r2,r17
   46c78:	10001516 	blt	r2,zero,46cd0 <_malloc_r+0xcc>
   46c7c:	014002c4 	movi	r5,11
   46c80:	28800d2e 	bgeu	r5,r2,46cb8 <_malloc_r+0xb4>
   46c84:	80800015 	stw	r2,0(r16)
   46c88:	80a1883a 	add	r16,r16,r2
   46c8c:	84400015 	stw	r17,0(r16)
   46c90:	8000221e 	bne	r16,zero,46d1c <_malloc_r+0x118>
   46c94:	04000174 	movhi	r16,5
   46c98:	8429a204 	addi	r16,r16,-22904
   46c9c:	80800017 	ldw	r2,0(r16)
   46ca0:	10000e1e 	bne	r2,zero,46cdc <_malloc_r+0xd8>
   46ca4:	000b883a 	mov	r5,zero
   46ca8:	9009883a 	mov	r4,r18
   46cac:	0046e9c0 	call	46e9c <_sbrk_r>
   46cb0:	80800015 	stw	r2,0(r16)
   46cb4:	00000906 	br	46cdc <_malloc_r+0xd8>
   46cb8:	80800117 	ldw	r2,4(r16)
   46cbc:	1c00021e 	bne	r3,r16,46cc8 <_malloc_r+0xc4>
   46cc0:	20800015 	stw	r2,0(r4)
   46cc4:	00001506 	br	46d1c <_malloc_r+0x118>
   46cc8:	18800115 	stw	r2,4(r3)
   46ccc:	00001306 	br	46d1c <_malloc_r+0x118>
   46cd0:	8007883a 	mov	r3,r16
   46cd4:	84000117 	ldw	r16,4(r16)
   46cd8:	003fe406 	br	46c6c <_gp+0xffff4900>
   46cdc:	880b883a 	mov	r5,r17
   46ce0:	9009883a 	mov	r4,r18
   46ce4:	0046e9c0 	call	46e9c <_sbrk_r>
   46ce8:	04ffffc4 	movi	r19,-1
   46cec:	14ffd526 	beq	r2,r19,46c44 <_gp+0xffff48d8>
   46cf0:	140000c4 	addi	r16,r2,3
   46cf4:	00ffff04 	movi	r3,-4
   46cf8:	80e0703a 	and	r16,r16,r3
   46cfc:	1400021e 	bne	r2,r16,46d08 <_malloc_r+0x104>
   46d00:	84400015 	stw	r17,0(r16)
   46d04:	00000506 	br	46d1c <_malloc_r+0x118>
   46d08:	808bc83a 	sub	r5,r16,r2
   46d0c:	9009883a 	mov	r4,r18
   46d10:	0046e9c0 	call	46e9c <_sbrk_r>
   46d14:	14fffa1e 	bne	r2,r19,46d00 <_gp+0xffff4994>
   46d18:	003fca06 	br	46c44 <_gp+0xffff48d8>
   46d1c:	810002c4 	addi	r4,r16,11
   46d20:	00bffe04 	movi	r2,-8
   46d24:	80c00104 	addi	r3,r16,4
   46d28:	2084703a 	and	r2,r4,r2
   46d2c:	10c7c83a 	sub	r3,r2,r3
   46d30:	18000326 	beq	r3,zero,46d40 <_malloc_r+0x13c>
   46d34:	80e1883a 	add	r16,r16,r3
   46d38:	00c7c83a 	sub	r3,zero,r3
   46d3c:	80c00015 	stw	r3,0(r16)
   46d40:	dfc00417 	ldw	ra,16(sp)
   46d44:	dcc00317 	ldw	r19,12(sp)
   46d48:	dc800217 	ldw	r18,8(sp)
   46d4c:	dc400117 	ldw	r17,4(sp)
   46d50:	dc000017 	ldw	r16,0(sp)
   46d54:	dec00504 	addi	sp,sp,20
   46d58:	f800283a 	ret

00046d5c <_printf_r>:
   46d5c:	defffd04 	addi	sp,sp,-12
   46d60:	dfc00015 	stw	ra,0(sp)
   46d64:	d9800115 	stw	r6,4(sp)
   46d68:	d9c00215 	stw	r7,8(sp)
   46d6c:	20c00217 	ldw	r3,8(r4)
   46d70:	01800134 	movhi	r6,4
   46d74:	319f2504 	addi	r6,r6,31892
   46d78:	19800115 	stw	r6,4(r3)
   46d7c:	280d883a 	mov	r6,r5
   46d80:	21400217 	ldw	r5,8(r4)
   46d84:	d9c00104 	addi	r7,sp,4
   46d88:	004765c0 	call	4765c <___vfprintf_internal_r>
   46d8c:	dfc00017 	ldw	ra,0(sp)
   46d90:	dec00304 	addi	sp,sp,12
   46d94:	f800283a 	ret

00046d98 <printf>:
   46d98:	defffc04 	addi	sp,sp,-16
   46d9c:	dfc00015 	stw	ra,0(sp)
   46da0:	d9400115 	stw	r5,4(sp)
   46da4:	d9800215 	stw	r6,8(sp)
   46da8:	d9c00315 	stw	r7,12(sp)
   46dac:	00800174 	movhi	r2,5
   46db0:	10a8dd04 	addi	r2,r2,-23692
   46db4:	10800017 	ldw	r2,0(r2)
   46db8:	01400134 	movhi	r5,4
   46dbc:	295f2504 	addi	r5,r5,31892
   46dc0:	10c00217 	ldw	r3,8(r2)
   46dc4:	d9800104 	addi	r6,sp,4
   46dc8:	19400115 	stw	r5,4(r3)
   46dcc:	200b883a 	mov	r5,r4
   46dd0:	11000217 	ldw	r4,8(r2)
   46dd4:	0047b880 	call	47b88 <__vfprintf_internal>
   46dd8:	dfc00017 	ldw	ra,0(sp)
   46ddc:	dec00404 	addi	sp,sp,16
   46de0:	f800283a 	ret

00046de4 <_putchar_r>:
   46de4:	21800217 	ldw	r6,8(r4)
   46de8:	0047ea81 	jmpi	47ea8 <_putc_r>

00046dec <putchar>:
   46dec:	00800174 	movhi	r2,5
   46df0:	10a8dd04 	addi	r2,r2,-23692
   46df4:	10800017 	ldw	r2,0(r2)
   46df8:	200b883a 	mov	r5,r4
   46dfc:	11800217 	ldw	r6,8(r2)
   46e00:	1009883a 	mov	r4,r2
   46e04:	0047ea81 	jmpi	47ea8 <_putc_r>

00046e08 <_puts_r>:
   46e08:	defffd04 	addi	sp,sp,-12
   46e0c:	dc000015 	stw	r16,0(sp)
   46e10:	2021883a 	mov	r16,r4
   46e14:	2809883a 	mov	r4,r5
   46e18:	dfc00215 	stw	ra,8(sp)
   46e1c:	dc400115 	stw	r17,4(sp)
   46e20:	2823883a 	mov	r17,r5
   46e24:	00470200 	call	47020 <strlen>
   46e28:	81400217 	ldw	r5,8(r16)
   46e2c:	01000134 	movhi	r4,4
   46e30:	211f2504 	addi	r4,r4,31892
   46e34:	29000115 	stw	r4,4(r5)
   46e38:	100f883a 	mov	r7,r2
   46e3c:	880d883a 	mov	r6,r17
   46e40:	8009883a 	mov	r4,r16
   46e44:	0047c940 	call	47c94 <__sfvwrite_small_dev>
   46e48:	00ffffc4 	movi	r3,-1
   46e4c:	10c00926 	beq	r2,r3,46e74 <_puts_r+0x6c>
   46e50:	81400217 	ldw	r5,8(r16)
   46e54:	01800174 	movhi	r6,5
   46e58:	01c00044 	movi	r7,1
   46e5c:	28800117 	ldw	r2,4(r5)
   46e60:	31a78104 	addi	r6,r6,-25084
   46e64:	8009883a 	mov	r4,r16
   46e68:	103ee83a 	callr	r2
   46e6c:	10bfffe0 	cmpeqi	r2,r2,-1
   46e70:	0085c83a 	sub	r2,zero,r2
   46e74:	dfc00217 	ldw	ra,8(sp)
   46e78:	dc400117 	ldw	r17,4(sp)
   46e7c:	dc000017 	ldw	r16,0(sp)
   46e80:	dec00304 	addi	sp,sp,12
   46e84:	f800283a 	ret

00046e88 <puts>:
   46e88:	00800174 	movhi	r2,5
   46e8c:	10a8dd04 	addi	r2,r2,-23692
   46e90:	200b883a 	mov	r5,r4
   46e94:	11000017 	ldw	r4,0(r2)
   46e98:	0046e081 	jmpi	46e08 <_puts_r>

00046e9c <_sbrk_r>:
   46e9c:	defffd04 	addi	sp,sp,-12
   46ea0:	dc000015 	stw	r16,0(sp)
   46ea4:	04000174 	movhi	r16,5
   46ea8:	dc400115 	stw	r17,4(sp)
   46eac:	8429a404 	addi	r16,r16,-22896
   46eb0:	2023883a 	mov	r17,r4
   46eb4:	2809883a 	mov	r4,r5
   46eb8:	dfc00215 	stw	ra,8(sp)
   46ebc:	80000015 	stw	zero,0(r16)
   46ec0:	00480b00 	call	480b0 <sbrk>
   46ec4:	00ffffc4 	movi	r3,-1
   46ec8:	10c0031e 	bne	r2,r3,46ed8 <_sbrk_r+0x3c>
   46ecc:	80c00017 	ldw	r3,0(r16)
   46ed0:	18000126 	beq	r3,zero,46ed8 <_sbrk_r+0x3c>
   46ed4:	88c00015 	stw	r3,0(r17)
   46ed8:	dfc00217 	ldw	ra,8(sp)
   46edc:	dc400117 	ldw	r17,4(sp)
   46ee0:	dc000017 	ldw	r16,0(sp)
   46ee4:	dec00304 	addi	sp,sp,12
   46ee8:	f800283a 	ret

00046eec <_sprintf_r>:
   46eec:	defff704 	addi	sp,sp,-36
   46ef0:	dfc00715 	stw	ra,28(sp)
   46ef4:	d9c00815 	stw	r7,32(sp)
   46ef8:	00808204 	movi	r2,520
   46efc:	d880000d 	sth	r2,0(sp)
   46f00:	00a00034 	movhi	r2,32768
   46f04:	10bfffc4 	addi	r2,r2,-1
   46f08:	d8800515 	stw	r2,20(sp)
   46f0c:	d8800315 	stw	r2,12(sp)
   46f10:	00bfffc4 	movi	r2,-1
   46f14:	d880008d 	sth	r2,2(sp)
   46f18:	00800134 	movhi	r2,4
   46f1c:	d9400415 	stw	r5,16(sp)
   46f20:	d9400215 	stw	r5,8(sp)
   46f24:	109f5304 	addi	r2,r2,32076
   46f28:	d9c00804 	addi	r7,sp,32
   46f2c:	d80b883a 	mov	r5,sp
   46f30:	d8800115 	stw	r2,4(sp)
   46f34:	d8000615 	stw	zero,24(sp)
   46f38:	00470a80 	call	470a8 <___svfprintf_internal_r>
   46f3c:	d8c00417 	ldw	r3,16(sp)
   46f40:	18000005 	stb	zero,0(r3)
   46f44:	dfc00717 	ldw	ra,28(sp)
   46f48:	dec00904 	addi	sp,sp,36
   46f4c:	f800283a 	ret

00046f50 <sprintf>:
   46f50:	defff604 	addi	sp,sp,-40
   46f54:	dfc00715 	stw	ra,28(sp)
   46f58:	d9800815 	stw	r6,32(sp)
   46f5c:	d9c00915 	stw	r7,36(sp)
   46f60:	00808204 	movi	r2,520
   46f64:	d880000d 	sth	r2,0(sp)
   46f68:	00a00034 	movhi	r2,32768
   46f6c:	10bfffc4 	addi	r2,r2,-1
   46f70:	d8800515 	stw	r2,20(sp)
   46f74:	d8800315 	stw	r2,12(sp)
   46f78:	00bfffc4 	movi	r2,-1
   46f7c:	d880008d 	sth	r2,2(sp)
   46f80:	00800134 	movhi	r2,4
   46f84:	109f5304 	addi	r2,r2,32076
   46f88:	d8800115 	stw	r2,4(sp)
   46f8c:	00800174 	movhi	r2,5
   46f90:	10a8dd04 	addi	r2,r2,-23692
   46f94:	d9000415 	stw	r4,16(sp)
   46f98:	d9000215 	stw	r4,8(sp)
   46f9c:	11000017 	ldw	r4,0(r2)
   46fa0:	280d883a 	mov	r6,r5
   46fa4:	d9c00804 	addi	r7,sp,32
   46fa8:	d80b883a 	mov	r5,sp
   46fac:	d8000615 	stw	zero,24(sp)
   46fb0:	00470a80 	call	470a8 <___svfprintf_internal_r>
   46fb4:	d8c00417 	ldw	r3,16(sp)
   46fb8:	18000005 	stb	zero,0(r3)
   46fbc:	dfc00717 	ldw	ra,28(sp)
   46fc0:	dec00a04 	addi	sp,sp,40
   46fc4:	f800283a 	ret

00046fc8 <strcasecmp>:
   46fc8:	00800174 	movhi	r2,5
   46fcc:	10a8db04 	addi	r2,r2,-23700
   46fd0:	11c00017 	ldw	r7,0(r2)
   46fd4:	02000044 	movi	r8,1
   46fd8:	20800003 	ldbu	r2,0(r4)
   46fdc:	3887883a 	add	r3,r7,r2
   46fe0:	18c00043 	ldbu	r3,1(r3)
   46fe4:	18c000cc 	andi	r3,r3,3
   46fe8:	1a00011e 	bne	r3,r8,46ff0 <strcasecmp+0x28>
   46fec:	10800804 	addi	r2,r2,32
   46ff0:	28c00003 	ldbu	r3,0(r5)
   46ff4:	38cd883a 	add	r6,r7,r3
   46ff8:	31800043 	ldbu	r6,1(r6)
   46ffc:	318000cc 	andi	r6,r6,3
   47000:	3200011e 	bne	r6,r8,47008 <strcasecmp+0x40>
   47004:	18c00804 	addi	r3,r3,32
   47008:	10c5c83a 	sub	r2,r2,r3
   4700c:	1000031e 	bne	r2,zero,4701c <strcasecmp+0x54>
   47010:	21000044 	addi	r4,r4,1
   47014:	29400044 	addi	r5,r5,1
   47018:	183fef1e 	bne	r3,zero,46fd8 <_gp+0xffff4c6c>
   4701c:	f800283a 	ret

00047020 <strlen>:
   47020:	2005883a 	mov	r2,r4
   47024:	10c00007 	ldb	r3,0(r2)
   47028:	18000226 	beq	r3,zero,47034 <strlen+0x14>
   4702c:	10800044 	addi	r2,r2,1
   47030:	003ffc06 	br	47024 <_gp+0xffff4cb8>
   47034:	1105c83a 	sub	r2,r2,r4
   47038:	f800283a 	ret

0004703c <print_repeat>:
   4703c:	defffb04 	addi	sp,sp,-20
   47040:	dc800315 	stw	r18,12(sp)
   47044:	dc400215 	stw	r17,8(sp)
   47048:	dc000115 	stw	r16,4(sp)
   4704c:	dfc00415 	stw	ra,16(sp)
   47050:	2025883a 	mov	r18,r4
   47054:	2823883a 	mov	r17,r5
   47058:	d9800005 	stb	r6,0(sp)
   4705c:	3821883a 	mov	r16,r7
   47060:	04000a0e 	bge	zero,r16,4708c <print_repeat+0x50>
   47064:	88800117 	ldw	r2,4(r17)
   47068:	01c00044 	movi	r7,1
   4706c:	d80d883a 	mov	r6,sp
   47070:	880b883a 	mov	r5,r17
   47074:	9009883a 	mov	r4,r18
   47078:	103ee83a 	callr	r2
   4707c:	843fffc4 	addi	r16,r16,-1
   47080:	103ff726 	beq	r2,zero,47060 <_gp+0xffff4cf4>
   47084:	00bfffc4 	movi	r2,-1
   47088:	00000106 	br	47090 <print_repeat+0x54>
   4708c:	0005883a 	mov	r2,zero
   47090:	dfc00417 	ldw	ra,16(sp)
   47094:	dc800317 	ldw	r18,12(sp)
   47098:	dc400217 	ldw	r17,8(sp)
   4709c:	dc000117 	ldw	r16,4(sp)
   470a0:	dec00504 	addi	sp,sp,20
   470a4:	f800283a 	ret

000470a8 <___svfprintf_internal_r>:
   470a8:	deffe504 	addi	sp,sp,-108
   470ac:	d8c00804 	addi	r3,sp,32
   470b0:	ddc01815 	stw	r23,96(sp)
   470b4:	dd801715 	stw	r22,92(sp)
   470b8:	dd401615 	stw	r21,88(sp)
   470bc:	dd001515 	stw	r20,84(sp)
   470c0:	dcc01415 	stw	r19,80(sp)
   470c4:	dc801315 	stw	r18,76(sp)
   470c8:	dc401215 	stw	r17,72(sp)
   470cc:	dc001115 	stw	r16,68(sp)
   470d0:	dfc01a15 	stw	ra,104(sp)
   470d4:	df001915 	stw	fp,100(sp)
   470d8:	2029883a 	mov	r20,r4
   470dc:	2823883a 	mov	r17,r5
   470e0:	382d883a 	mov	r22,r7
   470e4:	d9800f15 	stw	r6,60(sp)
   470e8:	0021883a 	mov	r16,zero
   470ec:	d8000e15 	stw	zero,56(sp)
   470f0:	d8000a15 	stw	zero,40(sp)
   470f4:	002b883a 	mov	r21,zero
   470f8:	0027883a 	mov	r19,zero
   470fc:	0025883a 	mov	r18,zero
   47100:	d8000c15 	stw	zero,48(sp)
   47104:	d8000b15 	stw	zero,44(sp)
   47108:	002f883a 	mov	r23,zero
   4710c:	d8c00915 	stw	r3,36(sp)
   47110:	d8c00f17 	ldw	r3,60(sp)
   47114:	19000003 	ldbu	r4,0(r3)
   47118:	20803fcc 	andi	r2,r4,255
   4711c:	1080201c 	xori	r2,r2,128
   47120:	10bfe004 	addi	r2,r2,-128
   47124:	10011e26 	beq	r2,zero,475a0 <___svfprintf_internal_r+0x4f8>
   47128:	00c00044 	movi	r3,1
   4712c:	b8c01426 	beq	r23,r3,47180 <___svfprintf_internal_r+0xd8>
   47130:	1dc00216 	blt	r3,r23,4713c <___svfprintf_internal_r+0x94>
   47134:	b8000626 	beq	r23,zero,47150 <___svfprintf_internal_r+0xa8>
   47138:	00011506 	br	47590 <___svfprintf_internal_r+0x4e8>
   4713c:	01400084 	movi	r5,2
   47140:	b9401d26 	beq	r23,r5,471b8 <___svfprintf_internal_r+0x110>
   47144:	014000c4 	movi	r5,3
   47148:	b9402b26 	beq	r23,r5,471f8 <___svfprintf_internal_r+0x150>
   4714c:	00011006 	br	47590 <___svfprintf_internal_r+0x4e8>
   47150:	01400944 	movi	r5,37
   47154:	1140fc26 	beq	r2,r5,47548 <___svfprintf_internal_r+0x4a0>
   47158:	88800117 	ldw	r2,4(r17)
   4715c:	d9000005 	stb	r4,0(sp)
   47160:	01c00044 	movi	r7,1
   47164:	d80d883a 	mov	r6,sp
   47168:	880b883a 	mov	r5,r17
   4716c:	a009883a 	mov	r4,r20
   47170:	103ee83a 	callr	r2
   47174:	1000d81e 	bne	r2,zero,474d8 <___svfprintf_internal_r+0x430>
   47178:	84000044 	addi	r16,r16,1
   4717c:	00010406 	br	47590 <___svfprintf_internal_r+0x4e8>
   47180:	01400c04 	movi	r5,48
   47184:	1140fa26 	beq	r2,r5,47570 <___svfprintf_internal_r+0x4c8>
   47188:	01400944 	movi	r5,37
   4718c:	11400a1e 	bne	r2,r5,471b8 <___svfprintf_internal_r+0x110>
   47190:	d8800005 	stb	r2,0(sp)
   47194:	88800117 	ldw	r2,4(r17)
   47198:	b80f883a 	mov	r7,r23
   4719c:	d80d883a 	mov	r6,sp
   471a0:	880b883a 	mov	r5,r17
   471a4:	a009883a 	mov	r4,r20
   471a8:	103ee83a 	callr	r2
   471ac:	1000ca1e 	bne	r2,zero,474d8 <___svfprintf_internal_r+0x430>
   471b0:	84000044 	addi	r16,r16,1
   471b4:	0000f506 	br	4758c <___svfprintf_internal_r+0x4e4>
   471b8:	25fff404 	addi	r23,r4,-48
   471bc:	bdc03fcc 	andi	r23,r23,255
   471c0:	00c00244 	movi	r3,9
   471c4:	1dc00936 	bltu	r3,r23,471ec <___svfprintf_internal_r+0x144>
   471c8:	00bfffc4 	movi	r2,-1
   471cc:	90800426 	beq	r18,r2,471e0 <___svfprintf_internal_r+0x138>
   471d0:	01400284 	movi	r5,10
   471d4:	9009883a 	mov	r4,r18
   471d8:	004543c0 	call	4543c <__mulsi3>
   471dc:	00000106 	br	471e4 <___svfprintf_internal_r+0x13c>
   471e0:	0005883a 	mov	r2,zero
   471e4:	b8a5883a 	add	r18,r23,r2
   471e8:	0000e206 	br	47574 <___svfprintf_internal_r+0x4cc>
   471ec:	01400b84 	movi	r5,46
   471f0:	1140e426 	beq	r2,r5,47584 <___svfprintf_internal_r+0x4dc>
   471f4:	05c00084 	movi	r23,2
   471f8:	213ff404 	addi	r4,r4,-48
   471fc:	27003fcc 	andi	fp,r4,255
   47200:	00c00244 	movi	r3,9
   47204:	1f000936 	bltu	r3,fp,4722c <___svfprintf_internal_r+0x184>
   47208:	00bfffc4 	movi	r2,-1
   4720c:	98800426 	beq	r19,r2,47220 <___svfprintf_internal_r+0x178>
   47210:	01400284 	movi	r5,10
   47214:	9809883a 	mov	r4,r19
   47218:	004543c0 	call	4543c <__mulsi3>
   4721c:	00000106 	br	47224 <___svfprintf_internal_r+0x17c>
   47220:	0005883a 	mov	r2,zero
   47224:	e0a7883a 	add	r19,fp,r2
   47228:	0000d906 	br	47590 <___svfprintf_internal_r+0x4e8>
   4722c:	00c01b04 	movi	r3,108
   47230:	10c0d226 	beq	r2,r3,4757c <___svfprintf_internal_r+0x4d4>
   47234:	013fffc4 	movi	r4,-1
   47238:	99000226 	beq	r19,r4,47244 <___svfprintf_internal_r+0x19c>
   4723c:	d8000b15 	stw	zero,44(sp)
   47240:	00000106 	br	47248 <___svfprintf_internal_r+0x1a0>
   47244:	04c00044 	movi	r19,1
   47248:	01001a44 	movi	r4,105
   4724c:	11001626 	beq	r2,r4,472a8 <___svfprintf_internal_r+0x200>
   47250:	20800916 	blt	r4,r2,47278 <___svfprintf_internal_r+0x1d0>
   47254:	010018c4 	movi	r4,99
   47258:	11008826 	beq	r2,r4,4747c <___svfprintf_internal_r+0x3d4>
   4725c:	01001904 	movi	r4,100
   47260:	11001126 	beq	r2,r4,472a8 <___svfprintf_internal_r+0x200>
   47264:	01001604 	movi	r4,88
   47268:	1100c81e 	bne	r2,r4,4758c <___svfprintf_internal_r+0x4e4>
   4726c:	00c00044 	movi	r3,1
   47270:	d8c00e15 	stw	r3,56(sp)
   47274:	00001506 	br	472cc <___svfprintf_internal_r+0x224>
   47278:	01001cc4 	movi	r4,115
   4727c:	11009826 	beq	r2,r4,474e0 <___svfprintf_internal_r+0x438>
   47280:	20800416 	blt	r4,r2,47294 <___svfprintf_internal_r+0x1ec>
   47284:	01001bc4 	movi	r4,111
   47288:	1100c01e 	bne	r2,r4,4758c <___svfprintf_internal_r+0x4e4>
   4728c:	05400204 	movi	r21,8
   47290:	00000f06 	br	472d0 <___svfprintf_internal_r+0x228>
   47294:	01001d44 	movi	r4,117
   47298:	11000d26 	beq	r2,r4,472d0 <___svfprintf_internal_r+0x228>
   4729c:	01001e04 	movi	r4,120
   472a0:	11000a26 	beq	r2,r4,472cc <___svfprintf_internal_r+0x224>
   472a4:	0000b906 	br	4758c <___svfprintf_internal_r+0x4e4>
   472a8:	d8c00a17 	ldw	r3,40(sp)
   472ac:	b7000104 	addi	fp,r22,4
   472b0:	18000726 	beq	r3,zero,472d0 <___svfprintf_internal_r+0x228>
   472b4:	df000d15 	stw	fp,52(sp)
   472b8:	b5c00017 	ldw	r23,0(r22)
   472bc:	b800080e 	bge	r23,zero,472e0 <___svfprintf_internal_r+0x238>
   472c0:	05efc83a 	sub	r23,zero,r23
   472c4:	02400044 	movi	r9,1
   472c8:	00000606 	br	472e4 <___svfprintf_internal_r+0x23c>
   472cc:	05400404 	movi	r21,16
   472d0:	b0c00104 	addi	r3,r22,4
   472d4:	d8c00d15 	stw	r3,52(sp)
   472d8:	b5c00017 	ldw	r23,0(r22)
   472dc:	d8000a15 	stw	zero,40(sp)
   472e0:	0013883a 	mov	r9,zero
   472e4:	d839883a 	mov	fp,sp
   472e8:	b8001726 	beq	r23,zero,47348 <___svfprintf_internal_r+0x2a0>
   472ec:	a80b883a 	mov	r5,r21
   472f0:	b809883a 	mov	r4,r23
   472f4:	da401015 	stw	r9,64(sp)
   472f8:	00453800 	call	45380 <__udivsi3>
   472fc:	a80b883a 	mov	r5,r21
   47300:	1009883a 	mov	r4,r2
   47304:	102d883a 	mov	r22,r2
   47308:	004543c0 	call	4543c <__mulsi3>
   4730c:	b885c83a 	sub	r2,r23,r2
   47310:	00c00244 	movi	r3,9
   47314:	da401017 	ldw	r9,64(sp)
   47318:	18800216 	blt	r3,r2,47324 <___svfprintf_internal_r+0x27c>
   4731c:	10800c04 	addi	r2,r2,48
   47320:	00000506 	br	47338 <___svfprintf_internal_r+0x290>
   47324:	d8c00e17 	ldw	r3,56(sp)
   47328:	18000226 	beq	r3,zero,47334 <___svfprintf_internal_r+0x28c>
   4732c:	10800dc4 	addi	r2,r2,55
   47330:	00000106 	br	47338 <___svfprintf_internal_r+0x290>
   47334:	108015c4 	addi	r2,r2,87
   47338:	e0800005 	stb	r2,0(fp)
   4733c:	b02f883a 	mov	r23,r22
   47340:	e7000044 	addi	fp,fp,1
   47344:	003fe806 	br	472e8 <_gp+0xffff4f7c>
   47348:	e6efc83a 	sub	r23,fp,sp
   4734c:	9dc5c83a 	sub	r2,r19,r23
   47350:	0080090e 	bge	zero,r2,47378 <___svfprintf_internal_r+0x2d0>
   47354:	e085883a 	add	r2,fp,r2
   47358:	01400c04 	movi	r5,48
   4735c:	d8c00917 	ldw	r3,36(sp)
   47360:	e009883a 	mov	r4,fp
   47364:	e0c0032e 	bgeu	fp,r3,47374 <___svfprintf_internal_r+0x2cc>
   47368:	e7000044 	addi	fp,fp,1
   4736c:	21400005 	stb	r5,0(r4)
   47370:	e0bffa1e 	bne	fp,r2,4735c <_gp+0xffff4ff0>
   47374:	e6efc83a 	sub	r23,fp,sp
   47378:	d8c00b17 	ldw	r3,44(sp)
   4737c:	4dd1883a 	add	r8,r9,r23
   47380:	922dc83a 	sub	r22,r18,r8
   47384:	18001626 	beq	r3,zero,473e0 <___svfprintf_internal_r+0x338>
   47388:	48000a26 	beq	r9,zero,473b4 <___svfprintf_internal_r+0x30c>
   4738c:	00800b44 	movi	r2,45
   47390:	d8800805 	stb	r2,32(sp)
   47394:	88800117 	ldw	r2,4(r17)
   47398:	01c00044 	movi	r7,1
   4739c:	d9800804 	addi	r6,sp,32
   473a0:	880b883a 	mov	r5,r17
   473a4:	a009883a 	mov	r4,r20
   473a8:	103ee83a 	callr	r2
   473ac:	10004a1e 	bne	r2,zero,474d8 <___svfprintf_internal_r+0x430>
   473b0:	84000044 	addi	r16,r16,1
   473b4:	0580070e 	bge	zero,r22,473d4 <___svfprintf_internal_r+0x32c>
   473b8:	b00f883a 	mov	r7,r22
   473bc:	01800c04 	movi	r6,48
   473c0:	880b883a 	mov	r5,r17
   473c4:	a009883a 	mov	r4,r20
   473c8:	004703c0 	call	4703c <print_repeat>
   473cc:	1000421e 	bne	r2,zero,474d8 <___svfprintf_internal_r+0x430>
   473d0:	85a1883a 	add	r16,r16,r22
   473d4:	e02d883a 	mov	r22,fp
   473d8:	bf2fc83a 	sub	r23,r23,fp
   473dc:	00002006 	br	47460 <___svfprintf_internal_r+0x3b8>
   473e0:	0580090e 	bge	zero,r22,47408 <___svfprintf_internal_r+0x360>
   473e4:	b00f883a 	mov	r7,r22
   473e8:	01800804 	movi	r6,32
   473ec:	880b883a 	mov	r5,r17
   473f0:	a009883a 	mov	r4,r20
   473f4:	da401015 	stw	r9,64(sp)
   473f8:	004703c0 	call	4703c <print_repeat>
   473fc:	da401017 	ldw	r9,64(sp)
   47400:	1000351e 	bne	r2,zero,474d8 <___svfprintf_internal_r+0x430>
   47404:	85a1883a 	add	r16,r16,r22
   47408:	483ff226 	beq	r9,zero,473d4 <_gp+0xffff5068>
   4740c:	00800b44 	movi	r2,45
   47410:	d8800805 	stb	r2,32(sp)
   47414:	88800117 	ldw	r2,4(r17)
   47418:	01c00044 	movi	r7,1
   4741c:	d9800804 	addi	r6,sp,32
   47420:	880b883a 	mov	r5,r17
   47424:	a009883a 	mov	r4,r20
   47428:	103ee83a 	callr	r2
   4742c:	10002a1e 	bne	r2,zero,474d8 <___svfprintf_internal_r+0x430>
   47430:	84000044 	addi	r16,r16,1
   47434:	003fe706 	br	473d4 <_gp+0xffff5068>
   47438:	b5bfffc4 	addi	r22,r22,-1
   4743c:	b0800003 	ldbu	r2,0(r22)
   47440:	01c00044 	movi	r7,1
   47444:	d9800804 	addi	r6,sp,32
   47448:	d8800805 	stb	r2,32(sp)
   4744c:	88800117 	ldw	r2,4(r17)
   47450:	880b883a 	mov	r5,r17
   47454:	a009883a 	mov	r4,r20
   47458:	103ee83a 	callr	r2
   4745c:	10001e1e 	bne	r2,zero,474d8 <___svfprintf_internal_r+0x430>
   47460:	8585c83a 	sub	r2,r16,r22
   47464:	b5c9883a 	add	r4,r22,r23
   47468:	e085883a 	add	r2,fp,r2
   4746c:	013ff216 	blt	zero,r4,47438 <_gp+0xffff50cc>
   47470:	1021883a 	mov	r16,r2
   47474:	dd800d17 	ldw	r22,52(sp)
   47478:	00004406 	br	4758c <___svfprintf_internal_r+0x4e4>
   4747c:	00800044 	movi	r2,1
   47480:	1480080e 	bge	r2,r18,474a4 <___svfprintf_internal_r+0x3fc>
   47484:	95ffffc4 	addi	r23,r18,-1
   47488:	b80f883a 	mov	r7,r23
   4748c:	01800804 	movi	r6,32
   47490:	880b883a 	mov	r5,r17
   47494:	a009883a 	mov	r4,r20
   47498:	004703c0 	call	4703c <print_repeat>
   4749c:	10000e1e 	bne	r2,zero,474d8 <___svfprintf_internal_r+0x430>
   474a0:	85e1883a 	add	r16,r16,r23
   474a4:	b0800017 	ldw	r2,0(r22)
   474a8:	01c00044 	movi	r7,1
   474ac:	d80d883a 	mov	r6,sp
   474b0:	d8800005 	stb	r2,0(sp)
   474b4:	88800117 	ldw	r2,4(r17)
   474b8:	880b883a 	mov	r5,r17
   474bc:	a009883a 	mov	r4,r20
   474c0:	b5c00104 	addi	r23,r22,4
   474c4:	103ee83a 	callr	r2
   474c8:	1000031e 	bne	r2,zero,474d8 <___svfprintf_internal_r+0x430>
   474cc:	84000044 	addi	r16,r16,1
   474d0:	b82d883a 	mov	r22,r23
   474d4:	00002d06 	br	4758c <___svfprintf_internal_r+0x4e4>
   474d8:	00bfffc4 	movi	r2,-1
   474dc:	00003106 	br	475a4 <___svfprintf_internal_r+0x4fc>
   474e0:	b5c00017 	ldw	r23,0(r22)
   474e4:	b7000104 	addi	fp,r22,4
   474e8:	b809883a 	mov	r4,r23
   474ec:	00470200 	call	47020 <strlen>
   474f0:	9091c83a 	sub	r8,r18,r2
   474f4:	102d883a 	mov	r22,r2
   474f8:	0200090e 	bge	zero,r8,47520 <___svfprintf_internal_r+0x478>
   474fc:	400f883a 	mov	r7,r8
   47500:	01800804 	movi	r6,32
   47504:	880b883a 	mov	r5,r17
   47508:	a009883a 	mov	r4,r20
   4750c:	da001015 	stw	r8,64(sp)
   47510:	004703c0 	call	4703c <print_repeat>
   47514:	da001017 	ldw	r8,64(sp)
   47518:	103fef1e 	bne	r2,zero,474d8 <_gp+0xffff516c>
   4751c:	8221883a 	add	r16,r16,r8
   47520:	88800117 	ldw	r2,4(r17)
   47524:	b00f883a 	mov	r7,r22
   47528:	b80d883a 	mov	r6,r23
   4752c:	880b883a 	mov	r5,r17
   47530:	a009883a 	mov	r4,r20
   47534:	103ee83a 	callr	r2
   47538:	103fe71e 	bne	r2,zero,474d8 <_gp+0xffff516c>
   4753c:	85a1883a 	add	r16,r16,r22
   47540:	e02d883a 	mov	r22,fp
   47544:	00001106 	br	4758c <___svfprintf_internal_r+0x4e4>
   47548:	00c00044 	movi	r3,1
   4754c:	04ffffc4 	movi	r19,-1
   47550:	d8000e15 	stw	zero,56(sp)
   47554:	d8c00a15 	stw	r3,40(sp)
   47558:	05400284 	movi	r21,10
   4755c:	9825883a 	mov	r18,r19
   47560:	d8000c15 	stw	zero,48(sp)
   47564:	d8000b15 	stw	zero,44(sp)
   47568:	182f883a 	mov	r23,r3
   4756c:	00000806 	br	47590 <___svfprintf_internal_r+0x4e8>
   47570:	ddc00b15 	stw	r23,44(sp)
   47574:	05c00084 	movi	r23,2
   47578:	00000506 	br	47590 <___svfprintf_internal_r+0x4e8>
   4757c:	00c00044 	movi	r3,1
   47580:	d8c00c15 	stw	r3,48(sp)
   47584:	05c000c4 	movi	r23,3
   47588:	00000106 	br	47590 <___svfprintf_internal_r+0x4e8>
   4758c:	002f883a 	mov	r23,zero
   47590:	d8c00f17 	ldw	r3,60(sp)
   47594:	18c00044 	addi	r3,r3,1
   47598:	d8c00f15 	stw	r3,60(sp)
   4759c:	003edc06 	br	47110 <_gp+0xffff4da4>
   475a0:	8005883a 	mov	r2,r16
   475a4:	dfc01a17 	ldw	ra,104(sp)
   475a8:	df001917 	ldw	fp,100(sp)
   475ac:	ddc01817 	ldw	r23,96(sp)
   475b0:	dd801717 	ldw	r22,92(sp)
   475b4:	dd401617 	ldw	r21,88(sp)
   475b8:	dd001517 	ldw	r20,84(sp)
   475bc:	dcc01417 	ldw	r19,80(sp)
   475c0:	dc801317 	ldw	r18,76(sp)
   475c4:	dc401217 	ldw	r17,72(sp)
   475c8:	dc001117 	ldw	r16,68(sp)
   475cc:	dec01b04 	addi	sp,sp,108
   475d0:	f800283a 	ret

000475d4 <__vfprintf_internal_unused>:
   475d4:	00800174 	movhi	r2,5
   475d8:	10a8dd04 	addi	r2,r2,-23692
   475dc:	300f883a 	mov	r7,r6
   475e0:	280d883a 	mov	r6,r5
   475e4:	200b883a 	mov	r5,r4
   475e8:	11000017 	ldw	r4,0(r2)
   475ec:	00470a81 	jmpi	470a8 <___svfprintf_internal_r>

000475f0 <print_repeat>:
   475f0:	defffb04 	addi	sp,sp,-20
   475f4:	dc800315 	stw	r18,12(sp)
   475f8:	dc400215 	stw	r17,8(sp)
   475fc:	dc000115 	stw	r16,4(sp)
   47600:	dfc00415 	stw	ra,16(sp)
   47604:	2025883a 	mov	r18,r4
   47608:	2823883a 	mov	r17,r5
   4760c:	d9800005 	stb	r6,0(sp)
   47610:	3821883a 	mov	r16,r7
   47614:	04000a0e 	bge	zero,r16,47640 <print_repeat+0x50>
   47618:	88800117 	ldw	r2,4(r17)
   4761c:	01c00044 	movi	r7,1
   47620:	d80d883a 	mov	r6,sp
   47624:	880b883a 	mov	r5,r17
   47628:	9009883a 	mov	r4,r18
   4762c:	103ee83a 	callr	r2
   47630:	843fffc4 	addi	r16,r16,-1
   47634:	103ff726 	beq	r2,zero,47614 <_gp+0xffff52a8>
   47638:	00bfffc4 	movi	r2,-1
   4763c:	00000106 	br	47644 <print_repeat+0x54>
   47640:	0005883a 	mov	r2,zero
   47644:	dfc00417 	ldw	ra,16(sp)
   47648:	dc800317 	ldw	r18,12(sp)
   4764c:	dc400217 	ldw	r17,8(sp)
   47650:	dc000117 	ldw	r16,4(sp)
   47654:	dec00504 	addi	sp,sp,20
   47658:	f800283a 	ret

0004765c <___vfprintf_internal_r>:
   4765c:	deffe504 	addi	sp,sp,-108
   47660:	d8c00804 	addi	r3,sp,32
   47664:	ddc01815 	stw	r23,96(sp)
   47668:	dd801715 	stw	r22,92(sp)
   4766c:	dd401615 	stw	r21,88(sp)
   47670:	dd001515 	stw	r20,84(sp)
   47674:	dcc01415 	stw	r19,80(sp)
   47678:	dc801315 	stw	r18,76(sp)
   4767c:	dc401215 	stw	r17,72(sp)
   47680:	dc001115 	stw	r16,68(sp)
   47684:	dfc01a15 	stw	ra,104(sp)
   47688:	df001915 	stw	fp,100(sp)
   4768c:	2029883a 	mov	r20,r4
   47690:	2823883a 	mov	r17,r5
   47694:	382d883a 	mov	r22,r7
   47698:	d9800f15 	stw	r6,60(sp)
   4769c:	0021883a 	mov	r16,zero
   476a0:	d8000e15 	stw	zero,56(sp)
   476a4:	d8000a15 	stw	zero,40(sp)
   476a8:	002b883a 	mov	r21,zero
   476ac:	0027883a 	mov	r19,zero
   476b0:	0025883a 	mov	r18,zero
   476b4:	d8000c15 	stw	zero,48(sp)
   476b8:	d8000b15 	stw	zero,44(sp)
   476bc:	002f883a 	mov	r23,zero
   476c0:	d8c00915 	stw	r3,36(sp)
   476c4:	d8c00f17 	ldw	r3,60(sp)
   476c8:	19000003 	ldbu	r4,0(r3)
   476cc:	20803fcc 	andi	r2,r4,255
   476d0:	1080201c 	xori	r2,r2,128
   476d4:	10bfe004 	addi	r2,r2,-128
   476d8:	10011e26 	beq	r2,zero,47b54 <___vfprintf_internal_r+0x4f8>
   476dc:	00c00044 	movi	r3,1
   476e0:	b8c01426 	beq	r23,r3,47734 <___vfprintf_internal_r+0xd8>
   476e4:	1dc00216 	blt	r3,r23,476f0 <___vfprintf_internal_r+0x94>
   476e8:	b8000626 	beq	r23,zero,47704 <___vfprintf_internal_r+0xa8>
   476ec:	00011506 	br	47b44 <___vfprintf_internal_r+0x4e8>
   476f0:	01400084 	movi	r5,2
   476f4:	b9401d26 	beq	r23,r5,4776c <___vfprintf_internal_r+0x110>
   476f8:	014000c4 	movi	r5,3
   476fc:	b9402b26 	beq	r23,r5,477ac <___vfprintf_internal_r+0x150>
   47700:	00011006 	br	47b44 <___vfprintf_internal_r+0x4e8>
   47704:	01400944 	movi	r5,37
   47708:	1140fc26 	beq	r2,r5,47afc <___vfprintf_internal_r+0x4a0>
   4770c:	88800117 	ldw	r2,4(r17)
   47710:	d9000005 	stb	r4,0(sp)
   47714:	01c00044 	movi	r7,1
   47718:	d80d883a 	mov	r6,sp
   4771c:	880b883a 	mov	r5,r17
   47720:	a009883a 	mov	r4,r20
   47724:	103ee83a 	callr	r2
   47728:	1000d81e 	bne	r2,zero,47a8c <___vfprintf_internal_r+0x430>
   4772c:	84000044 	addi	r16,r16,1
   47730:	00010406 	br	47b44 <___vfprintf_internal_r+0x4e8>
   47734:	01400c04 	movi	r5,48
   47738:	1140fa26 	beq	r2,r5,47b24 <___vfprintf_internal_r+0x4c8>
   4773c:	01400944 	movi	r5,37
   47740:	11400a1e 	bne	r2,r5,4776c <___vfprintf_internal_r+0x110>
   47744:	d8800005 	stb	r2,0(sp)
   47748:	88800117 	ldw	r2,4(r17)
   4774c:	b80f883a 	mov	r7,r23
   47750:	d80d883a 	mov	r6,sp
   47754:	880b883a 	mov	r5,r17
   47758:	a009883a 	mov	r4,r20
   4775c:	103ee83a 	callr	r2
   47760:	1000ca1e 	bne	r2,zero,47a8c <___vfprintf_internal_r+0x430>
   47764:	84000044 	addi	r16,r16,1
   47768:	0000f506 	br	47b40 <___vfprintf_internal_r+0x4e4>
   4776c:	25fff404 	addi	r23,r4,-48
   47770:	bdc03fcc 	andi	r23,r23,255
   47774:	00c00244 	movi	r3,9
   47778:	1dc00936 	bltu	r3,r23,477a0 <___vfprintf_internal_r+0x144>
   4777c:	00bfffc4 	movi	r2,-1
   47780:	90800426 	beq	r18,r2,47794 <___vfprintf_internal_r+0x138>
   47784:	01400284 	movi	r5,10
   47788:	9009883a 	mov	r4,r18
   4778c:	004543c0 	call	4543c <__mulsi3>
   47790:	00000106 	br	47798 <___vfprintf_internal_r+0x13c>
   47794:	0005883a 	mov	r2,zero
   47798:	b8a5883a 	add	r18,r23,r2
   4779c:	0000e206 	br	47b28 <___vfprintf_internal_r+0x4cc>
   477a0:	01400b84 	movi	r5,46
   477a4:	1140e426 	beq	r2,r5,47b38 <___vfprintf_internal_r+0x4dc>
   477a8:	05c00084 	movi	r23,2
   477ac:	213ff404 	addi	r4,r4,-48
   477b0:	27003fcc 	andi	fp,r4,255
   477b4:	00c00244 	movi	r3,9
   477b8:	1f000936 	bltu	r3,fp,477e0 <___vfprintf_internal_r+0x184>
   477bc:	00bfffc4 	movi	r2,-1
   477c0:	98800426 	beq	r19,r2,477d4 <___vfprintf_internal_r+0x178>
   477c4:	01400284 	movi	r5,10
   477c8:	9809883a 	mov	r4,r19
   477cc:	004543c0 	call	4543c <__mulsi3>
   477d0:	00000106 	br	477d8 <___vfprintf_internal_r+0x17c>
   477d4:	0005883a 	mov	r2,zero
   477d8:	e0a7883a 	add	r19,fp,r2
   477dc:	0000d906 	br	47b44 <___vfprintf_internal_r+0x4e8>
   477e0:	00c01b04 	movi	r3,108
   477e4:	10c0d226 	beq	r2,r3,47b30 <___vfprintf_internal_r+0x4d4>
   477e8:	013fffc4 	movi	r4,-1
   477ec:	99000226 	beq	r19,r4,477f8 <___vfprintf_internal_r+0x19c>
   477f0:	d8000b15 	stw	zero,44(sp)
   477f4:	00000106 	br	477fc <___vfprintf_internal_r+0x1a0>
   477f8:	04c00044 	movi	r19,1
   477fc:	01001a44 	movi	r4,105
   47800:	11001626 	beq	r2,r4,4785c <___vfprintf_internal_r+0x200>
   47804:	20800916 	blt	r4,r2,4782c <___vfprintf_internal_r+0x1d0>
   47808:	010018c4 	movi	r4,99
   4780c:	11008826 	beq	r2,r4,47a30 <___vfprintf_internal_r+0x3d4>
   47810:	01001904 	movi	r4,100
   47814:	11001126 	beq	r2,r4,4785c <___vfprintf_internal_r+0x200>
   47818:	01001604 	movi	r4,88
   4781c:	1100c81e 	bne	r2,r4,47b40 <___vfprintf_internal_r+0x4e4>
   47820:	00c00044 	movi	r3,1
   47824:	d8c00e15 	stw	r3,56(sp)
   47828:	00001506 	br	47880 <___vfprintf_internal_r+0x224>
   4782c:	01001cc4 	movi	r4,115
   47830:	11009826 	beq	r2,r4,47a94 <___vfprintf_internal_r+0x438>
   47834:	20800416 	blt	r4,r2,47848 <___vfprintf_internal_r+0x1ec>
   47838:	01001bc4 	movi	r4,111
   4783c:	1100c01e 	bne	r2,r4,47b40 <___vfprintf_internal_r+0x4e4>
   47840:	05400204 	movi	r21,8
   47844:	00000f06 	br	47884 <___vfprintf_internal_r+0x228>
   47848:	01001d44 	movi	r4,117
   4784c:	11000d26 	beq	r2,r4,47884 <___vfprintf_internal_r+0x228>
   47850:	01001e04 	movi	r4,120
   47854:	11000a26 	beq	r2,r4,47880 <___vfprintf_internal_r+0x224>
   47858:	0000b906 	br	47b40 <___vfprintf_internal_r+0x4e4>
   4785c:	d8c00a17 	ldw	r3,40(sp)
   47860:	b7000104 	addi	fp,r22,4
   47864:	18000726 	beq	r3,zero,47884 <___vfprintf_internal_r+0x228>
   47868:	df000d15 	stw	fp,52(sp)
   4786c:	b5c00017 	ldw	r23,0(r22)
   47870:	b800080e 	bge	r23,zero,47894 <___vfprintf_internal_r+0x238>
   47874:	05efc83a 	sub	r23,zero,r23
   47878:	02400044 	movi	r9,1
   4787c:	00000606 	br	47898 <___vfprintf_internal_r+0x23c>
   47880:	05400404 	movi	r21,16
   47884:	b0c00104 	addi	r3,r22,4
   47888:	d8c00d15 	stw	r3,52(sp)
   4788c:	b5c00017 	ldw	r23,0(r22)
   47890:	d8000a15 	stw	zero,40(sp)
   47894:	0013883a 	mov	r9,zero
   47898:	d839883a 	mov	fp,sp
   4789c:	b8001726 	beq	r23,zero,478fc <___vfprintf_internal_r+0x2a0>
   478a0:	a80b883a 	mov	r5,r21
   478a4:	b809883a 	mov	r4,r23
   478a8:	da401015 	stw	r9,64(sp)
   478ac:	00453800 	call	45380 <__udivsi3>
   478b0:	a80b883a 	mov	r5,r21
   478b4:	1009883a 	mov	r4,r2
   478b8:	102d883a 	mov	r22,r2
   478bc:	004543c0 	call	4543c <__mulsi3>
   478c0:	b885c83a 	sub	r2,r23,r2
   478c4:	00c00244 	movi	r3,9
   478c8:	da401017 	ldw	r9,64(sp)
   478cc:	18800216 	blt	r3,r2,478d8 <___vfprintf_internal_r+0x27c>
   478d0:	10800c04 	addi	r2,r2,48
   478d4:	00000506 	br	478ec <___vfprintf_internal_r+0x290>
   478d8:	d8c00e17 	ldw	r3,56(sp)
   478dc:	18000226 	beq	r3,zero,478e8 <___vfprintf_internal_r+0x28c>
   478e0:	10800dc4 	addi	r2,r2,55
   478e4:	00000106 	br	478ec <___vfprintf_internal_r+0x290>
   478e8:	108015c4 	addi	r2,r2,87
   478ec:	e0800005 	stb	r2,0(fp)
   478f0:	b02f883a 	mov	r23,r22
   478f4:	e7000044 	addi	fp,fp,1
   478f8:	003fe806 	br	4789c <_gp+0xffff5530>
   478fc:	e6efc83a 	sub	r23,fp,sp
   47900:	9dc5c83a 	sub	r2,r19,r23
   47904:	0080090e 	bge	zero,r2,4792c <___vfprintf_internal_r+0x2d0>
   47908:	e085883a 	add	r2,fp,r2
   4790c:	01400c04 	movi	r5,48
   47910:	d8c00917 	ldw	r3,36(sp)
   47914:	e009883a 	mov	r4,fp
   47918:	e0c0032e 	bgeu	fp,r3,47928 <___vfprintf_internal_r+0x2cc>
   4791c:	e7000044 	addi	fp,fp,1
   47920:	21400005 	stb	r5,0(r4)
   47924:	e0bffa1e 	bne	fp,r2,47910 <_gp+0xffff55a4>
   47928:	e6efc83a 	sub	r23,fp,sp
   4792c:	d8c00b17 	ldw	r3,44(sp)
   47930:	4dd1883a 	add	r8,r9,r23
   47934:	922dc83a 	sub	r22,r18,r8
   47938:	18001626 	beq	r3,zero,47994 <___vfprintf_internal_r+0x338>
   4793c:	48000a26 	beq	r9,zero,47968 <___vfprintf_internal_r+0x30c>
   47940:	00800b44 	movi	r2,45
   47944:	d8800805 	stb	r2,32(sp)
   47948:	88800117 	ldw	r2,4(r17)
   4794c:	01c00044 	movi	r7,1
   47950:	d9800804 	addi	r6,sp,32
   47954:	880b883a 	mov	r5,r17
   47958:	a009883a 	mov	r4,r20
   4795c:	103ee83a 	callr	r2
   47960:	10004a1e 	bne	r2,zero,47a8c <___vfprintf_internal_r+0x430>
   47964:	84000044 	addi	r16,r16,1
   47968:	0580070e 	bge	zero,r22,47988 <___vfprintf_internal_r+0x32c>
   4796c:	b00f883a 	mov	r7,r22
   47970:	01800c04 	movi	r6,48
   47974:	880b883a 	mov	r5,r17
   47978:	a009883a 	mov	r4,r20
   4797c:	00475f00 	call	475f0 <print_repeat>
   47980:	1000421e 	bne	r2,zero,47a8c <___vfprintf_internal_r+0x430>
   47984:	85a1883a 	add	r16,r16,r22
   47988:	e02d883a 	mov	r22,fp
   4798c:	bf2fc83a 	sub	r23,r23,fp
   47990:	00002006 	br	47a14 <___vfprintf_internal_r+0x3b8>
   47994:	0580090e 	bge	zero,r22,479bc <___vfprintf_internal_r+0x360>
   47998:	b00f883a 	mov	r7,r22
   4799c:	01800804 	movi	r6,32
   479a0:	880b883a 	mov	r5,r17
   479a4:	a009883a 	mov	r4,r20
   479a8:	da401015 	stw	r9,64(sp)
   479ac:	00475f00 	call	475f0 <print_repeat>
   479b0:	da401017 	ldw	r9,64(sp)
   479b4:	1000351e 	bne	r2,zero,47a8c <___vfprintf_internal_r+0x430>
   479b8:	85a1883a 	add	r16,r16,r22
   479bc:	483ff226 	beq	r9,zero,47988 <_gp+0xffff561c>
   479c0:	00800b44 	movi	r2,45
   479c4:	d8800805 	stb	r2,32(sp)
   479c8:	88800117 	ldw	r2,4(r17)
   479cc:	01c00044 	movi	r7,1
   479d0:	d9800804 	addi	r6,sp,32
   479d4:	880b883a 	mov	r5,r17
   479d8:	a009883a 	mov	r4,r20
   479dc:	103ee83a 	callr	r2
   479e0:	10002a1e 	bne	r2,zero,47a8c <___vfprintf_internal_r+0x430>
   479e4:	84000044 	addi	r16,r16,1
   479e8:	003fe706 	br	47988 <_gp+0xffff561c>
   479ec:	b5bfffc4 	addi	r22,r22,-1
   479f0:	b0800003 	ldbu	r2,0(r22)
   479f4:	01c00044 	movi	r7,1
   479f8:	d9800804 	addi	r6,sp,32
   479fc:	d8800805 	stb	r2,32(sp)
   47a00:	88800117 	ldw	r2,4(r17)
   47a04:	880b883a 	mov	r5,r17
   47a08:	a009883a 	mov	r4,r20
   47a0c:	103ee83a 	callr	r2
   47a10:	10001e1e 	bne	r2,zero,47a8c <___vfprintf_internal_r+0x430>
   47a14:	8585c83a 	sub	r2,r16,r22
   47a18:	b5c9883a 	add	r4,r22,r23
   47a1c:	e085883a 	add	r2,fp,r2
   47a20:	013ff216 	blt	zero,r4,479ec <_gp+0xffff5680>
   47a24:	1021883a 	mov	r16,r2
   47a28:	dd800d17 	ldw	r22,52(sp)
   47a2c:	00004406 	br	47b40 <___vfprintf_internal_r+0x4e4>
   47a30:	00800044 	movi	r2,1
   47a34:	1480080e 	bge	r2,r18,47a58 <___vfprintf_internal_r+0x3fc>
   47a38:	95ffffc4 	addi	r23,r18,-1
   47a3c:	b80f883a 	mov	r7,r23
   47a40:	01800804 	movi	r6,32
   47a44:	880b883a 	mov	r5,r17
   47a48:	a009883a 	mov	r4,r20
   47a4c:	00475f00 	call	475f0 <print_repeat>
   47a50:	10000e1e 	bne	r2,zero,47a8c <___vfprintf_internal_r+0x430>
   47a54:	85e1883a 	add	r16,r16,r23
   47a58:	b0800017 	ldw	r2,0(r22)
   47a5c:	01c00044 	movi	r7,1
   47a60:	d80d883a 	mov	r6,sp
   47a64:	d8800005 	stb	r2,0(sp)
   47a68:	88800117 	ldw	r2,4(r17)
   47a6c:	880b883a 	mov	r5,r17
   47a70:	a009883a 	mov	r4,r20
   47a74:	b5c00104 	addi	r23,r22,4
   47a78:	103ee83a 	callr	r2
   47a7c:	1000031e 	bne	r2,zero,47a8c <___vfprintf_internal_r+0x430>
   47a80:	84000044 	addi	r16,r16,1
   47a84:	b82d883a 	mov	r22,r23
   47a88:	00002d06 	br	47b40 <___vfprintf_internal_r+0x4e4>
   47a8c:	00bfffc4 	movi	r2,-1
   47a90:	00003106 	br	47b58 <___vfprintf_internal_r+0x4fc>
   47a94:	b5c00017 	ldw	r23,0(r22)
   47a98:	b7000104 	addi	fp,r22,4
   47a9c:	b809883a 	mov	r4,r23
   47aa0:	00470200 	call	47020 <strlen>
   47aa4:	9091c83a 	sub	r8,r18,r2
   47aa8:	102d883a 	mov	r22,r2
   47aac:	0200090e 	bge	zero,r8,47ad4 <___vfprintf_internal_r+0x478>
   47ab0:	400f883a 	mov	r7,r8
   47ab4:	01800804 	movi	r6,32
   47ab8:	880b883a 	mov	r5,r17
   47abc:	a009883a 	mov	r4,r20
   47ac0:	da001015 	stw	r8,64(sp)
   47ac4:	00475f00 	call	475f0 <print_repeat>
   47ac8:	da001017 	ldw	r8,64(sp)
   47acc:	103fef1e 	bne	r2,zero,47a8c <_gp+0xffff5720>
   47ad0:	8221883a 	add	r16,r16,r8
   47ad4:	88800117 	ldw	r2,4(r17)
   47ad8:	b00f883a 	mov	r7,r22
   47adc:	b80d883a 	mov	r6,r23
   47ae0:	880b883a 	mov	r5,r17
   47ae4:	a009883a 	mov	r4,r20
   47ae8:	103ee83a 	callr	r2
   47aec:	103fe71e 	bne	r2,zero,47a8c <_gp+0xffff5720>
   47af0:	85a1883a 	add	r16,r16,r22
   47af4:	e02d883a 	mov	r22,fp
   47af8:	00001106 	br	47b40 <___vfprintf_internal_r+0x4e4>
   47afc:	00c00044 	movi	r3,1
   47b00:	04ffffc4 	movi	r19,-1
   47b04:	d8000e15 	stw	zero,56(sp)
   47b08:	d8c00a15 	stw	r3,40(sp)
   47b0c:	05400284 	movi	r21,10
   47b10:	9825883a 	mov	r18,r19
   47b14:	d8000c15 	stw	zero,48(sp)
   47b18:	d8000b15 	stw	zero,44(sp)
   47b1c:	182f883a 	mov	r23,r3
   47b20:	00000806 	br	47b44 <___vfprintf_internal_r+0x4e8>
   47b24:	ddc00b15 	stw	r23,44(sp)
   47b28:	05c00084 	movi	r23,2
   47b2c:	00000506 	br	47b44 <___vfprintf_internal_r+0x4e8>
   47b30:	00c00044 	movi	r3,1
   47b34:	d8c00c15 	stw	r3,48(sp)
   47b38:	05c000c4 	movi	r23,3
   47b3c:	00000106 	br	47b44 <___vfprintf_internal_r+0x4e8>
   47b40:	002f883a 	mov	r23,zero
   47b44:	d8c00f17 	ldw	r3,60(sp)
   47b48:	18c00044 	addi	r3,r3,1
   47b4c:	d8c00f15 	stw	r3,60(sp)
   47b50:	003edc06 	br	476c4 <_gp+0xffff5358>
   47b54:	8005883a 	mov	r2,r16
   47b58:	dfc01a17 	ldw	ra,104(sp)
   47b5c:	df001917 	ldw	fp,100(sp)
   47b60:	ddc01817 	ldw	r23,96(sp)
   47b64:	dd801717 	ldw	r22,92(sp)
   47b68:	dd401617 	ldw	r21,88(sp)
   47b6c:	dd001517 	ldw	r20,84(sp)
   47b70:	dcc01417 	ldw	r19,80(sp)
   47b74:	dc801317 	ldw	r18,76(sp)
   47b78:	dc401217 	ldw	r17,72(sp)
   47b7c:	dc001117 	ldw	r16,68(sp)
   47b80:	dec01b04 	addi	sp,sp,108
   47b84:	f800283a 	ret

00047b88 <__vfprintf_internal>:
   47b88:	00800174 	movhi	r2,5
   47b8c:	10a8dd04 	addi	r2,r2,-23692
   47b90:	300f883a 	mov	r7,r6
   47b94:	280d883a 	mov	r6,r5
   47b98:	200b883a 	mov	r5,r4
   47b9c:	11000017 	ldw	r4,0(r2)
   47ba0:	004765c1 	jmpi	4765c <___vfprintf_internal_r>

00047ba4 <_vsnprintf_r>:
   47ba4:	3000040e 	bge	r6,zero,47bb8 <_vsnprintf_r+0x14>
   47ba8:	008022c4 	movi	r2,139
   47bac:	20800015 	stw	r2,0(r4)
   47bb0:	00bfffc4 	movi	r2,-1
   47bb4:	f800283a 	ret
   47bb8:	defff604 	addi	sp,sp,-40
   47bbc:	00c08204 	movi	r3,520
   47bc0:	dfc00915 	stw	ra,36(sp)
   47bc4:	dc400815 	stw	r17,32(sp)
   47bc8:	dc000715 	stw	r16,28(sp)
   47bcc:	d8c0000d 	sth	r3,0(sp)
   47bd0:	d9400415 	stw	r5,16(sp)
   47bd4:	d9400215 	stw	r5,8(sp)
   47bd8:	3005883a 	mov	r2,r6
   47bdc:	30000226 	beq	r6,zero,47be8 <_vsnprintf_r+0x44>
   47be0:	30ffffc4 	addi	r3,r6,-1
   47be4:	00000106 	br	47bec <_vsnprintf_r+0x48>
   47be8:	0007883a 	mov	r3,zero
   47bec:	1021883a 	mov	r16,r2
   47bf0:	00bfffc4 	movi	r2,-1
   47bf4:	d880008d 	sth	r2,2(sp)
   47bf8:	00800134 	movhi	r2,4
   47bfc:	109f5304 	addi	r2,r2,32076
   47c00:	d8800115 	stw	r2,4(sp)
   47c04:	00800174 	movhi	r2,5
   47c08:	10a8dd04 	addi	r2,r2,-23692
   47c0c:	380d883a 	mov	r6,r7
   47c10:	2023883a 	mov	r17,r4
   47c14:	d9c00a17 	ldw	r7,40(sp)
   47c18:	11000017 	ldw	r4,0(r2)
   47c1c:	d80b883a 	mov	r5,sp
   47c20:	d8c00515 	stw	r3,20(sp)
   47c24:	d8c00315 	stw	r3,12(sp)
   47c28:	d8000615 	stw	zero,24(sp)
   47c2c:	00470a80 	call	470a8 <___svfprintf_internal_r>
   47c30:	00ffffc4 	movi	r3,-1
   47c34:	10c0020e 	bge	r2,r3,47c40 <_vsnprintf_r+0x9c>
   47c38:	00c022c4 	movi	r3,139
   47c3c:	88c00015 	stw	r3,0(r17)
   47c40:	80000226 	beq	r16,zero,47c4c <_vsnprintf_r+0xa8>
   47c44:	d8c00417 	ldw	r3,16(sp)
   47c48:	18000005 	stb	zero,0(r3)
   47c4c:	dfc00917 	ldw	ra,36(sp)
   47c50:	dc400817 	ldw	r17,32(sp)
   47c54:	dc000717 	ldw	r16,28(sp)
   47c58:	dec00a04 	addi	sp,sp,40
   47c5c:	f800283a 	ret

00047c60 <vsnprintf>:
   47c60:	defffe04 	addi	sp,sp,-8
   47c64:	00800174 	movhi	r2,5
   47c68:	d9c00015 	stw	r7,0(sp)
   47c6c:	10a8dd04 	addi	r2,r2,-23692
   47c70:	300f883a 	mov	r7,r6
   47c74:	280d883a 	mov	r6,r5
   47c78:	200b883a 	mov	r5,r4
   47c7c:	11000017 	ldw	r4,0(r2)
   47c80:	dfc00115 	stw	ra,4(sp)
   47c84:	0047ba40 	call	47ba4 <_vsnprintf_r>
   47c88:	dfc00117 	ldw	ra,4(sp)
   47c8c:	dec00204 	addi	sp,sp,8
   47c90:	f800283a 	ret

00047c94 <__sfvwrite_small_dev>:
   47c94:	2880000b 	ldhu	r2,0(r5)
   47c98:	1080020c 	andi	r2,r2,8
   47c9c:	10002126 	beq	r2,zero,47d24 <__sfvwrite_small_dev+0x90>
   47ca0:	2880008f 	ldh	r2,2(r5)
   47ca4:	defffa04 	addi	sp,sp,-24
   47ca8:	dc000015 	stw	r16,0(sp)
   47cac:	dfc00515 	stw	ra,20(sp)
   47cb0:	dd000415 	stw	r20,16(sp)
   47cb4:	dcc00315 	stw	r19,12(sp)
   47cb8:	dc800215 	stw	r18,8(sp)
   47cbc:	dc400115 	stw	r17,4(sp)
   47cc0:	2821883a 	mov	r16,r5
   47cc4:	10001216 	blt	r2,zero,47d10 <__sfvwrite_small_dev+0x7c>
   47cc8:	2027883a 	mov	r19,r4
   47ccc:	3025883a 	mov	r18,r6
   47cd0:	3823883a 	mov	r17,r7
   47cd4:	05010004 	movi	r20,1024
   47cd8:	04400b0e 	bge	zero,r17,47d08 <__sfvwrite_small_dev+0x74>
   47cdc:	880f883a 	mov	r7,r17
   47ce0:	a440010e 	bge	r20,r17,47ce8 <__sfvwrite_small_dev+0x54>
   47ce4:	01c10004 	movi	r7,1024
   47ce8:	8140008f 	ldh	r5,2(r16)
   47cec:	900d883a 	mov	r6,r18
   47cf0:	9809883a 	mov	r4,r19
   47cf4:	0047f000 	call	47f00 <_write_r>
   47cf8:	0080050e 	bge	zero,r2,47d10 <__sfvwrite_small_dev+0x7c>
   47cfc:	88a3c83a 	sub	r17,r17,r2
   47d00:	90a5883a 	add	r18,r18,r2
   47d04:	003ff406 	br	47cd8 <_gp+0xffff596c>
   47d08:	0005883a 	mov	r2,zero
   47d0c:	00000706 	br	47d2c <__sfvwrite_small_dev+0x98>
   47d10:	8080000b 	ldhu	r2,0(r16)
   47d14:	10801014 	ori	r2,r2,64
   47d18:	8080000d 	sth	r2,0(r16)
   47d1c:	00bfffc4 	movi	r2,-1
   47d20:	00000206 	br	47d2c <__sfvwrite_small_dev+0x98>
   47d24:	00bfffc4 	movi	r2,-1
   47d28:	f800283a 	ret
   47d2c:	dfc00517 	ldw	ra,20(sp)
   47d30:	dd000417 	ldw	r20,16(sp)
   47d34:	dcc00317 	ldw	r19,12(sp)
   47d38:	dc800217 	ldw	r18,8(sp)
   47d3c:	dc400117 	ldw	r17,4(sp)
   47d40:	dc000017 	ldw	r16,0(sp)
   47d44:	dec00604 	addi	sp,sp,24
   47d48:	f800283a 	ret

00047d4c <__sfvwrite_small_str>:
   47d4c:	2880000b 	ldhu	r2,0(r5)
   47d50:	10c0020c 	andi	r3,r2,8
   47d54:	18002026 	beq	r3,zero,47dd8 <__sfvwrite_small_str+0x8c>
   47d58:	28c0008f 	ldh	r3,2(r5)
   47d5c:	defffd04 	addi	sp,sp,-12
   47d60:	dc000015 	stw	r16,0(sp)
   47d64:	dfc00215 	stw	ra,8(sp)
   47d68:	dc400115 	stw	r17,4(sp)
   47d6c:	2821883a 	mov	r16,r5
   47d70:	1800150e 	bge	r3,zero,47dc8 <__sfvwrite_small_str+0x7c>
   47d74:	10c0800c 	andi	r3,r2,512
   47d78:	18001326 	beq	r3,zero,47dc8 <__sfvwrite_small_str+0x7c>
   47d7c:	2c400517 	ldw	r17,20(r5)
   47d80:	89c0030e 	bge	r17,r7,47d90 <__sfvwrite_small_str+0x44>
   47d84:	10c0200c 	andi	r3,r2,128
   47d88:	18000326 	beq	r3,zero,47d98 <__sfvwrite_small_str+0x4c>
   47d8c:	00000e06 	br	47dc8 <__sfvwrite_small_str+0x7c>
   47d90:	3c40010e 	bge	r7,r17,47d98 <__sfvwrite_small_str+0x4c>
   47d94:	3823883a 	mov	r17,r7
   47d98:	81000417 	ldw	r4,16(r16)
   47d9c:	300b883a 	mov	r5,r6
   47da0:	880d883a 	mov	r6,r17
   47da4:	0047df40 	call	47df4 <memmove>
   47da8:	80800517 	ldw	r2,20(r16)
   47dac:	1445c83a 	sub	r2,r2,r17
   47db0:	80800515 	stw	r2,20(r16)
   47db4:	80800417 	ldw	r2,16(r16)
   47db8:	1463883a 	add	r17,r2,r17
   47dbc:	84400415 	stw	r17,16(r16)
   47dc0:	0005883a 	mov	r2,zero
   47dc4:	00000606 	br	47de0 <__sfvwrite_small_str+0x94>
   47dc8:	10801014 	ori	r2,r2,64
   47dcc:	8080000d 	sth	r2,0(r16)
   47dd0:	00bfffc4 	movi	r2,-1
   47dd4:	00000206 	br	47de0 <__sfvwrite_small_str+0x94>
   47dd8:	00bfffc4 	movi	r2,-1
   47ddc:	f800283a 	ret
   47de0:	dfc00217 	ldw	ra,8(sp)
   47de4:	dc400117 	ldw	r17,4(sp)
   47de8:	dc000017 	ldw	r16,0(sp)
   47dec:	dec00304 	addi	sp,sp,12
   47df0:	f800283a 	ret

00047df4 <memmove>:
   47df4:	2005883a 	mov	r2,r4
   47df8:	218f883a 	add	r7,r4,r6
   47dfc:	29000236 	bltu	r5,r4,47e08 <memmove+0x14>
   47e00:	1007883a 	mov	r3,r2
   47e04:	00000c06 	br	47e38 <memmove+0x44>
   47e08:	2987883a 	add	r3,r5,r6
   47e0c:	20fffc2e 	bgeu	r4,r3,47e00 <_gp+0xffff5a94>
   47e10:	380b883a 	mov	r5,r7
   47e14:	30cdc83a 	sub	r6,r6,r3
   47e18:	1989883a 	add	r4,r3,r6
   47e1c:	20000526 	beq	r4,zero,47e34 <memmove+0x40>
   47e20:	18ffffc4 	addi	r3,r3,-1
   47e24:	19000003 	ldbu	r4,0(r3)
   47e28:	297fffc4 	addi	r5,r5,-1
   47e2c:	29000005 	stb	r4,0(r5)
   47e30:	003ff906 	br	47e18 <_gp+0xffff5aac>
   47e34:	f800283a 	ret
   47e38:	19c00526 	beq	r3,r7,47e50 <memmove+0x5c>
   47e3c:	29000003 	ldbu	r4,0(r5)
   47e40:	18c00044 	addi	r3,r3,1
   47e44:	29400044 	addi	r5,r5,1
   47e48:	193fffc5 	stb	r4,-1(r3)
   47e4c:	003ffa06 	br	47e38 <_gp+0xffff5acc>
   47e50:	f800283a 	ret

00047e54 <putc>:
   47e54:	defffd04 	addi	sp,sp,-12
   47e58:	00800134 	movhi	r2,4
   47e5c:	dc000115 	stw	r16,4(sp)
   47e60:	dfc00215 	stw	ra,8(sp)
   47e64:	109f2504 	addi	r2,r2,31892
   47e68:	28800115 	stw	r2,4(r5)
   47e6c:	00800174 	movhi	r2,5
   47e70:	10a8dd04 	addi	r2,r2,-23692
   47e74:	d9000005 	stb	r4,0(sp)
   47e78:	2021883a 	mov	r16,r4
   47e7c:	11000017 	ldw	r4,0(r2)
   47e80:	01c00044 	movi	r7,1
   47e84:	d80d883a 	mov	r6,sp
   47e88:	0047c940 	call	47c94 <__sfvwrite_small_dev>
   47e8c:	00ffffc4 	movi	r3,-1
   47e90:	10c00126 	beq	r2,r3,47e98 <putc+0x44>
   47e94:	8005883a 	mov	r2,r16
   47e98:	dfc00217 	ldw	ra,8(sp)
   47e9c:	dc000117 	ldw	r16,4(sp)
   47ea0:	dec00304 	addi	sp,sp,12
   47ea4:	f800283a 	ret

00047ea8 <_putc_r>:
   47ea8:	defffd04 	addi	sp,sp,-12
   47eac:	00800134 	movhi	r2,4
   47eb0:	dc000115 	stw	r16,4(sp)
   47eb4:	dfc00215 	stw	ra,8(sp)
   47eb8:	109f2504 	addi	r2,r2,31892
   47ebc:	30800115 	stw	r2,4(r6)
   47ec0:	00800174 	movhi	r2,5
   47ec4:	10a8dd04 	addi	r2,r2,-23692
   47ec8:	11000017 	ldw	r4,0(r2)
   47ecc:	2821883a 	mov	r16,r5
   47ed0:	01c00044 	movi	r7,1
   47ed4:	300b883a 	mov	r5,r6
   47ed8:	d80d883a 	mov	r6,sp
   47edc:	dc000005 	stb	r16,0(sp)
   47ee0:	0047c940 	call	47c94 <__sfvwrite_small_dev>
   47ee4:	00ffffc4 	movi	r3,-1
   47ee8:	10c00126 	beq	r2,r3,47ef0 <_putc_r+0x48>
   47eec:	8005883a 	mov	r2,r16
   47ef0:	dfc00217 	ldw	ra,8(sp)
   47ef4:	dc000117 	ldw	r16,4(sp)
   47ef8:	dec00304 	addi	sp,sp,12
   47efc:	f800283a 	ret

00047f00 <_write_r>:
   47f00:	defffd04 	addi	sp,sp,-12
   47f04:	dc000015 	stw	r16,0(sp)
   47f08:	04000174 	movhi	r16,5
   47f0c:	dc400115 	stw	r17,4(sp)
   47f10:	8429a404 	addi	r16,r16,-22896
   47f14:	2023883a 	mov	r17,r4
   47f18:	2809883a 	mov	r4,r5
   47f1c:	300b883a 	mov	r5,r6
   47f20:	380d883a 	mov	r6,r7
   47f24:	dfc00215 	stw	ra,8(sp)
   47f28:	80000015 	stw	zero,0(r16)
   47f2c:	00483700 	call	48370 <write>
   47f30:	00ffffc4 	movi	r3,-1
   47f34:	10c0031e 	bne	r2,r3,47f44 <_write_r+0x44>
   47f38:	80c00017 	ldw	r3,0(r16)
   47f3c:	18000126 	beq	r3,zero,47f44 <_write_r+0x44>
   47f40:	88c00015 	stw	r3,0(r17)
   47f44:	dfc00217 	ldw	ra,8(sp)
   47f48:	dc400117 	ldw	r17,4(sp)
   47f4c:	dc000017 	ldw	r16,0(sp)
   47f50:	dec00304 	addi	sp,sp,12
   47f54:	f800283a 	ret

00047f58 <alt_load_section>:
   47f58:	defffc04 	addi	sp,sp,-16
   47f5c:	df000315 	stw	fp,12(sp)
   47f60:	df000304 	addi	fp,sp,12
   47f64:	e13ffd15 	stw	r4,-12(fp)
   47f68:	e17ffe15 	stw	r5,-8(fp)
   47f6c:	e1bfff15 	stw	r6,-4(fp)
   47f70:	e0fffe17 	ldw	r3,-8(fp)
   47f74:	e0bffd17 	ldw	r2,-12(fp)
   47f78:	18800c26 	beq	r3,r2,47fac <alt_load_section+0x54>
   47f7c:	00000806 	br	47fa0 <alt_load_section+0x48>
   47f80:	e0bffe17 	ldw	r2,-8(fp)
   47f84:	10c00104 	addi	r3,r2,4
   47f88:	e0fffe15 	stw	r3,-8(fp)
   47f8c:	e0fffd17 	ldw	r3,-12(fp)
   47f90:	19000104 	addi	r4,r3,4
   47f94:	e13ffd15 	stw	r4,-12(fp)
   47f98:	18c00017 	ldw	r3,0(r3)
   47f9c:	10c00015 	stw	r3,0(r2)
   47fa0:	e0fffe17 	ldw	r3,-8(fp)
   47fa4:	e0bfff17 	ldw	r2,-4(fp)
   47fa8:	18bff51e 	bne	r3,r2,47f80 <_gp+0xffff5c14>
   47fac:	0001883a 	nop
   47fb0:	e037883a 	mov	sp,fp
   47fb4:	df000017 	ldw	fp,0(sp)
   47fb8:	dec00104 	addi	sp,sp,4
   47fbc:	f800283a 	ret

00047fc0 <alt_load>:
   47fc0:	defffe04 	addi	sp,sp,-8
   47fc4:	dfc00115 	stw	ra,4(sp)
   47fc8:	df000015 	stw	fp,0(sp)
   47fcc:	d839883a 	mov	fp,sp
   47fd0:	01800174 	movhi	r6,5
   47fd4:	31a8e804 	addi	r6,r6,-23648
   47fd8:	01400174 	movhi	r5,5
   47fdc:	29682e04 	addi	r5,r5,-24392
   47fe0:	01000174 	movhi	r4,5
   47fe4:	2128e804 	addi	r4,r4,-23648
   47fe8:	0047f580 	call	47f58 <alt_load_section>
   47fec:	01800134 	movhi	r6,4
   47ff0:	31808c04 	addi	r6,r6,560
   47ff4:	01400134 	movhi	r5,4
   47ff8:	29400804 	addi	r5,r5,32
   47ffc:	01000134 	movhi	r4,4
   48000:	21000804 	addi	r4,r4,32
   48004:	0047f580 	call	47f58 <alt_load_section>
   48008:	01800174 	movhi	r6,5
   4800c:	31a82e04 	addi	r6,r6,-24392
   48010:	01400174 	movhi	r5,5
   48014:	29661404 	addi	r5,r5,-26544
   48018:	01000174 	movhi	r4,5
   4801c:	21261404 	addi	r4,r4,-26544
   48020:	0047f580 	call	47f58 <alt_load_section>
   48024:	0048acc0 	call	48acc <alt_dcache_flush_all>
   48028:	0048bf80 	call	48bf8 <alt_icache_flush_all>
   4802c:	0001883a 	nop
   48030:	e037883a 	mov	sp,fp
   48034:	dfc00117 	ldw	ra,4(sp)
   48038:	df000017 	ldw	fp,0(sp)
   4803c:	dec00204 	addi	sp,sp,8
   48040:	f800283a 	ret

00048044 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   48044:	defffd04 	addi	sp,sp,-12
   48048:	dfc00215 	stw	ra,8(sp)
   4804c:	df000115 	stw	fp,4(sp)
   48050:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   48054:	0009883a 	mov	r4,zero
   48058:	00484a40 	call	484a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4805c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   48060:	00484dc0 	call	484dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   48064:	01800174 	movhi	r6,5
   48068:	31a82304 	addi	r6,r6,-24436
   4806c:	01400174 	movhi	r5,5
   48070:	29682304 	addi	r5,r5,-24436
   48074:	01000174 	movhi	r4,5
   48078:	21282304 	addi	r4,r4,-24436
   4807c:	0048f9c0 	call	48f9c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   48080:	d0a0ca17 	ldw	r2,-31960(gp)
   48084:	d0e0cb17 	ldw	r3,-31956(gp)
   48088:	d120cc17 	ldw	r4,-31952(gp)
   4808c:	200d883a 	mov	r6,r4
   48090:	180b883a 	mov	r5,r3
   48094:	1009883a 	mov	r4,r2
   48098:	004051c0 	call	4051c <main>
   4809c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   480a0:	01000044 	movi	r4,1
   480a4:	00489f40 	call	489f4 <close>
  exit (result);
   480a8:	e13fff17 	ldw	r4,-4(fp)
   480ac:	004963c0 	call	4963c <exit>

000480b0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   480b0:	defff904 	addi	sp,sp,-28
   480b4:	df000615 	stw	fp,24(sp)
   480b8:	df000604 	addi	fp,sp,24
   480bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   480c0:	0005303a 	rdctl	r2,status
   480c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   480c8:	e0fffe17 	ldw	r3,-8(fp)
   480cc:	00bfff84 	movi	r2,-2
   480d0:	1884703a 	and	r2,r3,r2
   480d4:	1001703a 	wrctl	status,r2
  
  return context;
   480d8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   480dc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   480e0:	d0a00317 	ldw	r2,-32756(gp)
   480e4:	10c000c4 	addi	r3,r2,3
   480e8:	00bfff04 	movi	r2,-4
   480ec:	1884703a 	and	r2,r3,r2
   480f0:	d0a00315 	stw	r2,-32756(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   480f4:	d0e00317 	ldw	r3,-32756(gp)
   480f8:	e0bfff17 	ldw	r2,-4(fp)
   480fc:	1887883a 	add	r3,r3,r2
   48100:	00800174 	movhi	r2,5
   48104:	10800004 	addi	r2,r2,0
   48108:	10c0062e 	bgeu	r2,r3,48124 <sbrk+0x74>
   4810c:	e0bffb17 	ldw	r2,-20(fp)
   48110:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48114:	e0bffa17 	ldw	r2,-24(fp)
   48118:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4811c:	00bfffc4 	movi	r2,-1
   48120:	00000b06 	br	48150 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   48124:	d0a00317 	ldw	r2,-32756(gp)
   48128:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4812c:	d0e00317 	ldw	r3,-32756(gp)
   48130:	e0bfff17 	ldw	r2,-4(fp)
   48134:	1885883a 	add	r2,r3,r2
   48138:	d0a00315 	stw	r2,-32756(gp)
   4813c:	e0bffb17 	ldw	r2,-20(fp)
   48140:	e0bffc15 	stw	r2,-16(fp)
   48144:	e0bffc17 	ldw	r2,-16(fp)
   48148:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4814c:	e0bffd17 	ldw	r2,-12(fp)
} 
   48150:	e037883a 	mov	sp,fp
   48154:	df000017 	ldw	fp,0(sp)
   48158:	dec00104 	addi	sp,sp,4
   4815c:	f800283a 	ret

00048160 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   48160:	defffa04 	addi	sp,sp,-24
   48164:	df000515 	stw	fp,20(sp)
   48168:	df000504 	addi	fp,sp,20
   4816c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48170:	0005303a 	rdctl	r2,status
   48174:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48178:	e0fffc17 	ldw	r3,-16(fp)
   4817c:	00bfff84 	movi	r2,-2
   48180:	1884703a 	and	r2,r3,r2
   48184:	1001703a 	wrctl	status,r2
  
  return context;
   48188:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4818c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   48190:	e0bfff17 	ldw	r2,-4(fp)
   48194:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   48198:	e0bffd17 	ldw	r2,-12(fp)
   4819c:	10800017 	ldw	r2,0(r2)
   481a0:	e0fffd17 	ldw	r3,-12(fp)
   481a4:	18c00117 	ldw	r3,4(r3)
   481a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   481ac:	e0bffd17 	ldw	r2,-12(fp)
   481b0:	10800117 	ldw	r2,4(r2)
   481b4:	e0fffd17 	ldw	r3,-12(fp)
   481b8:	18c00017 	ldw	r3,0(r3)
   481bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   481c0:	e0bffd17 	ldw	r2,-12(fp)
   481c4:	e0fffd17 	ldw	r3,-12(fp)
   481c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   481cc:	e0bffd17 	ldw	r2,-12(fp)
   481d0:	e0fffd17 	ldw	r3,-12(fp)
   481d4:	10c00015 	stw	r3,0(r2)
   481d8:	e0bffb17 	ldw	r2,-20(fp)
   481dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   481e0:	e0bffe17 	ldw	r2,-8(fp)
   481e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   481e8:	0001883a 	nop
   481ec:	e037883a 	mov	sp,fp
   481f0:	df000017 	ldw	fp,0(sp)
   481f4:	dec00104 	addi	sp,sp,4
   481f8:	f800283a 	ret

000481fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   481fc:	defffb04 	addi	sp,sp,-20
   48200:	dfc00415 	stw	ra,16(sp)
   48204:	df000315 	stw	fp,12(sp)
   48208:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4820c:	d0a00417 	ldw	r2,-32752(gp)
   48210:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   48214:	d0a0ce17 	ldw	r2,-31944(gp)
   48218:	10800044 	addi	r2,r2,1
   4821c:	d0a0ce15 	stw	r2,-31944(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   48220:	00002e06 	br	482dc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   48224:	e0bffd17 	ldw	r2,-12(fp)
   48228:	10800017 	ldw	r2,0(r2)
   4822c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   48230:	e0bffd17 	ldw	r2,-12(fp)
   48234:	10800403 	ldbu	r2,16(r2)
   48238:	10803fcc 	andi	r2,r2,255
   4823c:	10000426 	beq	r2,zero,48250 <alt_tick+0x54>
   48240:	d0a0ce17 	ldw	r2,-31944(gp)
   48244:	1000021e 	bne	r2,zero,48250 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   48248:	e0bffd17 	ldw	r2,-12(fp)
   4824c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   48250:	e0bffd17 	ldw	r2,-12(fp)
   48254:	10800217 	ldw	r2,8(r2)
   48258:	d0e0ce17 	ldw	r3,-31944(gp)
   4825c:	18801d36 	bltu	r3,r2,482d4 <alt_tick+0xd8>
   48260:	e0bffd17 	ldw	r2,-12(fp)
   48264:	10800403 	ldbu	r2,16(r2)
   48268:	10803fcc 	andi	r2,r2,255
   4826c:	1000191e 	bne	r2,zero,482d4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   48270:	e0bffd17 	ldw	r2,-12(fp)
   48274:	10800317 	ldw	r2,12(r2)
   48278:	e0fffd17 	ldw	r3,-12(fp)
   4827c:	18c00517 	ldw	r3,20(r3)
   48280:	1809883a 	mov	r4,r3
   48284:	103ee83a 	callr	r2
   48288:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4828c:	e0bfff17 	ldw	r2,-4(fp)
   48290:	1000031e 	bne	r2,zero,482a0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   48294:	e13ffd17 	ldw	r4,-12(fp)
   48298:	00481600 	call	48160 <alt_alarm_stop>
   4829c:	00000d06 	br	482d4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   482a0:	e0bffd17 	ldw	r2,-12(fp)
   482a4:	10c00217 	ldw	r3,8(r2)
   482a8:	e0bfff17 	ldw	r2,-4(fp)
   482ac:	1887883a 	add	r3,r3,r2
   482b0:	e0bffd17 	ldw	r2,-12(fp)
   482b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   482b8:	e0bffd17 	ldw	r2,-12(fp)
   482bc:	10c00217 	ldw	r3,8(r2)
   482c0:	d0a0ce17 	ldw	r2,-31944(gp)
   482c4:	1880032e 	bgeu	r3,r2,482d4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   482c8:	e0bffd17 	ldw	r2,-12(fp)
   482cc:	00c00044 	movi	r3,1
   482d0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   482d4:	e0bffe17 	ldw	r2,-8(fp)
   482d8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   482dc:	e0fffd17 	ldw	r3,-12(fp)
   482e0:	d0a00404 	addi	r2,gp,-32752
   482e4:	18bfcf1e 	bne	r3,r2,48224 <_gp+0xffff5eb8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   482e8:	0001883a 	nop
}
   482ec:	0001883a 	nop
   482f0:	e037883a 	mov	sp,fp
   482f4:	dfc00117 	ldw	ra,4(sp)
   482f8:	df000017 	ldw	fp,0(sp)
   482fc:	dec00204 	addi	sp,sp,8
   48300:	f800283a 	ret

00048304 <usleep>:
   48304:	defffd04 	addi	sp,sp,-12
   48308:	dfc00215 	stw	ra,8(sp)
   4830c:	df000115 	stw	fp,4(sp)
   48310:	df000104 	addi	fp,sp,4
   48314:	e13fff15 	stw	r4,-4(fp)
   48318:	e13fff17 	ldw	r4,-4(fp)
   4831c:	00488600 	call	48860 <alt_busy_sleep>
   48320:	e037883a 	mov	sp,fp
   48324:	dfc00117 	ldw	ra,4(sp)
   48328:	df000017 	ldw	fp,0(sp)
   4832c:	dec00204 	addi	sp,sp,8
   48330:	f800283a 	ret

00048334 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   48334:	defffe04 	addi	sp,sp,-8
   48338:	dfc00115 	stw	ra,4(sp)
   4833c:	df000015 	stw	fp,0(sp)
   48340:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   48344:	d0a00b17 	ldw	r2,-32724(gp)
   48348:	10000326 	beq	r2,zero,48358 <alt_get_errno+0x24>
   4834c:	d0a00b17 	ldw	r2,-32724(gp)
   48350:	103ee83a 	callr	r2
   48354:	00000106 	br	4835c <alt_get_errno+0x28>
   48358:	d0a0c904 	addi	r2,gp,-31964
}
   4835c:	e037883a 	mov	sp,fp
   48360:	dfc00117 	ldw	ra,4(sp)
   48364:	df000017 	ldw	fp,0(sp)
   48368:	dec00204 	addi	sp,sp,8
   4836c:	f800283a 	ret

00048370 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   48370:	defff904 	addi	sp,sp,-28
   48374:	dfc00615 	stw	ra,24(sp)
   48378:	df000515 	stw	fp,20(sp)
   4837c:	df000504 	addi	fp,sp,20
   48380:	e13ffd15 	stw	r4,-12(fp)
   48384:	e17ffe15 	stw	r5,-8(fp)
   48388:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4838c:	e0bffd17 	ldw	r2,-12(fp)
   48390:	10000816 	blt	r2,zero,483b4 <write+0x44>
   48394:	01400304 	movi	r5,12
   48398:	e13ffd17 	ldw	r4,-12(fp)
   4839c:	004543c0 	call	4543c <__mulsi3>
   483a0:	1007883a 	mov	r3,r2
   483a4:	00800174 	movhi	r2,5
   483a8:	10a87b04 	addi	r2,r2,-24084
   483ac:	1885883a 	add	r2,r3,r2
   483b0:	00000106 	br	483b8 <write+0x48>
   483b4:	0005883a 	mov	r2,zero
   483b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   483bc:	e0bffb17 	ldw	r2,-20(fp)
   483c0:	10002126 	beq	r2,zero,48448 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   483c4:	e0bffb17 	ldw	r2,-20(fp)
   483c8:	10800217 	ldw	r2,8(r2)
   483cc:	108000cc 	andi	r2,r2,3
   483d0:	10001826 	beq	r2,zero,48434 <write+0xc4>
   483d4:	e0bffb17 	ldw	r2,-20(fp)
   483d8:	10800017 	ldw	r2,0(r2)
   483dc:	10800617 	ldw	r2,24(r2)
   483e0:	10001426 	beq	r2,zero,48434 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   483e4:	e0bffb17 	ldw	r2,-20(fp)
   483e8:	10800017 	ldw	r2,0(r2)
   483ec:	10800617 	ldw	r2,24(r2)
   483f0:	e0ffff17 	ldw	r3,-4(fp)
   483f4:	180d883a 	mov	r6,r3
   483f8:	e17ffe17 	ldw	r5,-8(fp)
   483fc:	e13ffb17 	ldw	r4,-20(fp)
   48400:	103ee83a 	callr	r2
   48404:	e0bffc15 	stw	r2,-16(fp)
   48408:	e0bffc17 	ldw	r2,-16(fp)
   4840c:	1000070e 	bge	r2,zero,4842c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   48410:	00483340 	call	48334 <alt_get_errno>
   48414:	1007883a 	mov	r3,r2
   48418:	e0bffc17 	ldw	r2,-16(fp)
   4841c:	0085c83a 	sub	r2,zero,r2
   48420:	18800015 	stw	r2,0(r3)
        return -1;
   48424:	00bfffc4 	movi	r2,-1
   48428:	00000c06 	br	4845c <write+0xec>
      }
      return rval;
   4842c:	e0bffc17 	ldw	r2,-16(fp)
   48430:	00000a06 	br	4845c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   48434:	00483340 	call	48334 <alt_get_errno>
   48438:	1007883a 	mov	r3,r2
   4843c:	00800344 	movi	r2,13
   48440:	18800015 	stw	r2,0(r3)
   48444:	00000406 	br	48458 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   48448:	00483340 	call	48334 <alt_get_errno>
   4844c:	1007883a 	mov	r3,r2
   48450:	00801444 	movi	r2,81
   48454:	18800015 	stw	r2,0(r3)
  }
  return -1;
   48458:	00bfffc4 	movi	r2,-1
}
   4845c:	e037883a 	mov	sp,fp
   48460:	dfc00117 	ldw	ra,4(sp)
   48464:	df000017 	ldw	fp,0(sp)
   48468:	dec00204 	addi	sp,sp,8
   4846c:	f800283a 	ret

00048470 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   48470:	defffd04 	addi	sp,sp,-12
   48474:	dfc00215 	stw	ra,8(sp)
   48478:	df000115 	stw	fp,4(sp)
   4847c:	df000104 	addi	fp,sp,4
   48480:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   48484:	d1600804 	addi	r5,gp,-32736
   48488:	e13fff17 	ldw	r4,-4(fp)
   4848c:	0048b540 	call	48b54 <alt_dev_llist_insert>
}
   48490:	e037883a 	mov	sp,fp
   48494:	dfc00117 	ldw	ra,4(sp)
   48498:	df000017 	ldw	fp,0(sp)
   4849c:	dec00204 	addi	sp,sp,8
   484a0:	f800283a 	ret

000484a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   484a4:	defffd04 	addi	sp,sp,-12
   484a8:	dfc00215 	stw	ra,8(sp)
   484ac:	df000115 	stw	fp,4(sp)
   484b0:	df000104 	addi	fp,sp,4
   484b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   484b8:	00493200 	call	49320 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   484bc:	00800044 	movi	r2,1
   484c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   484c4:	0001883a 	nop
   484c8:	e037883a 	mov	sp,fp
   484cc:	dfc00117 	ldw	ra,4(sp)
   484d0:	df000017 	ldw	fp,0(sp)
   484d4:	dec00204 	addi	sp,sp,8
   484d8:	f800283a 	ret

000484dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   484dc:	defffe04 	addi	sp,sp,-8
   484e0:	dfc00115 	stw	ra,4(sp)
   484e4:	df000015 	stw	fp,0(sp)
   484e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   484ec:	01c0fa04 	movi	r7,1000
   484f0:	018000c4 	movi	r6,3
   484f4:	000b883a 	mov	r5,zero
   484f8:	01000234 	movhi	r4,8
   484fc:	21040004 	addi	r4,r4,4096
   48500:	00487e40 	call	487e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   48504:	01000174 	movhi	r4,5
   48508:	21286604 	addi	r4,r4,-24168
   4850c:	00484700 	call	48470 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   48510:	0001883a 	nop
}
   48514:	0001883a 	nop
   48518:	e037883a 	mov	sp,fp
   4851c:	dfc00117 	ldw	ra,4(sp)
   48520:	df000017 	ldw	fp,0(sp)
   48524:	dec00204 	addi	sp,sp,8
   48528:	f800283a 	ret

0004852c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4852c:	defffa04 	addi	sp,sp,-24
   48530:	dfc00515 	stw	ra,20(sp)
   48534:	df000415 	stw	fp,16(sp)
   48538:	df000404 	addi	fp,sp,16
   4853c:	e13ffd15 	stw	r4,-12(fp)
   48540:	e17ffe15 	stw	r5,-8(fp)
   48544:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   48548:	e0bffd17 	ldw	r2,-12(fp)
   4854c:	10800017 	ldw	r2,0(r2)
   48550:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   48554:	e0bffc17 	ldw	r2,-16(fp)
   48558:	10c00a04 	addi	r3,r2,40
   4855c:	e0bffd17 	ldw	r2,-12(fp)
   48560:	10800217 	ldw	r2,8(r2)
   48564:	100f883a 	mov	r7,r2
   48568:	e1bfff17 	ldw	r6,-4(fp)
   4856c:	e17ffe17 	ldw	r5,-8(fp)
   48570:	1809883a 	mov	r4,r3
   48574:	00485ec0 	call	485ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   48578:	e037883a 	mov	sp,fp
   4857c:	dfc00117 	ldw	ra,4(sp)
   48580:	df000017 	ldw	fp,0(sp)
   48584:	dec00204 	addi	sp,sp,8
   48588:	f800283a 	ret

0004858c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4858c:	defffa04 	addi	sp,sp,-24
   48590:	dfc00515 	stw	ra,20(sp)
   48594:	df000415 	stw	fp,16(sp)
   48598:	df000404 	addi	fp,sp,16
   4859c:	e13ffd15 	stw	r4,-12(fp)
   485a0:	e17ffe15 	stw	r5,-8(fp)
   485a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   485a8:	e0bffd17 	ldw	r2,-12(fp)
   485ac:	10800017 	ldw	r2,0(r2)
   485b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   485b4:	e0bffc17 	ldw	r2,-16(fp)
   485b8:	10c00a04 	addi	r3,r2,40
   485bc:	e0bffd17 	ldw	r2,-12(fp)
   485c0:	10800217 	ldw	r2,8(r2)
   485c4:	100f883a 	mov	r7,r2
   485c8:	e1bfff17 	ldw	r6,-4(fp)
   485cc:	e17ffe17 	ldw	r5,-8(fp)
   485d0:	1809883a 	mov	r4,r3
   485d4:	00486d80 	call	486d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   485d8:	e037883a 	mov	sp,fp
   485dc:	dfc00117 	ldw	ra,4(sp)
   485e0:	df000017 	ldw	fp,0(sp)
   485e4:	dec00204 	addi	sp,sp,8
   485e8:	f800283a 	ret

000485ec <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   485ec:	defff704 	addi	sp,sp,-36
   485f0:	df000815 	stw	fp,32(sp)
   485f4:	df000804 	addi	fp,sp,32
   485f8:	e13ffc15 	stw	r4,-16(fp)
   485fc:	e17ffd15 	stw	r5,-12(fp)
   48600:	e1bffe15 	stw	r6,-8(fp)
   48604:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   48608:	e0bffc17 	ldw	r2,-16(fp)
   4860c:	10800017 	ldw	r2,0(r2)
   48610:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   48614:	e0bffd17 	ldw	r2,-12(fp)
   48618:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   4861c:	e0bffe17 	ldw	r2,-8(fp)
   48620:	e0fffd17 	ldw	r3,-12(fp)
   48624:	1885883a 	add	r2,r3,r2
   48628:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   4862c:	00001206 	br	48678 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   48630:	e0bff917 	ldw	r2,-28(fp)
   48634:	10800037 	ldwio	r2,0(r2)
   48638:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   4863c:	e0bffb17 	ldw	r2,-20(fp)
   48640:	10a0000c 	andi	r2,r2,32768
   48644:	10000626 	beq	r2,zero,48660 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   48648:	e0bff817 	ldw	r2,-32(fp)
   4864c:	10c00044 	addi	r3,r2,1
   48650:	e0fff815 	stw	r3,-32(fp)
   48654:	e0fffb17 	ldw	r3,-20(fp)
   48658:	10c00005 	stb	r3,0(r2)
   4865c:	00000606 	br	48678 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   48660:	e0fff817 	ldw	r3,-32(fp)
   48664:	e0bffd17 	ldw	r2,-12(fp)
   48668:	1880071e 	bne	r3,r2,48688 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   4866c:	e0bfff17 	ldw	r2,-4(fp)
   48670:	1090000c 	andi	r2,r2,16384
   48674:	1000061e 	bne	r2,zero,48690 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   48678:	e0fff817 	ldw	r3,-32(fp)
   4867c:	e0bffa17 	ldw	r2,-24(fp)
   48680:	18bfeb36 	bltu	r3,r2,48630 <_gp+0xffff62c4>
   48684:	00000306 	br	48694 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   48688:	0001883a 	nop
   4868c:	00000106 	br	48694 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   48690:	0001883a 	nop
    
  }

  if (ptr != buffer)
   48694:	e0fff817 	ldw	r3,-32(fp)
   48698:	e0bffd17 	ldw	r2,-12(fp)
   4869c:	18800426 	beq	r3,r2,486b0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   486a0:	e0fff817 	ldw	r3,-32(fp)
   486a4:	e0bffd17 	ldw	r2,-12(fp)
   486a8:	1885c83a 	sub	r2,r3,r2
   486ac:	00000606 	br	486c8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   486b0:	e0bfff17 	ldw	r2,-4(fp)
   486b4:	1090000c 	andi	r2,r2,16384
   486b8:	10000226 	beq	r2,zero,486c4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   486bc:	00bffd44 	movi	r2,-11
   486c0:	00000106 	br	486c8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   486c4:	00bffec4 	movi	r2,-5
}
   486c8:	e037883a 	mov	sp,fp
   486cc:	df000017 	ldw	fp,0(sp)
   486d0:	dec00104 	addi	sp,sp,4
   486d4:	f800283a 	ret

000486d8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   486d8:	defff904 	addi	sp,sp,-28
   486dc:	df000615 	stw	fp,24(sp)
   486e0:	df000604 	addi	fp,sp,24
   486e4:	e13ffc15 	stw	r4,-16(fp)
   486e8:	e17ffd15 	stw	r5,-12(fp)
   486ec:	e1bffe15 	stw	r6,-8(fp)
   486f0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   486f4:	e0bffc17 	ldw	r2,-16(fp)
   486f8:	10800017 	ldw	r2,0(r2)
   486fc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   48700:	e0bffe17 	ldw	r2,-8(fp)
   48704:	e0fffd17 	ldw	r3,-12(fp)
   48708:	1885883a 	add	r2,r3,r2
   4870c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   48710:	00000e06 	br	4874c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   48714:	e0bffa17 	ldw	r2,-24(fp)
   48718:	10800104 	addi	r2,r2,4
   4871c:	10800037 	ldwio	r2,0(r2)
   48720:	10bfffec 	andhi	r2,r2,65535
   48724:	10000926 	beq	r2,zero,4874c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   48728:	e0fffa17 	ldw	r3,-24(fp)
   4872c:	e0bffd17 	ldw	r2,-12(fp)
   48730:	11000044 	addi	r4,r2,1
   48734:	e13ffd15 	stw	r4,-12(fp)
   48738:	10800003 	ldbu	r2,0(r2)
   4873c:	10803fcc 	andi	r2,r2,255
   48740:	1080201c 	xori	r2,r2,128
   48744:	10bfe004 	addi	r2,r2,-128
   48748:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   4874c:	e0fffd17 	ldw	r3,-12(fp)
   48750:	e0bffb17 	ldw	r2,-20(fp)
   48754:	18bfef36 	bltu	r3,r2,48714 <_gp+0xffff63a8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   48758:	e0bffe17 	ldw	r2,-8(fp)
}
   4875c:	e037883a 	mov	sp,fp
   48760:	df000017 	ldw	fp,0(sp)
   48764:	dec00104 	addi	sp,sp,4
   48768:	f800283a 	ret

0004876c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4876c:	defffa04 	addi	sp,sp,-24
   48770:	dfc00515 	stw	ra,20(sp)
   48774:	df000415 	stw	fp,16(sp)
   48778:	df000404 	addi	fp,sp,16
   4877c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   48780:	0007883a 	mov	r3,zero
   48784:	e0bfff17 	ldw	r2,-4(fp)
   48788:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4878c:	e0bfff17 	ldw	r2,-4(fp)
   48790:	10800104 	addi	r2,r2,4
   48794:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48798:	0005303a 	rdctl	r2,status
   4879c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   487a0:	e0fffd17 	ldw	r3,-12(fp)
   487a4:	00bfff84 	movi	r2,-2
   487a8:	1884703a 	and	r2,r3,r2
   487ac:	1001703a 	wrctl	status,r2
  
  return context;
   487b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   487b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   487b8:	00481fc0 	call	481fc <alt_tick>
   487bc:	e0bffc17 	ldw	r2,-16(fp)
   487c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   487c4:	e0bffe17 	ldw	r2,-8(fp)
   487c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   487cc:	0001883a 	nop
   487d0:	e037883a 	mov	sp,fp
   487d4:	dfc00117 	ldw	ra,4(sp)
   487d8:	df000017 	ldw	fp,0(sp)
   487dc:	dec00204 	addi	sp,sp,8
   487e0:	f800283a 	ret

000487e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   487e4:	defff804 	addi	sp,sp,-32
   487e8:	dfc00715 	stw	ra,28(sp)
   487ec:	df000615 	stw	fp,24(sp)
   487f0:	df000604 	addi	fp,sp,24
   487f4:	e13ffc15 	stw	r4,-16(fp)
   487f8:	e17ffd15 	stw	r5,-12(fp)
   487fc:	e1bffe15 	stw	r6,-8(fp)
   48800:	e1ffff15 	stw	r7,-4(fp)
   48804:	e0bfff17 	ldw	r2,-4(fp)
   48808:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4880c:	d0a0cd17 	ldw	r2,-31948(gp)
   48810:	1000021e 	bne	r2,zero,4881c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   48814:	e0bffb17 	ldw	r2,-20(fp)
   48818:	d0a0cd15 	stw	r2,-31948(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4881c:	e0bffc17 	ldw	r2,-16(fp)
   48820:	10800104 	addi	r2,r2,4
   48824:	00c001c4 	movi	r3,7
   48828:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4882c:	d8000015 	stw	zero,0(sp)
   48830:	e1fffc17 	ldw	r7,-16(fp)
   48834:	01800174 	movhi	r6,5
   48838:	31a1db04 	addi	r6,r6,-30868
   4883c:	e17ffe17 	ldw	r5,-8(fp)
   48840:	e13ffd17 	ldw	r4,-12(fp)
   48844:	0048c180 	call	48c18 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   48848:	0001883a 	nop
   4884c:	e037883a 	mov	sp,fp
   48850:	dfc00117 	ldw	ra,4(sp)
   48854:	df000017 	ldw	fp,0(sp)
   48858:	dec00204 	addi	sp,sp,8
   4885c:	f800283a 	ret

00048860 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   48860:	defffa04 	addi	sp,sp,-24
   48864:	dfc00515 	stw	ra,20(sp)
   48868:	df000415 	stw	fp,16(sp)
   4886c:	df000404 	addi	fp,sp,16
   48870:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   48874:	00800244 	movi	r2,9
   48878:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   4887c:	014003f4 	movhi	r5,15
   48880:	29509004 	addi	r5,r5,16960
   48884:	e13ffd17 	ldw	r4,-12(fp)
   48888:	004543c0 	call	4543c <__mulsi3>
   4888c:	100b883a 	mov	r5,r2
   48890:	0100bef4 	movhi	r4,763
   48894:	213c2004 	addi	r4,r4,-3968
   48898:	00453800 	call	45380 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4889c:	100b883a 	mov	r5,r2
   488a0:	01200034 	movhi	r4,32768
   488a4:	213fffc4 	addi	r4,r4,-1
   488a8:	00453800 	call	45380 <__udivsi3>
   488ac:	100b883a 	mov	r5,r2
   488b0:	e13fff17 	ldw	r4,-4(fp)
   488b4:	00453800 	call	45380 <__udivsi3>
   488b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   488bc:	e0bffe17 	ldw	r2,-8(fp)
   488c0:	10002a26 	beq	r2,zero,4896c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   488c4:	e03ffc15 	stw	zero,-16(fp)
   488c8:	00001706 	br	48928 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   488cc:	00a00034 	movhi	r2,32768
   488d0:	10bfffc4 	addi	r2,r2,-1
   488d4:	10bfffc4 	addi	r2,r2,-1
   488d8:	103ffe1e 	bne	r2,zero,488d4 <_gp+0xffff6568>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   488dc:	014003f4 	movhi	r5,15
   488e0:	29509004 	addi	r5,r5,16960
   488e4:	e13ffd17 	ldw	r4,-12(fp)
   488e8:	004543c0 	call	4543c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   488ec:	100b883a 	mov	r5,r2
   488f0:	0100bef4 	movhi	r4,763
   488f4:	213c2004 	addi	r4,r4,-3968
   488f8:	00453800 	call	45380 <__udivsi3>
   488fc:	100b883a 	mov	r5,r2
   48900:	01200034 	movhi	r4,32768
   48904:	213fffc4 	addi	r4,r4,-1
   48908:	00453800 	call	45380 <__udivsi3>
   4890c:	1007883a 	mov	r3,r2
   48910:	e0bfff17 	ldw	r2,-4(fp)
   48914:	10c5c83a 	sub	r2,r2,r3
   48918:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4891c:	e0bffc17 	ldw	r2,-16(fp)
   48920:	10800044 	addi	r2,r2,1
   48924:	e0bffc15 	stw	r2,-16(fp)
   48928:	e0fffc17 	ldw	r3,-16(fp)
   4892c:	e0bffe17 	ldw	r2,-8(fp)
   48930:	18bfe616 	blt	r3,r2,488cc <_gp+0xffff6560>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   48934:	014003f4 	movhi	r5,15
   48938:	29509004 	addi	r5,r5,16960
   4893c:	e13ffd17 	ldw	r4,-12(fp)
   48940:	004543c0 	call	4543c <__mulsi3>
   48944:	100b883a 	mov	r5,r2
   48948:	0100bef4 	movhi	r4,763
   4894c:	213c2004 	addi	r4,r4,-3968
   48950:	00453800 	call	45380 <__udivsi3>
   48954:	e17fff17 	ldw	r5,-4(fp)
   48958:	1009883a 	mov	r4,r2
   4895c:	004543c0 	call	4543c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   48960:	10bfffc4 	addi	r2,r2,-1
   48964:	103ffe1e 	bne	r2,zero,48960 <_gp+0xffff65f4>
   48968:	00000d06 	br	489a0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4896c:	014003f4 	movhi	r5,15
   48970:	29509004 	addi	r5,r5,16960
   48974:	e13ffd17 	ldw	r4,-12(fp)
   48978:	004543c0 	call	4543c <__mulsi3>
   4897c:	100b883a 	mov	r5,r2
   48980:	0100bef4 	movhi	r4,763
   48984:	213c2004 	addi	r4,r4,-3968
   48988:	00453800 	call	45380 <__udivsi3>
   4898c:	e17fff17 	ldw	r5,-4(fp)
   48990:	1009883a 	mov	r4,r2
   48994:	004543c0 	call	4543c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   48998:	10bfffc4 	addi	r2,r2,-1
   4899c:	00bffe16 	blt	zero,r2,48998 <_gp+0xffff662c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   489a0:	0005883a 	mov	r2,zero
}
   489a4:	e037883a 	mov	sp,fp
   489a8:	dfc00117 	ldw	ra,4(sp)
   489ac:	df000017 	ldw	fp,0(sp)
   489b0:	dec00204 	addi	sp,sp,8
   489b4:	f800283a 	ret

000489b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   489b8:	defffe04 	addi	sp,sp,-8
   489bc:	dfc00115 	stw	ra,4(sp)
   489c0:	df000015 	stw	fp,0(sp)
   489c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   489c8:	d0a00b17 	ldw	r2,-32724(gp)
   489cc:	10000326 	beq	r2,zero,489dc <alt_get_errno+0x24>
   489d0:	d0a00b17 	ldw	r2,-32724(gp)
   489d4:	103ee83a 	callr	r2
   489d8:	00000106 	br	489e0 <alt_get_errno+0x28>
   489dc:	d0a0c904 	addi	r2,gp,-31964
}
   489e0:	e037883a 	mov	sp,fp
   489e4:	dfc00117 	ldw	ra,4(sp)
   489e8:	df000017 	ldw	fp,0(sp)
   489ec:	dec00204 	addi	sp,sp,8
   489f0:	f800283a 	ret

000489f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   489f4:	defffb04 	addi	sp,sp,-20
   489f8:	dfc00415 	stw	ra,16(sp)
   489fc:	df000315 	stw	fp,12(sp)
   48a00:	df000304 	addi	fp,sp,12
   48a04:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   48a08:	e0bfff17 	ldw	r2,-4(fp)
   48a0c:	10000816 	blt	r2,zero,48a30 <close+0x3c>
   48a10:	01400304 	movi	r5,12
   48a14:	e13fff17 	ldw	r4,-4(fp)
   48a18:	004543c0 	call	4543c <__mulsi3>
   48a1c:	1007883a 	mov	r3,r2
   48a20:	00800174 	movhi	r2,5
   48a24:	10a87b04 	addi	r2,r2,-24084
   48a28:	1885883a 	add	r2,r3,r2
   48a2c:	00000106 	br	48a34 <close+0x40>
   48a30:	0005883a 	mov	r2,zero
   48a34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   48a38:	e0bffd17 	ldw	r2,-12(fp)
   48a3c:	10001926 	beq	r2,zero,48aa4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   48a40:	e0bffd17 	ldw	r2,-12(fp)
   48a44:	10800017 	ldw	r2,0(r2)
   48a48:	10800417 	ldw	r2,16(r2)
   48a4c:	10000626 	beq	r2,zero,48a68 <close+0x74>
   48a50:	e0bffd17 	ldw	r2,-12(fp)
   48a54:	10800017 	ldw	r2,0(r2)
   48a58:	10800417 	ldw	r2,16(r2)
   48a5c:	e13ffd17 	ldw	r4,-12(fp)
   48a60:	103ee83a 	callr	r2
   48a64:	00000106 	br	48a6c <close+0x78>
   48a68:	0005883a 	mov	r2,zero
   48a6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   48a70:	e13fff17 	ldw	r4,-4(fp)
   48a74:	004929c0 	call	4929c <alt_release_fd>
    if (rval < 0)
   48a78:	e0bffe17 	ldw	r2,-8(fp)
   48a7c:	1000070e 	bge	r2,zero,48a9c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   48a80:	00489b80 	call	489b8 <alt_get_errno>
   48a84:	1007883a 	mov	r3,r2
   48a88:	e0bffe17 	ldw	r2,-8(fp)
   48a8c:	0085c83a 	sub	r2,zero,r2
   48a90:	18800015 	stw	r2,0(r3)
      return -1;
   48a94:	00bfffc4 	movi	r2,-1
   48a98:	00000706 	br	48ab8 <close+0xc4>
    }
    return 0;
   48a9c:	0005883a 	mov	r2,zero
   48aa0:	00000506 	br	48ab8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   48aa4:	00489b80 	call	489b8 <alt_get_errno>
   48aa8:	1007883a 	mov	r3,r2
   48aac:	00801444 	movi	r2,81
   48ab0:	18800015 	stw	r2,0(r3)
    return -1;
   48ab4:	00bfffc4 	movi	r2,-1
  }
}
   48ab8:	e037883a 	mov	sp,fp
   48abc:	dfc00117 	ldw	ra,4(sp)
   48ac0:	df000017 	ldw	fp,0(sp)
   48ac4:	dec00204 	addi	sp,sp,8
   48ac8:	f800283a 	ret

00048acc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   48acc:	deffff04 	addi	sp,sp,-4
   48ad0:	df000015 	stw	fp,0(sp)
   48ad4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   48ad8:	0001883a 	nop
   48adc:	e037883a 	mov	sp,fp
   48ae0:	df000017 	ldw	fp,0(sp)
   48ae4:	dec00104 	addi	sp,sp,4
   48ae8:	f800283a 	ret

00048aec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   48aec:	defffc04 	addi	sp,sp,-16
   48af0:	df000315 	stw	fp,12(sp)
   48af4:	df000304 	addi	fp,sp,12
   48af8:	e13ffd15 	stw	r4,-12(fp)
   48afc:	e17ffe15 	stw	r5,-8(fp)
   48b00:	e1bfff15 	stw	r6,-4(fp)
  return len;
   48b04:	e0bfff17 	ldw	r2,-4(fp)
}
   48b08:	e037883a 	mov	sp,fp
   48b0c:	df000017 	ldw	fp,0(sp)
   48b10:	dec00104 	addi	sp,sp,4
   48b14:	f800283a 	ret

00048b18 <alt_get_errno>:
   48b18:	defffe04 	addi	sp,sp,-8
   48b1c:	dfc00115 	stw	ra,4(sp)
   48b20:	df000015 	stw	fp,0(sp)
   48b24:	d839883a 	mov	fp,sp
   48b28:	d0a00b17 	ldw	r2,-32724(gp)
   48b2c:	10000326 	beq	r2,zero,48b3c <alt_get_errno+0x24>
   48b30:	d0a00b17 	ldw	r2,-32724(gp)
   48b34:	103ee83a 	callr	r2
   48b38:	00000106 	br	48b40 <alt_get_errno+0x28>
   48b3c:	d0a0c904 	addi	r2,gp,-31964
   48b40:	e037883a 	mov	sp,fp
   48b44:	dfc00117 	ldw	ra,4(sp)
   48b48:	df000017 	ldw	fp,0(sp)
   48b4c:	dec00204 	addi	sp,sp,8
   48b50:	f800283a 	ret

00048b54 <alt_dev_llist_insert>:
   48b54:	defffa04 	addi	sp,sp,-24
   48b58:	dfc00515 	stw	ra,20(sp)
   48b5c:	df000415 	stw	fp,16(sp)
   48b60:	df000404 	addi	fp,sp,16
   48b64:	e13ffe15 	stw	r4,-8(fp)
   48b68:	e17fff15 	stw	r5,-4(fp)
   48b6c:	e0bffe17 	ldw	r2,-8(fp)
   48b70:	10000326 	beq	r2,zero,48b80 <alt_dev_llist_insert+0x2c>
   48b74:	e0bffe17 	ldw	r2,-8(fp)
   48b78:	10800217 	ldw	r2,8(r2)
   48b7c:	1000061e 	bne	r2,zero,48b98 <alt_dev_llist_insert+0x44>
   48b80:	0048b180 	call	48b18 <alt_get_errno>
   48b84:	1007883a 	mov	r3,r2
   48b88:	00800584 	movi	r2,22
   48b8c:	18800015 	stw	r2,0(r3)
   48b90:	00bffa84 	movi	r2,-22
   48b94:	00001306 	br	48be4 <alt_dev_llist_insert+0x90>
   48b98:	e0bffe17 	ldw	r2,-8(fp)
   48b9c:	e0ffff17 	ldw	r3,-4(fp)
   48ba0:	e0fffc15 	stw	r3,-16(fp)
   48ba4:	e0bffd15 	stw	r2,-12(fp)
   48ba8:	e0bffd17 	ldw	r2,-12(fp)
   48bac:	e0fffc17 	ldw	r3,-16(fp)
   48bb0:	10c00115 	stw	r3,4(r2)
   48bb4:	e0bffc17 	ldw	r2,-16(fp)
   48bb8:	10c00017 	ldw	r3,0(r2)
   48bbc:	e0bffd17 	ldw	r2,-12(fp)
   48bc0:	10c00015 	stw	r3,0(r2)
   48bc4:	e0bffc17 	ldw	r2,-16(fp)
   48bc8:	10800017 	ldw	r2,0(r2)
   48bcc:	e0fffd17 	ldw	r3,-12(fp)
   48bd0:	10c00115 	stw	r3,4(r2)
   48bd4:	e0bffc17 	ldw	r2,-16(fp)
   48bd8:	e0fffd17 	ldw	r3,-12(fp)
   48bdc:	10c00015 	stw	r3,0(r2)
   48be0:	0005883a 	mov	r2,zero
   48be4:	e037883a 	mov	sp,fp
   48be8:	dfc00117 	ldw	ra,4(sp)
   48bec:	df000017 	ldw	fp,0(sp)
   48bf0:	dec00204 	addi	sp,sp,8
   48bf4:	f800283a 	ret

00048bf8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   48bf8:	deffff04 	addi	sp,sp,-4
   48bfc:	df000015 	stw	fp,0(sp)
   48c00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   48c04:	0001883a 	nop
   48c08:	e037883a 	mov	sp,fp
   48c0c:	df000017 	ldw	fp,0(sp)
   48c10:	dec00104 	addi	sp,sp,4
   48c14:	f800283a 	ret

00048c18 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   48c18:	defff904 	addi	sp,sp,-28
   48c1c:	dfc00615 	stw	ra,24(sp)
   48c20:	df000515 	stw	fp,20(sp)
   48c24:	df000504 	addi	fp,sp,20
   48c28:	e13ffc15 	stw	r4,-16(fp)
   48c2c:	e17ffd15 	stw	r5,-12(fp)
   48c30:	e1bffe15 	stw	r6,-8(fp)
   48c34:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   48c38:	e0800217 	ldw	r2,8(fp)
   48c3c:	d8800015 	stw	r2,0(sp)
   48c40:	e1ffff17 	ldw	r7,-4(fp)
   48c44:	e1bffe17 	ldw	r6,-8(fp)
   48c48:	e17ffd17 	ldw	r5,-12(fp)
   48c4c:	e13ffc17 	ldw	r4,-16(fp)
   48c50:	0048dc80 	call	48dc8 <alt_iic_isr_register>
}  
   48c54:	e037883a 	mov	sp,fp
   48c58:	dfc00117 	ldw	ra,4(sp)
   48c5c:	df000017 	ldw	fp,0(sp)
   48c60:	dec00204 	addi	sp,sp,8
   48c64:	f800283a 	ret

00048c68 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   48c68:	defff904 	addi	sp,sp,-28
   48c6c:	df000615 	stw	fp,24(sp)
   48c70:	df000604 	addi	fp,sp,24
   48c74:	e13ffe15 	stw	r4,-8(fp)
   48c78:	e17fff15 	stw	r5,-4(fp)
   48c7c:	e0bfff17 	ldw	r2,-4(fp)
   48c80:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48c84:	0005303a 	rdctl	r2,status
   48c88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48c8c:	e0fffb17 	ldw	r3,-20(fp)
   48c90:	00bfff84 	movi	r2,-2
   48c94:	1884703a 	and	r2,r3,r2
   48c98:	1001703a 	wrctl	status,r2
  
  return context;
   48c9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   48ca0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   48ca4:	00c00044 	movi	r3,1
   48ca8:	e0bffa17 	ldw	r2,-24(fp)
   48cac:	1884983a 	sll	r2,r3,r2
   48cb0:	1007883a 	mov	r3,r2
   48cb4:	d0a0cf17 	ldw	r2,-31940(gp)
   48cb8:	1884b03a 	or	r2,r3,r2
   48cbc:	d0a0cf15 	stw	r2,-31940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   48cc0:	d0a0cf17 	ldw	r2,-31940(gp)
   48cc4:	100170fa 	wrctl	ienable,r2
   48cc8:	e0bffc17 	ldw	r2,-16(fp)
   48ccc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48cd0:	e0bffd17 	ldw	r2,-12(fp)
   48cd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   48cd8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   48cdc:	0001883a 	nop
}
   48ce0:	e037883a 	mov	sp,fp
   48ce4:	df000017 	ldw	fp,0(sp)
   48ce8:	dec00104 	addi	sp,sp,4
   48cec:	f800283a 	ret

00048cf0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   48cf0:	defff904 	addi	sp,sp,-28
   48cf4:	df000615 	stw	fp,24(sp)
   48cf8:	df000604 	addi	fp,sp,24
   48cfc:	e13ffe15 	stw	r4,-8(fp)
   48d00:	e17fff15 	stw	r5,-4(fp)
   48d04:	e0bfff17 	ldw	r2,-4(fp)
   48d08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48d0c:	0005303a 	rdctl	r2,status
   48d10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48d14:	e0fffb17 	ldw	r3,-20(fp)
   48d18:	00bfff84 	movi	r2,-2
   48d1c:	1884703a 	and	r2,r3,r2
   48d20:	1001703a 	wrctl	status,r2
  
  return context;
   48d24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   48d28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   48d2c:	00c00044 	movi	r3,1
   48d30:	e0bffa17 	ldw	r2,-24(fp)
   48d34:	1884983a 	sll	r2,r3,r2
   48d38:	0084303a 	nor	r2,zero,r2
   48d3c:	1007883a 	mov	r3,r2
   48d40:	d0a0cf17 	ldw	r2,-31940(gp)
   48d44:	1884703a 	and	r2,r3,r2
   48d48:	d0a0cf15 	stw	r2,-31940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   48d4c:	d0a0cf17 	ldw	r2,-31940(gp)
   48d50:	100170fa 	wrctl	ienable,r2
   48d54:	e0bffc17 	ldw	r2,-16(fp)
   48d58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48d5c:	e0bffd17 	ldw	r2,-12(fp)
   48d60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   48d64:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   48d68:	0001883a 	nop
}
   48d6c:	e037883a 	mov	sp,fp
   48d70:	df000017 	ldw	fp,0(sp)
   48d74:	dec00104 	addi	sp,sp,4
   48d78:	f800283a 	ret

00048d7c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   48d7c:	defffc04 	addi	sp,sp,-16
   48d80:	df000315 	stw	fp,12(sp)
   48d84:	df000304 	addi	fp,sp,12
   48d88:	e13ffe15 	stw	r4,-8(fp)
   48d8c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   48d90:	000530fa 	rdctl	r2,ienable
   48d94:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   48d98:	00c00044 	movi	r3,1
   48d9c:	e0bfff17 	ldw	r2,-4(fp)
   48da0:	1884983a 	sll	r2,r3,r2
   48da4:	1007883a 	mov	r3,r2
   48da8:	e0bffd17 	ldw	r2,-12(fp)
   48dac:	1884703a 	and	r2,r3,r2
   48db0:	1004c03a 	cmpne	r2,r2,zero
   48db4:	10803fcc 	andi	r2,r2,255
}
   48db8:	e037883a 	mov	sp,fp
   48dbc:	df000017 	ldw	fp,0(sp)
   48dc0:	dec00104 	addi	sp,sp,4
   48dc4:	f800283a 	ret

00048dc8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   48dc8:	defff504 	addi	sp,sp,-44
   48dcc:	dfc00a15 	stw	ra,40(sp)
   48dd0:	df000915 	stw	fp,36(sp)
   48dd4:	df000904 	addi	fp,sp,36
   48dd8:	e13ffc15 	stw	r4,-16(fp)
   48ddc:	e17ffd15 	stw	r5,-12(fp)
   48de0:	e1bffe15 	stw	r6,-8(fp)
   48de4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   48de8:	00bffa84 	movi	r2,-22
   48dec:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   48df0:	e0bffd17 	ldw	r2,-12(fp)
   48df4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   48df8:	e0bff817 	ldw	r2,-32(fp)
   48dfc:	10800808 	cmpgei	r2,r2,32
   48e00:	1000271e 	bne	r2,zero,48ea0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48e04:	0005303a 	rdctl	r2,status
   48e08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48e0c:	e0fffb17 	ldw	r3,-20(fp)
   48e10:	00bfff84 	movi	r2,-2
   48e14:	1884703a 	and	r2,r3,r2
   48e18:	1001703a 	wrctl	status,r2
  
  return context;
   48e1c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   48e20:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   48e24:	00800174 	movhi	r2,5
   48e28:	10a9ba04 	addi	r2,r2,-22808
   48e2c:	e0fff817 	ldw	r3,-32(fp)
   48e30:	180690fa 	slli	r3,r3,3
   48e34:	10c5883a 	add	r2,r2,r3
   48e38:	e0fffe17 	ldw	r3,-8(fp)
   48e3c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   48e40:	00800174 	movhi	r2,5
   48e44:	10a9ba04 	addi	r2,r2,-22808
   48e48:	e0fff817 	ldw	r3,-32(fp)
   48e4c:	180690fa 	slli	r3,r3,3
   48e50:	10c5883a 	add	r2,r2,r3
   48e54:	10800104 	addi	r2,r2,4
   48e58:	e0ffff17 	ldw	r3,-4(fp)
   48e5c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   48e60:	e0bffe17 	ldw	r2,-8(fp)
   48e64:	10000526 	beq	r2,zero,48e7c <alt_iic_isr_register+0xb4>
   48e68:	e0bff817 	ldw	r2,-32(fp)
   48e6c:	100b883a 	mov	r5,r2
   48e70:	e13ffc17 	ldw	r4,-16(fp)
   48e74:	0048c680 	call	48c68 <alt_ic_irq_enable>
   48e78:	00000406 	br	48e8c <alt_iic_isr_register+0xc4>
   48e7c:	e0bff817 	ldw	r2,-32(fp)
   48e80:	100b883a 	mov	r5,r2
   48e84:	e13ffc17 	ldw	r4,-16(fp)
   48e88:	0048cf00 	call	48cf0 <alt_ic_irq_disable>
   48e8c:	e0bff715 	stw	r2,-36(fp)
   48e90:	e0bffa17 	ldw	r2,-24(fp)
   48e94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48e98:	e0bff917 	ldw	r2,-28(fp)
   48e9c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   48ea0:	e0bff717 	ldw	r2,-36(fp)
}
   48ea4:	e037883a 	mov	sp,fp
   48ea8:	dfc00117 	ldw	ra,4(sp)
   48eac:	df000017 	ldw	fp,0(sp)
   48eb0:	dec00204 	addi	sp,sp,8
   48eb4:	f800283a 	ret

00048eb8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   48eb8:	defff804 	addi	sp,sp,-32
   48ebc:	dfc00715 	stw	ra,28(sp)
   48ec0:	df000615 	stw	fp,24(sp)
   48ec4:	dc000515 	stw	r16,20(sp)
   48ec8:	df000604 	addi	fp,sp,24
   48ecc:	e13ffb15 	stw	r4,-20(fp)
   48ed0:	e17ffc15 	stw	r5,-16(fp)
   48ed4:	e1bffd15 	stw	r6,-12(fp)
   48ed8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   48edc:	e1bffe17 	ldw	r6,-8(fp)
   48ee0:	e17ffd17 	ldw	r5,-12(fp)
   48ee4:	e13ffc17 	ldw	r4,-16(fp)
   48ee8:	00491400 	call	49140 <open>
   48eec:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   48ef0:	e0bffa17 	ldw	r2,-24(fp)
   48ef4:	10002216 	blt	r2,zero,48f80 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   48ef8:	04000174 	movhi	r16,5
   48efc:	84287b04 	addi	r16,r16,-24084
   48f00:	e0bffa17 	ldw	r2,-24(fp)
   48f04:	01400304 	movi	r5,12
   48f08:	1009883a 	mov	r4,r2
   48f0c:	004543c0 	call	4543c <__mulsi3>
   48f10:	8085883a 	add	r2,r16,r2
   48f14:	10c00017 	ldw	r3,0(r2)
   48f18:	e0bffb17 	ldw	r2,-20(fp)
   48f1c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   48f20:	04000174 	movhi	r16,5
   48f24:	84287b04 	addi	r16,r16,-24084
   48f28:	e0bffa17 	ldw	r2,-24(fp)
   48f2c:	01400304 	movi	r5,12
   48f30:	1009883a 	mov	r4,r2
   48f34:	004543c0 	call	4543c <__mulsi3>
   48f38:	8085883a 	add	r2,r16,r2
   48f3c:	10800104 	addi	r2,r2,4
   48f40:	10c00017 	ldw	r3,0(r2)
   48f44:	e0bffb17 	ldw	r2,-20(fp)
   48f48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   48f4c:	04000174 	movhi	r16,5
   48f50:	84287b04 	addi	r16,r16,-24084
   48f54:	e0bffa17 	ldw	r2,-24(fp)
   48f58:	01400304 	movi	r5,12
   48f5c:	1009883a 	mov	r4,r2
   48f60:	004543c0 	call	4543c <__mulsi3>
   48f64:	8085883a 	add	r2,r16,r2
   48f68:	10800204 	addi	r2,r2,8
   48f6c:	10c00017 	ldw	r3,0(r2)
   48f70:	e0bffb17 	ldw	r2,-20(fp)
   48f74:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   48f78:	e13ffa17 	ldw	r4,-24(fp)
   48f7c:	004929c0 	call	4929c <alt_release_fd>
  }
} 
   48f80:	0001883a 	nop
   48f84:	e6ffff04 	addi	sp,fp,-4
   48f88:	dfc00217 	ldw	ra,8(sp)
   48f8c:	df000117 	ldw	fp,4(sp)
   48f90:	dc000017 	ldw	r16,0(sp)
   48f94:	dec00304 	addi	sp,sp,12
   48f98:	f800283a 	ret

00048f9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   48f9c:	defffb04 	addi	sp,sp,-20
   48fa0:	dfc00415 	stw	ra,16(sp)
   48fa4:	df000315 	stw	fp,12(sp)
   48fa8:	df000304 	addi	fp,sp,12
   48fac:	e13ffd15 	stw	r4,-12(fp)
   48fb0:	e17ffe15 	stw	r5,-8(fp)
   48fb4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   48fb8:	01c07fc4 	movi	r7,511
   48fbc:	01800044 	movi	r6,1
   48fc0:	e17ffd17 	ldw	r5,-12(fp)
   48fc4:	01000174 	movhi	r4,5
   48fc8:	21287e04 	addi	r4,r4,-24072
   48fcc:	0048eb80 	call	48eb8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   48fd0:	01c07fc4 	movi	r7,511
   48fd4:	000d883a 	mov	r6,zero
   48fd8:	e17ffe17 	ldw	r5,-8(fp)
   48fdc:	01000174 	movhi	r4,5
   48fe0:	21287b04 	addi	r4,r4,-24084
   48fe4:	0048eb80 	call	48eb8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   48fe8:	01c07fc4 	movi	r7,511
   48fec:	01800044 	movi	r6,1
   48ff0:	e17fff17 	ldw	r5,-4(fp)
   48ff4:	01000174 	movhi	r4,5
   48ff8:	21288104 	addi	r4,r4,-24060
   48ffc:	0048eb80 	call	48eb8 <alt_open_fd>
}  
   49000:	0001883a 	nop
   49004:	e037883a 	mov	sp,fp
   49008:	dfc00117 	ldw	ra,4(sp)
   4900c:	df000017 	ldw	fp,0(sp)
   49010:	dec00204 	addi	sp,sp,8
   49014:	f800283a 	ret

00049018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49018:	defffe04 	addi	sp,sp,-8
   4901c:	dfc00115 	stw	ra,4(sp)
   49020:	df000015 	stw	fp,0(sp)
   49024:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   49028:	d0a00b17 	ldw	r2,-32724(gp)
   4902c:	10000326 	beq	r2,zero,4903c <alt_get_errno+0x24>
   49030:	d0a00b17 	ldw	r2,-32724(gp)
   49034:	103ee83a 	callr	r2
   49038:	00000106 	br	49040 <alt_get_errno+0x28>
   4903c:	d0a0c904 	addi	r2,gp,-31964
}
   49040:	e037883a 	mov	sp,fp
   49044:	dfc00117 	ldw	ra,4(sp)
   49048:	df000017 	ldw	fp,0(sp)
   4904c:	dec00204 	addi	sp,sp,8
   49050:	f800283a 	ret

00049054 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   49054:	defffb04 	addi	sp,sp,-20
   49058:	dfc00415 	stw	ra,16(sp)
   4905c:	df000315 	stw	fp,12(sp)
   49060:	dc000215 	stw	r16,8(sp)
   49064:	df000304 	addi	fp,sp,12
   49068:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4906c:	e0bffe17 	ldw	r2,-8(fp)
   49070:	10800217 	ldw	r2,8(r2)
   49074:	10d00034 	orhi	r3,r2,16384
   49078:	e0bffe17 	ldw	r2,-8(fp)
   4907c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   49080:	e03ffd15 	stw	zero,-12(fp)
   49084:	00002306 	br	49114 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   49088:	04000174 	movhi	r16,5
   4908c:	84287b04 	addi	r16,r16,-24084
   49090:	e0bffd17 	ldw	r2,-12(fp)
   49094:	01400304 	movi	r5,12
   49098:	1009883a 	mov	r4,r2
   4909c:	004543c0 	call	4543c <__mulsi3>
   490a0:	8085883a 	add	r2,r16,r2
   490a4:	10c00017 	ldw	r3,0(r2)
   490a8:	e0bffe17 	ldw	r2,-8(fp)
   490ac:	10800017 	ldw	r2,0(r2)
   490b0:	1880151e 	bne	r3,r2,49108 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   490b4:	04000174 	movhi	r16,5
   490b8:	84287b04 	addi	r16,r16,-24084
   490bc:	e0bffd17 	ldw	r2,-12(fp)
   490c0:	01400304 	movi	r5,12
   490c4:	1009883a 	mov	r4,r2
   490c8:	004543c0 	call	4543c <__mulsi3>
   490cc:	8085883a 	add	r2,r16,r2
   490d0:	10800204 	addi	r2,r2,8
   490d4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   490d8:	10000b0e 	bge	r2,zero,49108 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   490dc:	01400304 	movi	r5,12
   490e0:	e13ffd17 	ldw	r4,-12(fp)
   490e4:	004543c0 	call	4543c <__mulsi3>
   490e8:	1007883a 	mov	r3,r2
   490ec:	00800174 	movhi	r2,5
   490f0:	10a87b04 	addi	r2,r2,-24084
   490f4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   490f8:	e0bffe17 	ldw	r2,-8(fp)
   490fc:	18800226 	beq	r3,r2,49108 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   49100:	00bffcc4 	movi	r2,-13
   49104:	00000806 	br	49128 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   49108:	e0bffd17 	ldw	r2,-12(fp)
   4910c:	10800044 	addi	r2,r2,1
   49110:	e0bffd15 	stw	r2,-12(fp)
   49114:	d0a00a17 	ldw	r2,-32728(gp)
   49118:	1007883a 	mov	r3,r2
   4911c:	e0bffd17 	ldw	r2,-12(fp)
   49120:	18bfd92e 	bgeu	r3,r2,49088 <_gp+0xffff6d1c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   49124:	0005883a 	mov	r2,zero
}
   49128:	e6ffff04 	addi	sp,fp,-4
   4912c:	dfc00217 	ldw	ra,8(sp)
   49130:	df000117 	ldw	fp,4(sp)
   49134:	dc000017 	ldw	r16,0(sp)
   49138:	dec00304 	addi	sp,sp,12
   4913c:	f800283a 	ret

00049140 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   49140:	defff604 	addi	sp,sp,-40
   49144:	dfc00915 	stw	ra,36(sp)
   49148:	df000815 	stw	fp,32(sp)
   4914c:	df000804 	addi	fp,sp,32
   49150:	e13ffd15 	stw	r4,-12(fp)
   49154:	e17ffe15 	stw	r5,-8(fp)
   49158:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4915c:	00bfffc4 	movi	r2,-1
   49160:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   49164:	00bffb44 	movi	r2,-19
   49168:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4916c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   49170:	d1600804 	addi	r5,gp,-32736
   49174:	e13ffd17 	ldw	r4,-12(fp)
   49178:	00493440 	call	49344 <alt_find_dev>
   4917c:	e0bff815 	stw	r2,-32(fp)
   49180:	e0bff817 	ldw	r2,-32(fp)
   49184:	1000051e 	bne	r2,zero,4919c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   49188:	e13ffd17 	ldw	r4,-12(fp)
   4918c:	00493d40 	call	493d4 <alt_find_file>
   49190:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   49194:	00800044 	movi	r2,1
   49198:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4919c:	e0bff817 	ldw	r2,-32(fp)
   491a0:	10002b26 	beq	r2,zero,49250 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   491a4:	e13ff817 	ldw	r4,-32(fp)
   491a8:	00494dc0 	call	494dc <alt_get_fd>
   491ac:	e0bff915 	stw	r2,-28(fp)
   491b0:	e0bff917 	ldw	r2,-28(fp)
   491b4:	1000030e 	bge	r2,zero,491c4 <open+0x84>
    {
      status = index;
   491b8:	e0bff917 	ldw	r2,-28(fp)
   491bc:	e0bffa15 	stw	r2,-24(fp)
   491c0:	00002506 	br	49258 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   491c4:	01400304 	movi	r5,12
   491c8:	e13ff917 	ldw	r4,-28(fp)
   491cc:	004543c0 	call	4543c <__mulsi3>
   491d0:	1007883a 	mov	r3,r2
   491d4:	00800174 	movhi	r2,5
   491d8:	10a87b04 	addi	r2,r2,-24084
   491dc:	1885883a 	add	r2,r3,r2
   491e0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   491e4:	e0fffe17 	ldw	r3,-8(fp)
   491e8:	00900034 	movhi	r2,16384
   491ec:	10bfffc4 	addi	r2,r2,-1
   491f0:	1886703a 	and	r3,r3,r2
   491f4:	e0bffc17 	ldw	r2,-16(fp)
   491f8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   491fc:	e0bffb17 	ldw	r2,-20(fp)
   49200:	1000051e 	bne	r2,zero,49218 <open+0xd8>
   49204:	e13ffc17 	ldw	r4,-16(fp)
   49208:	00490540 	call	49054 <alt_file_locked>
   4920c:	e0bffa15 	stw	r2,-24(fp)
   49210:	e0bffa17 	ldw	r2,-24(fp)
   49214:	10001016 	blt	r2,zero,49258 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   49218:	e0bff817 	ldw	r2,-32(fp)
   4921c:	10800317 	ldw	r2,12(r2)
   49220:	10000826 	beq	r2,zero,49244 <open+0x104>
   49224:	e0bff817 	ldw	r2,-32(fp)
   49228:	10800317 	ldw	r2,12(r2)
   4922c:	e1ffff17 	ldw	r7,-4(fp)
   49230:	e1bffe17 	ldw	r6,-8(fp)
   49234:	e17ffd17 	ldw	r5,-12(fp)
   49238:	e13ffc17 	ldw	r4,-16(fp)
   4923c:	103ee83a 	callr	r2
   49240:	00000106 	br	49248 <open+0x108>
   49244:	0005883a 	mov	r2,zero
   49248:	e0bffa15 	stw	r2,-24(fp)
   4924c:	00000206 	br	49258 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   49250:	00bffb44 	movi	r2,-19
   49254:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   49258:	e0bffa17 	ldw	r2,-24(fp)
   4925c:	1000090e 	bge	r2,zero,49284 <open+0x144>
  {
    alt_release_fd (index);  
   49260:	e13ff917 	ldw	r4,-28(fp)
   49264:	004929c0 	call	4929c <alt_release_fd>
    ALT_ERRNO = -status;
   49268:	00490180 	call	49018 <alt_get_errno>
   4926c:	1007883a 	mov	r3,r2
   49270:	e0bffa17 	ldw	r2,-24(fp)
   49274:	0085c83a 	sub	r2,zero,r2
   49278:	18800015 	stw	r2,0(r3)
    return -1;
   4927c:	00bfffc4 	movi	r2,-1
   49280:	00000106 	br	49288 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   49284:	e0bff917 	ldw	r2,-28(fp)
}
   49288:	e037883a 	mov	sp,fp
   4928c:	dfc00117 	ldw	ra,4(sp)
   49290:	df000017 	ldw	fp,0(sp)
   49294:	dec00204 	addi	sp,sp,8
   49298:	f800283a 	ret

0004929c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4929c:	defffc04 	addi	sp,sp,-16
   492a0:	dfc00315 	stw	ra,12(sp)
   492a4:	df000215 	stw	fp,8(sp)
   492a8:	dc000115 	stw	r16,4(sp)
   492ac:	df000204 	addi	fp,sp,8
   492b0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   492b4:	e0bffe17 	ldw	r2,-8(fp)
   492b8:	108000d0 	cmplti	r2,r2,3
   492bc:	1000111e 	bne	r2,zero,49304 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   492c0:	04000174 	movhi	r16,5
   492c4:	84287b04 	addi	r16,r16,-24084
   492c8:	e0bffe17 	ldw	r2,-8(fp)
   492cc:	01400304 	movi	r5,12
   492d0:	1009883a 	mov	r4,r2
   492d4:	004543c0 	call	4543c <__mulsi3>
   492d8:	8085883a 	add	r2,r16,r2
   492dc:	10800204 	addi	r2,r2,8
   492e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   492e4:	04000174 	movhi	r16,5
   492e8:	84287b04 	addi	r16,r16,-24084
   492ec:	e0bffe17 	ldw	r2,-8(fp)
   492f0:	01400304 	movi	r5,12
   492f4:	1009883a 	mov	r4,r2
   492f8:	004543c0 	call	4543c <__mulsi3>
   492fc:	8085883a 	add	r2,r16,r2
   49300:	10000015 	stw	zero,0(r2)
  }
}
   49304:	0001883a 	nop
   49308:	e6ffff04 	addi	sp,fp,-4
   4930c:	dfc00217 	ldw	ra,8(sp)
   49310:	df000117 	ldw	fp,4(sp)
   49314:	dc000017 	ldw	r16,0(sp)
   49318:	dec00304 	addi	sp,sp,12
   4931c:	f800283a 	ret

00049320 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   49320:	deffff04 	addi	sp,sp,-4
   49324:	df000015 	stw	fp,0(sp)
   49328:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4932c:	000170fa 	wrctl	ienable,zero
}
   49330:	0001883a 	nop
   49334:	e037883a 	mov	sp,fp
   49338:	df000017 	ldw	fp,0(sp)
   4933c:	dec00104 	addi	sp,sp,4
   49340:	f800283a 	ret

00049344 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   49344:	defffa04 	addi	sp,sp,-24
   49348:	dfc00515 	stw	ra,20(sp)
   4934c:	df000415 	stw	fp,16(sp)
   49350:	df000404 	addi	fp,sp,16
   49354:	e13ffe15 	stw	r4,-8(fp)
   49358:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4935c:	e0bfff17 	ldw	r2,-4(fp)
   49360:	10800017 	ldw	r2,0(r2)
   49364:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   49368:	e13ffe17 	ldw	r4,-8(fp)
   4936c:	00470200 	call	47020 <strlen>
   49370:	10800044 	addi	r2,r2,1
   49374:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   49378:	00000d06 	br	493b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4937c:	e0bffc17 	ldw	r2,-16(fp)
   49380:	10800217 	ldw	r2,8(r2)
   49384:	e0fffd17 	ldw	r3,-12(fp)
   49388:	180d883a 	mov	r6,r3
   4938c:	e17ffe17 	ldw	r5,-8(fp)
   49390:	1009883a 	mov	r4,r2
   49394:	004965c0 	call	4965c <memcmp>
   49398:	1000021e 	bne	r2,zero,493a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4939c:	e0bffc17 	ldw	r2,-16(fp)
   493a0:	00000706 	br	493c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   493a4:	e0bffc17 	ldw	r2,-16(fp)
   493a8:	10800017 	ldw	r2,0(r2)
   493ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   493b0:	e0fffc17 	ldw	r3,-16(fp)
   493b4:	e0bfff17 	ldw	r2,-4(fp)
   493b8:	18bff01e 	bne	r3,r2,4937c <_gp+0xffff7010>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   493bc:	0005883a 	mov	r2,zero
}
   493c0:	e037883a 	mov	sp,fp
   493c4:	dfc00117 	ldw	ra,4(sp)
   493c8:	df000017 	ldw	fp,0(sp)
   493cc:	dec00204 	addi	sp,sp,8
   493d0:	f800283a 	ret

000493d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   493d4:	defffb04 	addi	sp,sp,-20
   493d8:	dfc00415 	stw	ra,16(sp)
   493dc:	df000315 	stw	fp,12(sp)
   493e0:	df000304 	addi	fp,sp,12
   493e4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   493e8:	d0a00617 	ldw	r2,-32744(gp)
   493ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   493f0:	00003106 	br	494b8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   493f4:	e0bffd17 	ldw	r2,-12(fp)
   493f8:	10800217 	ldw	r2,8(r2)
   493fc:	1009883a 	mov	r4,r2
   49400:	00470200 	call	47020 <strlen>
   49404:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   49408:	e0bffd17 	ldw	r2,-12(fp)
   4940c:	10c00217 	ldw	r3,8(r2)
   49410:	e0bffe17 	ldw	r2,-8(fp)
   49414:	10bfffc4 	addi	r2,r2,-1
   49418:	1885883a 	add	r2,r3,r2
   4941c:	10800003 	ldbu	r2,0(r2)
   49420:	10803fcc 	andi	r2,r2,255
   49424:	1080201c 	xori	r2,r2,128
   49428:	10bfe004 	addi	r2,r2,-128
   4942c:	10800bd8 	cmpnei	r2,r2,47
   49430:	1000031e 	bne	r2,zero,49440 <alt_find_file+0x6c>
    {
      len -= 1;
   49434:	e0bffe17 	ldw	r2,-8(fp)
   49438:	10bfffc4 	addi	r2,r2,-1
   4943c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   49440:	e0bffe17 	ldw	r2,-8(fp)
   49444:	e0ffff17 	ldw	r3,-4(fp)
   49448:	1885883a 	add	r2,r3,r2
   4944c:	10800003 	ldbu	r2,0(r2)
   49450:	10803fcc 	andi	r2,r2,255
   49454:	1080201c 	xori	r2,r2,128
   49458:	10bfe004 	addi	r2,r2,-128
   4945c:	10800be0 	cmpeqi	r2,r2,47
   49460:	1000081e 	bne	r2,zero,49484 <alt_find_file+0xb0>
   49464:	e0bffe17 	ldw	r2,-8(fp)
   49468:	e0ffff17 	ldw	r3,-4(fp)
   4946c:	1885883a 	add	r2,r3,r2
   49470:	10800003 	ldbu	r2,0(r2)
   49474:	10803fcc 	andi	r2,r2,255
   49478:	1080201c 	xori	r2,r2,128
   4947c:	10bfe004 	addi	r2,r2,-128
   49480:	10000a1e 	bne	r2,zero,494ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   49484:	e0bffd17 	ldw	r2,-12(fp)
   49488:	10800217 	ldw	r2,8(r2)
   4948c:	e0fffe17 	ldw	r3,-8(fp)
   49490:	180d883a 	mov	r6,r3
   49494:	e17fff17 	ldw	r5,-4(fp)
   49498:	1009883a 	mov	r4,r2
   4949c:	004965c0 	call	4965c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   494a0:	1000021e 	bne	r2,zero,494ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   494a4:	e0bffd17 	ldw	r2,-12(fp)
   494a8:	00000706 	br	494c8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   494ac:	e0bffd17 	ldw	r2,-12(fp)
   494b0:	10800017 	ldw	r2,0(r2)
   494b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   494b8:	e0fffd17 	ldw	r3,-12(fp)
   494bc:	d0a00604 	addi	r2,gp,-32744
   494c0:	18bfcc1e 	bne	r3,r2,493f4 <_gp+0xffff7088>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   494c4:	0005883a 	mov	r2,zero
}
   494c8:	e037883a 	mov	sp,fp
   494cc:	dfc00117 	ldw	ra,4(sp)
   494d0:	df000017 	ldw	fp,0(sp)
   494d4:	dec00204 	addi	sp,sp,8
   494d8:	f800283a 	ret

000494dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   494dc:	defffa04 	addi	sp,sp,-24
   494e0:	dfc00515 	stw	ra,20(sp)
   494e4:	df000415 	stw	fp,16(sp)
   494e8:	dc000315 	stw	r16,12(sp)
   494ec:	df000404 	addi	fp,sp,16
   494f0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   494f4:	00bffa04 	movi	r2,-24
   494f8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   494fc:	e03ffc15 	stw	zero,-16(fp)
   49500:	00001d06 	br	49578 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   49504:	04000174 	movhi	r16,5
   49508:	84287b04 	addi	r16,r16,-24084
   4950c:	e0bffc17 	ldw	r2,-16(fp)
   49510:	01400304 	movi	r5,12
   49514:	1009883a 	mov	r4,r2
   49518:	004543c0 	call	4543c <__mulsi3>
   4951c:	8085883a 	add	r2,r16,r2
   49520:	10800017 	ldw	r2,0(r2)
   49524:	1000111e 	bne	r2,zero,4956c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   49528:	04000174 	movhi	r16,5
   4952c:	84287b04 	addi	r16,r16,-24084
   49530:	e0bffc17 	ldw	r2,-16(fp)
   49534:	01400304 	movi	r5,12
   49538:	1009883a 	mov	r4,r2
   4953c:	004543c0 	call	4543c <__mulsi3>
   49540:	8085883a 	add	r2,r16,r2
   49544:	e0fffe17 	ldw	r3,-8(fp)
   49548:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4954c:	d0e00a17 	ldw	r3,-32728(gp)
   49550:	e0bffc17 	ldw	r2,-16(fp)
   49554:	1880020e 	bge	r3,r2,49560 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   49558:	e0bffc17 	ldw	r2,-16(fp)
   4955c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   49560:	e0bffc17 	ldw	r2,-16(fp)
   49564:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   49568:	00000606 	br	49584 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4956c:	e0bffc17 	ldw	r2,-16(fp)
   49570:	10800044 	addi	r2,r2,1
   49574:	e0bffc15 	stw	r2,-16(fp)
   49578:	e0bffc17 	ldw	r2,-16(fp)
   4957c:	10800810 	cmplti	r2,r2,32
   49580:	103fe01e 	bne	r2,zero,49504 <_gp+0xffff7198>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   49584:	e0bffd17 	ldw	r2,-12(fp)
}
   49588:	e6ffff04 	addi	sp,fp,-4
   4958c:	dfc00217 	ldw	ra,8(sp)
   49590:	df000117 	ldw	fp,4(sp)
   49594:	dc000017 	ldw	r16,0(sp)
   49598:	dec00304 	addi	sp,sp,12
   4959c:	f800283a 	ret

000495a0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   495a0:	defffe04 	addi	sp,sp,-8
   495a4:	df000115 	stw	fp,4(sp)
   495a8:	df000104 	addi	fp,sp,4
   495ac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   495b0:	e0bfff17 	ldw	r2,-4(fp)
   495b4:	10bffe84 	addi	r2,r2,-6
   495b8:	10c00428 	cmpgeui	r3,r2,16
   495bc:	18001a1e 	bne	r3,zero,49628 <alt_exception_cause_generated_bad_addr+0x88>
   495c0:	100690ba 	slli	r3,r2,2
   495c4:	00800174 	movhi	r2,5
   495c8:	10a57604 	addi	r2,r2,-27176
   495cc:	1885883a 	add	r2,r3,r2
   495d0:	10800017 	ldw	r2,0(r2)
   495d4:	1000683a 	jmp	r2
   495d8:	00049618 	cmpnei	zero,zero,4696
   495dc:	00049618 	cmpnei	zero,zero,4696
   495e0:	00049628 	cmpgeui	zero,zero,4696
   495e4:	00049628 	cmpgeui	zero,zero,4696
   495e8:	00049628 	cmpgeui	zero,zero,4696
   495ec:	00049618 	cmpnei	zero,zero,4696
   495f0:	00049620 	cmpeqi	zero,zero,4696
   495f4:	00049628 	cmpgeui	zero,zero,4696
   495f8:	00049618 	cmpnei	zero,zero,4696
   495fc:	00049618 	cmpnei	zero,zero,4696
   49600:	00049628 	cmpgeui	zero,zero,4696
   49604:	00049618 	cmpnei	zero,zero,4696
   49608:	00049620 	cmpeqi	zero,zero,4696
   4960c:	00049628 	cmpgeui	zero,zero,4696
   49610:	00049628 	cmpgeui	zero,zero,4696
   49614:	00049618 	cmpnei	zero,zero,4696
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   49618:	00800044 	movi	r2,1
   4961c:	00000306 	br	4962c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   49620:	0005883a 	mov	r2,zero
   49624:	00000106 	br	4962c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   49628:	0005883a 	mov	r2,zero
  }
}
   4962c:	e037883a 	mov	sp,fp
   49630:	df000017 	ldw	fp,0(sp)
   49634:	dec00104 	addi	sp,sp,4
   49638:	f800283a 	ret

0004963c <exit>:
   4963c:	defffe04 	addi	sp,sp,-8
   49640:	000b883a 	mov	r5,zero
   49644:	dc000015 	stw	r16,0(sp)
   49648:	dfc00115 	stw	ra,4(sp)
   4964c:	2021883a 	mov	r16,r4
   49650:	004968c0 	call	4968c <__call_exitprocs>
   49654:	8009883a 	mov	r4,r16
   49658:	004981c0 	call	4981c <_exit>

0004965c <memcmp>:
   4965c:	218d883a 	add	r6,r4,r6
   49660:	21800826 	beq	r4,r6,49684 <memcmp+0x28>
   49664:	20800003 	ldbu	r2,0(r4)
   49668:	28c00003 	ldbu	r3,0(r5)
   4966c:	10c00226 	beq	r2,r3,49678 <memcmp+0x1c>
   49670:	10c5c83a 	sub	r2,r2,r3
   49674:	f800283a 	ret
   49678:	21000044 	addi	r4,r4,1
   4967c:	29400044 	addi	r5,r5,1
   49680:	003ff706 	br	49660 <_gp+0xffff72f4>
   49684:	0005883a 	mov	r2,zero
   49688:	f800283a 	ret

0004968c <__call_exitprocs>:
   4968c:	defff504 	addi	sp,sp,-44
   49690:	dd000515 	stw	r20,20(sp)
   49694:	05000174 	movhi	r20,5
   49698:	dc800315 	stw	r18,12(sp)
   4969c:	dfc00a15 	stw	ra,40(sp)
   496a0:	df000915 	stw	fp,36(sp)
   496a4:	ddc00815 	stw	r23,32(sp)
   496a8:	dd800715 	stw	r22,28(sp)
   496ac:	dd400615 	stw	r21,24(sp)
   496b0:	dcc00415 	stw	r19,16(sp)
   496b4:	dc400215 	stw	r17,8(sp)
   496b8:	dc000115 	stw	r16,4(sp)
   496bc:	d9000015 	stw	r4,0(sp)
   496c0:	2825883a 	mov	r18,r5
   496c4:	a528dc04 	addi	r20,r20,-23696
   496c8:	a4400017 	ldw	r17,0(r20)
   496cc:	8cc00c17 	ldw	r19,48(r17)
   496d0:	8c400c04 	addi	r17,r17,48
   496d4:	98004526 	beq	r19,zero,497ec <__call_exitprocs+0x160>
   496d8:	9c000117 	ldw	r16,4(r19)
   496dc:	00900034 	movhi	r2,16384
   496e0:	10bfffc4 	addi	r2,r2,-1
   496e4:	9d402217 	ldw	r21,136(r19)
   496e8:	85bfffc4 	addi	r22,r16,-1
   496ec:	80a1883a 	add	r16,r16,r2
   496f0:	8421883a 	add	r16,r16,r16
   496f4:	8421883a 	add	r16,r16,r16
   496f8:	ac2f883a 	add	r23,r21,r16
   496fc:	84000204 	addi	r16,r16,8
   49700:	9c21883a 	add	r16,r19,r16
   49704:	b0002716 	blt	r22,zero,497a4 <__call_exitprocs+0x118>
   49708:	90000726 	beq	r18,zero,49728 <__call_exitprocs+0x9c>
   4970c:	a800041e 	bne	r21,zero,49720 <__call_exitprocs+0x94>
   49710:	b5bfffc4 	addi	r22,r22,-1
   49714:	bdffff04 	addi	r23,r23,-4
   49718:	843fff04 	addi	r16,r16,-4
   4971c:	003ff906 	br	49704 <_gp+0xffff7398>
   49720:	b9002017 	ldw	r4,128(r23)
   49724:	913ffa1e 	bne	r18,r4,49710 <_gp+0xffff73a4>
   49728:	99000117 	ldw	r4,4(r19)
   4972c:	82000017 	ldw	r8,0(r16)
   49730:	213fffc4 	addi	r4,r4,-1
   49734:	b100021e 	bne	r22,r4,49740 <__call_exitprocs+0xb4>
   49738:	9d800115 	stw	r22,4(r19)
   4973c:	00000106 	br	49744 <__call_exitprocs+0xb8>
   49740:	80000015 	stw	zero,0(r16)
   49744:	403ff226 	beq	r8,zero,49710 <_gp+0xffff73a4>
   49748:	9f000117 	ldw	fp,4(r19)
   4974c:	a8000526 	beq	r21,zero,49764 <__call_exitprocs+0xd8>
   49750:	00800044 	movi	r2,1
   49754:	1592983a 	sll	r9,r2,r22
   49758:	a9404017 	ldw	r5,256(r21)
   4975c:	494a703a 	and	r5,r9,r5
   49760:	2800021e 	bne	r5,zero,4976c <__call_exitprocs+0xe0>
   49764:	403ee83a 	callr	r8
   49768:	00000906 	br	49790 <__call_exitprocs+0x104>
   4976c:	a9004117 	ldw	r4,260(r21)
   49770:	4908703a 	and	r4,r9,r4
   49774:	2000041e 	bne	r4,zero,49788 <__call_exitprocs+0xfc>
   49778:	b9400017 	ldw	r5,0(r23)
   4977c:	d9000017 	ldw	r4,0(sp)
   49780:	403ee83a 	callr	r8
   49784:	00000206 	br	49790 <__call_exitprocs+0x104>
   49788:	b9000017 	ldw	r4,0(r23)
   4978c:	403ee83a 	callr	r8
   49790:	99000117 	ldw	r4,4(r19)
   49794:	e13fcc1e 	bne	fp,r4,496c8 <_gp+0xffff735c>
   49798:	89000017 	ldw	r4,0(r17)
   4979c:	993fdc26 	beq	r19,r4,49710 <_gp+0xffff73a4>
   497a0:	003fc906 	br	496c8 <_gp+0xffff735c>
   497a4:	00800134 	movhi	r2,4
   497a8:	109ab104 	addi	r2,r2,27332
   497ac:	10000f26 	beq	r2,zero,497ec <__call_exitprocs+0x160>
   497b0:	99400117 	ldw	r5,4(r19)
   497b4:	99000017 	ldw	r4,0(r19)
   497b8:	2800091e 	bne	r5,zero,497e0 <__call_exitprocs+0x154>
   497bc:	20000826 	beq	r4,zero,497e0 <__call_exitprocs+0x154>
   497c0:	89000015 	stw	r4,0(r17)
   497c4:	a8000226 	beq	r21,zero,497d0 <__call_exitprocs+0x144>
   497c8:	a809883a 	mov	r4,r21
   497cc:	0046ac40 	call	46ac4 <free>
   497d0:	9809883a 	mov	r4,r19
   497d4:	0046ac40 	call	46ac4 <free>
   497d8:	8cc00017 	ldw	r19,0(r17)
   497dc:	003fbd06 	br	496d4 <_gp+0xffff7368>
   497e0:	9823883a 	mov	r17,r19
   497e4:	2027883a 	mov	r19,r4
   497e8:	003fba06 	br	496d4 <_gp+0xffff7368>
   497ec:	dfc00a17 	ldw	ra,40(sp)
   497f0:	df000917 	ldw	fp,36(sp)
   497f4:	ddc00817 	ldw	r23,32(sp)
   497f8:	dd800717 	ldw	r22,28(sp)
   497fc:	dd400617 	ldw	r21,24(sp)
   49800:	dd000517 	ldw	r20,20(sp)
   49804:	dcc00417 	ldw	r19,16(sp)
   49808:	dc800317 	ldw	r18,12(sp)
   4980c:	dc400217 	ldw	r17,8(sp)
   49810:	dc000117 	ldw	r16,4(sp)
   49814:	dec00b04 	addi	sp,sp,44
   49818:	f800283a 	ret

0004981c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4981c:	defffd04 	addi	sp,sp,-12
   49820:	df000215 	stw	fp,8(sp)
   49824:	df000204 	addi	fp,sp,8
   49828:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4982c:	0001883a 	nop
   49830:	e0bfff17 	ldw	r2,-4(fp)
   49834:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   49838:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4983c:	10000226 	beq	r2,zero,49848 <_exit+0x2c>
    ALT_SIM_FAIL();
   49840:	002af070 	cmpltui	zero,zero,43969
   49844:	00000106 	br	4984c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   49848:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4984c:	003fff06 	br	4984c <_gp+0xffff74e0>
